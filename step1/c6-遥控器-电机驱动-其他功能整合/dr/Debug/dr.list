
dr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059bc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008a4  08005ac8  08005ac8  00006ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800636c  0800636c  00008124  2**0
                  CONTENTS
  4 .ARM          00000000  0800636c  0800636c  00008124  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800636c  0800636c  00008124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800636c  0800636c  0000736c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006370  08006370  00007370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000124  20000000  08006374  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b4  20000124  08006498  00008124  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005d8  08006498  000085d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008124  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011038  00000000  00000000  0000814d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c67  00000000  00000000  00019185  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b0  00000000  00000000  0001bdf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cff  00000000  00000000  0001cea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185eb  00000000  00000000  0001db9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017d0e  00000000  00000000  0003618a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d609  00000000  00000000  0004de98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000db4a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004998  00000000  00000000  000db4e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000041  00000000  00000000  000dfe7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000124 	.word	0x20000124
 8000128:	00000000 	.word	0x00000000
 800012c:	08005ab0 	.word	0x08005ab0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000128 	.word	0x20000128
 8000148:	08005ab0 	.word	0x08005ab0

0800014c <HAL_GPIO_EXTI_Callback>:
uint32_t PPM_Time = 0;//获取通道时间
uint16_t PPM_OK = 0;//下一次解析状态,初始为0, 个人感觉第一次下降沿应该会大于2050

//读一段数据, 计时20ms ; 20ms到后储存并读下一段数据, 数组序号加一
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_0)
 8000156:	88fb      	ldrh	r3, [r7, #6]
 8000158:	2b01      	cmp	r3, #1
 800015a:	d142      	bne.n	80001e2 <HAL_GPIO_EXTI_Callback+0x96>
    {
        // 移除所有Delay函数
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800015c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000160:	4822      	ldr	r0, [pc, #136]	@ (80001ec <HAL_GPIO_EXTI_Callback+0xa0>)
 8000162:	f001 ff6d 	bl	8002040 <HAL_GPIO_TogglePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000166:	b672      	cpsid	i
}
 8000168:	bf00      	nop

        // 进入临界区（可选）
        __disable_irq();
        PPM_Time = TIM2->CNT;
 800016a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800016e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000170:	4a1f      	ldr	r2, [pc, #124]	@ (80001f0 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000172:	6013      	str	r3, [r2, #0]
        TIM2->CNT = 0;
 8000174:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000178:	2200      	movs	r2, #0
 800017a:	625a      	str	r2, [r3, #36]	@ 0x24

        if(PPM_OK){
 800017c:	4b1d      	ldr	r3, [pc, #116]	@ (80001f4 <HAL_GPIO_EXTI_Callback+0xa8>)
 800017e:	881b      	ldrh	r3, [r3, #0]
 8000180:	2b00      	cmp	r3, #0
 8000182:	d020      	beq.n	80001c6 <HAL_GPIO_EXTI_Callback+0x7a>
            if(PPM_Sample_Cnt < PPM_Chn_Max){
 8000184:	4b1c      	ldr	r3, [pc, #112]	@ (80001f8 <HAL_GPIO_EXTI_Callback+0xac>)
 8000186:	881a      	ldrh	r2, [r3, #0]
 8000188:	4b1c      	ldr	r3, [pc, #112]	@ (80001fc <HAL_GPIO_EXTI_Callback+0xb0>)
 800018a:	881b      	ldrh	r3, [r3, #0]
 800018c:	429a      	cmp	r2, r3
 800018e:	d20e      	bcs.n	80001ae <HAL_GPIO_EXTI_Callback+0x62>
                PPM_Databuf[PPM_Sample_Cnt] = PPM_Time;
 8000190:	4b17      	ldr	r3, [pc, #92]	@ (80001f0 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000192:	6819      	ldr	r1, [r3, #0]
 8000194:	4b18      	ldr	r3, [pc, #96]	@ (80001f8 <HAL_GPIO_EXTI_Callback+0xac>)
 8000196:	881b      	ldrh	r3, [r3, #0]
 8000198:	461a      	mov	r2, r3
 800019a:	b289      	uxth	r1, r1
 800019c:	4b18      	ldr	r3, [pc, #96]	@ (8000200 <HAL_GPIO_EXTI_Callback+0xb4>)
 800019e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
                PPM_Sample_Cnt++;
 80001a2:	4b15      	ldr	r3, [pc, #84]	@ (80001f8 <HAL_GPIO_EXTI_Callback+0xac>)
 80001a4:	881b      	ldrh	r3, [r3, #0]
 80001a6:	3301      	adds	r3, #1
 80001a8:	b29a      	uxth	r2, r3
 80001aa:	4b13      	ldr	r3, [pc, #76]	@ (80001f8 <HAL_GPIO_EXTI_Callback+0xac>)
 80001ac:	801a      	strh	r2, [r3, #0]
            }
            if(PPM_Sample_Cnt >= PPM_Chn_Max){
 80001ae:	4b12      	ldr	r3, [pc, #72]	@ (80001f8 <HAL_GPIO_EXTI_Callback+0xac>)
 80001b0:	881a      	ldrh	r2, [r3, #0]
 80001b2:	4b12      	ldr	r3, [pc, #72]	@ (80001fc <HAL_GPIO_EXTI_Callback+0xb0>)
 80001b4:	881b      	ldrh	r3, [r3, #0]
 80001b6:	429a      	cmp	r2, r3
 80001b8:	d305      	bcc.n	80001c6 <HAL_GPIO_EXTI_Callback+0x7a>
                PPM_OK = 0;
 80001ba:	4b0e      	ldr	r3, [pc, #56]	@ (80001f4 <HAL_GPIO_EXTI_Callback+0xa8>)
 80001bc:	2200      	movs	r2, #0
 80001be:	801a      	strh	r2, [r3, #0]
                ppm_data_ready = 1;
 80001c0:	4b10      	ldr	r3, [pc, #64]	@ (8000204 <HAL_GPIO_EXTI_Callback+0xb8>)
 80001c2:	2201      	movs	r2, #1
 80001c4:	701a      	strb	r2, [r3, #0]
            }
        }

        if(PPM_Time >= 2050){
 80001c6:	4b0a      	ldr	r3, [pc, #40]	@ (80001f0 <HAL_GPIO_EXTI_Callback+0xa4>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	f640 0201 	movw	r2, #2049	@ 0x801
 80001ce:	4293      	cmp	r3, r2
 80001d0:	d905      	bls.n	80001de <HAL_GPIO_EXTI_Callback+0x92>
            PPM_OK = 1;
 80001d2:	4b08      	ldr	r3, [pc, #32]	@ (80001f4 <HAL_GPIO_EXTI_Callback+0xa8>)
 80001d4:	2201      	movs	r2, #1
 80001d6:	801a      	strh	r2, [r3, #0]
            PPM_Sample_Cnt = 0;
 80001d8:	4b07      	ldr	r3, [pc, #28]	@ (80001f8 <HAL_GPIO_EXTI_Callback+0xac>)
 80001da:	2200      	movs	r2, #0
 80001dc:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80001de:	b662      	cpsie	i
}
 80001e0:	bf00      	nop
        }
        __enable_irq(); // 退出临界区
    }
}
 80001e2:	bf00      	nop
 80001e4:	3708      	adds	r7, #8
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bd80      	pop	{r7, pc}
 80001ea:	bf00      	nop
 80001ec:	40011000 	.word	0x40011000
 80001f0:	20000144 	.word	0x20000144
 80001f4:	20000148 	.word	0x20000148
 80001f8:	20000140 	.word	0x20000140
 80001fc:	20000000 	.word	0x20000000
 8000200:	200001f4 	.word	0x200001f4
 8000204:	20000244 	.word	0x20000244

08000208 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800020e:	4b18      	ldr	r3, [pc, #96]	@ (8000270 <MX_DMA_Init+0x68>)
 8000210:	695b      	ldr	r3, [r3, #20]
 8000212:	4a17      	ldr	r2, [pc, #92]	@ (8000270 <MX_DMA_Init+0x68>)
 8000214:	f043 0301 	orr.w	r3, r3, #1
 8000218:	6153      	str	r3, [r2, #20]
 800021a:	4b15      	ldr	r3, [pc, #84]	@ (8000270 <MX_DMA_Init+0x68>)
 800021c:	695b      	ldr	r3, [r3, #20]
 800021e:	f003 0301 	and.w	r3, r3, #1
 8000222:	607b      	str	r3, [r7, #4]
 8000224:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000226:	2200      	movs	r2, #0
 8000228:	2100      	movs	r1, #0
 800022a:	200e      	movs	r0, #14
 800022c:	f001 fb21 	bl	8001872 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000230:	200e      	movs	r0, #14
 8000232:	f001 fb3a 	bl	80018aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000236:	2200      	movs	r2, #0
 8000238:	2100      	movs	r1, #0
 800023a:	200f      	movs	r0, #15
 800023c:	f001 fb19 	bl	8001872 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000240:	200f      	movs	r0, #15
 8000242:	f001 fb32 	bl	80018aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000246:	2200      	movs	r2, #0
 8000248:	2100      	movs	r1, #0
 800024a:	2010      	movs	r0, #16
 800024c:	f001 fb11 	bl	8001872 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000250:	2010      	movs	r0, #16
 8000252:	f001 fb2a 	bl	80018aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000256:	2200      	movs	r2, #0
 8000258:	2100      	movs	r1, #0
 800025a:	2011      	movs	r0, #17
 800025c:	f001 fb09 	bl	8001872 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000260:	2011      	movs	r0, #17
 8000262:	f001 fb22 	bl	80018aa <HAL_NVIC_EnableIRQ>

}
 8000266:	bf00      	nop
 8000268:	3708      	adds	r7, #8
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	40021000 	.word	0x40021000

08000274 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b088      	sub	sp, #32
 8000278:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800027a:	f107 0310 	add.w	r3, r7, #16
 800027e:	2200      	movs	r2, #0
 8000280:	601a      	str	r2, [r3, #0]
 8000282:	605a      	str	r2, [r3, #4]
 8000284:	609a      	str	r2, [r3, #8]
 8000286:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000288:	4b2e      	ldr	r3, [pc, #184]	@ (8000344 <MX_GPIO_Init+0xd0>)
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	4a2d      	ldr	r2, [pc, #180]	@ (8000344 <MX_GPIO_Init+0xd0>)
 800028e:	f043 0310 	orr.w	r3, r3, #16
 8000292:	6193      	str	r3, [r2, #24]
 8000294:	4b2b      	ldr	r3, [pc, #172]	@ (8000344 <MX_GPIO_Init+0xd0>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	f003 0310 	and.w	r3, r3, #16
 800029c:	60fb      	str	r3, [r7, #12]
 800029e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002a0:	4b28      	ldr	r3, [pc, #160]	@ (8000344 <MX_GPIO_Init+0xd0>)
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	4a27      	ldr	r2, [pc, #156]	@ (8000344 <MX_GPIO_Init+0xd0>)
 80002a6:	f043 0320 	orr.w	r3, r3, #32
 80002aa:	6193      	str	r3, [r2, #24]
 80002ac:	4b25      	ldr	r3, [pc, #148]	@ (8000344 <MX_GPIO_Init+0xd0>)
 80002ae:	699b      	ldr	r3, [r3, #24]
 80002b0:	f003 0320 	and.w	r3, r3, #32
 80002b4:	60bb      	str	r3, [r7, #8]
 80002b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002b8:	4b22      	ldr	r3, [pc, #136]	@ (8000344 <MX_GPIO_Init+0xd0>)
 80002ba:	699b      	ldr	r3, [r3, #24]
 80002bc:	4a21      	ldr	r2, [pc, #132]	@ (8000344 <MX_GPIO_Init+0xd0>)
 80002be:	f043 0304 	orr.w	r3, r3, #4
 80002c2:	6193      	str	r3, [r2, #24]
 80002c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000344 <MX_GPIO_Init+0xd0>)
 80002c6:	699b      	ldr	r3, [r3, #24]
 80002c8:	f003 0304 	and.w	r3, r3, #4
 80002cc:	607b      	str	r3, [r7, #4]
 80002ce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000344 <MX_GPIO_Init+0xd0>)
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	4a1b      	ldr	r2, [pc, #108]	@ (8000344 <MX_GPIO_Init+0xd0>)
 80002d6:	f043 0308 	orr.w	r3, r3, #8
 80002da:	6193      	str	r3, [r2, #24]
 80002dc:	4b19      	ldr	r3, [pc, #100]	@ (8000344 <MX_GPIO_Init+0xd0>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	f003 0308 	and.w	r3, r3, #8
 80002e4:	603b      	str	r3, [r7, #0]
 80002e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80002e8:	2200      	movs	r2, #0
 80002ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002ee:	4816      	ldr	r0, [pc, #88]	@ (8000348 <MX_GPIO_Init+0xd4>)
 80002f0:	f001 fe8e 	bl	8002010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80002f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002fa:	2301      	movs	r3, #1
 80002fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002fe:	2300      	movs	r3, #0
 8000300:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000302:	2302      	movs	r3, #2
 8000304:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000306:	f107 0310 	add.w	r3, r7, #16
 800030a:	4619      	mov	r1, r3
 800030c:	480e      	ldr	r0, [pc, #56]	@ (8000348 <MX_GPIO_Init+0xd4>)
 800030e:	f001 fcfb 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000312:	2301      	movs	r3, #1
 8000314:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000316:	4b0d      	ldr	r3, [pc, #52]	@ (800034c <MX_GPIO_Init+0xd8>)
 8000318:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800031a:	2300      	movs	r3, #0
 800031c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800031e:	f107 0310 	add.w	r3, r7, #16
 8000322:	4619      	mov	r1, r3
 8000324:	480a      	ldr	r0, [pc, #40]	@ (8000350 <MX_GPIO_Init+0xdc>)
 8000326:	f001 fcef 	bl	8001d08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800032a:	2200      	movs	r2, #0
 800032c:	2100      	movs	r1, #0
 800032e:	2006      	movs	r0, #6
 8000330:	f001 fa9f 	bl	8001872 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000334:	2006      	movs	r0, #6
 8000336:	f001 fab8 	bl	80018aa <HAL_NVIC_EnableIRQ>

}
 800033a:	bf00      	nop
 800033c:	3720      	adds	r7, #32
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	40021000 	.word	0x40021000
 8000348:	40011000 	.word	0x40011000
 800034c:	10210000 	.word	0x10210000
 8000350:	40010800 	.word	0x40010800

08000354 <HMC5883L_Init>:
#define MPU6050_GYRO_ZOUT_L 0x48

// MS5611的配置命令


void HMC5883L_Init(){
 8000354:	b580      	push	{r7, lr}
 8000356:	b084      	sub	sp, #16
 8000358:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Write(&hi2c1, HMC5883L_ADDRESS, HMC5883L_REG_CONFA, I2C_MEMADD_SIZE_8BIT, HMC5883L_AVERAGING_8 | HMC5883L_RATE_15, 1, HAL_MAX_DELAY);
 800035a:	f04f 33ff 	mov.w	r3, #4294967295
 800035e:	9302      	str	r3, [sp, #8]
 8000360:	2301      	movs	r3, #1
 8000362:	9301      	str	r3, [sp, #4]
 8000364:	2343      	movs	r3, #67	@ 0x43
 8000366:	9300      	str	r3, [sp, #0]
 8000368:	2301      	movs	r3, #1
 800036a:	2200      	movs	r2, #0
 800036c:	211e      	movs	r1, #30
 800036e:	4810      	ldr	r0, [pc, #64]	@ (80003b0 <HMC5883L_Init+0x5c>)
 8000370:	f001 ffdc 	bl	800232c <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, HMC5883L_ADDRESS, HMC5883L_REG_CONFB, I2C_MEMADD_SIZE_8BIT, 0x00, 1, HAL_MAX_DELAY);
 8000374:	f04f 33ff 	mov.w	r3, #4294967295
 8000378:	9302      	str	r3, [sp, #8]
 800037a:	2301      	movs	r3, #1
 800037c:	9301      	str	r3, [sp, #4]
 800037e:	2300      	movs	r3, #0
 8000380:	9300      	str	r3, [sp, #0]
 8000382:	2301      	movs	r3, #1
 8000384:	2201      	movs	r2, #1
 8000386:	211e      	movs	r1, #30
 8000388:	4809      	ldr	r0, [pc, #36]	@ (80003b0 <HMC5883L_Init+0x5c>)
 800038a:	f001 ffcf 	bl	800232c <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, HMC5883L_ADDRESS, HMC5883L_REG_MODE, I2C_MEMADD_SIZE_8BIT, HMC5883L_MODE_CONTINUOUS, 1, HAL_MAX_DELAY);
 800038e:	f04f 33ff 	mov.w	r3, #4294967295
 8000392:	9302      	str	r3, [sp, #8]
 8000394:	2301      	movs	r3, #1
 8000396:	9301      	str	r3, [sp, #4]
 8000398:	2300      	movs	r3, #0
 800039a:	9300      	str	r3, [sp, #0]
 800039c:	2301      	movs	r3, #1
 800039e:	2202      	movs	r2, #2
 80003a0:	211e      	movs	r1, #30
 80003a2:	4803      	ldr	r0, [pc, #12]	@ (80003b0 <HMC5883L_Init+0x5c>)
 80003a4:	f001 ffc2 	bl	800232c <HAL_I2C_Mem_Write>
}
 80003a8:	bf00      	nop
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	2000014c 	.word	0x2000014c

080003b4 <HMC5883L_ReadData>:
void HMC5883L_ReadData(int16_t *x, int16_t *y, int16_t *z)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b08a      	sub	sp, #40	@ 0x28
 80003b8:	af04      	add	r7, sp, #16
 80003ba:	60f8      	str	r0, [r7, #12]
 80003bc:	60b9      	str	r1, [r7, #8]
 80003be:	607a      	str	r2, [r7, #4]
    uint8_t data[6];
    // 读取X、Y、Z轴的数据
    HAL_I2C_Mem_Read(&hi2c1, HMC5883L_ADDRESS, HMC5883L_REG_X_OUT_L, I2C_MEMADD_SIZE_8BIT, data, 6, HAL_MAX_DELAY);
 80003c0:	f04f 33ff 	mov.w	r3, #4294967295
 80003c4:	9302      	str	r3, [sp, #8]
 80003c6:	2306      	movs	r3, #6
 80003c8:	9301      	str	r3, [sp, #4]
 80003ca:	f107 0310 	add.w	r3, r7, #16
 80003ce:	9300      	str	r3, [sp, #0]
 80003d0:	2301      	movs	r3, #1
 80003d2:	2203      	movs	r2, #3
 80003d4:	211e      	movs	r1, #30
 80003d6:	4811      	ldr	r0, [pc, #68]	@ (800041c <HMC5883L_ReadData+0x68>)
 80003d8:	f002 f8a2 	bl	8002520 <HAL_I2C_Mem_Read>
    // 将读取到的高低字节组合成16位整数
    *x = (data[1] << 8) | data[0];
 80003dc:	7c7b      	ldrb	r3, [r7, #17]
 80003de:	021b      	lsls	r3, r3, #8
 80003e0:	b21a      	sxth	r2, r3
 80003e2:	7c3b      	ldrb	r3, [r7, #16]
 80003e4:	b21b      	sxth	r3, r3
 80003e6:	4313      	orrs	r3, r2
 80003e8:	b21a      	sxth	r2, r3
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	801a      	strh	r2, [r3, #0]
    *y = (data[3] << 8) | data[2];
 80003ee:	7cfb      	ldrb	r3, [r7, #19]
 80003f0:	021b      	lsls	r3, r3, #8
 80003f2:	b21a      	sxth	r2, r3
 80003f4:	7cbb      	ldrb	r3, [r7, #18]
 80003f6:	b21b      	sxth	r3, r3
 80003f8:	4313      	orrs	r3, r2
 80003fa:	b21a      	sxth	r2, r3
 80003fc:	68bb      	ldr	r3, [r7, #8]
 80003fe:	801a      	strh	r2, [r3, #0]
    *z = (data[5] << 8) | data[4];
 8000400:	7d7b      	ldrb	r3, [r7, #21]
 8000402:	021b      	lsls	r3, r3, #8
 8000404:	b21a      	sxth	r2, r3
 8000406:	7d3b      	ldrb	r3, [r7, #20]
 8000408:	b21b      	sxth	r3, r3
 800040a:	4313      	orrs	r3, r2
 800040c:	b21a      	sxth	r2, r3
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	801a      	strh	r2, [r3, #0]
    // 应用校准和滤波处理（省略具体实现）
    // ...
}
 8000412:	bf00      	nop
 8000414:	3718      	adds	r7, #24
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	2000014c 	.word	0x2000014c

08000420 <MPU6050_Init>:



void MPU6050_Init(){
 8000420:	b580      	push	{r7, lr}
 8000422:	b084      	sub	sp, #16
 8000424:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS, MPU6050_PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, 0x01, 1, HAL_MAX_DELAY); //解除睡眠, 选择陀螺仪时钟
 8000426:	f04f 33ff 	mov.w	r3, #4294967295
 800042a:	9302      	str	r3, [sp, #8]
 800042c:	2301      	movs	r3, #1
 800042e:	9301      	str	r3, [sp, #4]
 8000430:	2301      	movs	r3, #1
 8000432:	9300      	str	r3, [sp, #0]
 8000434:	2301      	movs	r3, #1
 8000436:	226b      	movs	r2, #107	@ 0x6b
 8000438:	21d0      	movs	r1, #208	@ 0xd0
 800043a:	4830      	ldr	r0, [pc, #192]	@ (80004fc <MPU6050_Init+0xdc>)
 800043c:	f001 ff76 	bl	800232c <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS, MPU6050_PWR_MGMT_2, I2C_MEMADD_SIZE_8BIT, 0x00, 1, HAL_MAX_DELAY); //六个轴都不待机
 8000440:	f04f 33ff 	mov.w	r3, #4294967295
 8000444:	9302      	str	r3, [sp, #8]
 8000446:	2301      	movs	r3, #1
 8000448:	9301      	str	r3, [sp, #4]
 800044a:	2300      	movs	r3, #0
 800044c:	9300      	str	r3, [sp, #0]
 800044e:	2301      	movs	r3, #1
 8000450:	226c      	movs	r2, #108	@ 0x6c
 8000452:	21d0      	movs	r1, #208	@ 0xd0
 8000454:	4829      	ldr	r0, [pc, #164]	@ (80004fc <MPU6050_Init+0xdc>)
 8000456:	f001 ff69 	bl	800232c <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS, MPU6050_SMPRT_DIV, I2C_MEMADD_SIZE_8BIT, 0x09, 1, HAL_MAX_DELAY); //10分频
 800045a:	f04f 33ff 	mov.w	r3, #4294967295
 800045e:	9302      	str	r3, [sp, #8]
 8000460:	2301      	movs	r3, #1
 8000462:	9301      	str	r3, [sp, #4]
 8000464:	2309      	movs	r3, #9
 8000466:	9300      	str	r3, [sp, #0]
 8000468:	2301      	movs	r3, #1
 800046a:	2219      	movs	r2, #25
 800046c:	21d0      	movs	r1, #208	@ 0xd0
 800046e:	4823      	ldr	r0, [pc, #140]	@ (80004fc <MPU6050_Init+0xdc>)
 8000470:	f001 ff5c 	bl	800232c <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS, MPU6050_CONFIG, I2C_MEMADD_SIZE_8BIT, 0x06, 1, HAL_MAX_DELAY); //滤波参数最大
 8000474:	f04f 33ff 	mov.w	r3, #4294967295
 8000478:	9302      	str	r3, [sp, #8]
 800047a:	2301      	movs	r3, #1
 800047c:	9301      	str	r3, [sp, #4]
 800047e:	2306      	movs	r3, #6
 8000480:	9300      	str	r3, [sp, #0]
 8000482:	2301      	movs	r3, #1
 8000484:	221a      	movs	r2, #26
 8000486:	21d0      	movs	r1, #208	@ 0xd0
 8000488:	481c      	ldr	r0, [pc, #112]	@ (80004fc <MPU6050_Init+0xdc>)
 800048a:	f001 ff4f 	bl	800232c <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS, MPU6050_GYRO_CONFIG, I2C_MEMADD_SIZE_8BIT, 0x18, 1, HAL_MAX_DELAY); //陀螺仪最大量程
 800048e:	f04f 33ff 	mov.w	r3, #4294967295
 8000492:	9302      	str	r3, [sp, #8]
 8000494:	2301      	movs	r3, #1
 8000496:	9301      	str	r3, [sp, #4]
 8000498:	2318      	movs	r3, #24
 800049a:	9300      	str	r3, [sp, #0]
 800049c:	2301      	movs	r3, #1
 800049e:	221b      	movs	r2, #27
 80004a0:	21d0      	movs	r1, #208	@ 0xd0
 80004a2:	4816      	ldr	r0, [pc, #88]	@ (80004fc <MPU6050_Init+0xdc>)
 80004a4:	f001 ff42 	bl	800232c <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS, MPU6050_ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, 0x18, 1, HAL_MAX_DELAY); //加速度计最大量程
 80004a8:	f04f 33ff 	mov.w	r3, #4294967295
 80004ac:	9302      	str	r3, [sp, #8]
 80004ae:	2301      	movs	r3, #1
 80004b0:	9301      	str	r3, [sp, #4]
 80004b2:	2318      	movs	r3, #24
 80004b4:	9300      	str	r3, [sp, #0]
 80004b6:	2301      	movs	r3, #1
 80004b8:	221c      	movs	r2, #28
 80004ba:	21d0      	movs	r1, #208	@ 0xd0
 80004bc:	480f      	ldr	r0, [pc, #60]	@ (80004fc <MPU6050_Init+0xdc>)
 80004be:	f001 ff35 	bl	800232c <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS, MPU6050_USER_CTRL, I2C_MEMADD_SIZE_8BIT, 0x80, 1, HAL_MAX_DELAY); //控制I2C主模式使能?
 80004c2:	f04f 33ff 	mov.w	r3, #4294967295
 80004c6:	9302      	str	r3, [sp, #8]
 80004c8:	2301      	movs	r3, #1
 80004ca:	9301      	str	r3, [sp, #4]
 80004cc:	2380      	movs	r3, #128	@ 0x80
 80004ce:	9300      	str	r3, [sp, #0]
 80004d0:	2301      	movs	r3, #1
 80004d2:	226a      	movs	r2, #106	@ 0x6a
 80004d4:	21d0      	movs	r1, #208	@ 0xd0
 80004d6:	4809      	ldr	r0, [pc, #36]	@ (80004fc <MPU6050_Init+0xdc>)
 80004d8:	f001 ff28 	bl	800232c <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS, MPU6050_INT_PIN_CFG, I2C_MEMADD_SIZE_8BIT, 0x02, 1, HAL_MAX_DELAY); //旁路模式?
 80004dc:	f04f 33ff 	mov.w	r3, #4294967295
 80004e0:	9302      	str	r3, [sp, #8]
 80004e2:	2301      	movs	r3, #1
 80004e4:	9301      	str	r3, [sp, #4]
 80004e6:	2302      	movs	r3, #2
 80004e8:	9300      	str	r3, [sp, #0]
 80004ea:	2301      	movs	r3, #1
 80004ec:	2237      	movs	r2, #55	@ 0x37
 80004ee:	21d0      	movs	r1, #208	@ 0xd0
 80004f0:	4802      	ldr	r0, [pc, #8]	@ (80004fc <MPU6050_Init+0xdc>)
 80004f2:	f001 ff1b 	bl	800232c <HAL_I2C_Mem_Write>

}
 80004f6:	bf00      	nop
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	2000014c 	.word	0x2000014c

08000500 <MPU6050_GetData>:
	*GyroZ = (DataH << 8)|DataL;

}


void MPU6050_GetData(int16_t* AccX, int16_t* AccY, int16_t* AccZ, int16_t* GyroX, int16_t* GyroY, int16_t* GyroZ) {
 8000500:	b580      	push	{r7, lr}
 8000502:	b08c      	sub	sp, #48	@ 0x30
 8000504:	af04      	add	r7, sp, #16
 8000506:	60f8      	str	r0, [r7, #12]
 8000508:	60b9      	str	r1, [r7, #8]
 800050a:	607a      	str	r2, [r7, #4]
 800050c:	603b      	str	r3, [r7, #0]
    uint8_t buffer[14]; // 加速度计+温度+陀螺仪共14字节

    // 一次性读取所有传感器数据（0x3B开始，连续14字节）
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDRESS, MPU6050_ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, buffer, 14, HAL_MAX_DELAY);
 800050e:	f04f 33ff 	mov.w	r3, #4294967295
 8000512:	9302      	str	r3, [sp, #8]
 8000514:	230e      	movs	r3, #14
 8000516:	9301      	str	r3, [sp, #4]
 8000518:	f107 0310 	add.w	r3, r7, #16
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	2301      	movs	r3, #1
 8000520:	223b      	movs	r2, #59	@ 0x3b
 8000522:	21d0      	movs	r1, #208	@ 0xd0
 8000524:	481e      	ldr	r0, [pc, #120]	@ (80005a0 <MPU6050_GetData+0xa0>)
 8000526:	f001 fffb 	bl	8002520 <HAL_I2C_Mem_Read>

    // 解析加速度计数据（X/Y/Z各占2字节）
    *AccX  = (buffer[0]  << 8) | buffer[1];
 800052a:	7c3b      	ldrb	r3, [r7, #16]
 800052c:	021b      	lsls	r3, r3, #8
 800052e:	b21a      	sxth	r2, r3
 8000530:	7c7b      	ldrb	r3, [r7, #17]
 8000532:	b21b      	sxth	r3, r3
 8000534:	4313      	orrs	r3, r2
 8000536:	b21a      	sxth	r2, r3
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	801a      	strh	r2, [r3, #0]
    *AccY  = (buffer[2]  << 8) | buffer[3];
 800053c:	7cbb      	ldrb	r3, [r7, #18]
 800053e:	021b      	lsls	r3, r3, #8
 8000540:	b21a      	sxth	r2, r3
 8000542:	7cfb      	ldrb	r3, [r7, #19]
 8000544:	b21b      	sxth	r3, r3
 8000546:	4313      	orrs	r3, r2
 8000548:	b21a      	sxth	r2, r3
 800054a:	68bb      	ldr	r3, [r7, #8]
 800054c:	801a      	strh	r2, [r3, #0]
    *AccZ  = (buffer[4]  << 8) | buffer[5];
 800054e:	7d3b      	ldrb	r3, [r7, #20]
 8000550:	021b      	lsls	r3, r3, #8
 8000552:	b21a      	sxth	r2, r3
 8000554:	7d7b      	ldrb	r3, [r7, #21]
 8000556:	b21b      	sxth	r3, r3
 8000558:	4313      	orrs	r3, r2
 800055a:	b21a      	sxth	r2, r3
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	801a      	strh	r2, [r3, #0]

    // 跳过温度数据（buffer[6]和buffer[7]）

    // 解析陀螺仪数据（X/Y/Z各占2字节）
    *GyroX = (buffer[8]  << 8) | buffer[9];
 8000560:	7e3b      	ldrb	r3, [r7, #24]
 8000562:	021b      	lsls	r3, r3, #8
 8000564:	b21a      	sxth	r2, r3
 8000566:	7e7b      	ldrb	r3, [r7, #25]
 8000568:	b21b      	sxth	r3, r3
 800056a:	4313      	orrs	r3, r2
 800056c:	b21a      	sxth	r2, r3
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	801a      	strh	r2, [r3, #0]
    *GyroY = (buffer[10] << 8) | buffer[11];
 8000572:	7ebb      	ldrb	r3, [r7, #26]
 8000574:	021b      	lsls	r3, r3, #8
 8000576:	b21a      	sxth	r2, r3
 8000578:	7efb      	ldrb	r3, [r7, #27]
 800057a:	b21b      	sxth	r3, r3
 800057c:	4313      	orrs	r3, r2
 800057e:	b21a      	sxth	r2, r3
 8000580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000582:	801a      	strh	r2, [r3, #0]
    *GyroZ = (buffer[12] << 8) | buffer[13];
 8000584:	7f3b      	ldrb	r3, [r7, #28]
 8000586:	021b      	lsls	r3, r3, #8
 8000588:	b21a      	sxth	r2, r3
 800058a:	7f7b      	ldrb	r3, [r7, #29]
 800058c:	b21b      	sxth	r3, r3
 800058e:	4313      	orrs	r3, r2
 8000590:	b21a      	sxth	r2, r3
 8000592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000594:	801a      	strh	r2, [r3, #0]
}
 8000596:	bf00      	nop
 8000598:	3720      	adds	r7, #32
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	2000014c 	.word	0x2000014c

080005a4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005a8:	4b12      	ldr	r3, [pc, #72]	@ (80005f4 <MX_I2C1_Init+0x50>)
 80005aa:	4a13      	ldr	r2, [pc, #76]	@ (80005f8 <MX_I2C1_Init+0x54>)
 80005ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005ae:	4b11      	ldr	r3, [pc, #68]	@ (80005f4 <MX_I2C1_Init+0x50>)
 80005b0:	4a12      	ldr	r2, [pc, #72]	@ (80005fc <MX_I2C1_Init+0x58>)
 80005b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005b4:	4b0f      	ldr	r3, [pc, #60]	@ (80005f4 <MX_I2C1_Init+0x50>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005ba:	4b0e      	ldr	r3, [pc, #56]	@ (80005f4 <MX_I2C1_Init+0x50>)
 80005bc:	2200      	movs	r2, #0
 80005be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005c0:	4b0c      	ldr	r3, [pc, #48]	@ (80005f4 <MX_I2C1_Init+0x50>)
 80005c2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80005c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005c8:	4b0a      	ldr	r3, [pc, #40]	@ (80005f4 <MX_I2C1_Init+0x50>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005ce:	4b09      	ldr	r3, [pc, #36]	@ (80005f4 <MX_I2C1_Init+0x50>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005d4:	4b07      	ldr	r3, [pc, #28]	@ (80005f4 <MX_I2C1_Init+0x50>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005da:	4b06      	ldr	r3, [pc, #24]	@ (80005f4 <MX_I2C1_Init+0x50>)
 80005dc:	2200      	movs	r2, #0
 80005de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005e0:	4804      	ldr	r0, [pc, #16]	@ (80005f4 <MX_I2C1_Init+0x50>)
 80005e2:	f001 fd5f 	bl	80020a4 <HAL_I2C_Init>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005ec:	f000 f9d3 	bl	8000996 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	2000014c 	.word	0x2000014c
 80005f8:	40005400 	.word	0x40005400
 80005fc:	000186a0 	.word	0x000186a0

08000600 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000604:	4b12      	ldr	r3, [pc, #72]	@ (8000650 <MX_I2C2_Init+0x50>)
 8000606:	4a13      	ldr	r2, [pc, #76]	@ (8000654 <MX_I2C2_Init+0x54>)
 8000608:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800060a:	4b11      	ldr	r3, [pc, #68]	@ (8000650 <MX_I2C2_Init+0x50>)
 800060c:	4a12      	ldr	r2, [pc, #72]	@ (8000658 <MX_I2C2_Init+0x58>)
 800060e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000610:	4b0f      	ldr	r3, [pc, #60]	@ (8000650 <MX_I2C2_Init+0x50>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000616:	4b0e      	ldr	r3, [pc, #56]	@ (8000650 <MX_I2C2_Init+0x50>)
 8000618:	2200      	movs	r2, #0
 800061a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800061c:	4b0c      	ldr	r3, [pc, #48]	@ (8000650 <MX_I2C2_Init+0x50>)
 800061e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000622:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000624:	4b0a      	ldr	r3, [pc, #40]	@ (8000650 <MX_I2C2_Init+0x50>)
 8000626:	2200      	movs	r2, #0
 8000628:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800062a:	4b09      	ldr	r3, [pc, #36]	@ (8000650 <MX_I2C2_Init+0x50>)
 800062c:	2200      	movs	r2, #0
 800062e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000630:	4b07      	ldr	r3, [pc, #28]	@ (8000650 <MX_I2C2_Init+0x50>)
 8000632:	2200      	movs	r2, #0
 8000634:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000636:	4b06      	ldr	r3, [pc, #24]	@ (8000650 <MX_I2C2_Init+0x50>)
 8000638:	2200      	movs	r2, #0
 800063a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800063c:	4804      	ldr	r0, [pc, #16]	@ (8000650 <MX_I2C2_Init+0x50>)
 800063e:	f001 fd31 	bl	80020a4 <HAL_I2C_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000648:	f000 f9a5 	bl	8000996 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	200001a0 	.word	0x200001a0
 8000654:	40005800 	.word	0x40005800
 8000658:	00061a80 	.word	0x00061a80

0800065c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08c      	sub	sp, #48	@ 0x30
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000664:	f107 031c 	add.w	r3, r7, #28
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a32      	ldr	r2, [pc, #200]	@ (8000740 <HAL_I2C_MspInit+0xe4>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d133      	bne.n	80006e4 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800067c:	4b31      	ldr	r3, [pc, #196]	@ (8000744 <HAL_I2C_MspInit+0xe8>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	4a30      	ldr	r2, [pc, #192]	@ (8000744 <HAL_I2C_MspInit+0xe8>)
 8000682:	f043 0308 	orr.w	r3, r3, #8
 8000686:	6193      	str	r3, [r2, #24]
 8000688:	4b2e      	ldr	r3, [pc, #184]	@ (8000744 <HAL_I2C_MspInit+0xe8>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	f003 0308 	and.w	r3, r3, #8
 8000690:	61bb      	str	r3, [r7, #24]
 8000692:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000694:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000698:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800069a:	2312      	movs	r3, #18
 800069c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800069e:	2303      	movs	r3, #3
 80006a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a2:	f107 031c 	add.w	r3, r7, #28
 80006a6:	4619      	mov	r1, r3
 80006a8:	4827      	ldr	r0, [pc, #156]	@ (8000748 <HAL_I2C_MspInit+0xec>)
 80006aa:	f001 fb2d 	bl	8001d08 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80006ae:	4b27      	ldr	r3, [pc, #156]	@ (800074c <HAL_I2C_MspInit+0xf0>)
 80006b0:	685b      	ldr	r3, [r3, #4]
 80006b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80006b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80006b6:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80006ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80006bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80006be:	f043 0302 	orr.w	r3, r3, #2
 80006c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80006c4:	4a21      	ldr	r2, [pc, #132]	@ (800074c <HAL_I2C_MspInit+0xf0>)
 80006c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80006c8:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006ca:	4b1e      	ldr	r3, [pc, #120]	@ (8000744 <HAL_I2C_MspInit+0xe8>)
 80006cc:	69db      	ldr	r3, [r3, #28]
 80006ce:	4a1d      	ldr	r2, [pc, #116]	@ (8000744 <HAL_I2C_MspInit+0xe8>)
 80006d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006d4:	61d3      	str	r3, [r2, #28]
 80006d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000744 <HAL_I2C_MspInit+0xe8>)
 80006d8:	69db      	ldr	r3, [r3, #28]
 80006da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006de:	617b      	str	r3, [r7, #20]
 80006e0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80006e2:	e029      	b.n	8000738 <HAL_I2C_MspInit+0xdc>
  else if(i2cHandle->Instance==I2C2)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a19      	ldr	r2, [pc, #100]	@ (8000750 <HAL_I2C_MspInit+0xf4>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d124      	bne.n	8000738 <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ee:	4b15      	ldr	r3, [pc, #84]	@ (8000744 <HAL_I2C_MspInit+0xe8>)
 80006f0:	699b      	ldr	r3, [r3, #24]
 80006f2:	4a14      	ldr	r2, [pc, #80]	@ (8000744 <HAL_I2C_MspInit+0xe8>)
 80006f4:	f043 0308 	orr.w	r3, r3, #8
 80006f8:	6193      	str	r3, [r2, #24]
 80006fa:	4b12      	ldr	r3, [pc, #72]	@ (8000744 <HAL_I2C_MspInit+0xe8>)
 80006fc:	699b      	ldr	r3, [r3, #24]
 80006fe:	f003 0308 	and.w	r3, r3, #8
 8000702:	613b      	str	r3, [r7, #16]
 8000704:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000706:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800070a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800070c:	2312      	movs	r3, #18
 800070e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000710:	2303      	movs	r3, #3
 8000712:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000714:	f107 031c 	add.w	r3, r7, #28
 8000718:	4619      	mov	r1, r3
 800071a:	480b      	ldr	r0, [pc, #44]	@ (8000748 <HAL_I2C_MspInit+0xec>)
 800071c:	f001 faf4 	bl	8001d08 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000720:	4b08      	ldr	r3, [pc, #32]	@ (8000744 <HAL_I2C_MspInit+0xe8>)
 8000722:	69db      	ldr	r3, [r3, #28]
 8000724:	4a07      	ldr	r2, [pc, #28]	@ (8000744 <HAL_I2C_MspInit+0xe8>)
 8000726:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800072a:	61d3      	str	r3, [r2, #28]
 800072c:	4b05      	ldr	r3, [pc, #20]	@ (8000744 <HAL_I2C_MspInit+0xe8>)
 800072e:	69db      	ldr	r3, [r3, #28]
 8000730:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	68fb      	ldr	r3, [r7, #12]
}
 8000738:	bf00      	nop
 800073a:	3730      	adds	r7, #48	@ 0x30
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40005400 	.word	0x40005400
 8000744:	40021000 	.word	0x40021000
 8000748:	40010c00 	.word	0x40010c00
 800074c:	40010000 	.word	0x40010000
 8000750:	40005800 	.word	0x40005800

08000754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000756:	b095      	sub	sp, #84	@ 0x54
 8000758:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800075a:	f000 ff2d 	bl	80015b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075e:	f000 f8d5 	bl	800090c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000762:	f7ff fd87 	bl	8000274 <MX_GPIO_Init>
  MX_DMA_Init();
 8000766:	f7ff fd4f 	bl	8000208 <MX_DMA_Init>
  MX_I2C1_Init();
 800076a:	f7ff ff1b 	bl	80005a4 <MX_I2C1_Init>
  MX_I2C2_Init();
 800076e:	f7ff ff47 	bl	8000600 <MX_I2C2_Init>
  MX_TIM1_Init();
 8000772:	f000 fbe5 	bl	8000f40 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000776:	f000 fca7 	bl	80010c8 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800077a:	f000 fd55 	bl	8001228 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800077e:	f000 fd7d 	bl	800127c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000782:	4850      	ldr	r0, [pc, #320]	@ (80008c4 <main+0x170>)
 8000784:	f003 f954 	bl	8003a30 <HAL_TIM_Base_Start>

  HAL_Delay(20);
 8000788:	2014      	movs	r0, #20
 800078a:	f000 ff77 	bl	800167c <HAL_Delay>
//  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, blueData, sizeof(blueData));
//  // 关闭DMA传输过半中断（HAL库默认开启，但我们只需要接收完成中断）
//  __HAL_DMA_DISABLE_IT(huart2.hdmarx, DMA_IT_HT);
//  // 现在等待数据接收完成，接收完成后会自动进入 回调函数...

  HAL_Delay(20);
 800078e:	2014      	movs	r0, #20
 8000790:	f000 ff74 	bl	800167c <HAL_Delay>
  OLED_Init();                           //OLED初始
 8000794:	f000 f906 	bl	80009a4 <OLED_Init>
  OLED_Clear();                         //清屏
 8000798:	f000 f952 	bl	8000a40 <OLED_Clear>
  OLED_DrawBMP(42,1, 85, 5,BMP1,0);//正相显示图片BMP1
 800079c:	2300      	movs	r3, #0
 800079e:	9301      	str	r3, [sp, #4]
 80007a0:	4b49      	ldr	r3, [pc, #292]	@ (80008c8 <main+0x174>)
 80007a2:	9300      	str	r3, [sp, #0]
 80007a4:	2305      	movs	r3, #5
 80007a6:	2255      	movs	r2, #85	@ 0x55
 80007a8:	2101      	movs	r1, #1
 80007aa:	202a      	movs	r0, #42	@ 0x2a
 80007ac:	f000 fa8d 	bl	8000cca <OLED_DrawBMP>
  OLED_ShowString(14,6,"Summer Pocket",16, 0);
 80007b0:	2300      	movs	r3, #0
 80007b2:	9300      	str	r3, [sp, #0]
 80007b4:	2310      	movs	r3, #16
 80007b6:	4a45      	ldr	r2, [pc, #276]	@ (80008cc <main+0x178>)
 80007b8:	2106      	movs	r1, #6
 80007ba:	200e      	movs	r0, #14
 80007bc:	f000 fa3c 	bl	8000c38 <OLED_ShowString>


  HAL_Delay(20);
 80007c0:	2014      	movs	r0, #20
 80007c2:	f000 ff5b 	bl	800167c <HAL_Delay>
  HMC5883L_Init();
 80007c6:	f7ff fdc5 	bl	8000354 <HMC5883L_Init>
  MPU6050_Init();
 80007ca:	f7ff fe29 	bl	8000420 <MPU6050_Init>

  char defaultData[] = "Bluetooth";
 80007ce:	4a40      	ldr	r2, [pc, #256]	@ (80008d0 <main+0x17c>)
 80007d0:	f107 031c 	add.w	r3, r7, #28
 80007d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80007d6:	c303      	stmia	r3!, {r0, r1}
 80007d8:	801a      	strh	r2, [r3, #0]
  uint16_t len_default = sizeof(defaultData) - 1;  // 去掉末尾的\0
 80007da:	2309      	movs	r3, #9
 80007dc:	85fb      	strh	r3, [r7, #46]	@ 0x2e

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(!uart_tx_busy){
 80007de:	4b3d      	ldr	r3, [pc, #244]	@ (80008d4 <main+0x180>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d152      	bne.n	800088e <main+0x13a>
		  HMC5883L_ReadData(&mag_x, &mag_y, &mag_z);
 80007e8:	4a3b      	ldr	r2, [pc, #236]	@ (80008d8 <main+0x184>)
 80007ea:	493c      	ldr	r1, [pc, #240]	@ (80008dc <main+0x188>)
 80007ec:	483c      	ldr	r0, [pc, #240]	@ (80008e0 <main+0x18c>)
 80007ee:	f7ff fde1 	bl	80003b4 <HMC5883L_ReadData>
		  MPU6050_GetData(&acc_x, &acc_y, &acc_z, &gyro_x, &gyro_y, &gyro_z);
 80007f2:	4b3c      	ldr	r3, [pc, #240]	@ (80008e4 <main+0x190>)
 80007f4:	9301      	str	r3, [sp, #4]
 80007f6:	4b3c      	ldr	r3, [pc, #240]	@ (80008e8 <main+0x194>)
 80007f8:	9300      	str	r3, [sp, #0]
 80007fa:	4b3c      	ldr	r3, [pc, #240]	@ (80008ec <main+0x198>)
 80007fc:	4a3c      	ldr	r2, [pc, #240]	@ (80008f0 <main+0x19c>)
 80007fe:	493d      	ldr	r1, [pc, #244]	@ (80008f4 <main+0x1a0>)
 8000800:	483d      	ldr	r0, [pc, #244]	@ (80008f8 <main+0x1a4>)
 8000802:	f7ff fe7d 	bl	8000500 <MPU6050_GetData>
		  uart_tx_busy = 1;
 8000806:	4b33      	ldr	r3, [pc, #204]	@ (80008d4 <main+0x180>)
 8000808:	2201      	movs	r2, #1
 800080a:	701a      	strb	r2, [r3, #0]
		    int len = snprintf(tx_buffer, sizeof(tx_buffer),
 800080c:	4b34      	ldr	r3, [pc, #208]	@ (80008e0 <main+0x18c>)
 800080e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000812:	469c      	mov	ip, r3
 8000814:	4b31      	ldr	r3, [pc, #196]	@ (80008dc <main+0x188>)
 8000816:	f9b3 3000 	ldrsh.w	r3, [r3]
 800081a:	461a      	mov	r2, r3
 800081c:	4b2e      	ldr	r3, [pc, #184]	@ (80008d8 <main+0x184>)
 800081e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000822:	4619      	mov	r1, r3
 8000824:	4b34      	ldr	r3, [pc, #208]	@ (80008f8 <main+0x1a4>)
 8000826:	f9b3 3000 	ldrsh.w	r3, [r3]
 800082a:	4618      	mov	r0, r3
 800082c:	4b31      	ldr	r3, [pc, #196]	@ (80008f4 <main+0x1a0>)
 800082e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000832:	461c      	mov	r4, r3
 8000834:	4b2e      	ldr	r3, [pc, #184]	@ (80008f0 <main+0x19c>)
 8000836:	f9b3 3000 	ldrsh.w	r3, [r3]
 800083a:	461d      	mov	r5, r3
 800083c:	4b2b      	ldr	r3, [pc, #172]	@ (80008ec <main+0x198>)
 800083e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000842:	461e      	mov	r6, r3
 8000844:	4b28      	ldr	r3, [pc, #160]	@ (80008e8 <main+0x194>)
 8000846:	f9b3 3000 	ldrsh.w	r3, [r3]
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	4b25      	ldr	r3, [pc, #148]	@ (80008e4 <main+0x190>)
 800084e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000852:	9307      	str	r3, [sp, #28]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	9306      	str	r3, [sp, #24]
 8000858:	9605      	str	r6, [sp, #20]
 800085a:	9504      	str	r5, [sp, #16]
 800085c:	9403      	str	r4, [sp, #12]
 800085e:	9002      	str	r0, [sp, #8]
 8000860:	9101      	str	r1, [sp, #4]
 8000862:	9200      	str	r2, [sp, #0]
 8000864:	4663      	mov	r3, ip
 8000866:	4a25      	ldr	r2, [pc, #148]	@ (80008fc <main+0x1a8>)
 8000868:	2140      	movs	r1, #64	@ 0x40
 800086a:	4825      	ldr	r0, [pc, #148]	@ (8000900 <main+0x1ac>)
 800086c:	f004 fc5c 	bl	8005128 <sniprintf>
 8000870:	62b8      	str	r0, [r7, #40]	@ 0x28
		        "%d,%d,%d,%d,%d,%d,%d,%d,%d\r\n",
		        mag_x, mag_y, mag_z,
		        acc_x, acc_y, acc_z,
		        gyro_x, gyro_y, gyro_z);
		  HAL_UART_Transmit(&huart2, (uint8_t*)tx_buffer, len, 500);
 8000872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000874:	b29a      	uxth	r2, r3
 8000876:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800087a:	4921      	ldr	r1, [pc, #132]	@ (8000900 <main+0x1ac>)
 800087c:	4821      	ldr	r0, [pc, #132]	@ (8000904 <main+0x1b0>)
 800087e:	f003 fe8e 	bl	800459e <HAL_UART_Transmit>
		  uart_tx_busy = 0;
 8000882:	4b14      	ldr	r3, [pc, #80]	@ (80008d4 <main+0x180>)
 8000884:	2200      	movs	r2, #0
 8000886:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(200);
 8000888:	20c8      	movs	r0, #200	@ 0xc8
 800088a:	f000 fef7 	bl	800167c <HAL_Delay>
	  }
	  if(!uart_tx_busy){
 800088e:	4b11      	ldr	r3, [pc, #68]	@ (80008d4 <main+0x180>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	b2db      	uxtb	r3, r3
 8000894:	2b00      	cmp	r3, #0
 8000896:	d10b      	bne.n	80008b0 <main+0x15c>
	          HAL_UART_Transmit(&huart2, (uint8_t*)defaultData, len_default, 500);
 8000898:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800089a:	f107 011c 	add.w	r1, r7, #28
 800089e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80008a2:	4818      	ldr	r0, [pc, #96]	@ (8000904 <main+0x1b0>)
 80008a4:	f003 fe7b 	bl	800459e <HAL_UART_Transmit>
	          HAL_Delay(500); // 保持适当间隔
 80008a8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008ac:	f000 fee6 	bl	800167c <HAL_Delay>
	      }
	  if (ppm_data_ready && !uart_tx_busy && 0) {
 80008b0:	4b15      	ldr	r3, [pc, #84]	@ (8000908 <main+0x1b4>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d091      	beq.n	80007de <main+0x8a>
 80008ba:	4b06      	ldr	r3, [pc, #24]	@ (80008d4 <main+0x180>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	2b00      	cmp	r3, #0
	  if(!uart_tx_busy){
 80008c2:	e78c      	b.n	80007de <main+0x8a>
 80008c4:	200002a4 	.word	0x200002a4
 80008c8:	2000001c 	.word	0x2000001c
 80008cc:	08005ac8 	.word	0x08005ac8
 80008d0:	08005af8 	.word	0x08005af8
 80008d4:	20000245 	.word	0x20000245
 80008d8:	2000024a 	.word	0x2000024a
 80008dc:	20000248 	.word	0x20000248
 80008e0:	20000246 	.word	0x20000246
 80008e4:	20000256 	.word	0x20000256
 80008e8:	20000254 	.word	0x20000254
 80008ec:	20000252 	.word	0x20000252
 80008f0:	20000250 	.word	0x20000250
 80008f4:	2000024e 	.word	0x2000024e
 80008f8:	2000024c 	.word	0x2000024c
 80008fc:	08005ad8 	.word	0x08005ad8
 8000900:	20000204 	.word	0x20000204
 8000904:	20000334 	.word	0x20000334
 8000908:	20000244 	.word	0x20000244

0800090c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b090      	sub	sp, #64	@ 0x40
 8000910:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000912:	f107 0318 	add.w	r3, r7, #24
 8000916:	2228      	movs	r2, #40	@ 0x28
 8000918:	2100      	movs	r1, #0
 800091a:	4618      	mov	r0, r3
 800091c:	f004 fc38 	bl	8005190 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]
 800092a:	60da      	str	r2, [r3, #12]
 800092c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800092e:	2301      	movs	r3, #1
 8000930:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000932:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000936:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000938:	2300      	movs	r3, #0
 800093a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800093c:	2301      	movs	r3, #1
 800093e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000940:	2302      	movs	r3, #2
 8000942:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000944:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000948:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800094a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800094e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000950:	f107 0318 	add.w	r3, r7, #24
 8000954:	4618      	mov	r0, r3
 8000956:	f002 fc0b 	bl	8003170 <HAL_RCC_OscConfig>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000960:	f000 f819 	bl	8000996 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000964:	230f      	movs	r3, #15
 8000966:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000968:	2302      	movs	r3, #2
 800096a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800096c:	2300      	movs	r3, #0
 800096e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000970:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000974:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000976:	2300      	movs	r3, #0
 8000978:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	2102      	movs	r1, #2
 800097e:	4618      	mov	r0, r3
 8000980:	f002 fe78 	bl	8003674 <HAL_RCC_ClockConfig>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800098a:	f000 f804 	bl	8000996 <Error_Handler>
  }
}
 800098e:	bf00      	nop
 8000990:	3740      	adds	r7, #64	@ 0x40
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800099a:	b672      	cpsid	i
}
 800099c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800099e:	bf00      	nop
 80009a0:	e7fd      	b.n	800099e <Error_Handler+0x8>
	...

080009a4 <OLED_Init>:
 * @function: void OLED_Init(void)
 * @description: OLED初始化
 * @return {*}
 */
void OLED_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
	HAL_Delay(200);
 80009aa:	20c8      	movs	r0, #200	@ 0xc8
 80009ac:	f000 fe66 	bl	800167c <HAL_Delay>

	uint8_t i = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	71fb      	strb	r3, [r7, #7]
	for(i=0; i<23; i++)
 80009b4:	2300      	movs	r3, #0
 80009b6:	71fb      	strb	r3, [r7, #7]
 80009b8:	e008      	b.n	80009cc <OLED_Init+0x28>
	{
		OLED_WR_CMD(CMD_Data[i]);
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	4a07      	ldr	r2, [pc, #28]	@ (80009dc <OLED_Init+0x38>)
 80009be:	5cd3      	ldrb	r3, [r2, r3]
 80009c0:	4618      	mov	r0, r3
 80009c2:	f000 f80d 	bl	80009e0 <OLED_WR_CMD>
	for(i=0; i<23; i++)
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	3301      	adds	r3, #1
 80009ca:	71fb      	strb	r3, [r7, #7]
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	2b16      	cmp	r3, #22
 80009d0:	d9f3      	bls.n	80009ba <OLED_Init+0x16>
	}

}
 80009d2:	bf00      	nop
 80009d4:	bf00      	nop
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000004 	.word	0x20000004

080009e0 <OLED_WR_CMD>:
 * @description: 向设备写控制命令
 * @param {uint8_t} cmd 芯片手册规定的命令
 * @return {*}
 */
void OLED_WR_CMD(uint8_t cmd)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af04      	add	r7, sp, #16
 80009e6:	4603      	mov	r3, r0
 80009e8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2 ,0x78,0x00,I2C_MEMADD_SIZE_8BIT,&cmd,1,0x100);
 80009ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009ee:	9302      	str	r3, [sp, #8]
 80009f0:	2301      	movs	r3, #1
 80009f2:	9301      	str	r3, [sp, #4]
 80009f4:	1dfb      	adds	r3, r7, #7
 80009f6:	9300      	str	r3, [sp, #0]
 80009f8:	2301      	movs	r3, #1
 80009fa:	2200      	movs	r2, #0
 80009fc:	2178      	movs	r1, #120	@ 0x78
 80009fe:	4803      	ldr	r0, [pc, #12]	@ (8000a0c <OLED_WR_CMD+0x2c>)
 8000a00:	f001 fc94 	bl	800232c <HAL_I2C_Mem_Write>
}
 8000a04:	bf00      	nop
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	200001a0 	.word	0x200001a0

08000a10 <OLED_WR_DATA>:
 * @description: 向设备写控制数据
 * @param {uint8_t} data 数据
 * @return {*}
 */
void OLED_WR_DATA(uint8_t data)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af04      	add	r7, sp, #16
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2 ,0x78,0x40,I2C_MEMADD_SIZE_8BIT,&data,1,0x100);
 8000a1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a1e:	9302      	str	r3, [sp, #8]
 8000a20:	2301      	movs	r3, #1
 8000a22:	9301      	str	r3, [sp, #4]
 8000a24:	1dfb      	adds	r3, r7, #7
 8000a26:	9300      	str	r3, [sp, #0]
 8000a28:	2301      	movs	r3, #1
 8000a2a:	2240      	movs	r2, #64	@ 0x40
 8000a2c:	2178      	movs	r1, #120	@ 0x78
 8000a2e:	4803      	ldr	r0, [pc, #12]	@ (8000a3c <OLED_WR_DATA+0x2c>)
 8000a30:	f001 fc7c 	bl	800232c <HAL_I2C_Mem_Write>
}
 8000a34:	bf00      	nop
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	200001a0 	.word	0x200001a0

08000a40 <OLED_Clear>:
 * @function: OLED_Clear(void)
 * @description: 清屏,整个屏幕是黑色的!和没点亮一样!!!
 * @return {*}
 */
void OLED_Clear(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i=0;i<8;i++)
 8000a46:	2300      	movs	r3, #0
 8000a48:	71fb      	strb	r3, [r7, #7]
 8000a4a:	e01b      	b.n	8000a84 <OLED_Clear+0x44>
	{
		OLED_WR_CMD(0xb0+i);    //设置页地址（0~7）
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	3b50      	subs	r3, #80	@ 0x50
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff ffc4 	bl	80009e0 <OLED_WR_CMD>
		OLED_WR_CMD(0x00);      //设置显示位置—列低地址
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f7ff ffc1 	bl	80009e0 <OLED_WR_CMD>
		OLED_WR_CMD(0x10);      //设置显示位置—列高地址
 8000a5e:	2010      	movs	r0, #16
 8000a60:	f7ff ffbe 	bl	80009e0 <OLED_WR_CMD>
		for(n=0;n<128;n++)
 8000a64:	2300      	movs	r3, #0
 8000a66:	71bb      	strb	r3, [r7, #6]
 8000a68:	e005      	b.n	8000a76 <OLED_Clear+0x36>
			OLED_WR_DATA(0);
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	f7ff ffd0 	bl	8000a10 <OLED_WR_DATA>
		for(n=0;n<128;n++)
 8000a70:	79bb      	ldrb	r3, [r7, #6]
 8000a72:	3301      	adds	r3, #1
 8000a74:	71bb      	strb	r3, [r7, #6]
 8000a76:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	daf5      	bge.n	8000a6a <OLED_Clear+0x2a>
	for(i=0;i<8;i++)
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	3301      	adds	r3, #1
 8000a82:	71fb      	strb	r3, [r7, #7]
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	2b07      	cmp	r3, #7
 8000a88:	d9e0      	bls.n	8000a4c <OLED_Clear+0xc>
	}
}
 8000a8a:	bf00      	nop
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <OLED_Set_Pos>:
 * @description: 坐标设置
 * @param {uint8_t} x,y
 * @return {*}
 */
void OLED_Set_Pos(uint8_t x, uint8_t y)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	460a      	mov	r2, r1
 8000a9e:	71fb      	strb	r3, [r7, #7]
 8000aa0:	4613      	mov	r3, r2
 8000aa2:	71bb      	strb	r3, [r7, #6]
	OLED_WR_CMD(0xb0+y);	//设置页地址（0~7）
 8000aa4:	79bb      	ldrb	r3, [r7, #6]
 8000aa6:	3b50      	subs	r3, #80	@ 0x50
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff ff98 	bl	80009e0 <OLED_WR_CMD>
	OLED_WR_CMD(((x&0xf0)>>4)|0x10); //设置显示位置—列高地址
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	091b      	lsrs	r3, r3, #4
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	f043 0310 	orr.w	r3, r3, #16
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff ff8f 	bl	80009e0 <OLED_WR_CMD>
	OLED_WR_CMD(x&0x0f);	//设置显示位置—列低地址
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	f003 030f 	and.w	r3, r3, #15
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff ff88 	bl	80009e0 <OLED_WR_CMD>
}
 8000ad0:	bf00      	nop
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <OLED_ShowChar>:
 * @param {uint8_t} Char_Size待显示字符的字体大小,选择字体 16/12
 * @param {uint8_t} Color_Turn是否反相显示(1反相、0不反相)
 * @return {*}
 */
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t Char_Size,uint8_t Color_Turn)
{
 8000ad8:	b590      	push	{r4, r7, lr}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4604      	mov	r4, r0
 8000ae0:	4608      	mov	r0, r1
 8000ae2:	4611      	mov	r1, r2
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	4623      	mov	r3, r4
 8000ae8:	71fb      	strb	r3, [r7, #7]
 8000aea:	4603      	mov	r3, r0
 8000aec:	71bb      	strb	r3, [r7, #6]
 8000aee:	460b      	mov	r3, r1
 8000af0:	717b      	strb	r3, [r7, #5]
 8000af2:	4613      	mov	r3, r2
 8000af4:	713b      	strb	r3, [r7, #4]
	unsigned char c=0,i=0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	73bb      	strb	r3, [r7, #14]
 8000afa:	2300      	movs	r3, #0
 8000afc:	73fb      	strb	r3, [r7, #15]
		c=chr-' ';//得到偏移后的值
 8000afe:	797b      	ldrb	r3, [r7, #5]
 8000b00:	3b20      	subs	r3, #32
 8000b02:	73bb      	strb	r3, [r7, #14]
		if(x>128-1){x=0;y=y+2;}
 8000b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	da04      	bge.n	8000b16 <OLED_ShowChar+0x3e>
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	71fb      	strb	r3, [r7, #7]
 8000b10:	79bb      	ldrb	r3, [r7, #6]
 8000b12:	3302      	adds	r3, #2
 8000b14:	71bb      	strb	r3, [r7, #6]
		if(Char_Size ==16)
 8000b16:	793b      	ldrb	r3, [r7, #4]
 8000b18:	2b10      	cmp	r3, #16
 8000b1a:	d154      	bne.n	8000bc6 <OLED_ShowChar+0xee>
		{
			OLED_Set_Pos(x,y);
 8000b1c:	79ba      	ldrb	r2, [r7, #6]
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	4611      	mov	r1, r2
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff ffb6 	bl	8000a94 <OLED_Set_Pos>
			for(i=0;i<8;i++)
 8000b28:	2300      	movs	r3, #0
 8000b2a:	73fb      	strb	r3, [r7, #15]
 8000b2c:	e01b      	b.n	8000b66 <OLED_ShowChar+0x8e>
				{
				  if(Color_Turn)
 8000b2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d00b      	beq.n	8000b4e <OLED_ShowChar+0x76>
					  OLED_WR_DATA(~F8X16[c*16+i]);
 8000b36:	7bbb      	ldrb	r3, [r7, #14]
 8000b38:	011a      	lsls	r2, r3, #4
 8000b3a:	7bfb      	ldrb	r3, [r7, #15]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	4a3c      	ldr	r2, [pc, #240]	@ (8000c30 <OLED_ShowChar+0x158>)
 8000b40:	5cd3      	ldrb	r3, [r2, r3]
 8000b42:	43db      	mvns	r3, r3
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff ff62 	bl	8000a10 <OLED_WR_DATA>
 8000b4c:	e008      	b.n	8000b60 <OLED_ShowChar+0x88>
				  else
					  OLED_WR_DATA(F8X16[c*16+i]);
 8000b4e:	7bbb      	ldrb	r3, [r7, #14]
 8000b50:	011a      	lsls	r2, r3, #4
 8000b52:	7bfb      	ldrb	r3, [r7, #15]
 8000b54:	4413      	add	r3, r2
 8000b56:	4a36      	ldr	r2, [pc, #216]	@ (8000c30 <OLED_ShowChar+0x158>)
 8000b58:	5cd3      	ldrb	r3, [r2, r3]
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f7ff ff58 	bl	8000a10 <OLED_WR_DATA>
			for(i=0;i<8;i++)
 8000b60:	7bfb      	ldrb	r3, [r7, #15]
 8000b62:	3301      	adds	r3, #1
 8000b64:	73fb      	strb	r3, [r7, #15]
 8000b66:	7bfb      	ldrb	r3, [r7, #15]
 8000b68:	2b07      	cmp	r3, #7
 8000b6a:	d9e0      	bls.n	8000b2e <OLED_ShowChar+0x56>
				}
			OLED_Set_Pos(x,y+1);
 8000b6c:	79bb      	ldrb	r3, [r7, #6]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	4611      	mov	r1, r2
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff ff8c 	bl	8000a94 <OLED_Set_Pos>
			for(i=0;i<8;i++)
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	73fb      	strb	r3, [r7, #15]
 8000b80:	e01d      	b.n	8000bbe <OLED_ShowChar+0xe6>
			    {
				  if(Color_Turn)
 8000b82:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d00c      	beq.n	8000ba4 <OLED_ShowChar+0xcc>
					  OLED_WR_DATA(~F8X16[c*16+i+8]);
 8000b8a:	7bbb      	ldrb	r3, [r7, #14]
 8000b8c:	011a      	lsls	r2, r3, #4
 8000b8e:	7bfb      	ldrb	r3, [r7, #15]
 8000b90:	4413      	add	r3, r2
 8000b92:	3308      	adds	r3, #8
 8000b94:	4a26      	ldr	r2, [pc, #152]	@ (8000c30 <OLED_ShowChar+0x158>)
 8000b96:	5cd3      	ldrb	r3, [r2, r3]
 8000b98:	43db      	mvns	r3, r3
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff ff37 	bl	8000a10 <OLED_WR_DATA>
 8000ba2:	e009      	b.n	8000bb8 <OLED_ShowChar+0xe0>
				  else
					  OLED_WR_DATA(F8X16[c*16+i+8]);
 8000ba4:	7bbb      	ldrb	r3, [r7, #14]
 8000ba6:	011a      	lsls	r2, r3, #4
 8000ba8:	7bfb      	ldrb	r3, [r7, #15]
 8000baa:	4413      	add	r3, r2
 8000bac:	3308      	adds	r3, #8
 8000bae:	4a20      	ldr	r2, [pc, #128]	@ (8000c30 <OLED_ShowChar+0x158>)
 8000bb0:	5cd3      	ldrb	r3, [r2, r3]
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff ff2c 	bl	8000a10 <OLED_WR_DATA>
			for(i=0;i<8;i++)
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	73fb      	strb	r3, [r7, #15]
 8000bbe:	7bfb      	ldrb	r3, [r7, #15]
 8000bc0:	2b07      	cmp	r3, #7
 8000bc2:	d9de      	bls.n	8000b82 <OLED_ShowChar+0xaa>
					  OLED_WR_DATA(~F6x8[c][i]);
				  else
					  OLED_WR_DATA(F6x8[c][i]);
			    }
		  }
}
 8000bc4:	e02f      	b.n	8000c26 <OLED_ShowChar+0x14e>
				OLED_Set_Pos(x,y);
 8000bc6:	79ba      	ldrb	r2, [r7, #6]
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	4611      	mov	r1, r2
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff ff61 	bl	8000a94 <OLED_Set_Pos>
				for(i=0;i<6;i++)
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	73fb      	strb	r3, [r7, #15]
 8000bd6:	e023      	b.n	8000c20 <OLED_ShowChar+0x148>
				  if(Color_Turn)
 8000bd8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d00f      	beq.n	8000c00 <OLED_ShowChar+0x128>
					  OLED_WR_DATA(~F6x8[c][i]);
 8000be0:	7bba      	ldrb	r2, [r7, #14]
 8000be2:	7bf9      	ldrb	r1, [r7, #15]
 8000be4:	4813      	ldr	r0, [pc, #76]	@ (8000c34 <OLED_ShowChar+0x15c>)
 8000be6:	4613      	mov	r3, r2
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	4413      	add	r3, r2
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	4403      	add	r3, r0
 8000bf0:	440b      	add	r3, r1
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff ff09 	bl	8000a10 <OLED_WR_DATA>
 8000bfe:	e00c      	b.n	8000c1a <OLED_ShowChar+0x142>
					  OLED_WR_DATA(F6x8[c][i]);
 8000c00:	7bba      	ldrb	r2, [r7, #14]
 8000c02:	7bf9      	ldrb	r1, [r7, #15]
 8000c04:	480b      	ldr	r0, [pc, #44]	@ (8000c34 <OLED_ShowChar+0x15c>)
 8000c06:	4613      	mov	r3, r2
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	4413      	add	r3, r2
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	4403      	add	r3, r0
 8000c10:	440b      	add	r3, r1
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff fefb 	bl	8000a10 <OLED_WR_DATA>
				for(i=0;i<6;i++)
 8000c1a:	7bfb      	ldrb	r3, [r7, #15]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	73fb      	strb	r3, [r7, #15]
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
 8000c22:	2b05      	cmp	r3, #5
 8000c24:	d9d8      	bls.n	8000bd8 <OLED_ShowChar+0x100>
}
 8000c26:	bf00      	nop
 8000c28:	3714      	adds	r7, #20
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd90      	pop	{r4, r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	08005d2c 	.word	0x08005d2c
 8000c34:	08005b04 	.word	0x08005b04

08000c38 <OLED_ShowString>:
 * @param {uint8_t} Char_Size待显示字符串的字体大小,选择字体 16/12，16为8X16，12为6x8
 * @param {uint8_t} Color_Turn是否反相显示(1反相、0不反相)
 * @return {*}
 */
void OLED_ShowString(uint8_t x,uint8_t y,char*chr,uint8_t Char_Size, uint8_t Color_Turn)
{
 8000c38:	b590      	push	{r4, r7, lr}
 8000c3a:	b087      	sub	sp, #28
 8000c3c:	af02      	add	r7, sp, #8
 8000c3e:	603a      	str	r2, [r7, #0]
 8000c40:	461a      	mov	r2, r3
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]
 8000c46:	460b      	mov	r3, r1
 8000c48:	71bb      	strb	r3, [r7, #6]
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	717b      	strb	r3, [r7, #5]
	uint8_t  j=0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	73fb      	strb	r3, [r7, #15]
	while (chr[j]!='\0')
 8000c52:	e02f      	b.n	8000cb4 <OLED_ShowString+0x7c>
	{		OLED_ShowChar(x,y,chr[j],Char_Size, Color_Turn);
 8000c54:	7bfb      	ldrb	r3, [r7, #15]
 8000c56:	683a      	ldr	r2, [r7, #0]
 8000c58:	4413      	add	r3, r2
 8000c5a:	781a      	ldrb	r2, [r3, #0]
 8000c5c:	797c      	ldrb	r4, [r7, #5]
 8000c5e:	79b9      	ldrb	r1, [r7, #6]
 8000c60:	79f8      	ldrb	r0, [r7, #7]
 8000c62:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c66:	9300      	str	r3, [sp, #0]
 8000c68:	4623      	mov	r3, r4
 8000c6a:	f7ff ff35 	bl	8000ad8 <OLED_ShowChar>
			if (Char_Size == 12) //6X8的字体列加6，显示下一个字符
 8000c6e:	797b      	ldrb	r3, [r7, #5]
 8000c70:	2b0c      	cmp	r3, #12
 8000c72:	d103      	bne.n	8000c7c <OLED_ShowString+0x44>
				x += 6;
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	3306      	adds	r3, #6
 8000c78:	71fb      	strb	r3, [r7, #7]
 8000c7a:	e002      	b.n	8000c82 <OLED_ShowString+0x4a>
			else  //8X16的字体列加8，显示下一个字符
				x += 8;
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	3308      	adds	r3, #8
 8000c80:	71fb      	strb	r3, [r7, #7]

			if (x > 122 && Char_Size==12) //TextSize6x8如果一行不够显示了，从下一行继续显示
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	2b7a      	cmp	r3, #122	@ 0x7a
 8000c86:	d907      	bls.n	8000c98 <OLED_ShowString+0x60>
 8000c88:	797b      	ldrb	r3, [r7, #5]
 8000c8a:	2b0c      	cmp	r3, #12
 8000c8c:	d104      	bne.n	8000c98 <OLED_ShowString+0x60>
			{
				x = 0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	71fb      	strb	r3, [r7, #7]
				y++;
 8000c92:	79bb      	ldrb	r3, [r7, #6]
 8000c94:	3301      	adds	r3, #1
 8000c96:	71bb      	strb	r3, [r7, #6]
			}
			if (x > 120 && Char_Size== 16) //TextSize8x16如果一行不够显示了，从下一行继续显示
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	2b78      	cmp	r3, #120	@ 0x78
 8000c9c:	d907      	bls.n	8000cae <OLED_ShowString+0x76>
 8000c9e:	797b      	ldrb	r3, [r7, #5]
 8000ca0:	2b10      	cmp	r3, #16
 8000ca2:	d104      	bne.n	8000cae <OLED_ShowString+0x76>
			{
				x = 0;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	71fb      	strb	r3, [r7, #7]
				y++;
 8000ca8:	79bb      	ldrb	r3, [r7, #6]
 8000caa:	3301      	adds	r3, #1
 8000cac:	71bb      	strb	r3, [r7, #6]
			}
			j++;
 8000cae:	7bfb      	ldrb	r3, [r7, #15]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	73fb      	strb	r3, [r7, #15]
	while (chr[j]!='\0')
 8000cb4:	7bfb      	ldrb	r3, [r7, #15]
 8000cb6:	683a      	ldr	r2, [r7, #0]
 8000cb8:	4413      	add	r3, r2
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d1c9      	bne.n	8000c54 <OLED_ShowString+0x1c>
	}
}
 8000cc0:	bf00      	nop
 8000cc2:	bf00      	nop
 8000cc4:	3714      	adds	r7, #20
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd90      	pop	{r4, r7, pc}

08000cca <OLED_DrawBMP>:
 * @param {uint8_t} *BMP待显示的图像数据
 * @param {uint8_t} Color_Turn是否反相显示(1反相、0不反相)
 * @return {*}
 */
void OLED_DrawBMP(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t *  BMP,uint8_t Color_Turn)
{
 8000cca:	b590      	push	{r4, r7, lr}
 8000ccc:	b085      	sub	sp, #20
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	4608      	mov	r0, r1
 8000cd4:	4611      	mov	r1, r2
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	4623      	mov	r3, r4
 8000cda:	71fb      	strb	r3, [r7, #7]
 8000cdc:	4603      	mov	r3, r0
 8000cde:	71bb      	strb	r3, [r7, #6]
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	717b      	strb	r3, [r7, #5]
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	713b      	strb	r3, [r7, #4]
   uint32_t j = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60fb      	str	r3, [r7, #12]
   uint8_t x = 0, y = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	72fb      	strb	r3, [r7, #11]
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	72bb      	strb	r3, [r7, #10]

  if(y1%8==0)
 8000cf4:	793b      	ldrb	r3, [r7, #4]
 8000cf6:	f003 0307 	and.w	r3, r3, #7
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d103      	bne.n	8000d08 <OLED_DrawBMP+0x3e>
		y = y1/8;
 8000d00:	793b      	ldrb	r3, [r7, #4]
 8000d02:	08db      	lsrs	r3, r3, #3
 8000d04:	72bb      	strb	r3, [r7, #10]
 8000d06:	e004      	b.n	8000d12 <OLED_DrawBMP+0x48>
  else
		y = y1/8 + 1;
 8000d08:	793b      	ldrb	r3, [r7, #4]
 8000d0a:	08db      	lsrs	r3, r3, #3
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	3301      	adds	r3, #1
 8000d10:	72bb      	strb	r3, [r7, #10]
	for(y=y0;y<y1;y++)
 8000d12:	79bb      	ldrb	r3, [r7, #6]
 8000d14:	72bb      	strb	r3, [r7, #10]
 8000d16:	e02b      	b.n	8000d70 <OLED_DrawBMP+0xa6>
	{
		OLED_Set_Pos(x0,y);
 8000d18:	7aba      	ldrb	r2, [r7, #10]
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	4611      	mov	r1, r2
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff feb8 	bl	8000a94 <OLED_Set_Pos>
    for(x=x0;x<x1;x++)
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	72fb      	strb	r3, [r7, #11]
 8000d28:	e01b      	b.n	8000d62 <OLED_DrawBMP+0x98>
		{
			if (Color_Turn)
 8000d2a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d00b      	beq.n	8000d4a <OLED_DrawBMP+0x80>
				OLED_WR_DATA(~BMP[j++]);//显示反相图片
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	1c5a      	adds	r2, r3, #1
 8000d36:	60fa      	str	r2, [r7, #12]
 8000d38:	6a3a      	ldr	r2, [r7, #32]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	43db      	mvns	r3, r3
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fe64 	bl	8000a10 <OLED_WR_DATA>
 8000d48:	e008      	b.n	8000d5c <OLED_DrawBMP+0x92>
			else
				OLED_WR_DATA(BMP[j++]);//显示图片
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	1c5a      	adds	r2, r3, #1
 8000d4e:	60fa      	str	r2, [r7, #12]
 8000d50:	6a3a      	ldr	r2, [r7, #32]
 8000d52:	4413      	add	r3, r2
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff fe5a 	bl	8000a10 <OLED_WR_DATA>
    for(x=x0;x<x1;x++)
 8000d5c:	7afb      	ldrb	r3, [r7, #11]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	72fb      	strb	r3, [r7, #11]
 8000d62:	7afa      	ldrb	r2, [r7, #11]
 8000d64:	797b      	ldrb	r3, [r7, #5]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d3df      	bcc.n	8000d2a <OLED_DrawBMP+0x60>
	for(y=y0;y<y1;y++)
 8000d6a:	7abb      	ldrb	r3, [r7, #10]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	72bb      	strb	r3, [r7, #10]
 8000d70:	7aba      	ldrb	r2, [r7, #10]
 8000d72:	793b      	ldrb	r3, [r7, #4]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d3cf      	bcc.n	8000d18 <OLED_DrawBMP+0x4e>

		}
	}
}
 8000d78:	bf00      	nop
 8000d7a:	bf00      	nop
 8000d7c:	3714      	adds	r7, #20
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd90      	pop	{r4, r7, pc}
	...

08000d84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d8a:	4b15      	ldr	r3, [pc, #84]	@ (8000de0 <HAL_MspInit+0x5c>)
 8000d8c:	699b      	ldr	r3, [r3, #24]
 8000d8e:	4a14      	ldr	r2, [pc, #80]	@ (8000de0 <HAL_MspInit+0x5c>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	6193      	str	r3, [r2, #24]
 8000d96:	4b12      	ldr	r3, [pc, #72]	@ (8000de0 <HAL_MspInit+0x5c>)
 8000d98:	699b      	ldr	r3, [r3, #24]
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	60bb      	str	r3, [r7, #8]
 8000da0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da2:	4b0f      	ldr	r3, [pc, #60]	@ (8000de0 <HAL_MspInit+0x5c>)
 8000da4:	69db      	ldr	r3, [r3, #28]
 8000da6:	4a0e      	ldr	r2, [pc, #56]	@ (8000de0 <HAL_MspInit+0x5c>)
 8000da8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dac:	61d3      	str	r3, [r2, #28]
 8000dae:	4b0c      	ldr	r3, [pc, #48]	@ (8000de0 <HAL_MspInit+0x5c>)
 8000db0:	69db      	ldr	r3, [r3, #28]
 8000db2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000dba:	4b0a      	ldr	r3, [pc, #40]	@ (8000de4 <HAL_MspInit+0x60>)
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	4a04      	ldr	r2, [pc, #16]	@ (8000de4 <HAL_MspInit+0x60>)
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	3714      	adds	r7, #20
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bc80      	pop	{r7}
 8000dde:	4770      	bx	lr
 8000de0:	40021000 	.word	0x40021000
 8000de4:	40010000 	.word	0x40010000

08000de8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dec:	bf00      	nop
 8000dee:	e7fd      	b.n	8000dec <NMI_Handler+0x4>

08000df0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df4:	bf00      	nop
 8000df6:	e7fd      	b.n	8000df4 <HardFault_Handler+0x4>

08000df8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dfc:	bf00      	nop
 8000dfe:	e7fd      	b.n	8000dfc <MemManage_Handler+0x4>

08000e00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e04:	bf00      	nop
 8000e06:	e7fd      	b.n	8000e04 <BusFault_Handler+0x4>

08000e08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <UsageFault_Handler+0x4>

08000e10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr

08000e1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr

08000e28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bc80      	pop	{r7}
 8000e32:	4770      	bx	lr

08000e34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e38:	f000 fc04 	bl	8001644 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000e44:	2001      	movs	r0, #1
 8000e46:	f001 f915 	bl	8002074 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000e54:	4802      	ldr	r0, [pc, #8]	@ (8000e60 <DMA1_Channel4_IRQHandler+0x10>)
 8000e56:	f000 fe51 	bl	8001afc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	200003c0 	.word	0x200003c0

08000e64 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000e68:	4802      	ldr	r0, [pc, #8]	@ (8000e74 <DMA1_Channel5_IRQHandler+0x10>)
 8000e6a:	f000 fe47 	bl	8001afc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	2000037c 	.word	0x2000037c

08000e78 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000e7c:	4802      	ldr	r0, [pc, #8]	@ (8000e88 <DMA1_Channel6_IRQHandler+0x10>)
 8000e7e:	f000 fe3d 	bl	8001afc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000404 	.word	0x20000404

08000e8c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000e90:	4802      	ldr	r0, [pc, #8]	@ (8000e9c <DMA1_Channel7_IRQHandler+0x10>)
 8000e92:	f000 fe33 	bl	8001afc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000448 	.word	0x20000448

08000ea0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ea4:	4802      	ldr	r0, [pc, #8]	@ (8000eb0 <USART1_IRQHandler+0x10>)
 8000ea6:	f003 fc05 	bl	80046b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	200002ec 	.word	0x200002ec

08000eb4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000eb8:	4802      	ldr	r0, [pc, #8]	@ (8000ec4 <USART2_IRQHandler+0x10>)
 8000eba:	f003 fbfb 	bl	80046b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000334 	.word	0x20000334

08000ec8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ed0:	4a14      	ldr	r2, [pc, #80]	@ (8000f24 <_sbrk+0x5c>)
 8000ed2:	4b15      	ldr	r3, [pc, #84]	@ (8000f28 <_sbrk+0x60>)
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000edc:	4b13      	ldr	r3, [pc, #76]	@ (8000f2c <_sbrk+0x64>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d102      	bne.n	8000eea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ee4:	4b11      	ldr	r3, [pc, #68]	@ (8000f2c <_sbrk+0x64>)
 8000ee6:	4a12      	ldr	r2, [pc, #72]	@ (8000f30 <_sbrk+0x68>)
 8000ee8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eea:	4b10      	ldr	r3, [pc, #64]	@ (8000f2c <_sbrk+0x64>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d207      	bcs.n	8000f08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ef8:	f004 f952 	bl	80051a0 <__errno>
 8000efc:	4603      	mov	r3, r0
 8000efe:	220c      	movs	r2, #12
 8000f00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f02:	f04f 33ff 	mov.w	r3, #4294967295
 8000f06:	e009      	b.n	8000f1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f08:	4b08      	ldr	r3, [pc, #32]	@ (8000f2c <_sbrk+0x64>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f0e:	4b07      	ldr	r3, [pc, #28]	@ (8000f2c <_sbrk+0x64>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4413      	add	r3, r2
 8000f16:	4a05      	ldr	r2, [pc, #20]	@ (8000f2c <_sbrk+0x64>)
 8000f18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3718      	adds	r7, #24
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20005000 	.word	0x20005000
 8000f28:	00000400 	.word	0x00000400
 8000f2c:	20000258 	.word	0x20000258
 8000f30:	200005d8 	.word	0x200005d8

08000f34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr

08000f40 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b096      	sub	sp, #88	@ 0x58
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f46:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f54:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
 8000f6c:	611a      	str	r2, [r3, #16]
 8000f6e:	615a      	str	r2, [r3, #20]
 8000f70:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	2220      	movs	r2, #32
 8000f76:	2100      	movs	r1, #0
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f004 f909 	bl	8005190 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f7e:	4b50      	ldr	r3, [pc, #320]	@ (80010c0 <MX_TIM1_Init+0x180>)
 8000f80:	4a50      	ldr	r2, [pc, #320]	@ (80010c4 <MX_TIM1_Init+0x184>)
 8000f82:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000f84:	4b4e      	ldr	r3, [pc, #312]	@ (80010c0 <MX_TIM1_Init+0x180>)
 8000f86:	2247      	movs	r2, #71	@ 0x47
 8000f88:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f8a:	4b4d      	ldr	r3, [pc, #308]	@ (80010c0 <MX_TIM1_Init+0x180>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8000f90:	4b4b      	ldr	r3, [pc, #300]	@ (80010c0 <MX_TIM1_Init+0x180>)
 8000f92:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000f96:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f98:	4b49      	ldr	r3, [pc, #292]	@ (80010c0 <MX_TIM1_Init+0x180>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f9e:	4b48      	ldr	r3, [pc, #288]	@ (80010c0 <MX_TIM1_Init+0x180>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fa4:	4b46      	ldr	r3, [pc, #280]	@ (80010c0 <MX_TIM1_Init+0x180>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000faa:	4845      	ldr	r0, [pc, #276]	@ (80010c0 <MX_TIM1_Init+0x180>)
 8000fac:	f002 fcf0 	bl	8003990 <HAL_TIM_Base_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000fb6:	f7ff fcee 	bl	8000996 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fbe:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fc0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	483e      	ldr	r0, [pc, #248]	@ (80010c0 <MX_TIM1_Init+0x180>)
 8000fc8:	f002 fe96 	bl	8003cf8 <HAL_TIM_ConfigClockSource>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000fd2:	f7ff fce0 	bl	8000996 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fd6:	483a      	ldr	r0, [pc, #232]	@ (80010c0 <MX_TIM1_Init+0x180>)
 8000fd8:	f002 fd74 	bl	8003ac4 <HAL_TIM_PWM_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000fe2:	f7ff fcd8 	bl	8000996 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fea:	2300      	movs	r3, #0
 8000fec:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fee:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4832      	ldr	r0, [pc, #200]	@ (80010c0 <MX_TIM1_Init+0x180>)
 8000ff6:	f003 f9d3 	bl	80043a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001000:	f7ff fcc9 	bl	8000996 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001004:	2360      	movs	r3, #96	@ 0x60
 8001006:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800100c:	2300      	movs	r3, #0
 800100e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001010:	2300      	movs	r3, #0
 8001012:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001014:	2300      	movs	r3, #0
 8001016:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001018:	2300      	movs	r3, #0
 800101a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800101c:	2300      	movs	r3, #0
 800101e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001020:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001024:	2200      	movs	r2, #0
 8001026:	4619      	mov	r1, r3
 8001028:	4825      	ldr	r0, [pc, #148]	@ (80010c0 <MX_TIM1_Init+0x180>)
 800102a:	f002 fda3 	bl	8003b74 <HAL_TIM_PWM_ConfigChannel>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001034:	f7ff fcaf 	bl	8000996 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001038:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800103c:	2204      	movs	r2, #4
 800103e:	4619      	mov	r1, r3
 8001040:	481f      	ldr	r0, [pc, #124]	@ (80010c0 <MX_TIM1_Init+0x180>)
 8001042:	f002 fd97 	bl	8003b74 <HAL_TIM_PWM_ConfigChannel>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800104c:	f7ff fca3 	bl	8000996 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001050:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001054:	2208      	movs	r2, #8
 8001056:	4619      	mov	r1, r3
 8001058:	4819      	ldr	r0, [pc, #100]	@ (80010c0 <MX_TIM1_Init+0x180>)
 800105a:	f002 fd8b 	bl	8003b74 <HAL_TIM_PWM_ConfigChannel>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001064:	f7ff fc97 	bl	8000996 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001068:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800106c:	220c      	movs	r2, #12
 800106e:	4619      	mov	r1, r3
 8001070:	4813      	ldr	r0, [pc, #76]	@ (80010c0 <MX_TIM1_Init+0x180>)
 8001072:	f002 fd7f 	bl	8003b74 <HAL_TIM_PWM_ConfigChannel>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 800107c:	f7ff fc8b 	bl	8000996 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001080:	2300      	movs	r3, #0
 8001082:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001084:	2300      	movs	r3, #0
 8001086:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001088:	2300      	movs	r3, #0
 800108a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001094:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001098:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800109a:	2300      	movs	r3, #0
 800109c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	4619      	mov	r1, r3
 80010a2:	4807      	ldr	r0, [pc, #28]	@ (80010c0 <MX_TIM1_Init+0x180>)
 80010a4:	f003 f9da 	bl	800445c <HAL_TIMEx_ConfigBreakDeadTime>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80010ae:	f7ff fc72 	bl	8000996 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010b2:	4803      	ldr	r0, [pc, #12]	@ (80010c0 <MX_TIM1_Init+0x180>)
 80010b4:	f000 f884 	bl	80011c0 <HAL_TIM_MspPostInit>

}
 80010b8:	bf00      	nop
 80010ba:	3758      	adds	r7, #88	@ 0x58
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	2000025c 	.word	0x2000025c
 80010c4:	40012c00 	.word	0x40012c00

080010c8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ce:	f107 0308 	add.w	r3, r7, #8
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010dc:	463b      	mov	r3, r7
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010e4:	4b1d      	ldr	r3, [pc, #116]	@ (800115c <MX_TIM2_Init+0x94>)
 80010e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80010ec:	4b1b      	ldr	r3, [pc, #108]	@ (800115c <MX_TIM2_Init+0x94>)
 80010ee:	2247      	movs	r2, #71	@ 0x47
 80010f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f2:	4b1a      	ldr	r3, [pc, #104]	@ (800115c <MX_TIM2_Init+0x94>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80010f8:	4b18      	ldr	r3, [pc, #96]	@ (800115c <MX_TIM2_Init+0x94>)
 80010fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001100:	4b16      	ldr	r3, [pc, #88]	@ (800115c <MX_TIM2_Init+0x94>)
 8001102:	2200      	movs	r2, #0
 8001104:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001106:	4b15      	ldr	r3, [pc, #84]	@ (800115c <MX_TIM2_Init+0x94>)
 8001108:	2200      	movs	r2, #0
 800110a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800110c:	4813      	ldr	r0, [pc, #76]	@ (800115c <MX_TIM2_Init+0x94>)
 800110e:	f002 fc3f 	bl	8003990 <HAL_TIM_Base_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001118:	f7ff fc3d 	bl	8000996 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800111c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001120:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001122:	f107 0308 	add.w	r3, r7, #8
 8001126:	4619      	mov	r1, r3
 8001128:	480c      	ldr	r0, [pc, #48]	@ (800115c <MX_TIM2_Init+0x94>)
 800112a:	f002 fde5 	bl	8003cf8 <HAL_TIM_ConfigClockSource>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001134:	f7ff fc2f 	bl	8000996 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001138:	2300      	movs	r3, #0
 800113a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800113c:	2300      	movs	r3, #0
 800113e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001140:	463b      	mov	r3, r7
 8001142:	4619      	mov	r1, r3
 8001144:	4805      	ldr	r0, [pc, #20]	@ (800115c <MX_TIM2_Init+0x94>)
 8001146:	f003 f92b 	bl	80043a0 <HAL_TIMEx_MasterConfigSynchronization>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001150:	f7ff fc21 	bl	8000996 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001154:	bf00      	nop
 8001156:	3718      	adds	r7, #24
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	200002a4 	.word	0x200002a4

08001160 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a12      	ldr	r2, [pc, #72]	@ (80011b8 <HAL_TIM_Base_MspInit+0x58>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d10c      	bne.n	800118c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001172:	4b12      	ldr	r3, [pc, #72]	@ (80011bc <HAL_TIM_Base_MspInit+0x5c>)
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	4a11      	ldr	r2, [pc, #68]	@ (80011bc <HAL_TIM_Base_MspInit+0x5c>)
 8001178:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800117c:	6193      	str	r3, [r2, #24]
 800117e:	4b0f      	ldr	r3, [pc, #60]	@ (80011bc <HAL_TIM_Base_MspInit+0x5c>)
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800118a:	e010      	b.n	80011ae <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM2)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001194:	d10b      	bne.n	80011ae <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001196:	4b09      	ldr	r3, [pc, #36]	@ (80011bc <HAL_TIM_Base_MspInit+0x5c>)
 8001198:	69db      	ldr	r3, [r3, #28]
 800119a:	4a08      	ldr	r2, [pc, #32]	@ (80011bc <HAL_TIM_Base_MspInit+0x5c>)
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	61d3      	str	r3, [r2, #28]
 80011a2:	4b06      	ldr	r3, [pc, #24]	@ (80011bc <HAL_TIM_Base_MspInit+0x5c>)
 80011a4:	69db      	ldr	r3, [r3, #28]
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	68bb      	ldr	r3, [r7, #8]
}
 80011ae:	bf00      	nop
 80011b0:	3714      	adds	r7, #20
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr
 80011b8:	40012c00 	.word	0x40012c00
 80011bc:	40021000 	.word	0x40021000

080011c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b088      	sub	sp, #32
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 0310 	add.w	r3, r7, #16
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a10      	ldr	r2, [pc, #64]	@ (800121c <HAL_TIM_MspPostInit+0x5c>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d118      	bne.n	8001212 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001220 <HAL_TIM_MspPostInit+0x60>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	4a0e      	ldr	r2, [pc, #56]	@ (8001220 <HAL_TIM_MspPostInit+0x60>)
 80011e6:	f043 0304 	orr.w	r3, r3, #4
 80011ea:	6193      	str	r3, [r2, #24]
 80011ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001220 <HAL_TIM_MspPostInit+0x60>)
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	f003 0304 	and.w	r3, r3, #4
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80011f8:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80011fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fe:	2302      	movs	r3, #2
 8001200:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2302      	movs	r3, #2
 8001204:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001206:	f107 0310 	add.w	r3, r7, #16
 800120a:	4619      	mov	r1, r3
 800120c:	4805      	ldr	r0, [pc, #20]	@ (8001224 <HAL_TIM_MspPostInit+0x64>)
 800120e:	f000 fd7b 	bl	8001d08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001212:	bf00      	nop
 8001214:	3720      	adds	r7, #32
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40012c00 	.word	0x40012c00
 8001220:	40021000 	.word	0x40021000
 8001224:	40010800 	.word	0x40010800

08001228 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800122c:	4b11      	ldr	r3, [pc, #68]	@ (8001274 <MX_USART1_UART_Init+0x4c>)
 800122e:	4a12      	ldr	r2, [pc, #72]	@ (8001278 <MX_USART1_UART_Init+0x50>)
 8001230:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001232:	4b10      	ldr	r3, [pc, #64]	@ (8001274 <MX_USART1_UART_Init+0x4c>)
 8001234:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001238:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800123a:	4b0e      	ldr	r3, [pc, #56]	@ (8001274 <MX_USART1_UART_Init+0x4c>)
 800123c:	2200      	movs	r2, #0
 800123e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001240:	4b0c      	ldr	r3, [pc, #48]	@ (8001274 <MX_USART1_UART_Init+0x4c>)
 8001242:	2200      	movs	r2, #0
 8001244:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001246:	4b0b      	ldr	r3, [pc, #44]	@ (8001274 <MX_USART1_UART_Init+0x4c>)
 8001248:	2200      	movs	r2, #0
 800124a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800124c:	4b09      	ldr	r3, [pc, #36]	@ (8001274 <MX_USART1_UART_Init+0x4c>)
 800124e:	220c      	movs	r2, #12
 8001250:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001252:	4b08      	ldr	r3, [pc, #32]	@ (8001274 <MX_USART1_UART_Init+0x4c>)
 8001254:	2200      	movs	r2, #0
 8001256:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001258:	4b06      	ldr	r3, [pc, #24]	@ (8001274 <MX_USART1_UART_Init+0x4c>)
 800125a:	2200      	movs	r2, #0
 800125c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800125e:	4805      	ldr	r0, [pc, #20]	@ (8001274 <MX_USART1_UART_Init+0x4c>)
 8001260:	f003 f94d 	bl	80044fe <HAL_UART_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800126a:	f7ff fb94 	bl	8000996 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	200002ec 	.word	0x200002ec
 8001278:	40013800 	.word	0x40013800

0800127c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001280:	4b11      	ldr	r3, [pc, #68]	@ (80012c8 <MX_USART2_UART_Init+0x4c>)
 8001282:	4a12      	ldr	r2, [pc, #72]	@ (80012cc <MX_USART2_UART_Init+0x50>)
 8001284:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001286:	4b10      	ldr	r3, [pc, #64]	@ (80012c8 <MX_USART2_UART_Init+0x4c>)
 8001288:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800128c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800128e:	4b0e      	ldr	r3, [pc, #56]	@ (80012c8 <MX_USART2_UART_Init+0x4c>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001294:	4b0c      	ldr	r3, [pc, #48]	@ (80012c8 <MX_USART2_UART_Init+0x4c>)
 8001296:	2200      	movs	r2, #0
 8001298:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800129a:	4b0b      	ldr	r3, [pc, #44]	@ (80012c8 <MX_USART2_UART_Init+0x4c>)
 800129c:	2200      	movs	r2, #0
 800129e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012a0:	4b09      	ldr	r3, [pc, #36]	@ (80012c8 <MX_USART2_UART_Init+0x4c>)
 80012a2:	220c      	movs	r2, #12
 80012a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012a6:	4b08      	ldr	r3, [pc, #32]	@ (80012c8 <MX_USART2_UART_Init+0x4c>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012ac:	4b06      	ldr	r3, [pc, #24]	@ (80012c8 <MX_USART2_UART_Init+0x4c>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012b2:	4805      	ldr	r0, [pc, #20]	@ (80012c8 <MX_USART2_UART_Init+0x4c>)
 80012b4:	f003 f923 	bl	80044fe <HAL_UART_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012be:	f7ff fb6a 	bl	8000996 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000334 	.word	0x20000334
 80012cc:	40004400 	.word	0x40004400

080012d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08c      	sub	sp, #48	@ 0x30
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d8:	f107 031c 	add.w	r3, r7, #28
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a92      	ldr	r2, [pc, #584]	@ (8001534 <HAL_UART_MspInit+0x264>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	f040 8093 	bne.w	8001418 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012f2:	4b91      	ldr	r3, [pc, #580]	@ (8001538 <HAL_UART_MspInit+0x268>)
 80012f4:	699b      	ldr	r3, [r3, #24]
 80012f6:	4a90      	ldr	r2, [pc, #576]	@ (8001538 <HAL_UART_MspInit+0x268>)
 80012f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012fc:	6193      	str	r3, [r2, #24]
 80012fe:	4b8e      	ldr	r3, [pc, #568]	@ (8001538 <HAL_UART_MspInit+0x268>)
 8001300:	699b      	ldr	r3, [r3, #24]
 8001302:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001306:	61bb      	str	r3, [r7, #24]
 8001308:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800130a:	4b8b      	ldr	r3, [pc, #556]	@ (8001538 <HAL_UART_MspInit+0x268>)
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	4a8a      	ldr	r2, [pc, #552]	@ (8001538 <HAL_UART_MspInit+0x268>)
 8001310:	f043 0308 	orr.w	r3, r3, #8
 8001314:	6193      	str	r3, [r2, #24]
 8001316:	4b88      	ldr	r3, [pc, #544]	@ (8001538 <HAL_UART_MspInit+0x268>)
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	f003 0308 	and.w	r3, r3, #8
 800131e:	617b      	str	r3, [r7, #20]
 8001320:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001322:	2340      	movs	r3, #64	@ 0x40
 8001324:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001326:	2302      	movs	r3, #2
 8001328:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800132a:	2303      	movs	r3, #3
 800132c:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132e:	f107 031c 	add.w	r3, r7, #28
 8001332:	4619      	mov	r1, r3
 8001334:	4881      	ldr	r0, [pc, #516]	@ (800153c <HAL_UART_MspInit+0x26c>)
 8001336:	f000 fce7 	bl	8001d08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800133a:	2380      	movs	r3, #128	@ 0x80
 800133c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800133e:	2300      	movs	r3, #0
 8001340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001346:	f107 031c 	add.w	r3, r7, #28
 800134a:	4619      	mov	r1, r3
 800134c:	487b      	ldr	r0, [pc, #492]	@ (800153c <HAL_UART_MspInit+0x26c>)
 800134e:	f000 fcdb 	bl	8001d08 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001352:	4b7b      	ldr	r3, [pc, #492]	@ (8001540 <HAL_UART_MspInit+0x270>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800135a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800135e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001362:	f043 0304 	orr.w	r3, r3, #4
 8001366:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001368:	4a75      	ldr	r2, [pc, #468]	@ (8001540 <HAL_UART_MspInit+0x270>)
 800136a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800136c:	6053      	str	r3, [r2, #4]

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800136e:	4b75      	ldr	r3, [pc, #468]	@ (8001544 <HAL_UART_MspInit+0x274>)
 8001370:	4a75      	ldr	r2, [pc, #468]	@ (8001548 <HAL_UART_MspInit+0x278>)
 8001372:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001374:	4b73      	ldr	r3, [pc, #460]	@ (8001544 <HAL_UART_MspInit+0x274>)
 8001376:	2200      	movs	r2, #0
 8001378:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800137a:	4b72      	ldr	r3, [pc, #456]	@ (8001544 <HAL_UART_MspInit+0x274>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001380:	4b70      	ldr	r3, [pc, #448]	@ (8001544 <HAL_UART_MspInit+0x274>)
 8001382:	2280      	movs	r2, #128	@ 0x80
 8001384:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001386:	4b6f      	ldr	r3, [pc, #444]	@ (8001544 <HAL_UART_MspInit+0x274>)
 8001388:	2200      	movs	r2, #0
 800138a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800138c:	4b6d      	ldr	r3, [pc, #436]	@ (8001544 <HAL_UART_MspInit+0x274>)
 800138e:	2200      	movs	r2, #0
 8001390:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001392:	4b6c      	ldr	r3, [pc, #432]	@ (8001544 <HAL_UART_MspInit+0x274>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001398:	4b6a      	ldr	r3, [pc, #424]	@ (8001544 <HAL_UART_MspInit+0x274>)
 800139a:	2200      	movs	r2, #0
 800139c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800139e:	4869      	ldr	r0, [pc, #420]	@ (8001544 <HAL_UART_MspInit+0x274>)
 80013a0:	f000 fa9e 	bl	80018e0 <HAL_DMA_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 80013aa:	f7ff faf4 	bl	8000996 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a64      	ldr	r2, [pc, #400]	@ (8001544 <HAL_UART_MspInit+0x274>)
 80013b2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80013b4:	4a63      	ldr	r2, [pc, #396]	@ (8001544 <HAL_UART_MspInit+0x274>)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80013ba:	4b64      	ldr	r3, [pc, #400]	@ (800154c <HAL_UART_MspInit+0x27c>)
 80013bc:	4a64      	ldr	r2, [pc, #400]	@ (8001550 <HAL_UART_MspInit+0x280>)
 80013be:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013c0:	4b62      	ldr	r3, [pc, #392]	@ (800154c <HAL_UART_MspInit+0x27c>)
 80013c2:	2210      	movs	r2, #16
 80013c4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013c6:	4b61      	ldr	r3, [pc, #388]	@ (800154c <HAL_UART_MspInit+0x27c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013cc:	4b5f      	ldr	r3, [pc, #380]	@ (800154c <HAL_UART_MspInit+0x27c>)
 80013ce:	2280      	movs	r2, #128	@ 0x80
 80013d0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013d2:	4b5e      	ldr	r3, [pc, #376]	@ (800154c <HAL_UART_MspInit+0x27c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013d8:	4b5c      	ldr	r3, [pc, #368]	@ (800154c <HAL_UART_MspInit+0x27c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80013de:	4b5b      	ldr	r3, [pc, #364]	@ (800154c <HAL_UART_MspInit+0x27c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013e4:	4b59      	ldr	r3, [pc, #356]	@ (800154c <HAL_UART_MspInit+0x27c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80013ea:	4858      	ldr	r0, [pc, #352]	@ (800154c <HAL_UART_MspInit+0x27c>)
 80013ec:	f000 fa78 	bl	80018e0 <HAL_DMA_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80013f6:	f7ff face 	bl	8000996 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a53      	ldr	r2, [pc, #332]	@ (800154c <HAL_UART_MspInit+0x27c>)
 80013fe:	639a      	str	r2, [r3, #56]	@ 0x38
 8001400:	4a52      	ldr	r2, [pc, #328]	@ (800154c <HAL_UART_MspInit+0x27c>)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001406:	2200      	movs	r2, #0
 8001408:	2100      	movs	r1, #0
 800140a:	2025      	movs	r0, #37	@ 0x25
 800140c:	f000 fa31 	bl	8001872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001410:	2025      	movs	r0, #37	@ 0x25
 8001412:	f000 fa4a 	bl	80018aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001416:	e089      	b.n	800152c <HAL_UART_MspInit+0x25c>
  else if(uartHandle->Instance==USART2)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a4d      	ldr	r2, [pc, #308]	@ (8001554 <HAL_UART_MspInit+0x284>)
 800141e:	4293      	cmp	r3, r2
 8001420:	f040 8084 	bne.w	800152c <HAL_UART_MspInit+0x25c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001424:	4b44      	ldr	r3, [pc, #272]	@ (8001538 <HAL_UART_MspInit+0x268>)
 8001426:	69db      	ldr	r3, [r3, #28]
 8001428:	4a43      	ldr	r2, [pc, #268]	@ (8001538 <HAL_UART_MspInit+0x268>)
 800142a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800142e:	61d3      	str	r3, [r2, #28]
 8001430:	4b41      	ldr	r3, [pc, #260]	@ (8001538 <HAL_UART_MspInit+0x268>)
 8001432:	69db      	ldr	r3, [r3, #28]
 8001434:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800143c:	4b3e      	ldr	r3, [pc, #248]	@ (8001538 <HAL_UART_MspInit+0x268>)
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	4a3d      	ldr	r2, [pc, #244]	@ (8001538 <HAL_UART_MspInit+0x268>)
 8001442:	f043 0304 	orr.w	r3, r3, #4
 8001446:	6193      	str	r3, [r2, #24]
 8001448:	4b3b      	ldr	r3, [pc, #236]	@ (8001538 <HAL_UART_MspInit+0x268>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	f003 0304 	and.w	r3, r3, #4
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001454:	2304      	movs	r3, #4
 8001456:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001458:	2302      	movs	r3, #2
 800145a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800145c:	2303      	movs	r3, #3
 800145e:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001460:	f107 031c 	add.w	r3, r7, #28
 8001464:	4619      	mov	r1, r3
 8001466:	483c      	ldr	r0, [pc, #240]	@ (8001558 <HAL_UART_MspInit+0x288>)
 8001468:	f000 fc4e 	bl	8001d08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800146c:	2308      	movs	r3, #8
 800146e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001470:	2300      	movs	r3, #0
 8001472:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001478:	f107 031c 	add.w	r3, r7, #28
 800147c:	4619      	mov	r1, r3
 800147e:	4836      	ldr	r0, [pc, #216]	@ (8001558 <HAL_UART_MspInit+0x288>)
 8001480:	f000 fc42 	bl	8001d08 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001484:	4b35      	ldr	r3, [pc, #212]	@ (800155c <HAL_UART_MspInit+0x28c>)
 8001486:	4a36      	ldr	r2, [pc, #216]	@ (8001560 <HAL_UART_MspInit+0x290>)
 8001488:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800148a:	4b34      	ldr	r3, [pc, #208]	@ (800155c <HAL_UART_MspInit+0x28c>)
 800148c:	2200      	movs	r2, #0
 800148e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001490:	4b32      	ldr	r3, [pc, #200]	@ (800155c <HAL_UART_MspInit+0x28c>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001496:	4b31      	ldr	r3, [pc, #196]	@ (800155c <HAL_UART_MspInit+0x28c>)
 8001498:	2280      	movs	r2, #128	@ 0x80
 800149a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800149c:	4b2f      	ldr	r3, [pc, #188]	@ (800155c <HAL_UART_MspInit+0x28c>)
 800149e:	2200      	movs	r2, #0
 80014a0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014a2:	4b2e      	ldr	r3, [pc, #184]	@ (800155c <HAL_UART_MspInit+0x28c>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80014a8:	4b2c      	ldr	r3, [pc, #176]	@ (800155c <HAL_UART_MspInit+0x28c>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014ae:	4b2b      	ldr	r3, [pc, #172]	@ (800155c <HAL_UART_MspInit+0x28c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80014b4:	4829      	ldr	r0, [pc, #164]	@ (800155c <HAL_UART_MspInit+0x28c>)
 80014b6:	f000 fa13 	bl	80018e0 <HAL_DMA_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <HAL_UART_MspInit+0x1f4>
      Error_Handler();
 80014c0:	f7ff fa69 	bl	8000996 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4a25      	ldr	r2, [pc, #148]	@ (800155c <HAL_UART_MspInit+0x28c>)
 80014c8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80014ca:	4a24      	ldr	r2, [pc, #144]	@ (800155c <HAL_UART_MspInit+0x28c>)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80014d0:	4b24      	ldr	r3, [pc, #144]	@ (8001564 <HAL_UART_MspInit+0x294>)
 80014d2:	4a25      	ldr	r2, [pc, #148]	@ (8001568 <HAL_UART_MspInit+0x298>)
 80014d4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014d6:	4b23      	ldr	r3, [pc, #140]	@ (8001564 <HAL_UART_MspInit+0x294>)
 80014d8:	2210      	movs	r2, #16
 80014da:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014dc:	4b21      	ldr	r3, [pc, #132]	@ (8001564 <HAL_UART_MspInit+0x294>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014e2:	4b20      	ldr	r3, [pc, #128]	@ (8001564 <HAL_UART_MspInit+0x294>)
 80014e4:	2280      	movs	r2, #128	@ 0x80
 80014e6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001564 <HAL_UART_MspInit+0x294>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001564 <HAL_UART_MspInit+0x294>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80014f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001564 <HAL_UART_MspInit+0x294>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001564 <HAL_UART_MspInit+0x294>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001500:	4818      	ldr	r0, [pc, #96]	@ (8001564 <HAL_UART_MspInit+0x294>)
 8001502:	f000 f9ed 	bl	80018e0 <HAL_DMA_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <HAL_UART_MspInit+0x240>
      Error_Handler();
 800150c:	f7ff fa43 	bl	8000996 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4a14      	ldr	r2, [pc, #80]	@ (8001564 <HAL_UART_MspInit+0x294>)
 8001514:	639a      	str	r2, [r3, #56]	@ 0x38
 8001516:	4a13      	ldr	r2, [pc, #76]	@ (8001564 <HAL_UART_MspInit+0x294>)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800151c:	2200      	movs	r2, #0
 800151e:	2100      	movs	r1, #0
 8001520:	2026      	movs	r0, #38	@ 0x26
 8001522:	f000 f9a6 	bl	8001872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001526:	2026      	movs	r0, #38	@ 0x26
 8001528:	f000 f9bf 	bl	80018aa <HAL_NVIC_EnableIRQ>
}
 800152c:	bf00      	nop
 800152e:	3730      	adds	r7, #48	@ 0x30
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40013800 	.word	0x40013800
 8001538:	40021000 	.word	0x40021000
 800153c:	40010c00 	.word	0x40010c00
 8001540:	40010000 	.word	0x40010000
 8001544:	2000037c 	.word	0x2000037c
 8001548:	40020058 	.word	0x40020058
 800154c:	200003c0 	.word	0x200003c0
 8001550:	40020044 	.word	0x40020044
 8001554:	40004400 	.word	0x40004400
 8001558:	40010800 	.word	0x40010800
 800155c:	20000404 	.word	0x20000404
 8001560:	4002006c 	.word	0x4002006c
 8001564:	20000448 	.word	0x20000448
 8001568:	40020080 	.word	0x40020080

0800156c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800156c:	f7ff fce2 	bl	8000f34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001570:	480b      	ldr	r0, [pc, #44]	@ (80015a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001572:	490c      	ldr	r1, [pc, #48]	@ (80015a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001574:	4a0c      	ldr	r2, [pc, #48]	@ (80015a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001576:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001578:	e002      	b.n	8001580 <LoopCopyDataInit>

0800157a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800157a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800157c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800157e:	3304      	adds	r3, #4

08001580 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001580:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001582:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001584:	d3f9      	bcc.n	800157a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001586:	4a09      	ldr	r2, [pc, #36]	@ (80015ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001588:	4c09      	ldr	r4, [pc, #36]	@ (80015b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800158a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800158c:	e001      	b.n	8001592 <LoopFillZerobss>

0800158e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800158e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001590:	3204      	adds	r2, #4

08001592 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001592:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001594:	d3fb      	bcc.n	800158e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001596:	f003 fe09 	bl	80051ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800159a:	f7ff f8db 	bl	8000754 <main>
  bx lr
 800159e:	4770      	bx	lr
  ldr r0, =_sdata
 80015a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015a4:	20000124 	.word	0x20000124
  ldr r2, =_sidata
 80015a8:	08006374 	.word	0x08006374
  ldr r2, =_sbss
 80015ac:	20000124 	.word	0x20000124
  ldr r4, =_ebss
 80015b0:	200005d8 	.word	0x200005d8

080015b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015b4:	e7fe      	b.n	80015b4 <ADC1_2_IRQHandler>
	...

080015b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015bc:	4b08      	ldr	r3, [pc, #32]	@ (80015e0 <HAL_Init+0x28>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a07      	ldr	r2, [pc, #28]	@ (80015e0 <HAL_Init+0x28>)
 80015c2:	f043 0310 	orr.w	r3, r3, #16
 80015c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c8:	2003      	movs	r0, #3
 80015ca:	f000 f947 	bl	800185c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ce:	200f      	movs	r0, #15
 80015d0:	f000 f808 	bl	80015e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015d4:	f7ff fbd6 	bl	8000d84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40022000 	.word	0x40022000

080015e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015ec:	4b12      	ldr	r3, [pc, #72]	@ (8001638 <HAL_InitTick+0x54>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4b12      	ldr	r3, [pc, #72]	@ (800163c <HAL_InitTick+0x58>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	4619      	mov	r1, r3
 80015f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80015fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001602:	4618      	mov	r0, r3
 8001604:	f000 f95f 	bl	80018c6 <HAL_SYSTICK_Config>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e00e      	b.n	8001630 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b0f      	cmp	r3, #15
 8001616:	d80a      	bhi.n	800162e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001618:	2200      	movs	r2, #0
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	f04f 30ff 	mov.w	r0, #4294967295
 8001620:	f000 f927 	bl	8001872 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001624:	4a06      	ldr	r2, [pc, #24]	@ (8001640 <HAL_InitTick+0x5c>)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800162a:	2300      	movs	r3, #0
 800162c:	e000      	b.n	8001630 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
}
 8001630:	4618      	mov	r0, r3
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	200000c8 	.word	0x200000c8
 800163c:	200000d0 	.word	0x200000d0
 8001640:	200000cc 	.word	0x200000cc

08001644 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001648:	4b05      	ldr	r3, [pc, #20]	@ (8001660 <HAL_IncTick+0x1c>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	461a      	mov	r2, r3
 800164e:	4b05      	ldr	r3, [pc, #20]	@ (8001664 <HAL_IncTick+0x20>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4413      	add	r3, r2
 8001654:	4a03      	ldr	r2, [pc, #12]	@ (8001664 <HAL_IncTick+0x20>)
 8001656:	6013      	str	r3, [r2, #0]
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr
 8001660:	200000d0 	.word	0x200000d0
 8001664:	2000048c 	.word	0x2000048c

08001668 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return uwTick;
 800166c:	4b02      	ldr	r3, [pc, #8]	@ (8001678 <HAL_GetTick+0x10>)
 800166e:	681b      	ldr	r3, [r3, #0]
}
 8001670:	4618      	mov	r0, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr
 8001678:	2000048c 	.word	0x2000048c

0800167c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001684:	f7ff fff0 	bl	8001668 <HAL_GetTick>
 8001688:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001694:	d005      	beq.n	80016a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001696:	4b0a      	ldr	r3, [pc, #40]	@ (80016c0 <HAL_Delay+0x44>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	461a      	mov	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4413      	add	r3, r2
 80016a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016a2:	bf00      	nop
 80016a4:	f7ff ffe0 	bl	8001668 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d8f7      	bhi.n	80016a4 <HAL_Delay+0x28>
  {
  }
}
 80016b4:	bf00      	nop
 80016b6:	bf00      	nop
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	200000d0 	.word	0x200000d0

080016c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001708 <__NVIC_SetPriorityGrouping+0x44>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016da:	68ba      	ldr	r2, [r7, #8]
 80016dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016e0:	4013      	ands	r3, r2
 80016e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016f6:	4a04      	ldr	r2, [pc, #16]	@ (8001708 <__NVIC_SetPriorityGrouping+0x44>)
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	60d3      	str	r3, [r2, #12]
}
 80016fc:	bf00      	nop
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001710:	4b04      	ldr	r3, [pc, #16]	@ (8001724 <__NVIC_GetPriorityGrouping+0x18>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	0a1b      	lsrs	r3, r3, #8
 8001716:	f003 0307 	and.w	r3, r3, #7
}
 800171a:	4618      	mov	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	2b00      	cmp	r3, #0
 8001738:	db0b      	blt.n	8001752 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	f003 021f 	and.w	r2, r3, #31
 8001740:	4906      	ldr	r1, [pc, #24]	@ (800175c <__NVIC_EnableIRQ+0x34>)
 8001742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001746:	095b      	lsrs	r3, r3, #5
 8001748:	2001      	movs	r0, #1
 800174a:	fa00 f202 	lsl.w	r2, r0, r2
 800174e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr
 800175c:	e000e100 	.word	0xe000e100

08001760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	6039      	str	r1, [r7, #0]
 800176a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800176c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001770:	2b00      	cmp	r3, #0
 8001772:	db0a      	blt.n	800178a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	b2da      	uxtb	r2, r3
 8001778:	490c      	ldr	r1, [pc, #48]	@ (80017ac <__NVIC_SetPriority+0x4c>)
 800177a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177e:	0112      	lsls	r2, r2, #4
 8001780:	b2d2      	uxtb	r2, r2
 8001782:	440b      	add	r3, r1
 8001784:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001788:	e00a      	b.n	80017a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	b2da      	uxtb	r2, r3
 800178e:	4908      	ldr	r1, [pc, #32]	@ (80017b0 <__NVIC_SetPriority+0x50>)
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	f003 030f 	and.w	r3, r3, #15
 8001796:	3b04      	subs	r3, #4
 8001798:	0112      	lsls	r2, r2, #4
 800179a:	b2d2      	uxtb	r2, r2
 800179c:	440b      	add	r3, r1
 800179e:	761a      	strb	r2, [r3, #24]
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	e000e100 	.word	0xe000e100
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b089      	sub	sp, #36	@ 0x24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	f1c3 0307 	rsb	r3, r3, #7
 80017ce:	2b04      	cmp	r3, #4
 80017d0:	bf28      	it	cs
 80017d2:	2304      	movcs	r3, #4
 80017d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	3304      	adds	r3, #4
 80017da:	2b06      	cmp	r3, #6
 80017dc:	d902      	bls.n	80017e4 <NVIC_EncodePriority+0x30>
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	3b03      	subs	r3, #3
 80017e2:	e000      	b.n	80017e6 <NVIC_EncodePriority+0x32>
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e8:	f04f 32ff 	mov.w	r2, #4294967295
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	43da      	mvns	r2, r3
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	401a      	ands	r2, r3
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	fa01 f303 	lsl.w	r3, r1, r3
 8001806:	43d9      	mvns	r1, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800180c:	4313      	orrs	r3, r2
         );
}
 800180e:	4618      	mov	r0, r3
 8001810:	3724      	adds	r7, #36	@ 0x24
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr

08001818 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3b01      	subs	r3, #1
 8001824:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001828:	d301      	bcc.n	800182e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800182a:	2301      	movs	r3, #1
 800182c:	e00f      	b.n	800184e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800182e:	4a0a      	ldr	r2, [pc, #40]	@ (8001858 <SysTick_Config+0x40>)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3b01      	subs	r3, #1
 8001834:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001836:	210f      	movs	r1, #15
 8001838:	f04f 30ff 	mov.w	r0, #4294967295
 800183c:	f7ff ff90 	bl	8001760 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001840:	4b05      	ldr	r3, [pc, #20]	@ (8001858 <SysTick_Config+0x40>)
 8001842:	2200      	movs	r2, #0
 8001844:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001846:	4b04      	ldr	r3, [pc, #16]	@ (8001858 <SysTick_Config+0x40>)
 8001848:	2207      	movs	r2, #7
 800184a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	e000e010 	.word	0xe000e010

0800185c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f7ff ff2d 	bl	80016c4 <__NVIC_SetPriorityGrouping>
}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001872:	b580      	push	{r7, lr}
 8001874:	b086      	sub	sp, #24
 8001876:	af00      	add	r7, sp, #0
 8001878:	4603      	mov	r3, r0
 800187a:	60b9      	str	r1, [r7, #8]
 800187c:	607a      	str	r2, [r7, #4]
 800187e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001884:	f7ff ff42 	bl	800170c <__NVIC_GetPriorityGrouping>
 8001888:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	68b9      	ldr	r1, [r7, #8]
 800188e:	6978      	ldr	r0, [r7, #20]
 8001890:	f7ff ff90 	bl	80017b4 <NVIC_EncodePriority>
 8001894:	4602      	mov	r2, r0
 8001896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800189a:	4611      	mov	r1, r2
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff ff5f 	bl	8001760 <__NVIC_SetPriority>
}
 80018a2:	bf00      	nop
 80018a4:	3718      	adds	r7, #24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b082      	sub	sp, #8
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	4603      	mov	r3, r0
 80018b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff ff35 	bl	8001728 <__NVIC_EnableIRQ>
}
 80018be:	bf00      	nop
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b082      	sub	sp, #8
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f7ff ffa2 	bl	8001818 <SysTick_Config>
 80018d4:	4603      	mov	r3, r0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
	...

080018e0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018e8:	2300      	movs	r3, #0
 80018ea:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d101      	bne.n	80018f6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e043      	b.n	800197e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	461a      	mov	r2, r3
 80018fc:	4b22      	ldr	r3, [pc, #136]	@ (8001988 <HAL_DMA_Init+0xa8>)
 80018fe:	4413      	add	r3, r2
 8001900:	4a22      	ldr	r2, [pc, #136]	@ (800198c <HAL_DMA_Init+0xac>)
 8001902:	fba2 2303 	umull	r2, r3, r2, r3
 8001906:	091b      	lsrs	r3, r3, #4
 8001908:	009a      	lsls	r2, r3, #2
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a1f      	ldr	r2, [pc, #124]	@ (8001990 <HAL_DMA_Init+0xb0>)
 8001912:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2202      	movs	r2, #2
 8001918:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800192a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800192e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001938:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001944:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001950:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	4313      	orrs	r3, r2
 800195c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3714      	adds	r7, #20
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr
 8001988:	bffdfff8 	.word	0xbffdfff8
 800198c:	cccccccd 	.word	0xcccccccd
 8001990:	40020000 	.word	0x40020000

08001994 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800199c:	2300      	movs	r3, #0
 800199e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d008      	beq.n	80019be <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2204      	movs	r2, #4
 80019b0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e020      	b.n	8001a00 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f022 020e 	bic.w	r2, r2, #14
 80019cc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 0201 	bic.w	r2, r2, #1
 80019dc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019e6:	2101      	movs	r1, #1
 80019e8:	fa01 f202 	lsl.w	r2, r1, r2
 80019ec:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2201      	movs	r2, #1
 80019f2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3714      	adds	r7, #20
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bc80      	pop	{r7}
 8001a08:	4770      	bx	lr
	...

08001a0c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a14:	2300      	movs	r3, #0
 8001a16:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d005      	beq.n	8001a30 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2204      	movs	r2, #4
 8001a28:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	73fb      	strb	r3, [r7, #15]
 8001a2e:	e051      	b.n	8001ad4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f022 020e 	bic.w	r2, r2, #14
 8001a3e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f022 0201 	bic.w	r2, r2, #1
 8001a4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a22      	ldr	r2, [pc, #136]	@ (8001ae0 <HAL_DMA_Abort_IT+0xd4>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d029      	beq.n	8001aae <HAL_DMA_Abort_IT+0xa2>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a21      	ldr	r2, [pc, #132]	@ (8001ae4 <HAL_DMA_Abort_IT+0xd8>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d022      	beq.n	8001aaa <HAL_DMA_Abort_IT+0x9e>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a1f      	ldr	r2, [pc, #124]	@ (8001ae8 <HAL_DMA_Abort_IT+0xdc>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d01a      	beq.n	8001aa4 <HAL_DMA_Abort_IT+0x98>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a1e      	ldr	r2, [pc, #120]	@ (8001aec <HAL_DMA_Abort_IT+0xe0>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d012      	beq.n	8001a9e <HAL_DMA_Abort_IT+0x92>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a1c      	ldr	r2, [pc, #112]	@ (8001af0 <HAL_DMA_Abort_IT+0xe4>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d00a      	beq.n	8001a98 <HAL_DMA_Abort_IT+0x8c>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a1b      	ldr	r2, [pc, #108]	@ (8001af4 <HAL_DMA_Abort_IT+0xe8>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d102      	bne.n	8001a92 <HAL_DMA_Abort_IT+0x86>
 8001a8c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001a90:	e00e      	b.n	8001ab0 <HAL_DMA_Abort_IT+0xa4>
 8001a92:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a96:	e00b      	b.n	8001ab0 <HAL_DMA_Abort_IT+0xa4>
 8001a98:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a9c:	e008      	b.n	8001ab0 <HAL_DMA_Abort_IT+0xa4>
 8001a9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001aa2:	e005      	b.n	8001ab0 <HAL_DMA_Abort_IT+0xa4>
 8001aa4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001aa8:	e002      	b.n	8001ab0 <HAL_DMA_Abort_IT+0xa4>
 8001aaa:	2310      	movs	r3, #16
 8001aac:	e000      	b.n	8001ab0 <HAL_DMA_Abort_IT+0xa4>
 8001aae:	2301      	movs	r3, #1
 8001ab0:	4a11      	ldr	r2, [pc, #68]	@ (8001af8 <HAL_DMA_Abort_IT+0xec>)
 8001ab2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	4798      	blx	r3
    } 
  }
  return status;
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40020008 	.word	0x40020008
 8001ae4:	4002001c 	.word	0x4002001c
 8001ae8:	40020030 	.word	0x40020030
 8001aec:	40020044 	.word	0x40020044
 8001af0:	40020058 	.word	0x40020058
 8001af4:	4002006c 	.word	0x4002006c
 8001af8:	40020000 	.word	0x40020000

08001afc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b18:	2204      	movs	r2, #4
 8001b1a:	409a      	lsls	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d04f      	beq.n	8001bc4 <HAL_DMA_IRQHandler+0xc8>
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	f003 0304 	and.w	r3, r3, #4
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d04a      	beq.n	8001bc4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0320 	and.w	r3, r3, #32
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d107      	bne.n	8001b4c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f022 0204 	bic.w	r2, r2, #4
 8001b4a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a66      	ldr	r2, [pc, #408]	@ (8001cec <HAL_DMA_IRQHandler+0x1f0>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d029      	beq.n	8001baa <HAL_DMA_IRQHandler+0xae>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a65      	ldr	r2, [pc, #404]	@ (8001cf0 <HAL_DMA_IRQHandler+0x1f4>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d022      	beq.n	8001ba6 <HAL_DMA_IRQHandler+0xaa>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a63      	ldr	r2, [pc, #396]	@ (8001cf4 <HAL_DMA_IRQHandler+0x1f8>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d01a      	beq.n	8001ba0 <HAL_DMA_IRQHandler+0xa4>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a62      	ldr	r2, [pc, #392]	@ (8001cf8 <HAL_DMA_IRQHandler+0x1fc>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d012      	beq.n	8001b9a <HAL_DMA_IRQHandler+0x9e>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a60      	ldr	r2, [pc, #384]	@ (8001cfc <HAL_DMA_IRQHandler+0x200>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d00a      	beq.n	8001b94 <HAL_DMA_IRQHandler+0x98>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a5f      	ldr	r2, [pc, #380]	@ (8001d00 <HAL_DMA_IRQHandler+0x204>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d102      	bne.n	8001b8e <HAL_DMA_IRQHandler+0x92>
 8001b88:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001b8c:	e00e      	b.n	8001bac <HAL_DMA_IRQHandler+0xb0>
 8001b8e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001b92:	e00b      	b.n	8001bac <HAL_DMA_IRQHandler+0xb0>
 8001b94:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001b98:	e008      	b.n	8001bac <HAL_DMA_IRQHandler+0xb0>
 8001b9a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001b9e:	e005      	b.n	8001bac <HAL_DMA_IRQHandler+0xb0>
 8001ba0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ba4:	e002      	b.n	8001bac <HAL_DMA_IRQHandler+0xb0>
 8001ba6:	2340      	movs	r3, #64	@ 0x40
 8001ba8:	e000      	b.n	8001bac <HAL_DMA_IRQHandler+0xb0>
 8001baa:	2304      	movs	r3, #4
 8001bac:	4a55      	ldr	r2, [pc, #340]	@ (8001d04 <HAL_DMA_IRQHandler+0x208>)
 8001bae:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f000 8094 	beq.w	8001ce2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001bc2:	e08e      	b.n	8001ce2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc8:	2202      	movs	r2, #2
 8001bca:	409a      	lsls	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d056      	beq.n	8001c82 <HAL_DMA_IRQHandler+0x186>
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d051      	beq.n	8001c82 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0320 	and.w	r3, r3, #32
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d10b      	bne.n	8001c04 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 020a 	bic.w	r2, r2, #10
 8001bfa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a38      	ldr	r2, [pc, #224]	@ (8001cec <HAL_DMA_IRQHandler+0x1f0>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d029      	beq.n	8001c62 <HAL_DMA_IRQHandler+0x166>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a37      	ldr	r2, [pc, #220]	@ (8001cf0 <HAL_DMA_IRQHandler+0x1f4>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d022      	beq.n	8001c5e <HAL_DMA_IRQHandler+0x162>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a35      	ldr	r2, [pc, #212]	@ (8001cf4 <HAL_DMA_IRQHandler+0x1f8>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d01a      	beq.n	8001c58 <HAL_DMA_IRQHandler+0x15c>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a34      	ldr	r2, [pc, #208]	@ (8001cf8 <HAL_DMA_IRQHandler+0x1fc>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d012      	beq.n	8001c52 <HAL_DMA_IRQHandler+0x156>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a32      	ldr	r2, [pc, #200]	@ (8001cfc <HAL_DMA_IRQHandler+0x200>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d00a      	beq.n	8001c4c <HAL_DMA_IRQHandler+0x150>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a31      	ldr	r2, [pc, #196]	@ (8001d00 <HAL_DMA_IRQHandler+0x204>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d102      	bne.n	8001c46 <HAL_DMA_IRQHandler+0x14a>
 8001c40:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001c44:	e00e      	b.n	8001c64 <HAL_DMA_IRQHandler+0x168>
 8001c46:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c4a:	e00b      	b.n	8001c64 <HAL_DMA_IRQHandler+0x168>
 8001c4c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c50:	e008      	b.n	8001c64 <HAL_DMA_IRQHandler+0x168>
 8001c52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c56:	e005      	b.n	8001c64 <HAL_DMA_IRQHandler+0x168>
 8001c58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c5c:	e002      	b.n	8001c64 <HAL_DMA_IRQHandler+0x168>
 8001c5e:	2320      	movs	r3, #32
 8001c60:	e000      	b.n	8001c64 <HAL_DMA_IRQHandler+0x168>
 8001c62:	2302      	movs	r3, #2
 8001c64:	4a27      	ldr	r2, [pc, #156]	@ (8001d04 <HAL_DMA_IRQHandler+0x208>)
 8001c66:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d034      	beq.n	8001ce2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001c80:	e02f      	b.n	8001ce2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c86:	2208      	movs	r2, #8
 8001c88:	409a      	lsls	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d028      	beq.n	8001ce4 <HAL_DMA_IRQHandler+0x1e8>
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	f003 0308 	and.w	r3, r3, #8
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d023      	beq.n	8001ce4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 020e 	bic.w	r2, r2, #14
 8001caa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d004      	beq.n	8001ce4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	4798      	blx	r3
    }
  }
  return;
 8001ce2:	bf00      	nop
 8001ce4:	bf00      	nop
}
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40020008 	.word	0x40020008
 8001cf0:	4002001c 	.word	0x4002001c
 8001cf4:	40020030 	.word	0x40020030
 8001cf8:	40020044 	.word	0x40020044
 8001cfc:	40020058 	.word	0x40020058
 8001d00:	4002006c 	.word	0x4002006c
 8001d04:	40020000 	.word	0x40020000

08001d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b08b      	sub	sp, #44	@ 0x2c
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d12:	2300      	movs	r3, #0
 8001d14:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d16:	2300      	movs	r3, #0
 8001d18:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d1a:	e169      	b.n	8001ff0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	69fa      	ldr	r2, [r7, #28]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	f040 8158 	bne.w	8001fea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	4a9a      	ldr	r2, [pc, #616]	@ (8001fa8 <HAL_GPIO_Init+0x2a0>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d05e      	beq.n	8001e02 <HAL_GPIO_Init+0xfa>
 8001d44:	4a98      	ldr	r2, [pc, #608]	@ (8001fa8 <HAL_GPIO_Init+0x2a0>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d875      	bhi.n	8001e36 <HAL_GPIO_Init+0x12e>
 8001d4a:	4a98      	ldr	r2, [pc, #608]	@ (8001fac <HAL_GPIO_Init+0x2a4>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d058      	beq.n	8001e02 <HAL_GPIO_Init+0xfa>
 8001d50:	4a96      	ldr	r2, [pc, #600]	@ (8001fac <HAL_GPIO_Init+0x2a4>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d86f      	bhi.n	8001e36 <HAL_GPIO_Init+0x12e>
 8001d56:	4a96      	ldr	r2, [pc, #600]	@ (8001fb0 <HAL_GPIO_Init+0x2a8>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d052      	beq.n	8001e02 <HAL_GPIO_Init+0xfa>
 8001d5c:	4a94      	ldr	r2, [pc, #592]	@ (8001fb0 <HAL_GPIO_Init+0x2a8>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d869      	bhi.n	8001e36 <HAL_GPIO_Init+0x12e>
 8001d62:	4a94      	ldr	r2, [pc, #592]	@ (8001fb4 <HAL_GPIO_Init+0x2ac>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d04c      	beq.n	8001e02 <HAL_GPIO_Init+0xfa>
 8001d68:	4a92      	ldr	r2, [pc, #584]	@ (8001fb4 <HAL_GPIO_Init+0x2ac>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d863      	bhi.n	8001e36 <HAL_GPIO_Init+0x12e>
 8001d6e:	4a92      	ldr	r2, [pc, #584]	@ (8001fb8 <HAL_GPIO_Init+0x2b0>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d046      	beq.n	8001e02 <HAL_GPIO_Init+0xfa>
 8001d74:	4a90      	ldr	r2, [pc, #576]	@ (8001fb8 <HAL_GPIO_Init+0x2b0>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d85d      	bhi.n	8001e36 <HAL_GPIO_Init+0x12e>
 8001d7a:	2b12      	cmp	r3, #18
 8001d7c:	d82a      	bhi.n	8001dd4 <HAL_GPIO_Init+0xcc>
 8001d7e:	2b12      	cmp	r3, #18
 8001d80:	d859      	bhi.n	8001e36 <HAL_GPIO_Init+0x12e>
 8001d82:	a201      	add	r2, pc, #4	@ (adr r2, 8001d88 <HAL_GPIO_Init+0x80>)
 8001d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d88:	08001e03 	.word	0x08001e03
 8001d8c:	08001ddd 	.word	0x08001ddd
 8001d90:	08001def 	.word	0x08001def
 8001d94:	08001e31 	.word	0x08001e31
 8001d98:	08001e37 	.word	0x08001e37
 8001d9c:	08001e37 	.word	0x08001e37
 8001da0:	08001e37 	.word	0x08001e37
 8001da4:	08001e37 	.word	0x08001e37
 8001da8:	08001e37 	.word	0x08001e37
 8001dac:	08001e37 	.word	0x08001e37
 8001db0:	08001e37 	.word	0x08001e37
 8001db4:	08001e37 	.word	0x08001e37
 8001db8:	08001e37 	.word	0x08001e37
 8001dbc:	08001e37 	.word	0x08001e37
 8001dc0:	08001e37 	.word	0x08001e37
 8001dc4:	08001e37 	.word	0x08001e37
 8001dc8:	08001e37 	.word	0x08001e37
 8001dcc:	08001de5 	.word	0x08001de5
 8001dd0:	08001df9 	.word	0x08001df9
 8001dd4:	4a79      	ldr	r2, [pc, #484]	@ (8001fbc <HAL_GPIO_Init+0x2b4>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d013      	beq.n	8001e02 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dda:	e02c      	b.n	8001e36 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	623b      	str	r3, [r7, #32]
          break;
 8001de2:	e029      	b.n	8001e38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	3304      	adds	r3, #4
 8001dea:	623b      	str	r3, [r7, #32]
          break;
 8001dec:	e024      	b.n	8001e38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	3308      	adds	r3, #8
 8001df4:	623b      	str	r3, [r7, #32]
          break;
 8001df6:	e01f      	b.n	8001e38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	330c      	adds	r3, #12
 8001dfe:	623b      	str	r3, [r7, #32]
          break;
 8001e00:	e01a      	b.n	8001e38 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d102      	bne.n	8001e10 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e0a:	2304      	movs	r3, #4
 8001e0c:	623b      	str	r3, [r7, #32]
          break;
 8001e0e:	e013      	b.n	8001e38 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d105      	bne.n	8001e24 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e18:	2308      	movs	r3, #8
 8001e1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	69fa      	ldr	r2, [r7, #28]
 8001e20:	611a      	str	r2, [r3, #16]
          break;
 8001e22:	e009      	b.n	8001e38 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e24:	2308      	movs	r3, #8
 8001e26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	69fa      	ldr	r2, [r7, #28]
 8001e2c:	615a      	str	r2, [r3, #20]
          break;
 8001e2e:	e003      	b.n	8001e38 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e30:	2300      	movs	r3, #0
 8001e32:	623b      	str	r3, [r7, #32]
          break;
 8001e34:	e000      	b.n	8001e38 <HAL_GPIO_Init+0x130>
          break;
 8001e36:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	2bff      	cmp	r3, #255	@ 0xff
 8001e3c:	d801      	bhi.n	8001e42 <HAL_GPIO_Init+0x13a>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	e001      	b.n	8001e46 <HAL_GPIO_Init+0x13e>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	3304      	adds	r3, #4
 8001e46:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	2bff      	cmp	r3, #255	@ 0xff
 8001e4c:	d802      	bhi.n	8001e54 <HAL_GPIO_Init+0x14c>
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	e002      	b.n	8001e5a <HAL_GPIO_Init+0x152>
 8001e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e56:	3b08      	subs	r3, #8
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	210f      	movs	r1, #15
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	fa01 f303 	lsl.w	r3, r1, r3
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	401a      	ands	r2, r3
 8001e6c:	6a39      	ldr	r1, [r7, #32]
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	fa01 f303 	lsl.w	r3, r1, r3
 8001e74:	431a      	orrs	r2, r3
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f000 80b1 	beq.w	8001fea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e88:	4b4d      	ldr	r3, [pc, #308]	@ (8001fc0 <HAL_GPIO_Init+0x2b8>)
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	4a4c      	ldr	r2, [pc, #304]	@ (8001fc0 <HAL_GPIO_Init+0x2b8>)
 8001e8e:	f043 0301 	orr.w	r3, r3, #1
 8001e92:	6193      	str	r3, [r2, #24]
 8001e94:	4b4a      	ldr	r3, [pc, #296]	@ (8001fc0 <HAL_GPIO_Init+0x2b8>)
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ea0:	4a48      	ldr	r2, [pc, #288]	@ (8001fc4 <HAL_GPIO_Init+0x2bc>)
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea4:	089b      	lsrs	r3, r3, #2
 8001ea6:	3302      	adds	r3, #2
 8001ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb0:	f003 0303 	and.w	r3, r3, #3
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	220f      	movs	r2, #15
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a40      	ldr	r2, [pc, #256]	@ (8001fc8 <HAL_GPIO_Init+0x2c0>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d013      	beq.n	8001ef4 <HAL_GPIO_Init+0x1ec>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a3f      	ldr	r2, [pc, #252]	@ (8001fcc <HAL_GPIO_Init+0x2c4>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d00d      	beq.n	8001ef0 <HAL_GPIO_Init+0x1e8>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a3e      	ldr	r2, [pc, #248]	@ (8001fd0 <HAL_GPIO_Init+0x2c8>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d007      	beq.n	8001eec <HAL_GPIO_Init+0x1e4>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a3d      	ldr	r2, [pc, #244]	@ (8001fd4 <HAL_GPIO_Init+0x2cc>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d101      	bne.n	8001ee8 <HAL_GPIO_Init+0x1e0>
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e006      	b.n	8001ef6 <HAL_GPIO_Init+0x1ee>
 8001ee8:	2304      	movs	r3, #4
 8001eea:	e004      	b.n	8001ef6 <HAL_GPIO_Init+0x1ee>
 8001eec:	2302      	movs	r3, #2
 8001eee:	e002      	b.n	8001ef6 <HAL_GPIO_Init+0x1ee>
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e000      	b.n	8001ef6 <HAL_GPIO_Init+0x1ee>
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ef8:	f002 0203 	and.w	r2, r2, #3
 8001efc:	0092      	lsls	r2, r2, #2
 8001efe:	4093      	lsls	r3, r2
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f06:	492f      	ldr	r1, [pc, #188]	@ (8001fc4 <HAL_GPIO_Init+0x2bc>)
 8001f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0a:	089b      	lsrs	r3, r3, #2
 8001f0c:	3302      	adds	r3, #2
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d006      	beq.n	8001f2e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f20:	4b2d      	ldr	r3, [pc, #180]	@ (8001fd8 <HAL_GPIO_Init+0x2d0>)
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	492c      	ldr	r1, [pc, #176]	@ (8001fd8 <HAL_GPIO_Init+0x2d0>)
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	608b      	str	r3, [r1, #8]
 8001f2c:	e006      	b.n	8001f3c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f2e:	4b2a      	ldr	r3, [pc, #168]	@ (8001fd8 <HAL_GPIO_Init+0x2d0>)
 8001f30:	689a      	ldr	r2, [r3, #8]
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	43db      	mvns	r3, r3
 8001f36:	4928      	ldr	r1, [pc, #160]	@ (8001fd8 <HAL_GPIO_Init+0x2d0>)
 8001f38:	4013      	ands	r3, r2
 8001f3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d006      	beq.n	8001f56 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f48:	4b23      	ldr	r3, [pc, #140]	@ (8001fd8 <HAL_GPIO_Init+0x2d0>)
 8001f4a:	68da      	ldr	r2, [r3, #12]
 8001f4c:	4922      	ldr	r1, [pc, #136]	@ (8001fd8 <HAL_GPIO_Init+0x2d0>)
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	60cb      	str	r3, [r1, #12]
 8001f54:	e006      	b.n	8001f64 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f56:	4b20      	ldr	r3, [pc, #128]	@ (8001fd8 <HAL_GPIO_Init+0x2d0>)
 8001f58:	68da      	ldr	r2, [r3, #12]
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	491e      	ldr	r1, [pc, #120]	@ (8001fd8 <HAL_GPIO_Init+0x2d0>)
 8001f60:	4013      	ands	r3, r2
 8001f62:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d006      	beq.n	8001f7e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f70:	4b19      	ldr	r3, [pc, #100]	@ (8001fd8 <HAL_GPIO_Init+0x2d0>)
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	4918      	ldr	r1, [pc, #96]	@ (8001fd8 <HAL_GPIO_Init+0x2d0>)
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	604b      	str	r3, [r1, #4]
 8001f7c:	e006      	b.n	8001f8c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f7e:	4b16      	ldr	r3, [pc, #88]	@ (8001fd8 <HAL_GPIO_Init+0x2d0>)
 8001f80:	685a      	ldr	r2, [r3, #4]
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	43db      	mvns	r3, r3
 8001f86:	4914      	ldr	r1, [pc, #80]	@ (8001fd8 <HAL_GPIO_Init+0x2d0>)
 8001f88:	4013      	ands	r3, r2
 8001f8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d021      	beq.n	8001fdc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f98:	4b0f      	ldr	r3, [pc, #60]	@ (8001fd8 <HAL_GPIO_Init+0x2d0>)
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	490e      	ldr	r1, [pc, #56]	@ (8001fd8 <HAL_GPIO_Init+0x2d0>)
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	600b      	str	r3, [r1, #0]
 8001fa4:	e021      	b.n	8001fea <HAL_GPIO_Init+0x2e2>
 8001fa6:	bf00      	nop
 8001fa8:	10320000 	.word	0x10320000
 8001fac:	10310000 	.word	0x10310000
 8001fb0:	10220000 	.word	0x10220000
 8001fb4:	10210000 	.word	0x10210000
 8001fb8:	10120000 	.word	0x10120000
 8001fbc:	10110000 	.word	0x10110000
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	40010000 	.word	0x40010000
 8001fc8:	40010800 	.word	0x40010800
 8001fcc:	40010c00 	.word	0x40010c00
 8001fd0:	40011000 	.word	0x40011000
 8001fd4:	40011400 	.word	0x40011400
 8001fd8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800200c <HAL_GPIO_Init+0x304>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	4909      	ldr	r1, [pc, #36]	@ (800200c <HAL_GPIO_Init+0x304>)
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fec:	3301      	adds	r3, #1
 8001fee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f47f ae8e 	bne.w	8001d1c <HAL_GPIO_Init+0x14>
  }
}
 8002000:	bf00      	nop
 8002002:	bf00      	nop
 8002004:	372c      	adds	r7, #44	@ 0x2c
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr
 800200c:	40010400 	.word	0x40010400

08002010 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	460b      	mov	r3, r1
 800201a:	807b      	strh	r3, [r7, #2]
 800201c:	4613      	mov	r3, r2
 800201e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002020:	787b      	ldrb	r3, [r7, #1]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002026:	887a      	ldrh	r2, [r7, #2]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800202c:	e003      	b.n	8002036 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800202e:	887b      	ldrh	r3, [r7, #2]
 8002030:	041a      	lsls	r2, r3, #16
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	611a      	str	r2, [r3, #16]
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr

08002040 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	460b      	mov	r3, r1
 800204a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002052:	887a      	ldrh	r2, [r7, #2]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4013      	ands	r3, r2
 8002058:	041a      	lsls	r2, r3, #16
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	43d9      	mvns	r1, r3
 800205e:	887b      	ldrh	r3, [r7, #2]
 8002060:	400b      	ands	r3, r1
 8002062:	431a      	orrs	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	611a      	str	r2, [r3, #16]
}
 8002068:	bf00      	nop
 800206a:	3714      	adds	r7, #20
 800206c:	46bd      	mov	sp, r7
 800206e:	bc80      	pop	{r7}
 8002070:	4770      	bx	lr
	...

08002074 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800207e:	4b08      	ldr	r3, [pc, #32]	@ (80020a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002080:	695a      	ldr	r2, [r3, #20]
 8002082:	88fb      	ldrh	r3, [r7, #6]
 8002084:	4013      	ands	r3, r2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d006      	beq.n	8002098 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800208a:	4a05      	ldr	r2, [pc, #20]	@ (80020a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800208c:	88fb      	ldrh	r3, [r7, #6]
 800208e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002090:	88fb      	ldrh	r3, [r7, #6]
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe f85a 	bl	800014c <HAL_GPIO_EXTI_Callback>
  }
}
 8002098:	bf00      	nop
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40010400 	.word	0x40010400

080020a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e12b      	b.n	800230e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d106      	bne.n	80020d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7fe fac6 	bl	800065c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2224      	movs	r2, #36	@ 0x24
 80020d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 0201 	bic.w	r2, r2, #1
 80020e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80020f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002106:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002108:	f001 fbfc 	bl	8003904 <HAL_RCC_GetPCLK1Freq>
 800210c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	4a81      	ldr	r2, [pc, #516]	@ (8002318 <HAL_I2C_Init+0x274>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d807      	bhi.n	8002128 <HAL_I2C_Init+0x84>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	4a80      	ldr	r2, [pc, #512]	@ (800231c <HAL_I2C_Init+0x278>)
 800211c:	4293      	cmp	r3, r2
 800211e:	bf94      	ite	ls
 8002120:	2301      	movls	r3, #1
 8002122:	2300      	movhi	r3, #0
 8002124:	b2db      	uxtb	r3, r3
 8002126:	e006      	b.n	8002136 <HAL_I2C_Init+0x92>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	4a7d      	ldr	r2, [pc, #500]	@ (8002320 <HAL_I2C_Init+0x27c>)
 800212c:	4293      	cmp	r3, r2
 800212e:	bf94      	ite	ls
 8002130:	2301      	movls	r3, #1
 8002132:	2300      	movhi	r3, #0
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e0e7      	b.n	800230e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	4a78      	ldr	r2, [pc, #480]	@ (8002324 <HAL_I2C_Init+0x280>)
 8002142:	fba2 2303 	umull	r2, r3, r2, r3
 8002146:	0c9b      	lsrs	r3, r3, #18
 8002148:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68ba      	ldr	r2, [r7, #8]
 800215a:	430a      	orrs	r2, r1
 800215c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	4a6a      	ldr	r2, [pc, #424]	@ (8002318 <HAL_I2C_Init+0x274>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d802      	bhi.n	8002178 <HAL_I2C_Init+0xd4>
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	3301      	adds	r3, #1
 8002176:	e009      	b.n	800218c <HAL_I2C_Init+0xe8>
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800217e:	fb02 f303 	mul.w	r3, r2, r3
 8002182:	4a69      	ldr	r2, [pc, #420]	@ (8002328 <HAL_I2C_Init+0x284>)
 8002184:	fba2 2303 	umull	r2, r3, r2, r3
 8002188:	099b      	lsrs	r3, r3, #6
 800218a:	3301      	adds	r3, #1
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6812      	ldr	r2, [r2, #0]
 8002190:	430b      	orrs	r3, r1
 8002192:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800219e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	495c      	ldr	r1, [pc, #368]	@ (8002318 <HAL_I2C_Init+0x274>)
 80021a8:	428b      	cmp	r3, r1
 80021aa:	d819      	bhi.n	80021e0 <HAL_I2C_Init+0x13c>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	1e59      	subs	r1, r3, #1
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80021ba:	1c59      	adds	r1, r3, #1
 80021bc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80021c0:	400b      	ands	r3, r1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00a      	beq.n	80021dc <HAL_I2C_Init+0x138>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	1e59      	subs	r1, r3, #1
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80021d4:	3301      	adds	r3, #1
 80021d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021da:	e051      	b.n	8002280 <HAL_I2C_Init+0x1dc>
 80021dc:	2304      	movs	r3, #4
 80021de:	e04f      	b.n	8002280 <HAL_I2C_Init+0x1dc>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d111      	bne.n	800220c <HAL_I2C_Init+0x168>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	1e58      	subs	r0, r3, #1
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6859      	ldr	r1, [r3, #4]
 80021f0:	460b      	mov	r3, r1
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	440b      	add	r3, r1
 80021f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80021fa:	3301      	adds	r3, #1
 80021fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002200:	2b00      	cmp	r3, #0
 8002202:	bf0c      	ite	eq
 8002204:	2301      	moveq	r3, #1
 8002206:	2300      	movne	r3, #0
 8002208:	b2db      	uxtb	r3, r3
 800220a:	e012      	b.n	8002232 <HAL_I2C_Init+0x18e>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	1e58      	subs	r0, r3, #1
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6859      	ldr	r1, [r3, #4]
 8002214:	460b      	mov	r3, r1
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	440b      	add	r3, r1
 800221a:	0099      	lsls	r1, r3, #2
 800221c:	440b      	add	r3, r1
 800221e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002222:	3301      	adds	r3, #1
 8002224:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002228:	2b00      	cmp	r3, #0
 800222a:	bf0c      	ite	eq
 800222c:	2301      	moveq	r3, #1
 800222e:	2300      	movne	r3, #0
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <HAL_I2C_Init+0x196>
 8002236:	2301      	movs	r3, #1
 8002238:	e022      	b.n	8002280 <HAL_I2C_Init+0x1dc>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d10e      	bne.n	8002260 <HAL_I2C_Init+0x1bc>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	1e58      	subs	r0, r3, #1
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6859      	ldr	r1, [r3, #4]
 800224a:	460b      	mov	r3, r1
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	440b      	add	r3, r1
 8002250:	fbb0 f3f3 	udiv	r3, r0, r3
 8002254:	3301      	adds	r3, #1
 8002256:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800225a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800225e:	e00f      	b.n	8002280 <HAL_I2C_Init+0x1dc>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	1e58      	subs	r0, r3, #1
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6859      	ldr	r1, [r3, #4]
 8002268:	460b      	mov	r3, r1
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	440b      	add	r3, r1
 800226e:	0099      	lsls	r1, r3, #2
 8002270:	440b      	add	r3, r1
 8002272:	fbb0 f3f3 	udiv	r3, r0, r3
 8002276:	3301      	adds	r3, #1
 8002278:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800227c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002280:	6879      	ldr	r1, [r7, #4]
 8002282:	6809      	ldr	r1, [r1, #0]
 8002284:	4313      	orrs	r3, r2
 8002286:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	69da      	ldr	r2, [r3, #28]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a1b      	ldr	r3, [r3, #32]
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80022ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	6911      	ldr	r1, [r2, #16]
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	68d2      	ldr	r2, [r2, #12]
 80022ba:	4311      	orrs	r1, r2
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6812      	ldr	r2, [r2, #0]
 80022c0:	430b      	orrs	r3, r1
 80022c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	695a      	ldr	r2, [r3, #20]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	431a      	orrs	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	430a      	orrs	r2, r1
 80022de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f042 0201 	orr.w	r2, r2, #1
 80022ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2220      	movs	r2, #32
 80022fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	000186a0 	.word	0x000186a0
 800231c:	001e847f 	.word	0x001e847f
 8002320:	003d08ff 	.word	0x003d08ff
 8002324:	431bde83 	.word	0x431bde83
 8002328:	10624dd3 	.word	0x10624dd3

0800232c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b088      	sub	sp, #32
 8002330:	af02      	add	r7, sp, #8
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	4608      	mov	r0, r1
 8002336:	4611      	mov	r1, r2
 8002338:	461a      	mov	r2, r3
 800233a:	4603      	mov	r3, r0
 800233c:	817b      	strh	r3, [r7, #10]
 800233e:	460b      	mov	r3, r1
 8002340:	813b      	strh	r3, [r7, #8]
 8002342:	4613      	mov	r3, r2
 8002344:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002346:	f7ff f98f 	bl	8001668 <HAL_GetTick>
 800234a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b20      	cmp	r3, #32
 8002356:	f040 80d9 	bne.w	800250c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	2319      	movs	r3, #25
 8002360:	2201      	movs	r2, #1
 8002362:	496d      	ldr	r1, [pc, #436]	@ (8002518 <HAL_I2C_Mem_Write+0x1ec>)
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	f000 fccd 	bl	8002d04 <I2C_WaitOnFlagUntilTimeout>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002370:	2302      	movs	r3, #2
 8002372:	e0cc      	b.n	800250e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800237a:	2b01      	cmp	r3, #1
 800237c:	d101      	bne.n	8002382 <HAL_I2C_Mem_Write+0x56>
 800237e:	2302      	movs	r3, #2
 8002380:	e0c5      	b.n	800250e <HAL_I2C_Mem_Write+0x1e2>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	2b01      	cmp	r3, #1
 8002396:	d007      	beq.n	80023a8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f042 0201 	orr.w	r2, r2, #1
 80023a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2221      	movs	r2, #33	@ 0x21
 80023bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2240      	movs	r2, #64	@ 0x40
 80023c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6a3a      	ldr	r2, [r7, #32]
 80023d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80023d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023de:	b29a      	uxth	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	4a4d      	ldr	r2, [pc, #308]	@ (800251c <HAL_I2C_Mem_Write+0x1f0>)
 80023e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023ea:	88f8      	ldrh	r0, [r7, #6]
 80023ec:	893a      	ldrh	r2, [r7, #8]
 80023ee:	8979      	ldrh	r1, [r7, #10]
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	9301      	str	r3, [sp, #4]
 80023f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	4603      	mov	r3, r0
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f000 fb04 	bl	8002a08 <I2C_RequestMemoryWrite>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d052      	beq.n	80024ac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e081      	b.n	800250e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 fd92 	bl	8002f38 <I2C_WaitOnTXEFlagUntilTimeout>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00d      	beq.n	8002436 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241e:	2b04      	cmp	r3, #4
 8002420:	d107      	bne.n	8002432 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002430:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e06b      	b.n	800250e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243a:	781a      	ldrb	r2, [r3, #0]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002446:	1c5a      	adds	r2, r3, #1
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002450:	3b01      	subs	r3, #1
 8002452:	b29a      	uxth	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800245c:	b29b      	uxth	r3, r3
 800245e:	3b01      	subs	r3, #1
 8002460:	b29a      	uxth	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	2b04      	cmp	r3, #4
 8002472:	d11b      	bne.n	80024ac <HAL_I2C_Mem_Write+0x180>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002478:	2b00      	cmp	r3, #0
 800247a:	d017      	beq.n	80024ac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002480:	781a      	ldrb	r2, [r3, #0]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248c:	1c5a      	adds	r2, r3, #1
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002496:	3b01      	subs	r3, #1
 8002498:	b29a      	uxth	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	3b01      	subs	r3, #1
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1aa      	bne.n	800240a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024b4:	697a      	ldr	r2, [r7, #20]
 80024b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f000 fd85 	bl	8002fc8 <I2C_WaitOnBTFFlagUntilTimeout>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d00d      	beq.n	80024e0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c8:	2b04      	cmp	r3, #4
 80024ca:	d107      	bne.n	80024dc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024da:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e016      	b.n	800250e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2220      	movs	r2, #32
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002508:	2300      	movs	r3, #0
 800250a:	e000      	b.n	800250e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800250c:	2302      	movs	r3, #2
  }
}
 800250e:	4618      	mov	r0, r3
 8002510:	3718      	adds	r7, #24
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	00100002 	.word	0x00100002
 800251c:	ffff0000 	.word	0xffff0000

08002520 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08c      	sub	sp, #48	@ 0x30
 8002524:	af02      	add	r7, sp, #8
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	4608      	mov	r0, r1
 800252a:	4611      	mov	r1, r2
 800252c:	461a      	mov	r2, r3
 800252e:	4603      	mov	r3, r0
 8002530:	817b      	strh	r3, [r7, #10]
 8002532:	460b      	mov	r3, r1
 8002534:	813b      	strh	r3, [r7, #8]
 8002536:	4613      	mov	r3, r2
 8002538:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800253a:	2300      	movs	r3, #0
 800253c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800253e:	f7ff f893 	bl	8001668 <HAL_GetTick>
 8002542:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b20      	cmp	r3, #32
 800254e:	f040 8250 	bne.w	80029f2 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	2319      	movs	r3, #25
 8002558:	2201      	movs	r2, #1
 800255a:	4982      	ldr	r1, [pc, #520]	@ (8002764 <HAL_I2C_Mem_Read+0x244>)
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	f000 fbd1 	bl	8002d04 <I2C_WaitOnFlagUntilTimeout>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002568:	2302      	movs	r3, #2
 800256a:	e243      	b.n	80029f4 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002572:	2b01      	cmp	r3, #1
 8002574:	d101      	bne.n	800257a <HAL_I2C_Mem_Read+0x5a>
 8002576:	2302      	movs	r3, #2
 8002578:	e23c      	b.n	80029f4 <HAL_I2C_Mem_Read+0x4d4>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2201      	movs	r2, #1
 800257e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	2b01      	cmp	r3, #1
 800258e:	d007      	beq.n	80025a0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f042 0201 	orr.w	r2, r2, #1
 800259e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2222      	movs	r2, #34	@ 0x22
 80025b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2240      	movs	r2, #64	@ 0x40
 80025bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80025d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	4a62      	ldr	r2, [pc, #392]	@ (8002768 <HAL_I2C_Mem_Read+0x248>)
 80025e0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025e2:	88f8      	ldrh	r0, [r7, #6]
 80025e4:	893a      	ldrh	r2, [r7, #8]
 80025e6:	8979      	ldrh	r1, [r7, #10]
 80025e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ea:	9301      	str	r3, [sp, #4]
 80025ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025ee:	9300      	str	r3, [sp, #0]
 80025f0:	4603      	mov	r3, r0
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f000 fa9e 	bl	8002b34 <I2C_RequestMemoryRead>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e1f8      	b.n	80029f4 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002606:	2b00      	cmp	r3, #0
 8002608:	d113      	bne.n	8002632 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800260a:	2300      	movs	r3, #0
 800260c:	61fb      	str	r3, [r7, #28]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	695b      	ldr	r3, [r3, #20]
 8002614:	61fb      	str	r3, [r7, #28]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	61fb      	str	r3, [r7, #28]
 800261e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	e1cc      	b.n	80029cc <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002636:	2b01      	cmp	r3, #1
 8002638:	d11e      	bne.n	8002678 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002648:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800264a:	b672      	cpsid	i
}
 800264c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800264e:	2300      	movs	r3, #0
 8002650:	61bb      	str	r3, [r7, #24]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	695b      	ldr	r3, [r3, #20]
 8002658:	61bb      	str	r3, [r7, #24]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	61bb      	str	r3, [r7, #24]
 8002662:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002672:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002674:	b662      	cpsie	i
}
 8002676:	e035      	b.n	80026e4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800267c:	2b02      	cmp	r3, #2
 800267e:	d11e      	bne.n	80026be <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800268e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002690:	b672      	cpsid	i
}
 8002692:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002694:	2300      	movs	r3, #0
 8002696:	617b      	str	r3, [r7, #20]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	617b      	str	r3, [r7, #20]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	617b      	str	r3, [r7, #20]
 80026a8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80026ba:	b662      	cpsie	i
}
 80026bc:	e012      	b.n	80026e4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80026cc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ce:	2300      	movs	r3, #0
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	613b      	str	r3, [r7, #16]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	613b      	str	r3, [r7, #16]
 80026e2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80026e4:	e172      	b.n	80029cc <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ea:	2b03      	cmp	r3, #3
 80026ec:	f200 811f 	bhi.w	800292e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d123      	bne.n	8002740 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026fa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	f000 fcab 	bl	8003058 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e173      	b.n	80029f4 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	691a      	ldr	r2, [r3, #16]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271e:	1c5a      	adds	r2, r3, #1
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002728:	3b01      	subs	r3, #1
 800272a:	b29a      	uxth	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002734:	b29b      	uxth	r3, r3
 8002736:	3b01      	subs	r3, #1
 8002738:	b29a      	uxth	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800273e:	e145      	b.n	80029cc <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002744:	2b02      	cmp	r3, #2
 8002746:	d152      	bne.n	80027ee <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800274e:	2200      	movs	r2, #0
 8002750:	4906      	ldr	r1, [pc, #24]	@ (800276c <HAL_I2C_Mem_Read+0x24c>)
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f000 fad6 	bl	8002d04 <I2C_WaitOnFlagUntilTimeout>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d008      	beq.n	8002770 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e148      	b.n	80029f4 <HAL_I2C_Mem_Read+0x4d4>
 8002762:	bf00      	nop
 8002764:	00100002 	.word	0x00100002
 8002768:	ffff0000 	.word	0xffff0000
 800276c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002770:	b672      	cpsid	i
}
 8002772:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002782:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	691a      	ldr	r2, [r3, #16]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278e:	b2d2      	uxtb	r2, r2
 8002790:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002796:	1c5a      	adds	r2, r3, #1
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027a0:	3b01      	subs	r3, #1
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	3b01      	subs	r3, #1
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80027b6:	b662      	cpsie	i
}
 80027b8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	691a      	ldr	r2, [r3, #16]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c4:	b2d2      	uxtb	r2, r2
 80027c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027cc:	1c5a      	adds	r2, r3, #1
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027d6:	3b01      	subs	r3, #1
 80027d8:	b29a      	uxth	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	3b01      	subs	r3, #1
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80027ec:	e0ee      	b.n	80029cc <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027f4:	2200      	movs	r2, #0
 80027f6:	4981      	ldr	r1, [pc, #516]	@ (80029fc <HAL_I2C_Mem_Read+0x4dc>)
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f000 fa83 	bl	8002d04 <I2C_WaitOnFlagUntilTimeout>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e0f5      	b.n	80029f4 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002816:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002818:	b672      	cpsid	i
}
 800281a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	691a      	ldr	r2, [r3, #16]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800282e:	1c5a      	adds	r2, r3, #1
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002838:	3b01      	subs	r3, #1
 800283a:	b29a      	uxth	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002844:	b29b      	uxth	r3, r3
 8002846:	3b01      	subs	r3, #1
 8002848:	b29a      	uxth	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800284e:	4b6c      	ldr	r3, [pc, #432]	@ (8002a00 <HAL_I2C_Mem_Read+0x4e0>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	08db      	lsrs	r3, r3, #3
 8002854:	4a6b      	ldr	r2, [pc, #428]	@ (8002a04 <HAL_I2C_Mem_Read+0x4e4>)
 8002856:	fba2 2303 	umull	r2, r3, r2, r3
 800285a:	0a1a      	lsrs	r2, r3, #8
 800285c:	4613      	mov	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	00da      	lsls	r2, r3, #3
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002868:	6a3b      	ldr	r3, [r7, #32]
 800286a:	3b01      	subs	r3, #1
 800286c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800286e:	6a3b      	ldr	r3, [r7, #32]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d118      	bne.n	80028a6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2220      	movs	r2, #32
 800287e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288e:	f043 0220 	orr.w	r2, r3, #32
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002896:	b662      	cpsie	i
}
 8002898:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e0a6      	b.n	80029f4 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	2b04      	cmp	r3, #4
 80028b2:	d1d9      	bne.n	8002868 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	691a      	ldr	r2, [r3, #16]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ce:	b2d2      	uxtb	r2, r2
 80028d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d6:	1c5a      	adds	r2, r3, #1
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028e0:	3b01      	subs	r3, #1
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	3b01      	subs	r3, #1
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80028f6:	b662      	cpsie	i
}
 80028f8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	691a      	ldr	r2, [r3, #16]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002904:	b2d2      	uxtb	r2, r2
 8002906:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290c:	1c5a      	adds	r2, r3, #1
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002916:	3b01      	subs	r3, #1
 8002918:	b29a      	uxth	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002922:	b29b      	uxth	r3, r3
 8002924:	3b01      	subs	r3, #1
 8002926:	b29a      	uxth	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800292c:	e04e      	b.n	80029cc <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800292e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002930:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f000 fb90 	bl	8003058 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e058      	b.n	80029f4 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	691a      	ldr	r2, [r3, #16]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800294c:	b2d2      	uxtb	r2, r2
 800294e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002954:	1c5a      	adds	r2, r3, #1
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800295e:	3b01      	subs	r3, #1
 8002960:	b29a      	uxth	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800296a:	b29b      	uxth	r3, r3
 800296c:	3b01      	subs	r3, #1
 800296e:	b29a      	uxth	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	f003 0304 	and.w	r3, r3, #4
 800297e:	2b04      	cmp	r3, #4
 8002980:	d124      	bne.n	80029cc <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002986:	2b03      	cmp	r3, #3
 8002988:	d107      	bne.n	800299a <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002998:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	691a      	ldr	r2, [r3, #16]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ac:	1c5a      	adds	r2, r3, #1
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029b6:	3b01      	subs	r3, #1
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	3b01      	subs	r3, #1
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f47f ae88 	bne.w	80026e6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2220      	movs	r2, #32
 80029da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80029ee:	2300      	movs	r3, #0
 80029f0:	e000      	b.n	80029f4 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80029f2:	2302      	movs	r3, #2
  }
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3728      	adds	r7, #40	@ 0x28
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	00010004 	.word	0x00010004
 8002a00:	200000c8 	.word	0x200000c8
 8002a04:	14f8b589 	.word	0x14f8b589

08002a08 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b088      	sub	sp, #32
 8002a0c:	af02      	add	r7, sp, #8
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	4608      	mov	r0, r1
 8002a12:	4611      	mov	r1, r2
 8002a14:	461a      	mov	r2, r3
 8002a16:	4603      	mov	r3, r0
 8002a18:	817b      	strh	r3, [r7, #10]
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	813b      	strh	r3, [r7, #8]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	6a3b      	ldr	r3, [r7, #32]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f000 f960 	bl	8002d04 <I2C_WaitOnFlagUntilTimeout>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00d      	beq.n	8002a66 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a58:	d103      	bne.n	8002a62 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a60:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e05f      	b.n	8002b26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a66:	897b      	ldrh	r3, [r7, #10]
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002a74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a78:	6a3a      	ldr	r2, [r7, #32]
 8002a7a:	492d      	ldr	r1, [pc, #180]	@ (8002b30 <I2C_RequestMemoryWrite+0x128>)
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	f000 f9bb 	bl	8002df8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e04c      	b.n	8002b26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	617b      	str	r3, [r7, #20]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	617b      	str	r3, [r7, #20]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	617b      	str	r3, [r7, #20]
 8002aa0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aa4:	6a39      	ldr	r1, [r7, #32]
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f000 fa46 	bl	8002f38 <I2C_WaitOnTXEFlagUntilTimeout>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00d      	beq.n	8002ace <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	d107      	bne.n	8002aca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ac8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e02b      	b.n	8002b26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ace:	88fb      	ldrh	r3, [r7, #6]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d105      	bne.n	8002ae0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ad4:	893b      	ldrh	r3, [r7, #8]
 8002ad6:	b2da      	uxtb	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	611a      	str	r2, [r3, #16]
 8002ade:	e021      	b.n	8002b24 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ae0:	893b      	ldrh	r3, [r7, #8]
 8002ae2:	0a1b      	lsrs	r3, r3, #8
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	b2da      	uxtb	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002af0:	6a39      	ldr	r1, [r7, #32]
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f000 fa20 	bl	8002f38 <I2C_WaitOnTXEFlagUntilTimeout>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00d      	beq.n	8002b1a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b02:	2b04      	cmp	r3, #4
 8002b04:	d107      	bne.n	8002b16 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e005      	b.n	8002b26 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b1a:	893b      	ldrh	r3, [r7, #8]
 8002b1c:	b2da      	uxtb	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3718      	adds	r7, #24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	00010002 	.word	0x00010002

08002b34 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b088      	sub	sp, #32
 8002b38:	af02      	add	r7, sp, #8
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	4608      	mov	r0, r1
 8002b3e:	4611      	mov	r1, r2
 8002b40:	461a      	mov	r2, r3
 8002b42:	4603      	mov	r3, r0
 8002b44:	817b      	strh	r3, [r7, #10]
 8002b46:	460b      	mov	r3, r1
 8002b48:	813b      	strh	r3, [r7, #8]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b5c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b70:	9300      	str	r3, [sp, #0]
 8002b72:	6a3b      	ldr	r3, [r7, #32]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 f8c2 	bl	8002d04 <I2C_WaitOnFlagUntilTimeout>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00d      	beq.n	8002ba2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b94:	d103      	bne.n	8002b9e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b9c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e0aa      	b.n	8002cf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ba2:	897b      	ldrh	r3, [r7, #10]
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002bb0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb4:	6a3a      	ldr	r2, [r7, #32]
 8002bb6:	4952      	ldr	r1, [pc, #328]	@ (8002d00 <I2C_RequestMemoryRead+0x1cc>)
 8002bb8:	68f8      	ldr	r0, [r7, #12]
 8002bba:	f000 f91d 	bl	8002df8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e097      	b.n	8002cf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bc8:	2300      	movs	r3, #0
 8002bca:	617b      	str	r3, [r7, #20]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002be0:	6a39      	ldr	r1, [r7, #32]
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f000 f9a8 	bl	8002f38 <I2C_WaitOnTXEFlagUntilTimeout>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00d      	beq.n	8002c0a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	d107      	bne.n	8002c06 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e076      	b.n	8002cf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c0a:	88fb      	ldrh	r3, [r7, #6]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d105      	bne.n	8002c1c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c10:	893b      	ldrh	r3, [r7, #8]
 8002c12:	b2da      	uxtb	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	611a      	str	r2, [r3, #16]
 8002c1a:	e021      	b.n	8002c60 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c1c:	893b      	ldrh	r3, [r7, #8]
 8002c1e:	0a1b      	lsrs	r3, r3, #8
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c2c:	6a39      	ldr	r1, [r7, #32]
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	f000 f982 	bl	8002f38 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00d      	beq.n	8002c56 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d107      	bne.n	8002c52 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e050      	b.n	8002cf8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c56:	893b      	ldrh	r3, [r7, #8]
 8002c58:	b2da      	uxtb	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c62:	6a39      	ldr	r1, [r7, #32]
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f000 f967 	bl	8002f38 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00d      	beq.n	8002c8c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	d107      	bne.n	8002c88 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c86:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e035      	b.n	8002cf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c9a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9e:	9300      	str	r3, [sp, #0]
 8002ca0:	6a3b      	ldr	r3, [r7, #32]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f000 f82b 	bl	8002d04 <I2C_WaitOnFlagUntilTimeout>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00d      	beq.n	8002cd0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cc2:	d103      	bne.n	8002ccc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e013      	b.n	8002cf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002cd0:	897b      	ldrh	r3, [r7, #10]
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	f043 0301 	orr.w	r3, r3, #1
 8002cd8:	b2da      	uxtb	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce2:	6a3a      	ldr	r2, [r7, #32]
 8002ce4:	4906      	ldr	r1, [pc, #24]	@ (8002d00 <I2C_RequestMemoryRead+0x1cc>)
 8002ce6:	68f8      	ldr	r0, [r7, #12]
 8002ce8:	f000 f886 	bl	8002df8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3718      	adds	r7, #24
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	00010002 	.word	0x00010002

08002d04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	603b      	str	r3, [r7, #0]
 8002d10:	4613      	mov	r3, r2
 8002d12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d14:	e048      	b.n	8002da8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d1c:	d044      	beq.n	8002da8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d1e:	f7fe fca3 	bl	8001668 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d302      	bcc.n	8002d34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d139      	bne.n	8002da8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	0c1b      	lsrs	r3, r3, #16
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d10d      	bne.n	8002d5a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	43da      	mvns	r2, r3
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	bf0c      	ite	eq
 8002d50:	2301      	moveq	r3, #1
 8002d52:	2300      	movne	r3, #0
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	461a      	mov	r2, r3
 8002d58:	e00c      	b.n	8002d74 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	43da      	mvns	r2, r3
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	4013      	ands	r3, r2
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	bf0c      	ite	eq
 8002d6c:	2301      	moveq	r3, #1
 8002d6e:	2300      	movne	r3, #0
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	461a      	mov	r2, r3
 8002d74:	79fb      	ldrb	r3, [r7, #7]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d116      	bne.n	8002da8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2220      	movs	r2, #32
 8002d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d94:	f043 0220 	orr.w	r2, r3, #32
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e023      	b.n	8002df0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	0c1b      	lsrs	r3, r3, #16
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d10d      	bne.n	8002dce <I2C_WaitOnFlagUntilTimeout+0xca>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	43da      	mvns	r2, r3
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	bf0c      	ite	eq
 8002dc4:	2301      	moveq	r3, #1
 8002dc6:	2300      	movne	r3, #0
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	461a      	mov	r2, r3
 8002dcc:	e00c      	b.n	8002de8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	43da      	mvns	r2, r3
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	bf0c      	ite	eq
 8002de0:	2301      	moveq	r3, #1
 8002de2:	2300      	movne	r3, #0
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	461a      	mov	r2, r3
 8002de8:	79fb      	ldrb	r3, [r7, #7]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d093      	beq.n	8002d16 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3710      	adds	r7, #16
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
 8002e04:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e06:	e071      	b.n	8002eec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e16:	d123      	bne.n	8002e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e26:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2220      	movs	r2, #32
 8002e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4c:	f043 0204 	orr.w	r2, r3, #4
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e067      	b.n	8002f30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e66:	d041      	beq.n	8002eec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e68:	f7fe fbfe 	bl	8001668 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d302      	bcc.n	8002e7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d136      	bne.n	8002eec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	0c1b      	lsrs	r3, r3, #16
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d10c      	bne.n	8002ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	43da      	mvns	r2, r3
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	4013      	ands	r3, r2
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	bf14      	ite	ne
 8002e9a:	2301      	movne	r3, #1
 8002e9c:	2300      	moveq	r3, #0
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	e00b      	b.n	8002eba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	43da      	mvns	r2, r3
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	4013      	ands	r3, r2
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	bf14      	ite	ne
 8002eb4:	2301      	movne	r3, #1
 8002eb6:	2300      	moveq	r3, #0
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d016      	beq.n	8002eec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2220      	movs	r2, #32
 8002ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed8:	f043 0220 	orr.w	r2, r3, #32
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e021      	b.n	8002f30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	0c1b      	lsrs	r3, r3, #16
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d10c      	bne.n	8002f10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	43da      	mvns	r2, r3
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	4013      	ands	r3, r2
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	bf14      	ite	ne
 8002f08:	2301      	movne	r3, #1
 8002f0a:	2300      	moveq	r3, #0
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	e00b      	b.n	8002f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	43da      	mvns	r2, r3
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	bf14      	ite	ne
 8002f22:	2301      	movne	r3, #1
 8002f24:	2300      	moveq	r3, #0
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f47f af6d 	bne.w	8002e08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f44:	e034      	b.n	8002fb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f000 f8e3 	bl	8003112 <I2C_IsAcknowledgeFailed>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e034      	b.n	8002fc0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f5c:	d028      	beq.n	8002fb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f5e:	f7fe fb83 	bl	8001668 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	68ba      	ldr	r2, [r7, #8]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d302      	bcc.n	8002f74 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d11d      	bne.n	8002fb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f7e:	2b80      	cmp	r3, #128	@ 0x80
 8002f80:	d016      	beq.n	8002fb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2220      	movs	r2, #32
 8002f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9c:	f043 0220 	orr.w	r2, r3, #32
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e007      	b.n	8002fc0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fba:	2b80      	cmp	r3, #128	@ 0x80
 8002fbc:	d1c3      	bne.n	8002f46 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fd4:	e034      	b.n	8003040 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f000 f89b 	bl	8003112 <I2C_IsAcknowledgeFailed>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e034      	b.n	8003050 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fec:	d028      	beq.n	8003040 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fee:	f7fe fb3b 	bl	8001668 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	68ba      	ldr	r2, [r7, #8]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d302      	bcc.n	8003004 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d11d      	bne.n	8003040 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	f003 0304 	and.w	r3, r3, #4
 800300e:	2b04      	cmp	r3, #4
 8003010:	d016      	beq.n	8003040 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2220      	movs	r2, #32
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302c:	f043 0220 	orr.w	r2, r3, #32
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e007      	b.n	8003050 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	f003 0304 	and.w	r3, r3, #4
 800304a:	2b04      	cmp	r3, #4
 800304c:	d1c3      	bne.n	8002fd6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3710      	adds	r7, #16
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003064:	e049      	b.n	80030fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	f003 0310 	and.w	r3, r3, #16
 8003070:	2b10      	cmp	r3, #16
 8003072:	d119      	bne.n	80030a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f06f 0210 	mvn.w	r2, #16
 800307c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2220      	movs	r2, #32
 8003088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e030      	b.n	800310a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030a8:	f7fe fade 	bl	8001668 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	68ba      	ldr	r2, [r7, #8]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d302      	bcc.n	80030be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d11d      	bne.n	80030fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030c8:	2b40      	cmp	r3, #64	@ 0x40
 80030ca:	d016      	beq.n	80030fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2220      	movs	r2, #32
 80030d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e6:	f043 0220 	orr.w	r2, r3, #32
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e007      	b.n	800310a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003104:	2b40      	cmp	r3, #64	@ 0x40
 8003106:	d1ae      	bne.n	8003066 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003112:	b480      	push	{r7}
 8003114:	b083      	sub	sp, #12
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	695b      	ldr	r3, [r3, #20]
 8003120:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003124:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003128:	d11b      	bne.n	8003162 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003132:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2220      	movs	r2, #32
 800313e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314e:	f043 0204 	orr.w	r2, r3, #4
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e000      	b.n	8003164 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	bc80      	pop	{r7}
 800316c:	4770      	bx	lr
	...

08003170 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e272      	b.n	8003668 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b00      	cmp	r3, #0
 800318c:	f000 8087 	beq.w	800329e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003190:	4b92      	ldr	r3, [pc, #584]	@ (80033dc <HAL_RCC_OscConfig+0x26c>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f003 030c 	and.w	r3, r3, #12
 8003198:	2b04      	cmp	r3, #4
 800319a:	d00c      	beq.n	80031b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800319c:	4b8f      	ldr	r3, [pc, #572]	@ (80033dc <HAL_RCC_OscConfig+0x26c>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f003 030c 	and.w	r3, r3, #12
 80031a4:	2b08      	cmp	r3, #8
 80031a6:	d112      	bne.n	80031ce <HAL_RCC_OscConfig+0x5e>
 80031a8:	4b8c      	ldr	r3, [pc, #560]	@ (80033dc <HAL_RCC_OscConfig+0x26c>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031b4:	d10b      	bne.n	80031ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031b6:	4b89      	ldr	r3, [pc, #548]	@ (80033dc <HAL_RCC_OscConfig+0x26c>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d06c      	beq.n	800329c <HAL_RCC_OscConfig+0x12c>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d168      	bne.n	800329c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e24c      	b.n	8003668 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031d6:	d106      	bne.n	80031e6 <HAL_RCC_OscConfig+0x76>
 80031d8:	4b80      	ldr	r3, [pc, #512]	@ (80033dc <HAL_RCC_OscConfig+0x26c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a7f      	ldr	r2, [pc, #508]	@ (80033dc <HAL_RCC_OscConfig+0x26c>)
 80031de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031e2:	6013      	str	r3, [r2, #0]
 80031e4:	e02e      	b.n	8003244 <HAL_RCC_OscConfig+0xd4>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d10c      	bne.n	8003208 <HAL_RCC_OscConfig+0x98>
 80031ee:	4b7b      	ldr	r3, [pc, #492]	@ (80033dc <HAL_RCC_OscConfig+0x26c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a7a      	ldr	r2, [pc, #488]	@ (80033dc <HAL_RCC_OscConfig+0x26c>)
 80031f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031f8:	6013      	str	r3, [r2, #0]
 80031fa:	4b78      	ldr	r3, [pc, #480]	@ (80033dc <HAL_RCC_OscConfig+0x26c>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a77      	ldr	r2, [pc, #476]	@ (80033dc <HAL_RCC_OscConfig+0x26c>)
 8003200:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003204:	6013      	str	r3, [r2, #0]
 8003206:	e01d      	b.n	8003244 <HAL_RCC_OscConfig+0xd4>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003210:	d10c      	bne.n	800322c <HAL_RCC_OscConfig+0xbc>
 8003212:	4b72      	ldr	r3, [pc, #456]	@ (80033dc <HAL_RCC_OscConfig+0x26c>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a71      	ldr	r2, [pc, #452]	@ (80033dc <HAL_RCC_OscConfig+0x26c>)
 8003218:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800321c:	6013      	str	r3, [r2, #0]
 800321e:	4b6f      	ldr	r3, [pc, #444]	@ (80033dc <HAL_RCC_OscConfig+0x26c>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a6e      	ldr	r2, [pc, #440]	@ (80033dc <HAL_RCC_OscConfig+0x26c>)
 8003224:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003228:	6013      	str	r3, [r2, #0]
 800322a:	e00b      	b.n	8003244 <HAL_RCC_OscConfig+0xd4>
 800322c:	4b6b      	ldr	r3, [pc, #428]	@ (80033dc <HAL_RCC_OscConfig+0x26c>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a6a      	ldr	r2, [pc, #424]	@ (80033dc <HAL_RCC_OscConfig+0x26c>)
 8003232:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003236:	6013      	str	r3, [r2, #0]
 8003238:	4b68      	ldr	r3, [pc, #416]	@ (80033dc <HAL_RCC_OscConfig+0x26c>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a67      	ldr	r2, [pc, #412]	@ (80033dc <HAL_RCC_OscConfig+0x26c>)
 800323e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003242:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d013      	beq.n	8003274 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800324c:	f7fe fa0c 	bl	8001668 <HAL_GetTick>
 8003250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003252:	e008      	b.n	8003266 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003254:	f7fe fa08 	bl	8001668 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b64      	cmp	r3, #100	@ 0x64
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e200      	b.n	8003668 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003266:	4b5d      	ldr	r3, [pc, #372]	@ (80033dc <HAL_RCC_OscConfig+0x26c>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d0f0      	beq.n	8003254 <HAL_RCC_OscConfig+0xe4>
 8003272:	e014      	b.n	800329e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003274:	f7fe f9f8 	bl	8001668 <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800327c:	f7fe f9f4 	bl	8001668 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b64      	cmp	r3, #100	@ 0x64
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e1ec      	b.n	8003668 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800328e:	4b53      	ldr	r3, [pc, #332]	@ (80033dc <HAL_RCC_OscConfig+0x26c>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1f0      	bne.n	800327c <HAL_RCC_OscConfig+0x10c>
 800329a:	e000      	b.n	800329e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800329c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d063      	beq.n	8003372 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032aa:	4b4c      	ldr	r3, [pc, #304]	@ (80033dc <HAL_RCC_OscConfig+0x26c>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f003 030c 	and.w	r3, r3, #12
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00b      	beq.n	80032ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80032b6:	4b49      	ldr	r3, [pc, #292]	@ (80033dc <HAL_RCC_OscConfig+0x26c>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f003 030c 	and.w	r3, r3, #12
 80032be:	2b08      	cmp	r3, #8
 80032c0:	d11c      	bne.n	80032fc <HAL_RCC_OscConfig+0x18c>
 80032c2:	4b46      	ldr	r3, [pc, #280]	@ (80033dc <HAL_RCC_OscConfig+0x26c>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d116      	bne.n	80032fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ce:	4b43      	ldr	r3, [pc, #268]	@ (80033dc <HAL_RCC_OscConfig+0x26c>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d005      	beq.n	80032e6 <HAL_RCC_OscConfig+0x176>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d001      	beq.n	80032e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e1c0      	b.n	8003668 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032e6:	4b3d      	ldr	r3, [pc, #244]	@ (80033dc <HAL_RCC_OscConfig+0x26c>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	4939      	ldr	r1, [pc, #228]	@ (80033dc <HAL_RCC_OscConfig+0x26c>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032fa:	e03a      	b.n	8003372 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d020      	beq.n	8003346 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003304:	4b36      	ldr	r3, [pc, #216]	@ (80033e0 <HAL_RCC_OscConfig+0x270>)
 8003306:	2201      	movs	r2, #1
 8003308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800330a:	f7fe f9ad 	bl	8001668 <HAL_GetTick>
 800330e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003310:	e008      	b.n	8003324 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003312:	f7fe f9a9 	bl	8001668 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b02      	cmp	r3, #2
 800331e:	d901      	bls.n	8003324 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e1a1      	b.n	8003668 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003324:	4b2d      	ldr	r3, [pc, #180]	@ (80033dc <HAL_RCC_OscConfig+0x26c>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d0f0      	beq.n	8003312 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003330:	4b2a      	ldr	r3, [pc, #168]	@ (80033dc <HAL_RCC_OscConfig+0x26c>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	00db      	lsls	r3, r3, #3
 800333e:	4927      	ldr	r1, [pc, #156]	@ (80033dc <HAL_RCC_OscConfig+0x26c>)
 8003340:	4313      	orrs	r3, r2
 8003342:	600b      	str	r3, [r1, #0]
 8003344:	e015      	b.n	8003372 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003346:	4b26      	ldr	r3, [pc, #152]	@ (80033e0 <HAL_RCC_OscConfig+0x270>)
 8003348:	2200      	movs	r2, #0
 800334a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800334c:	f7fe f98c 	bl	8001668 <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003354:	f7fe f988 	bl	8001668 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e180      	b.n	8003668 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003366:	4b1d      	ldr	r3, [pc, #116]	@ (80033dc <HAL_RCC_OscConfig+0x26c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1f0      	bne.n	8003354 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0308 	and.w	r3, r3, #8
 800337a:	2b00      	cmp	r3, #0
 800337c:	d03a      	beq.n	80033f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d019      	beq.n	80033ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003386:	4b17      	ldr	r3, [pc, #92]	@ (80033e4 <HAL_RCC_OscConfig+0x274>)
 8003388:	2201      	movs	r2, #1
 800338a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800338c:	f7fe f96c 	bl	8001668 <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003394:	f7fe f968 	bl	8001668 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e160      	b.n	8003668 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033a6:	4b0d      	ldr	r3, [pc, #52]	@ (80033dc <HAL_RCC_OscConfig+0x26c>)
 80033a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d0f0      	beq.n	8003394 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80033b2:	2001      	movs	r0, #1
 80033b4:	f000 face 	bl	8003954 <RCC_Delay>
 80033b8:	e01c      	b.n	80033f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033ba:	4b0a      	ldr	r3, [pc, #40]	@ (80033e4 <HAL_RCC_OscConfig+0x274>)
 80033bc:	2200      	movs	r2, #0
 80033be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033c0:	f7fe f952 	bl	8001668 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033c6:	e00f      	b.n	80033e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033c8:	f7fe f94e 	bl	8001668 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d908      	bls.n	80033e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e146      	b.n	8003668 <HAL_RCC_OscConfig+0x4f8>
 80033da:	bf00      	nop
 80033dc:	40021000 	.word	0x40021000
 80033e0:	42420000 	.word	0x42420000
 80033e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033e8:	4b92      	ldr	r3, [pc, #584]	@ (8003634 <HAL_RCC_OscConfig+0x4c4>)
 80033ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1e9      	bne.n	80033c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0304 	and.w	r3, r3, #4
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f000 80a6 	beq.w	800354e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003402:	2300      	movs	r3, #0
 8003404:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003406:	4b8b      	ldr	r3, [pc, #556]	@ (8003634 <HAL_RCC_OscConfig+0x4c4>)
 8003408:	69db      	ldr	r3, [r3, #28]
 800340a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10d      	bne.n	800342e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003412:	4b88      	ldr	r3, [pc, #544]	@ (8003634 <HAL_RCC_OscConfig+0x4c4>)
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	4a87      	ldr	r2, [pc, #540]	@ (8003634 <HAL_RCC_OscConfig+0x4c4>)
 8003418:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800341c:	61d3      	str	r3, [r2, #28]
 800341e:	4b85      	ldr	r3, [pc, #532]	@ (8003634 <HAL_RCC_OscConfig+0x4c4>)
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003426:	60bb      	str	r3, [r7, #8]
 8003428:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800342a:	2301      	movs	r3, #1
 800342c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800342e:	4b82      	ldr	r3, [pc, #520]	@ (8003638 <HAL_RCC_OscConfig+0x4c8>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003436:	2b00      	cmp	r3, #0
 8003438:	d118      	bne.n	800346c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800343a:	4b7f      	ldr	r3, [pc, #508]	@ (8003638 <HAL_RCC_OscConfig+0x4c8>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a7e      	ldr	r2, [pc, #504]	@ (8003638 <HAL_RCC_OscConfig+0x4c8>)
 8003440:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003444:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003446:	f7fe f90f 	bl	8001668 <HAL_GetTick>
 800344a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800344c:	e008      	b.n	8003460 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800344e:	f7fe f90b 	bl	8001668 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	2b64      	cmp	r3, #100	@ 0x64
 800345a:	d901      	bls.n	8003460 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e103      	b.n	8003668 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003460:	4b75      	ldr	r3, [pc, #468]	@ (8003638 <HAL_RCC_OscConfig+0x4c8>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003468:	2b00      	cmp	r3, #0
 800346a:	d0f0      	beq.n	800344e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d106      	bne.n	8003482 <HAL_RCC_OscConfig+0x312>
 8003474:	4b6f      	ldr	r3, [pc, #444]	@ (8003634 <HAL_RCC_OscConfig+0x4c4>)
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	4a6e      	ldr	r2, [pc, #440]	@ (8003634 <HAL_RCC_OscConfig+0x4c4>)
 800347a:	f043 0301 	orr.w	r3, r3, #1
 800347e:	6213      	str	r3, [r2, #32]
 8003480:	e02d      	b.n	80034de <HAL_RCC_OscConfig+0x36e>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10c      	bne.n	80034a4 <HAL_RCC_OscConfig+0x334>
 800348a:	4b6a      	ldr	r3, [pc, #424]	@ (8003634 <HAL_RCC_OscConfig+0x4c4>)
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	4a69      	ldr	r2, [pc, #420]	@ (8003634 <HAL_RCC_OscConfig+0x4c4>)
 8003490:	f023 0301 	bic.w	r3, r3, #1
 8003494:	6213      	str	r3, [r2, #32]
 8003496:	4b67      	ldr	r3, [pc, #412]	@ (8003634 <HAL_RCC_OscConfig+0x4c4>)
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	4a66      	ldr	r2, [pc, #408]	@ (8003634 <HAL_RCC_OscConfig+0x4c4>)
 800349c:	f023 0304 	bic.w	r3, r3, #4
 80034a0:	6213      	str	r3, [r2, #32]
 80034a2:	e01c      	b.n	80034de <HAL_RCC_OscConfig+0x36e>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	2b05      	cmp	r3, #5
 80034aa:	d10c      	bne.n	80034c6 <HAL_RCC_OscConfig+0x356>
 80034ac:	4b61      	ldr	r3, [pc, #388]	@ (8003634 <HAL_RCC_OscConfig+0x4c4>)
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	4a60      	ldr	r2, [pc, #384]	@ (8003634 <HAL_RCC_OscConfig+0x4c4>)
 80034b2:	f043 0304 	orr.w	r3, r3, #4
 80034b6:	6213      	str	r3, [r2, #32]
 80034b8:	4b5e      	ldr	r3, [pc, #376]	@ (8003634 <HAL_RCC_OscConfig+0x4c4>)
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	4a5d      	ldr	r2, [pc, #372]	@ (8003634 <HAL_RCC_OscConfig+0x4c4>)
 80034be:	f043 0301 	orr.w	r3, r3, #1
 80034c2:	6213      	str	r3, [r2, #32]
 80034c4:	e00b      	b.n	80034de <HAL_RCC_OscConfig+0x36e>
 80034c6:	4b5b      	ldr	r3, [pc, #364]	@ (8003634 <HAL_RCC_OscConfig+0x4c4>)
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	4a5a      	ldr	r2, [pc, #360]	@ (8003634 <HAL_RCC_OscConfig+0x4c4>)
 80034cc:	f023 0301 	bic.w	r3, r3, #1
 80034d0:	6213      	str	r3, [r2, #32]
 80034d2:	4b58      	ldr	r3, [pc, #352]	@ (8003634 <HAL_RCC_OscConfig+0x4c4>)
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	4a57      	ldr	r2, [pc, #348]	@ (8003634 <HAL_RCC_OscConfig+0x4c4>)
 80034d8:	f023 0304 	bic.w	r3, r3, #4
 80034dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d015      	beq.n	8003512 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034e6:	f7fe f8bf 	bl	8001668 <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ec:	e00a      	b.n	8003504 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ee:	f7fe f8bb 	bl	8001668 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e0b1      	b.n	8003668 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003504:	4b4b      	ldr	r3, [pc, #300]	@ (8003634 <HAL_RCC_OscConfig+0x4c4>)
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0ee      	beq.n	80034ee <HAL_RCC_OscConfig+0x37e>
 8003510:	e014      	b.n	800353c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003512:	f7fe f8a9 	bl	8001668 <HAL_GetTick>
 8003516:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003518:	e00a      	b.n	8003530 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800351a:	f7fe f8a5 	bl	8001668 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003528:	4293      	cmp	r3, r2
 800352a:	d901      	bls.n	8003530 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e09b      	b.n	8003668 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003530:	4b40      	ldr	r3, [pc, #256]	@ (8003634 <HAL_RCC_OscConfig+0x4c4>)
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1ee      	bne.n	800351a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800353c:	7dfb      	ldrb	r3, [r7, #23]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d105      	bne.n	800354e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003542:	4b3c      	ldr	r3, [pc, #240]	@ (8003634 <HAL_RCC_OscConfig+0x4c4>)
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	4a3b      	ldr	r2, [pc, #236]	@ (8003634 <HAL_RCC_OscConfig+0x4c4>)
 8003548:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800354c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 8087 	beq.w	8003666 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003558:	4b36      	ldr	r3, [pc, #216]	@ (8003634 <HAL_RCC_OscConfig+0x4c4>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f003 030c 	and.w	r3, r3, #12
 8003560:	2b08      	cmp	r3, #8
 8003562:	d061      	beq.n	8003628 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	69db      	ldr	r3, [r3, #28]
 8003568:	2b02      	cmp	r3, #2
 800356a:	d146      	bne.n	80035fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800356c:	4b33      	ldr	r3, [pc, #204]	@ (800363c <HAL_RCC_OscConfig+0x4cc>)
 800356e:	2200      	movs	r2, #0
 8003570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003572:	f7fe f879 	bl	8001668 <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003578:	e008      	b.n	800358c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800357a:	f7fe f875 	bl	8001668 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e06d      	b.n	8003668 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800358c:	4b29      	ldr	r3, [pc, #164]	@ (8003634 <HAL_RCC_OscConfig+0x4c4>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1f0      	bne.n	800357a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035a0:	d108      	bne.n	80035b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035a2:	4b24      	ldr	r3, [pc, #144]	@ (8003634 <HAL_RCC_OscConfig+0x4c4>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	4921      	ldr	r1, [pc, #132]	@ (8003634 <HAL_RCC_OscConfig+0x4c4>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035b4:	4b1f      	ldr	r3, [pc, #124]	@ (8003634 <HAL_RCC_OscConfig+0x4c4>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a19      	ldr	r1, [r3, #32]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c4:	430b      	orrs	r3, r1
 80035c6:	491b      	ldr	r1, [pc, #108]	@ (8003634 <HAL_RCC_OscConfig+0x4c4>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035cc:	4b1b      	ldr	r3, [pc, #108]	@ (800363c <HAL_RCC_OscConfig+0x4cc>)
 80035ce:	2201      	movs	r2, #1
 80035d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d2:	f7fe f849 	bl	8001668 <HAL_GetTick>
 80035d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035d8:	e008      	b.n	80035ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035da:	f7fe f845 	bl	8001668 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d901      	bls.n	80035ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e03d      	b.n	8003668 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035ec:	4b11      	ldr	r3, [pc, #68]	@ (8003634 <HAL_RCC_OscConfig+0x4c4>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d0f0      	beq.n	80035da <HAL_RCC_OscConfig+0x46a>
 80035f8:	e035      	b.n	8003666 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035fa:	4b10      	ldr	r3, [pc, #64]	@ (800363c <HAL_RCC_OscConfig+0x4cc>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003600:	f7fe f832 	bl	8001668 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003608:	f7fe f82e 	bl	8001668 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e026      	b.n	8003668 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800361a:	4b06      	ldr	r3, [pc, #24]	@ (8003634 <HAL_RCC_OscConfig+0x4c4>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1f0      	bne.n	8003608 <HAL_RCC_OscConfig+0x498>
 8003626:	e01e      	b.n	8003666 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	69db      	ldr	r3, [r3, #28]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d107      	bne.n	8003640 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e019      	b.n	8003668 <HAL_RCC_OscConfig+0x4f8>
 8003634:	40021000 	.word	0x40021000
 8003638:	40007000 	.word	0x40007000
 800363c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003640:	4b0b      	ldr	r3, [pc, #44]	@ (8003670 <HAL_RCC_OscConfig+0x500>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	429a      	cmp	r2, r3
 8003652:	d106      	bne.n	8003662 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800365e:	429a      	cmp	r2, r3
 8003660:	d001      	beq.n	8003666 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e000      	b.n	8003668 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	3718      	adds	r7, #24
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	40021000 	.word	0x40021000

08003674 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e0d0      	b.n	800382a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003688:	4b6a      	ldr	r3, [pc, #424]	@ (8003834 <HAL_RCC_ClockConfig+0x1c0>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0307 	and.w	r3, r3, #7
 8003690:	683a      	ldr	r2, [r7, #0]
 8003692:	429a      	cmp	r2, r3
 8003694:	d910      	bls.n	80036b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003696:	4b67      	ldr	r3, [pc, #412]	@ (8003834 <HAL_RCC_ClockConfig+0x1c0>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f023 0207 	bic.w	r2, r3, #7
 800369e:	4965      	ldr	r1, [pc, #404]	@ (8003834 <HAL_RCC_ClockConfig+0x1c0>)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036a6:	4b63      	ldr	r3, [pc, #396]	@ (8003834 <HAL_RCC_ClockConfig+0x1c0>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0307 	and.w	r3, r3, #7
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d001      	beq.n	80036b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e0b8      	b.n	800382a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d020      	beq.n	8003706 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0304 	and.w	r3, r3, #4
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d005      	beq.n	80036dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036d0:	4b59      	ldr	r3, [pc, #356]	@ (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	4a58      	ldr	r2, [pc, #352]	@ (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 80036d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80036da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0308 	and.w	r3, r3, #8
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d005      	beq.n	80036f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036e8:	4b53      	ldr	r3, [pc, #332]	@ (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	4a52      	ldr	r2, [pc, #328]	@ (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 80036ee:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80036f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036f4:	4b50      	ldr	r3, [pc, #320]	@ (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	494d      	ldr	r1, [pc, #308]	@ (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 8003702:	4313      	orrs	r3, r2
 8003704:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b00      	cmp	r3, #0
 8003710:	d040      	beq.n	8003794 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d107      	bne.n	800372a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800371a:	4b47      	ldr	r3, [pc, #284]	@ (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d115      	bne.n	8003752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e07f      	b.n	800382a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	2b02      	cmp	r3, #2
 8003730:	d107      	bne.n	8003742 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003732:	4b41      	ldr	r3, [pc, #260]	@ (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d109      	bne.n	8003752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e073      	b.n	800382a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003742:	4b3d      	ldr	r3, [pc, #244]	@ (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e06b      	b.n	800382a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003752:	4b39      	ldr	r3, [pc, #228]	@ (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f023 0203 	bic.w	r2, r3, #3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	4936      	ldr	r1, [pc, #216]	@ (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 8003760:	4313      	orrs	r3, r2
 8003762:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003764:	f7fd ff80 	bl	8001668 <HAL_GetTick>
 8003768:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800376a:	e00a      	b.n	8003782 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800376c:	f7fd ff7c 	bl	8001668 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	f241 3288 	movw	r2, #5000	@ 0x1388
 800377a:	4293      	cmp	r3, r2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e053      	b.n	800382a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003782:	4b2d      	ldr	r3, [pc, #180]	@ (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f003 020c 	and.w	r2, r3, #12
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	429a      	cmp	r2, r3
 8003792:	d1eb      	bne.n	800376c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003794:	4b27      	ldr	r3, [pc, #156]	@ (8003834 <HAL_RCC_ClockConfig+0x1c0>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0307 	and.w	r3, r3, #7
 800379c:	683a      	ldr	r2, [r7, #0]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d210      	bcs.n	80037c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037a2:	4b24      	ldr	r3, [pc, #144]	@ (8003834 <HAL_RCC_ClockConfig+0x1c0>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f023 0207 	bic.w	r2, r3, #7
 80037aa:	4922      	ldr	r1, [pc, #136]	@ (8003834 <HAL_RCC_ClockConfig+0x1c0>)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037b2:	4b20      	ldr	r3, [pc, #128]	@ (8003834 <HAL_RCC_ClockConfig+0x1c0>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0307 	and.w	r3, r3, #7
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d001      	beq.n	80037c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e032      	b.n	800382a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0304 	and.w	r3, r3, #4
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d008      	beq.n	80037e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037d0:	4b19      	ldr	r3, [pc, #100]	@ (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	4916      	ldr	r1, [pc, #88]	@ (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0308 	and.w	r3, r3, #8
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d009      	beq.n	8003802 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037ee:	4b12      	ldr	r3, [pc, #72]	@ (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	490e      	ldr	r1, [pc, #56]	@ (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003802:	f000 f821 	bl	8003848 <HAL_RCC_GetSysClockFreq>
 8003806:	4602      	mov	r2, r0
 8003808:	4b0b      	ldr	r3, [pc, #44]	@ (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	091b      	lsrs	r3, r3, #4
 800380e:	f003 030f 	and.w	r3, r3, #15
 8003812:	490a      	ldr	r1, [pc, #40]	@ (800383c <HAL_RCC_ClockConfig+0x1c8>)
 8003814:	5ccb      	ldrb	r3, [r1, r3]
 8003816:	fa22 f303 	lsr.w	r3, r2, r3
 800381a:	4a09      	ldr	r2, [pc, #36]	@ (8003840 <HAL_RCC_ClockConfig+0x1cc>)
 800381c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800381e:	4b09      	ldr	r3, [pc, #36]	@ (8003844 <HAL_RCC_ClockConfig+0x1d0>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4618      	mov	r0, r3
 8003824:	f7fd fede 	bl	80015e4 <HAL_InitTick>

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	40022000 	.word	0x40022000
 8003838:	40021000 	.word	0x40021000
 800383c:	0800630c 	.word	0x0800630c
 8003840:	200000c8 	.word	0x200000c8
 8003844:	200000cc 	.word	0x200000cc

08003848 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003848:	b480      	push	{r7}
 800384a:	b087      	sub	sp, #28
 800384c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800384e:	2300      	movs	r3, #0
 8003850:	60fb      	str	r3, [r7, #12]
 8003852:	2300      	movs	r3, #0
 8003854:	60bb      	str	r3, [r7, #8]
 8003856:	2300      	movs	r3, #0
 8003858:	617b      	str	r3, [r7, #20]
 800385a:	2300      	movs	r3, #0
 800385c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800385e:	2300      	movs	r3, #0
 8003860:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003862:	4b1e      	ldr	r3, [pc, #120]	@ (80038dc <HAL_RCC_GetSysClockFreq+0x94>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f003 030c 	and.w	r3, r3, #12
 800386e:	2b04      	cmp	r3, #4
 8003870:	d002      	beq.n	8003878 <HAL_RCC_GetSysClockFreq+0x30>
 8003872:	2b08      	cmp	r3, #8
 8003874:	d003      	beq.n	800387e <HAL_RCC_GetSysClockFreq+0x36>
 8003876:	e027      	b.n	80038c8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003878:	4b19      	ldr	r3, [pc, #100]	@ (80038e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800387a:	613b      	str	r3, [r7, #16]
      break;
 800387c:	e027      	b.n	80038ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	0c9b      	lsrs	r3, r3, #18
 8003882:	f003 030f 	and.w	r3, r3, #15
 8003886:	4a17      	ldr	r2, [pc, #92]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003888:	5cd3      	ldrb	r3, [r2, r3]
 800388a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d010      	beq.n	80038b8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003896:	4b11      	ldr	r3, [pc, #68]	@ (80038dc <HAL_RCC_GetSysClockFreq+0x94>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	0c5b      	lsrs	r3, r3, #17
 800389c:	f003 0301 	and.w	r3, r3, #1
 80038a0:	4a11      	ldr	r2, [pc, #68]	@ (80038e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80038a2:	5cd3      	ldrb	r3, [r2, r3]
 80038a4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a0d      	ldr	r2, [pc, #52]	@ (80038e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80038aa:	fb03 f202 	mul.w	r2, r3, r2
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b4:	617b      	str	r3, [r7, #20]
 80038b6:	e004      	b.n	80038c2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a0c      	ldr	r2, [pc, #48]	@ (80038ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80038bc:	fb02 f303 	mul.w	r3, r2, r3
 80038c0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	613b      	str	r3, [r7, #16]
      break;
 80038c6:	e002      	b.n	80038ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038c8:	4b05      	ldr	r3, [pc, #20]	@ (80038e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80038ca:	613b      	str	r3, [r7, #16]
      break;
 80038cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038ce:	693b      	ldr	r3, [r7, #16]
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	371c      	adds	r7, #28
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bc80      	pop	{r7}
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	40021000 	.word	0x40021000
 80038e0:	007a1200 	.word	0x007a1200
 80038e4:	08006324 	.word	0x08006324
 80038e8:	08006334 	.word	0x08006334
 80038ec:	003d0900 	.word	0x003d0900

080038f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038f4:	4b02      	ldr	r3, [pc, #8]	@ (8003900 <HAL_RCC_GetHCLKFreq+0x10>)
 80038f6:	681b      	ldr	r3, [r3, #0]
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bc80      	pop	{r7}
 80038fe:	4770      	bx	lr
 8003900:	200000c8 	.word	0x200000c8

08003904 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003908:	f7ff fff2 	bl	80038f0 <HAL_RCC_GetHCLKFreq>
 800390c:	4602      	mov	r2, r0
 800390e:	4b05      	ldr	r3, [pc, #20]	@ (8003924 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	0a1b      	lsrs	r3, r3, #8
 8003914:	f003 0307 	and.w	r3, r3, #7
 8003918:	4903      	ldr	r1, [pc, #12]	@ (8003928 <HAL_RCC_GetPCLK1Freq+0x24>)
 800391a:	5ccb      	ldrb	r3, [r1, r3]
 800391c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003920:	4618      	mov	r0, r3
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40021000 	.word	0x40021000
 8003928:	0800631c 	.word	0x0800631c

0800392c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003930:	f7ff ffde 	bl	80038f0 <HAL_RCC_GetHCLKFreq>
 8003934:	4602      	mov	r2, r0
 8003936:	4b05      	ldr	r3, [pc, #20]	@ (800394c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	0adb      	lsrs	r3, r3, #11
 800393c:	f003 0307 	and.w	r3, r3, #7
 8003940:	4903      	ldr	r1, [pc, #12]	@ (8003950 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003942:	5ccb      	ldrb	r3, [r1, r3]
 8003944:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003948:	4618      	mov	r0, r3
 800394a:	bd80      	pop	{r7, pc}
 800394c:	40021000 	.word	0x40021000
 8003950:	0800631c 	.word	0x0800631c

08003954 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800395c:	4b0a      	ldr	r3, [pc, #40]	@ (8003988 <RCC_Delay+0x34>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a0a      	ldr	r2, [pc, #40]	@ (800398c <RCC_Delay+0x38>)
 8003962:	fba2 2303 	umull	r2, r3, r2, r3
 8003966:	0a5b      	lsrs	r3, r3, #9
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	fb02 f303 	mul.w	r3, r2, r3
 800396e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003970:	bf00      	nop
  }
  while (Delay --);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	1e5a      	subs	r2, r3, #1
 8003976:	60fa      	str	r2, [r7, #12]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1f9      	bne.n	8003970 <RCC_Delay+0x1c>
}
 800397c:	bf00      	nop
 800397e:	bf00      	nop
 8003980:	3714      	adds	r7, #20
 8003982:	46bd      	mov	sp, r7
 8003984:	bc80      	pop	{r7}
 8003986:	4770      	bx	lr
 8003988:	200000c8 	.word	0x200000c8
 800398c:	10624dd3 	.word	0x10624dd3

08003990 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e041      	b.n	8003a26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d106      	bne.n	80039bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7fd fbd2 	bl	8001160 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2202      	movs	r2, #2
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	3304      	adds	r3, #4
 80039cc:	4619      	mov	r1, r3
 80039ce:	4610      	mov	r0, r2
 80039d0:	f000 fa5a 	bl	8003e88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
	...

08003a30 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d001      	beq.n	8003a48 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e032      	b.n	8003aae <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a18      	ldr	r2, [pc, #96]	@ (8003ab8 <HAL_TIM_Base_Start+0x88>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d00e      	beq.n	8003a78 <HAL_TIM_Base_Start+0x48>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a62:	d009      	beq.n	8003a78 <HAL_TIM_Base_Start+0x48>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a14      	ldr	r2, [pc, #80]	@ (8003abc <HAL_TIM_Base_Start+0x8c>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d004      	beq.n	8003a78 <HAL_TIM_Base_Start+0x48>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a13      	ldr	r2, [pc, #76]	@ (8003ac0 <HAL_TIM_Base_Start+0x90>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d111      	bne.n	8003a9c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f003 0307 	and.w	r3, r3, #7
 8003a82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2b06      	cmp	r3, #6
 8003a88:	d010      	beq.n	8003aac <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f042 0201 	orr.w	r2, r2, #1
 8003a98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a9a:	e007      	b.n	8003aac <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f042 0201 	orr.w	r2, r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3714      	adds	r7, #20
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bc80      	pop	{r7}
 8003ab6:	4770      	bx	lr
 8003ab8:	40012c00 	.word	0x40012c00
 8003abc:	40000400 	.word	0x40000400
 8003ac0:	40000800 	.word	0x40000800

08003ac4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e041      	b.n	8003b5a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d106      	bne.n	8003af0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f839 	bl	8003b62 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2202      	movs	r2, #2
 8003af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	3304      	adds	r3, #4
 8003b00:	4619      	mov	r1, r3
 8003b02:	4610      	mov	r0, r2
 8003b04:	f000 f9c0 	bl	8003e88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b62:	b480      	push	{r7}
 8003b64:	b083      	sub	sp, #12
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b6a:	bf00      	nop
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bc80      	pop	{r7}
 8003b72:	4770      	bx	lr

08003b74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b80:	2300      	movs	r3, #0
 8003b82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d101      	bne.n	8003b92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b8e:	2302      	movs	r3, #2
 8003b90:	e0ae      	b.n	8003cf0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b0c      	cmp	r3, #12
 8003b9e:	f200 809f 	bhi.w	8003ce0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003ba2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ba8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba8:	08003bdd 	.word	0x08003bdd
 8003bac:	08003ce1 	.word	0x08003ce1
 8003bb0:	08003ce1 	.word	0x08003ce1
 8003bb4:	08003ce1 	.word	0x08003ce1
 8003bb8:	08003c1d 	.word	0x08003c1d
 8003bbc:	08003ce1 	.word	0x08003ce1
 8003bc0:	08003ce1 	.word	0x08003ce1
 8003bc4:	08003ce1 	.word	0x08003ce1
 8003bc8:	08003c5f 	.word	0x08003c5f
 8003bcc:	08003ce1 	.word	0x08003ce1
 8003bd0:	08003ce1 	.word	0x08003ce1
 8003bd4:	08003ce1 	.word	0x08003ce1
 8003bd8:	08003c9f 	.word	0x08003c9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68b9      	ldr	r1, [r7, #8]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f000 f9be 	bl	8003f64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	699a      	ldr	r2, [r3, #24]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f042 0208 	orr.w	r2, r2, #8
 8003bf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	699a      	ldr	r2, [r3, #24]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 0204 	bic.w	r2, r2, #4
 8003c06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6999      	ldr	r1, [r3, #24]
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	691a      	ldr	r2, [r3, #16]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	430a      	orrs	r2, r1
 8003c18:	619a      	str	r2, [r3, #24]
      break;
 8003c1a:	e064      	b.n	8003ce6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68b9      	ldr	r1, [r7, #8]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 fa04 	bl	8004030 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	699a      	ldr	r2, [r3, #24]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	699a      	ldr	r2, [r3, #24]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6999      	ldr	r1, [r3, #24]
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	021a      	lsls	r2, r3, #8
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	619a      	str	r2, [r3, #24]
      break;
 8003c5c:	e043      	b.n	8003ce6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68b9      	ldr	r1, [r7, #8]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f000 fa4d 	bl	8004104 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	69da      	ldr	r2, [r3, #28]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f042 0208 	orr.w	r2, r2, #8
 8003c78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	69da      	ldr	r2, [r3, #28]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 0204 	bic.w	r2, r2, #4
 8003c88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	69d9      	ldr	r1, [r3, #28]
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	691a      	ldr	r2, [r3, #16]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	61da      	str	r2, [r3, #28]
      break;
 8003c9c:	e023      	b.n	8003ce6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68b9      	ldr	r1, [r7, #8]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f000 fa97 	bl	80041d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	69da      	ldr	r2, [r3, #28]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	69da      	ldr	r2, [r3, #28]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	69d9      	ldr	r1, [r3, #28]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	021a      	lsls	r2, r3, #8
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	61da      	str	r2, [r3, #28]
      break;
 8003cde:	e002      	b.n	8003ce6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ce4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3718      	adds	r7, #24
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d02:	2300      	movs	r3, #0
 8003d04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d101      	bne.n	8003d14 <HAL_TIM_ConfigClockSource+0x1c>
 8003d10:	2302      	movs	r3, #2
 8003d12:	e0b4      	b.n	8003e7e <HAL_TIM_ConfigClockSource+0x186>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2202      	movs	r2, #2
 8003d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003d32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68ba      	ldr	r2, [r7, #8]
 8003d42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d4c:	d03e      	beq.n	8003dcc <HAL_TIM_ConfigClockSource+0xd4>
 8003d4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d52:	f200 8087 	bhi.w	8003e64 <HAL_TIM_ConfigClockSource+0x16c>
 8003d56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d5a:	f000 8086 	beq.w	8003e6a <HAL_TIM_ConfigClockSource+0x172>
 8003d5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d62:	d87f      	bhi.n	8003e64 <HAL_TIM_ConfigClockSource+0x16c>
 8003d64:	2b70      	cmp	r3, #112	@ 0x70
 8003d66:	d01a      	beq.n	8003d9e <HAL_TIM_ConfigClockSource+0xa6>
 8003d68:	2b70      	cmp	r3, #112	@ 0x70
 8003d6a:	d87b      	bhi.n	8003e64 <HAL_TIM_ConfigClockSource+0x16c>
 8003d6c:	2b60      	cmp	r3, #96	@ 0x60
 8003d6e:	d050      	beq.n	8003e12 <HAL_TIM_ConfigClockSource+0x11a>
 8003d70:	2b60      	cmp	r3, #96	@ 0x60
 8003d72:	d877      	bhi.n	8003e64 <HAL_TIM_ConfigClockSource+0x16c>
 8003d74:	2b50      	cmp	r3, #80	@ 0x50
 8003d76:	d03c      	beq.n	8003df2 <HAL_TIM_ConfigClockSource+0xfa>
 8003d78:	2b50      	cmp	r3, #80	@ 0x50
 8003d7a:	d873      	bhi.n	8003e64 <HAL_TIM_ConfigClockSource+0x16c>
 8003d7c:	2b40      	cmp	r3, #64	@ 0x40
 8003d7e:	d058      	beq.n	8003e32 <HAL_TIM_ConfigClockSource+0x13a>
 8003d80:	2b40      	cmp	r3, #64	@ 0x40
 8003d82:	d86f      	bhi.n	8003e64 <HAL_TIM_ConfigClockSource+0x16c>
 8003d84:	2b30      	cmp	r3, #48	@ 0x30
 8003d86:	d064      	beq.n	8003e52 <HAL_TIM_ConfigClockSource+0x15a>
 8003d88:	2b30      	cmp	r3, #48	@ 0x30
 8003d8a:	d86b      	bhi.n	8003e64 <HAL_TIM_ConfigClockSource+0x16c>
 8003d8c:	2b20      	cmp	r3, #32
 8003d8e:	d060      	beq.n	8003e52 <HAL_TIM_ConfigClockSource+0x15a>
 8003d90:	2b20      	cmp	r3, #32
 8003d92:	d867      	bhi.n	8003e64 <HAL_TIM_ConfigClockSource+0x16c>
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d05c      	beq.n	8003e52 <HAL_TIM_ConfigClockSource+0x15a>
 8003d98:	2b10      	cmp	r3, #16
 8003d9a:	d05a      	beq.n	8003e52 <HAL_TIM_ConfigClockSource+0x15a>
 8003d9c:	e062      	b.n	8003e64 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003dae:	f000 fad8 	bl	8004362 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003dc0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68ba      	ldr	r2, [r7, #8]
 8003dc8:	609a      	str	r2, [r3, #8]
      break;
 8003dca:	e04f      	b.n	8003e6c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ddc:	f000 fac1 	bl	8004362 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689a      	ldr	r2, [r3, #8]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003dee:	609a      	str	r2, [r3, #8]
      break;
 8003df0:	e03c      	b.n	8003e6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dfe:	461a      	mov	r2, r3
 8003e00:	f000 fa38 	bl	8004274 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2150      	movs	r1, #80	@ 0x50
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 fa8f 	bl	800432e <TIM_ITRx_SetConfig>
      break;
 8003e10:	e02c      	b.n	8003e6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e1e:	461a      	mov	r2, r3
 8003e20:	f000 fa56 	bl	80042d0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2160      	movs	r1, #96	@ 0x60
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f000 fa7f 	bl	800432e <TIM_ITRx_SetConfig>
      break;
 8003e30:	e01c      	b.n	8003e6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e3e:	461a      	mov	r2, r3
 8003e40:	f000 fa18 	bl	8004274 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2140      	movs	r1, #64	@ 0x40
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 fa6f 	bl	800432e <TIM_ITRx_SetConfig>
      break;
 8003e50:	e00c      	b.n	8003e6c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	4610      	mov	r0, r2
 8003e5e:	f000 fa66 	bl	800432e <TIM_ITRx_SetConfig>
      break;
 8003e62:	e003      	b.n	8003e6c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	73fb      	strb	r3, [r7, #15]
      break;
 8003e68:	e000      	b.n	8003e6c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
	...

08003e88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a2f      	ldr	r2, [pc, #188]	@ (8003f58 <TIM_Base_SetConfig+0xd0>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d00b      	beq.n	8003eb8 <TIM_Base_SetConfig+0x30>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ea6:	d007      	beq.n	8003eb8 <TIM_Base_SetConfig+0x30>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a2c      	ldr	r2, [pc, #176]	@ (8003f5c <TIM_Base_SetConfig+0xd4>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d003      	beq.n	8003eb8 <TIM_Base_SetConfig+0x30>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a2b      	ldr	r2, [pc, #172]	@ (8003f60 <TIM_Base_SetConfig+0xd8>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d108      	bne.n	8003eca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ebe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a22      	ldr	r2, [pc, #136]	@ (8003f58 <TIM_Base_SetConfig+0xd0>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d00b      	beq.n	8003eea <TIM_Base_SetConfig+0x62>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ed8:	d007      	beq.n	8003eea <TIM_Base_SetConfig+0x62>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a1f      	ldr	r2, [pc, #124]	@ (8003f5c <TIM_Base_SetConfig+0xd4>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d003      	beq.n	8003eea <TIM_Base_SetConfig+0x62>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a1e      	ldr	r2, [pc, #120]	@ (8003f60 <TIM_Base_SetConfig+0xd8>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d108      	bne.n	8003efc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ef0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	689a      	ldr	r2, [r3, #8]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a0d      	ldr	r2, [pc, #52]	@ (8003f58 <TIM_Base_SetConfig+0xd0>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d103      	bne.n	8003f30 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	691a      	ldr	r2, [r3, #16]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d005      	beq.n	8003f4e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	f023 0201 	bic.w	r2, r3, #1
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	611a      	str	r2, [r3, #16]
  }
}
 8003f4e:	bf00      	nop
 8003f50:	3714      	adds	r7, #20
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bc80      	pop	{r7}
 8003f56:	4770      	bx	lr
 8003f58:	40012c00 	.word	0x40012c00
 8003f5c:	40000400 	.word	0x40000400
 8003f60:	40000800 	.word	0x40000800

08003f64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b087      	sub	sp, #28
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a1b      	ldr	r3, [r3, #32]
 8003f78:	f023 0201 	bic.w	r2, r3, #1
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f023 0303 	bic.w	r3, r3, #3
 8003f9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	f023 0302 	bic.w	r3, r3, #2
 8003fac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a1c      	ldr	r2, [pc, #112]	@ (800402c <TIM_OC1_SetConfig+0xc8>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d10c      	bne.n	8003fda <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	f023 0308 	bic.w	r3, r3, #8
 8003fc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	697a      	ldr	r2, [r7, #20]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	f023 0304 	bic.w	r3, r3, #4
 8003fd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a13      	ldr	r2, [pc, #76]	@ (800402c <TIM_OC1_SetConfig+0xc8>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d111      	bne.n	8004006 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fe8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ff0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	4313      	orrs	r3, r2
 8004004:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	685a      	ldr	r2, [r3, #4]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	697a      	ldr	r2, [r7, #20]
 800401e:	621a      	str	r2, [r3, #32]
}
 8004020:	bf00      	nop
 8004022:	371c      	adds	r7, #28
 8004024:	46bd      	mov	sp, r7
 8004026:	bc80      	pop	{r7}
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	40012c00 	.word	0x40012c00

08004030 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004030:	b480      	push	{r7}
 8004032:	b087      	sub	sp, #28
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	f023 0210 	bic.w	r2, r3, #16
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800405e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004066:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	021b      	lsls	r3, r3, #8
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	4313      	orrs	r3, r2
 8004072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	f023 0320 	bic.w	r3, r3, #32
 800407a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	011b      	lsls	r3, r3, #4
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	4313      	orrs	r3, r2
 8004086:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a1d      	ldr	r2, [pc, #116]	@ (8004100 <TIM_OC2_SetConfig+0xd0>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d10d      	bne.n	80040ac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004096:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	011b      	lsls	r3, r3, #4
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a14      	ldr	r2, [pc, #80]	@ (8004100 <TIM_OC2_SetConfig+0xd0>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d113      	bne.n	80040dc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80040ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80040c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	4313      	orrs	r3, r2
 80040da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	685a      	ldr	r2, [r3, #4]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	621a      	str	r2, [r3, #32]
}
 80040f6:	bf00      	nop
 80040f8:	371c      	adds	r7, #28
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bc80      	pop	{r7}
 80040fe:	4770      	bx	lr
 8004100:	40012c00 	.word	0x40012c00

08004104 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004104:	b480      	push	{r7}
 8004106:	b087      	sub	sp, #28
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a1b      	ldr	r3, [r3, #32]
 8004118:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	69db      	ldr	r3, [r3, #28]
 800412a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f023 0303 	bic.w	r3, r3, #3
 800413a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	4313      	orrs	r3, r2
 8004144:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800414c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	021b      	lsls	r3, r3, #8
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	4313      	orrs	r3, r2
 8004158:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a1d      	ldr	r2, [pc, #116]	@ (80041d4 <TIM_OC3_SetConfig+0xd0>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d10d      	bne.n	800417e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004168:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	021b      	lsls	r3, r3, #8
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	4313      	orrs	r3, r2
 8004174:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800417c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a14      	ldr	r2, [pc, #80]	@ (80041d4 <TIM_OC3_SetConfig+0xd0>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d113      	bne.n	80041ae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800418c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004194:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	011b      	lsls	r3, r3, #4
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	4313      	orrs	r3, r2
 80041a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	011b      	lsls	r3, r3, #4
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685a      	ldr	r2, [r3, #4]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	621a      	str	r2, [r3, #32]
}
 80041c8:	bf00      	nop
 80041ca:	371c      	adds	r7, #28
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bc80      	pop	{r7}
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	40012c00 	.word	0x40012c00

080041d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041d8:	b480      	push	{r7}
 80041da:	b087      	sub	sp, #28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800420e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	021b      	lsls	r3, r3, #8
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	4313      	orrs	r3, r2
 800421a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004222:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	031b      	lsls	r3, r3, #12
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	4313      	orrs	r3, r2
 800422e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a0f      	ldr	r2, [pc, #60]	@ (8004270 <TIM_OC4_SetConfig+0x98>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d109      	bne.n	800424c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800423e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	019b      	lsls	r3, r3, #6
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	4313      	orrs	r3, r2
 800424a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	621a      	str	r2, [r3, #32]
}
 8004266:	bf00      	nop
 8004268:	371c      	adds	r7, #28
 800426a:	46bd      	mov	sp, r7
 800426c:	bc80      	pop	{r7}
 800426e:	4770      	bx	lr
 8004270:	40012c00 	.word	0x40012c00

08004274 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004274:	b480      	push	{r7}
 8004276:	b087      	sub	sp, #28
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6a1b      	ldr	r3, [r3, #32]
 8004284:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	f023 0201 	bic.w	r2, r3, #1
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800429e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	011b      	lsls	r3, r3, #4
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f023 030a 	bic.w	r3, r3, #10
 80042b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	621a      	str	r2, [r3, #32]
}
 80042c6:	bf00      	nop
 80042c8:	371c      	adds	r7, #28
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bc80      	pop	{r7}
 80042ce:	4770      	bx	lr

080042d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b087      	sub	sp, #28
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a1b      	ldr	r3, [r3, #32]
 80042e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	f023 0210 	bic.w	r2, r3, #16
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80042fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	031b      	lsls	r3, r3, #12
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	4313      	orrs	r3, r2
 8004304:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800430c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	011b      	lsls	r3, r3, #4
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	4313      	orrs	r3, r2
 8004316:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	621a      	str	r2, [r3, #32]
}
 8004324:	bf00      	nop
 8004326:	371c      	adds	r7, #28
 8004328:	46bd      	mov	sp, r7
 800432a:	bc80      	pop	{r7}
 800432c:	4770      	bx	lr

0800432e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800432e:	b480      	push	{r7}
 8004330:	b085      	sub	sp, #20
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
 8004336:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004344:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004346:	683a      	ldr	r2, [r7, #0]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	4313      	orrs	r3, r2
 800434c:	f043 0307 	orr.w	r3, r3, #7
 8004350:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	609a      	str	r2, [r3, #8]
}
 8004358:	bf00      	nop
 800435a:	3714      	adds	r7, #20
 800435c:	46bd      	mov	sp, r7
 800435e:	bc80      	pop	{r7}
 8004360:	4770      	bx	lr

08004362 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004362:	b480      	push	{r7}
 8004364:	b087      	sub	sp, #28
 8004366:	af00      	add	r7, sp, #0
 8004368:	60f8      	str	r0, [r7, #12]
 800436a:	60b9      	str	r1, [r7, #8]
 800436c:	607a      	str	r2, [r7, #4]
 800436e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800437c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	021a      	lsls	r2, r3, #8
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	431a      	orrs	r2, r3
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	4313      	orrs	r3, r2
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	4313      	orrs	r3, r2
 800438e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	609a      	str	r2, [r3, #8]
}
 8004396:	bf00      	nop
 8004398:	371c      	adds	r7, #28
 800439a:	46bd      	mov	sp, r7
 800439c:	bc80      	pop	{r7}
 800439e:	4770      	bx	lr

080043a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d101      	bne.n	80043b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043b4:	2302      	movs	r3, #2
 80043b6:	e046      	b.n	8004446 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2202      	movs	r2, #2
 80043c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a16      	ldr	r2, [pc, #88]	@ (8004450 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d00e      	beq.n	800441a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004404:	d009      	beq.n	800441a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a12      	ldr	r2, [pc, #72]	@ (8004454 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d004      	beq.n	800441a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a10      	ldr	r2, [pc, #64]	@ (8004458 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d10c      	bne.n	8004434 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004420:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	68ba      	ldr	r2, [r7, #8]
 8004428:	4313      	orrs	r3, r2
 800442a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68ba      	ldr	r2, [r7, #8]
 8004432:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3714      	adds	r7, #20
 800444a:	46bd      	mov	sp, r7
 800444c:	bc80      	pop	{r7}
 800444e:	4770      	bx	lr
 8004450:	40012c00 	.word	0x40012c00
 8004454:	40000400 	.word	0x40000400
 8004458:	40000800 	.word	0x40000800

0800445c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004466:	2300      	movs	r3, #0
 8004468:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004470:	2b01      	cmp	r3, #1
 8004472:	d101      	bne.n	8004478 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004474:	2302      	movs	r3, #2
 8004476:	e03d      	b.n	80044f4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	4313      	orrs	r3, r2
 800448c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	4313      	orrs	r3, r2
 800449a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	4313      	orrs	r3, r2
 80044e0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3714      	adds	r7, #20
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bc80      	pop	{r7}
 80044fc:	4770      	bx	lr

080044fe <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b082      	sub	sp, #8
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d101      	bne.n	8004510 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e042      	b.n	8004596 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b00      	cmp	r3, #0
 800451a:	d106      	bne.n	800452a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f7fc fed3 	bl	80012d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2224      	movs	r2, #36	@ 0x24
 800452e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68da      	ldr	r2, [r3, #12]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004540:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 fd62 	bl	800500c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	691a      	ldr	r2, [r3, #16]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004556:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	695a      	ldr	r2, [r3, #20]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004566:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68da      	ldr	r2, [r3, #12]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004576:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2220      	movs	r2, #32
 8004582:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2220      	movs	r2, #32
 800458a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3708      	adds	r7, #8
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b08a      	sub	sp, #40	@ 0x28
 80045a2:	af02      	add	r7, sp, #8
 80045a4:	60f8      	str	r0, [r7, #12]
 80045a6:	60b9      	str	r1, [r7, #8]
 80045a8:	603b      	str	r3, [r7, #0]
 80045aa:	4613      	mov	r3, r2
 80045ac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80045ae:	2300      	movs	r3, #0
 80045b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b20      	cmp	r3, #32
 80045bc:	d175      	bne.n	80046aa <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d002      	beq.n	80045ca <HAL_UART_Transmit+0x2c>
 80045c4:	88fb      	ldrh	r3, [r7, #6]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d101      	bne.n	80045ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e06e      	b.n	80046ac <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2221      	movs	r2, #33	@ 0x21
 80045d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045dc:	f7fd f844 	bl	8001668 <HAL_GetTick>
 80045e0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	88fa      	ldrh	r2, [r7, #6]
 80045e6:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	88fa      	ldrh	r2, [r7, #6]
 80045ec:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045f6:	d108      	bne.n	800460a <HAL_UART_Transmit+0x6c>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d104      	bne.n	800460a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004600:	2300      	movs	r3, #0
 8004602:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	61bb      	str	r3, [r7, #24]
 8004608:	e003      	b.n	8004612 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800460e:	2300      	movs	r3, #0
 8004610:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004612:	e02e      	b.n	8004672 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	9300      	str	r3, [sp, #0]
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	2200      	movs	r2, #0
 800461c:	2180      	movs	r1, #128	@ 0x80
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f000 fb00 	bl	8004c24 <UART_WaitOnFlagUntilTimeout>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d005      	beq.n	8004636 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2220      	movs	r2, #32
 800462e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e03a      	b.n	80046ac <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d10b      	bne.n	8004654 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	881b      	ldrh	r3, [r3, #0]
 8004640:	461a      	mov	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800464a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	3302      	adds	r3, #2
 8004650:	61bb      	str	r3, [r7, #24]
 8004652:	e007      	b.n	8004664 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	781a      	ldrb	r2, [r3, #0]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	3301      	adds	r3, #1
 8004662:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004668:	b29b      	uxth	r3, r3
 800466a:	3b01      	subs	r3, #1
 800466c:	b29a      	uxth	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004676:	b29b      	uxth	r3, r3
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1cb      	bne.n	8004614 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	9300      	str	r3, [sp, #0]
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	2200      	movs	r2, #0
 8004684:	2140      	movs	r1, #64	@ 0x40
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f000 facc 	bl	8004c24 <UART_WaitOnFlagUntilTimeout>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d005      	beq.n	800469e <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2220      	movs	r2, #32
 8004696:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e006      	b.n	80046ac <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2220      	movs	r2, #32
 80046a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80046a6:	2300      	movs	r3, #0
 80046a8:	e000      	b.n	80046ac <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80046aa:	2302      	movs	r3, #2
  }
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3720      	adds	r7, #32
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b0ba      	sub	sp, #232	@ 0xe8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80046da:	2300      	movs	r3, #0
 80046dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80046e0:	2300      	movs	r3, #0
 80046e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80046e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046ea:	f003 030f 	and.w	r3, r3, #15
 80046ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80046f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10f      	bne.n	800471a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046fe:	f003 0320 	and.w	r3, r3, #32
 8004702:	2b00      	cmp	r3, #0
 8004704:	d009      	beq.n	800471a <HAL_UART_IRQHandler+0x66>
 8004706:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800470a:	f003 0320 	and.w	r3, r3, #32
 800470e:	2b00      	cmp	r3, #0
 8004710:	d003      	beq.n	800471a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 fbbc 	bl	8004e90 <UART_Receive_IT>
      return;
 8004718:	e25b      	b.n	8004bd2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800471a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800471e:	2b00      	cmp	r3, #0
 8004720:	f000 80de 	beq.w	80048e0 <HAL_UART_IRQHandler+0x22c>
 8004724:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004728:	f003 0301 	and.w	r3, r3, #1
 800472c:	2b00      	cmp	r3, #0
 800472e:	d106      	bne.n	800473e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004734:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004738:	2b00      	cmp	r3, #0
 800473a:	f000 80d1 	beq.w	80048e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800473e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00b      	beq.n	8004762 <HAL_UART_IRQHandler+0xae>
 800474a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800474e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004752:	2b00      	cmp	r3, #0
 8004754:	d005      	beq.n	8004762 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800475a:	f043 0201 	orr.w	r2, r3, #1
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004766:	f003 0304 	and.w	r3, r3, #4
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00b      	beq.n	8004786 <HAL_UART_IRQHandler+0xd2>
 800476e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	2b00      	cmp	r3, #0
 8004778:	d005      	beq.n	8004786 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800477e:	f043 0202 	orr.w	r2, r3, #2
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00b      	beq.n	80047aa <HAL_UART_IRQHandler+0xf6>
 8004792:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	2b00      	cmp	r3, #0
 800479c:	d005      	beq.n	80047aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047a2:	f043 0204 	orr.w	r2, r3, #4
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80047aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047ae:	f003 0308 	and.w	r3, r3, #8
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d011      	beq.n	80047da <HAL_UART_IRQHandler+0x126>
 80047b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047ba:	f003 0320 	and.w	r3, r3, #32
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d105      	bne.n	80047ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80047c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d005      	beq.n	80047da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047d2:	f043 0208 	orr.w	r2, r3, #8
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f000 81f2 	beq.w	8004bc8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047e8:	f003 0320 	and.w	r3, r3, #32
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d008      	beq.n	8004802 <HAL_UART_IRQHandler+0x14e>
 80047f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047f4:	f003 0320 	and.w	r3, r3, #32
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d002      	beq.n	8004802 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 fb47 	bl	8004e90 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	695b      	ldr	r3, [r3, #20]
 8004808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800480c:	2b00      	cmp	r3, #0
 800480e:	bf14      	ite	ne
 8004810:	2301      	movne	r3, #1
 8004812:	2300      	moveq	r3, #0
 8004814:	b2db      	uxtb	r3, r3
 8004816:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800481e:	f003 0308 	and.w	r3, r3, #8
 8004822:	2b00      	cmp	r3, #0
 8004824:	d103      	bne.n	800482e <HAL_UART_IRQHandler+0x17a>
 8004826:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800482a:	2b00      	cmp	r3, #0
 800482c:	d04f      	beq.n	80048ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 fa51 	bl	8004cd6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800483e:	2b00      	cmp	r3, #0
 8004840:	d041      	beq.n	80048c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	3314      	adds	r3, #20
 8004848:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004850:	e853 3f00 	ldrex	r3, [r3]
 8004854:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004858:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800485c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004860:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	3314      	adds	r3, #20
 800486a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800486e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004872:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004876:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800487a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800487e:	e841 2300 	strex	r3, r2, [r1]
 8004882:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004886:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1d9      	bne.n	8004842 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004892:	2b00      	cmp	r3, #0
 8004894:	d013      	beq.n	80048be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800489a:	4a7e      	ldr	r2, [pc, #504]	@ (8004a94 <HAL_UART_IRQHandler+0x3e0>)
 800489c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7fd f8b2 	bl	8001a0c <HAL_DMA_Abort_IT>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d016      	beq.n	80048dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80048b8:	4610      	mov	r0, r2
 80048ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048bc:	e00e      	b.n	80048dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f99c 	bl	8004bfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048c4:	e00a      	b.n	80048dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 f998 	bl	8004bfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048cc:	e006      	b.n	80048dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 f994 	bl	8004bfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80048da:	e175      	b.n	8004bc8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048dc:	bf00      	nop
    return;
 80048de:	e173      	b.n	8004bc8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	f040 814f 	bne.w	8004b88 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80048ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048ee:	f003 0310 	and.w	r3, r3, #16
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	f000 8148 	beq.w	8004b88 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80048f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048fc:	f003 0310 	and.w	r3, r3, #16
 8004900:	2b00      	cmp	r3, #0
 8004902:	f000 8141 	beq.w	8004b88 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004906:	2300      	movs	r3, #0
 8004908:	60bb      	str	r3, [r7, #8]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	60bb      	str	r3, [r7, #8]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	60bb      	str	r3, [r7, #8]
 800491a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004926:	2b00      	cmp	r3, #0
 8004928:	f000 80b6 	beq.w	8004a98 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004938:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800493c:	2b00      	cmp	r3, #0
 800493e:	f000 8145 	beq.w	8004bcc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004946:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800494a:	429a      	cmp	r2, r3
 800494c:	f080 813e 	bcs.w	8004bcc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004956:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	2b20      	cmp	r3, #32
 8004960:	f000 8088 	beq.w	8004a74 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	330c      	adds	r3, #12
 800496a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004972:	e853 3f00 	ldrex	r3, [r3]
 8004976:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800497a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800497e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004982:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	330c      	adds	r3, #12
 800498c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004990:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004994:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004998:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800499c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80049a0:	e841 2300 	strex	r3, r2, [r1]
 80049a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80049a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1d9      	bne.n	8004964 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	3314      	adds	r3, #20
 80049b6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049ba:	e853 3f00 	ldrex	r3, [r3]
 80049be:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80049c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80049c2:	f023 0301 	bic.w	r3, r3, #1
 80049c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	3314      	adds	r3, #20
 80049d0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80049d4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80049d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049da:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80049dc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80049e0:	e841 2300 	strex	r3, r2, [r1]
 80049e4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80049e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1e1      	bne.n	80049b0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	3314      	adds	r3, #20
 80049f2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80049f6:	e853 3f00 	ldrex	r3, [r3]
 80049fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80049fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	3314      	adds	r3, #20
 8004a0c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004a10:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004a12:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a14:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004a16:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004a18:	e841 2300 	strex	r3, r2, [r1]
 8004a1c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004a1e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1e3      	bne.n	80049ec <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2220      	movs	r2, #32
 8004a28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	330c      	adds	r3, #12
 8004a38:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a3c:	e853 3f00 	ldrex	r3, [r3]
 8004a40:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004a42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a44:	f023 0310 	bic.w	r3, r3, #16
 8004a48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	330c      	adds	r3, #12
 8004a52:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004a56:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004a58:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a5a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004a5c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004a5e:	e841 2300 	strex	r3, r2, [r1]
 8004a62:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004a64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1e3      	bne.n	8004a32 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7fc ff90 	bl	8001994 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2202      	movs	r2, #2
 8004a78:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	4619      	mov	r1, r3
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f8bf 	bl	8004c0e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a90:	e09c      	b.n	8004bcc <HAL_UART_IRQHandler+0x518>
 8004a92:	bf00      	nop
 8004a94:	08004d9b 	.word	0x08004d9b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f000 808e 	beq.w	8004bd0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004ab4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	f000 8089 	beq.w	8004bd0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	330c      	adds	r3, #12
 8004ac4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ac8:	e853 3f00 	ldrex	r3, [r3]
 8004acc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ace:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ad0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ad4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	330c      	adds	r3, #12
 8004ade:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004ae2:	647a      	str	r2, [r7, #68]	@ 0x44
 8004ae4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004ae8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004aea:	e841 2300 	strex	r3, r2, [r1]
 8004aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004af0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1e3      	bne.n	8004abe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	3314      	adds	r3, #20
 8004afc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b00:	e853 3f00 	ldrex	r3, [r3]
 8004b04:	623b      	str	r3, [r7, #32]
   return(result);
 8004b06:	6a3b      	ldr	r3, [r7, #32]
 8004b08:	f023 0301 	bic.w	r3, r3, #1
 8004b0c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	3314      	adds	r3, #20
 8004b16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004b1a:	633a      	str	r2, [r7, #48]	@ 0x30
 8004b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b22:	e841 2300 	strex	r3, r2, [r1]
 8004b26:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1e3      	bne.n	8004af6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2220      	movs	r2, #32
 8004b32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	330c      	adds	r3, #12
 8004b42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	e853 3f00 	ldrex	r3, [r3]
 8004b4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f023 0310 	bic.w	r3, r3, #16
 8004b52:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	330c      	adds	r3, #12
 8004b5c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004b60:	61fa      	str	r2, [r7, #28]
 8004b62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b64:	69b9      	ldr	r1, [r7, #24]
 8004b66:	69fa      	ldr	r2, [r7, #28]
 8004b68:	e841 2300 	strex	r3, r2, [r1]
 8004b6c:	617b      	str	r3, [r7, #20]
   return(result);
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d1e3      	bne.n	8004b3c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2202      	movs	r2, #2
 8004b78:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b7a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004b7e:	4619      	mov	r1, r3
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 f844 	bl	8004c0e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b86:	e023      	b.n	8004bd0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d009      	beq.n	8004ba8 <HAL_UART_IRQHandler+0x4f4>
 8004b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d003      	beq.n	8004ba8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 f90e 	bl	8004dc2 <UART_Transmit_IT>
    return;
 8004ba6:	e014      	b.n	8004bd2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00e      	beq.n	8004bd2 <HAL_UART_IRQHandler+0x51e>
 8004bb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d008      	beq.n	8004bd2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 f94d 	bl	8004e60 <UART_EndTransmit_IT>
    return;
 8004bc6:	e004      	b.n	8004bd2 <HAL_UART_IRQHandler+0x51e>
    return;
 8004bc8:	bf00      	nop
 8004bca:	e002      	b.n	8004bd2 <HAL_UART_IRQHandler+0x51e>
      return;
 8004bcc:	bf00      	nop
 8004bce:	e000      	b.n	8004bd2 <HAL_UART_IRQHandler+0x51e>
      return;
 8004bd0:	bf00      	nop
  }
}
 8004bd2:	37e8      	adds	r7, #232	@ 0xe8
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bc80      	pop	{r7}
 8004be8:	4770      	bx	lr

08004bea <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bea:	b480      	push	{r7}
 8004bec:	b083      	sub	sp, #12
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004bf2:	bf00      	nop
 8004bf4:	370c      	adds	r7, #12
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bc80      	pop	{r7}
 8004bfa:	4770      	bx	lr

08004bfc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bc80      	pop	{r7}
 8004c0c:	4770      	bx	lr

08004c0e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b083      	sub	sp, #12
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
 8004c16:	460b      	mov	r3, r1
 8004c18:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c1a:	bf00      	nop
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bc80      	pop	{r7}
 8004c22:	4770      	bx	lr

08004c24 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	603b      	str	r3, [r7, #0]
 8004c30:	4613      	mov	r3, r2
 8004c32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c34:	e03b      	b.n	8004cae <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c36:	6a3b      	ldr	r3, [r7, #32]
 8004c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c3c:	d037      	beq.n	8004cae <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c3e:	f7fc fd13 	bl	8001668 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	6a3a      	ldr	r2, [r7, #32]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d302      	bcc.n	8004c54 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c4e:	6a3b      	ldr	r3, [r7, #32]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d101      	bne.n	8004c58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e03a      	b.n	8004cce <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	f003 0304 	and.w	r3, r3, #4
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d023      	beq.n	8004cae <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	2b80      	cmp	r3, #128	@ 0x80
 8004c6a:	d020      	beq.n	8004cae <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	2b40      	cmp	r3, #64	@ 0x40
 8004c70:	d01d      	beq.n	8004cae <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0308 	and.w	r3, r3, #8
 8004c7c:	2b08      	cmp	r3, #8
 8004c7e:	d116      	bne.n	8004cae <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004c80:	2300      	movs	r3, #0
 8004c82:	617b      	str	r3, [r7, #20]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	617b      	str	r3, [r7, #20]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	617b      	str	r3, [r7, #20]
 8004c94:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f000 f81d 	bl	8004cd6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2208      	movs	r2, #8
 8004ca0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e00f      	b.n	8004cce <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	68ba      	ldr	r2, [r7, #8]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	bf0c      	ite	eq
 8004cbe:	2301      	moveq	r3, #1
 8004cc0:	2300      	movne	r3, #0
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	79fb      	ldrb	r3, [r7, #7]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d0b4      	beq.n	8004c36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3718      	adds	r7, #24
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	b095      	sub	sp, #84	@ 0x54
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	330c      	adds	r3, #12
 8004ce4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ce8:	e853 3f00 	ldrex	r3, [r3]
 8004cec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004cf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	330c      	adds	r3, #12
 8004cfc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004cfe:	643a      	str	r2, [r7, #64]	@ 0x40
 8004d00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d02:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d04:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d06:	e841 2300 	strex	r3, r2, [r1]
 8004d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1e5      	bne.n	8004cde <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	3314      	adds	r3, #20
 8004d18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1a:	6a3b      	ldr	r3, [r7, #32]
 8004d1c:	e853 3f00 	ldrex	r3, [r3]
 8004d20:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	f023 0301 	bic.w	r3, r3, #1
 8004d28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	3314      	adds	r3, #20
 8004d30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d34:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d3a:	e841 2300 	strex	r3, r2, [r1]
 8004d3e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1e5      	bne.n	8004d12 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d119      	bne.n	8004d82 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	330c      	adds	r3, #12
 8004d54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	e853 3f00 	ldrex	r3, [r3]
 8004d5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	f023 0310 	bic.w	r3, r3, #16
 8004d64:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	330c      	adds	r3, #12
 8004d6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d6e:	61ba      	str	r2, [r7, #24]
 8004d70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d72:	6979      	ldr	r1, [r7, #20]
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	e841 2300 	strex	r3, r2, [r1]
 8004d7a:	613b      	str	r3, [r7, #16]
   return(result);
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1e5      	bne.n	8004d4e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2220      	movs	r2, #32
 8004d86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004d90:	bf00      	nop
 8004d92:	3754      	adds	r7, #84	@ 0x54
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bc80      	pop	{r7}
 8004d98:	4770      	bx	lr

08004d9a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b084      	sub	sp, #16
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f7ff ff21 	bl	8004bfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dba:	bf00      	nop
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	b085      	sub	sp, #20
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b21      	cmp	r3, #33	@ 0x21
 8004dd4:	d13e      	bne.n	8004e54 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dde:	d114      	bne.n	8004e0a <UART_Transmit_IT+0x48>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d110      	bne.n	8004e0a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a1b      	ldr	r3, [r3, #32]
 8004dec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	881b      	ldrh	r3, [r3, #0]
 8004df2:	461a      	mov	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dfc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a1b      	ldr	r3, [r3, #32]
 8004e02:	1c9a      	adds	r2, r3, #2
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	621a      	str	r2, [r3, #32]
 8004e08:	e008      	b.n	8004e1c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	1c59      	adds	r1, r3, #1
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	6211      	str	r1, [r2, #32]
 8004e14:	781a      	ldrb	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	3b01      	subs	r3, #1
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	4619      	mov	r1, r3
 8004e2a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d10f      	bne.n	8004e50 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68da      	ldr	r2, [r3, #12]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e3e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68da      	ldr	r2, [r3, #12]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e4e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e50:	2300      	movs	r3, #0
 8004e52:	e000      	b.n	8004e56 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e54:	2302      	movs	r3, #2
  }
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3714      	adds	r7, #20
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bc80      	pop	{r7}
 8004e5e:	4770      	bx	lr

08004e60 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68da      	ldr	r2, [r3, #12]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e76:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2220      	movs	r2, #32
 8004e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f7ff fea9 	bl	8004bd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3708      	adds	r7, #8
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b08c      	sub	sp, #48	@ 0x30
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	2b22      	cmp	r3, #34	@ 0x22
 8004ea2:	f040 80ae 	bne.w	8005002 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004eae:	d117      	bne.n	8004ee0 <UART_Receive_IT+0x50>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d113      	bne.n	8004ee0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ed8:	1c9a      	adds	r2, r3, #2
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ede:	e026      	b.n	8004f2e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ef2:	d007      	beq.n	8004f04 <UART_Receive_IT+0x74>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d10a      	bne.n	8004f12 <UART_Receive_IT+0x82>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d106      	bne.n	8004f12 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	b2da      	uxtb	r2, r3
 8004f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f0e:	701a      	strb	r2, [r3, #0]
 8004f10:	e008      	b.n	8004f24 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f1e:	b2da      	uxtb	r2, r3
 8004f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f22:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f28:	1c5a      	adds	r2, r3, #1
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	3b01      	subs	r3, #1
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d15d      	bne.n	8004ffe <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68da      	ldr	r2, [r3, #12]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f022 0220 	bic.w	r2, r2, #32
 8004f50:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68da      	ldr	r2, [r3, #12]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f60:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	695a      	ldr	r2, [r3, #20]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f022 0201 	bic.w	r2, r2, #1
 8004f70:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2220      	movs	r2, #32
 8004f76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d135      	bne.n	8004ff4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	330c      	adds	r3, #12
 8004f94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	e853 3f00 	ldrex	r3, [r3]
 8004f9c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	f023 0310 	bic.w	r3, r3, #16
 8004fa4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	330c      	adds	r3, #12
 8004fac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fae:	623a      	str	r2, [r7, #32]
 8004fb0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb2:	69f9      	ldr	r1, [r7, #28]
 8004fb4:	6a3a      	ldr	r2, [r7, #32]
 8004fb6:	e841 2300 	strex	r3, r2, [r1]
 8004fba:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1e5      	bne.n	8004f8e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0310 	and.w	r3, r3, #16
 8004fcc:	2b10      	cmp	r3, #16
 8004fce:	d10a      	bne.n	8004fe6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	60fb      	str	r3, [r7, #12]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	60fb      	str	r3, [r7, #12]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	60fb      	str	r3, [r7, #12]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004fea:	4619      	mov	r1, r3
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f7ff fe0e 	bl	8004c0e <HAL_UARTEx_RxEventCallback>
 8004ff2:	e002      	b.n	8004ffa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f7ff fdf8 	bl	8004bea <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	e002      	b.n	8005004 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
 8005000:	e000      	b.n	8005004 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005002:	2302      	movs	r3, #2
  }
}
 8005004:	4618      	mov	r0, r3
 8005006:	3730      	adds	r7, #48	@ 0x30
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	68da      	ldr	r2, [r3, #12]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	430a      	orrs	r2, r1
 8005028:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	689a      	ldr	r2, [r3, #8]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	431a      	orrs	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	4313      	orrs	r3, r2
 800503a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005046:	f023 030c 	bic.w	r3, r3, #12
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	6812      	ldr	r2, [r2, #0]
 800504e:	68b9      	ldr	r1, [r7, #8]
 8005050:	430b      	orrs	r3, r1
 8005052:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	699a      	ldr	r2, [r3, #24]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	430a      	orrs	r2, r1
 8005068:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a2c      	ldr	r2, [pc, #176]	@ (8005120 <UART_SetConfig+0x114>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d103      	bne.n	800507c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005074:	f7fe fc5a 	bl	800392c <HAL_RCC_GetPCLK2Freq>
 8005078:	60f8      	str	r0, [r7, #12]
 800507a:	e002      	b.n	8005082 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800507c:	f7fe fc42 	bl	8003904 <HAL_RCC_GetPCLK1Freq>
 8005080:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	4613      	mov	r3, r2
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	4413      	add	r3, r2
 800508a:	009a      	lsls	r2, r3, #2
 800508c:	441a      	add	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	fbb2 f3f3 	udiv	r3, r2, r3
 8005098:	4a22      	ldr	r2, [pc, #136]	@ (8005124 <UART_SetConfig+0x118>)
 800509a:	fba2 2303 	umull	r2, r3, r2, r3
 800509e:	095b      	lsrs	r3, r3, #5
 80050a0:	0119      	lsls	r1, r3, #4
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	4613      	mov	r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	4413      	add	r3, r2
 80050aa:	009a      	lsls	r2, r3, #2
 80050ac:	441a      	add	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80050b8:	4b1a      	ldr	r3, [pc, #104]	@ (8005124 <UART_SetConfig+0x118>)
 80050ba:	fba3 0302 	umull	r0, r3, r3, r2
 80050be:	095b      	lsrs	r3, r3, #5
 80050c0:	2064      	movs	r0, #100	@ 0x64
 80050c2:	fb00 f303 	mul.w	r3, r0, r3
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	011b      	lsls	r3, r3, #4
 80050ca:	3332      	adds	r3, #50	@ 0x32
 80050cc:	4a15      	ldr	r2, [pc, #84]	@ (8005124 <UART_SetConfig+0x118>)
 80050ce:	fba2 2303 	umull	r2, r3, r2, r3
 80050d2:	095b      	lsrs	r3, r3, #5
 80050d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050d8:	4419      	add	r1, r3
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	4613      	mov	r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	4413      	add	r3, r2
 80050e2:	009a      	lsls	r2, r3, #2
 80050e4:	441a      	add	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80050f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005124 <UART_SetConfig+0x118>)
 80050f2:	fba3 0302 	umull	r0, r3, r3, r2
 80050f6:	095b      	lsrs	r3, r3, #5
 80050f8:	2064      	movs	r0, #100	@ 0x64
 80050fa:	fb00 f303 	mul.w	r3, r0, r3
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	011b      	lsls	r3, r3, #4
 8005102:	3332      	adds	r3, #50	@ 0x32
 8005104:	4a07      	ldr	r2, [pc, #28]	@ (8005124 <UART_SetConfig+0x118>)
 8005106:	fba2 2303 	umull	r2, r3, r2, r3
 800510a:	095b      	lsrs	r3, r3, #5
 800510c:	f003 020f 	and.w	r2, r3, #15
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	440a      	add	r2, r1
 8005116:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005118:	bf00      	nop
 800511a:	3710      	adds	r7, #16
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	40013800 	.word	0x40013800
 8005124:	51eb851f 	.word	0x51eb851f

08005128 <sniprintf>:
 8005128:	b40c      	push	{r2, r3}
 800512a:	b530      	push	{r4, r5, lr}
 800512c:	4b17      	ldr	r3, [pc, #92]	@ (800518c <sniprintf+0x64>)
 800512e:	1e0c      	subs	r4, r1, #0
 8005130:	681d      	ldr	r5, [r3, #0]
 8005132:	b09d      	sub	sp, #116	@ 0x74
 8005134:	da08      	bge.n	8005148 <sniprintf+0x20>
 8005136:	238b      	movs	r3, #139	@ 0x8b
 8005138:	f04f 30ff 	mov.w	r0, #4294967295
 800513c:	602b      	str	r3, [r5, #0]
 800513e:	b01d      	add	sp, #116	@ 0x74
 8005140:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005144:	b002      	add	sp, #8
 8005146:	4770      	bx	lr
 8005148:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800514c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005150:	bf0c      	ite	eq
 8005152:	4623      	moveq	r3, r4
 8005154:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005158:	9304      	str	r3, [sp, #16]
 800515a:	9307      	str	r3, [sp, #28]
 800515c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005160:	9002      	str	r0, [sp, #8]
 8005162:	9006      	str	r0, [sp, #24]
 8005164:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005168:	4628      	mov	r0, r5
 800516a:	ab21      	add	r3, sp, #132	@ 0x84
 800516c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800516e:	a902      	add	r1, sp, #8
 8005170:	9301      	str	r3, [sp, #4]
 8005172:	f000 f993 	bl	800549c <_svfiprintf_r>
 8005176:	1c43      	adds	r3, r0, #1
 8005178:	bfbc      	itt	lt
 800517a:	238b      	movlt	r3, #139	@ 0x8b
 800517c:	602b      	strlt	r3, [r5, #0]
 800517e:	2c00      	cmp	r4, #0
 8005180:	d0dd      	beq.n	800513e <sniprintf+0x16>
 8005182:	2200      	movs	r2, #0
 8005184:	9b02      	ldr	r3, [sp, #8]
 8005186:	701a      	strb	r2, [r3, #0]
 8005188:	e7d9      	b.n	800513e <sniprintf+0x16>
 800518a:	bf00      	nop
 800518c:	200000d4 	.word	0x200000d4

08005190 <memset>:
 8005190:	4603      	mov	r3, r0
 8005192:	4402      	add	r2, r0
 8005194:	4293      	cmp	r3, r2
 8005196:	d100      	bne.n	800519a <memset+0xa>
 8005198:	4770      	bx	lr
 800519a:	f803 1b01 	strb.w	r1, [r3], #1
 800519e:	e7f9      	b.n	8005194 <memset+0x4>

080051a0 <__errno>:
 80051a0:	4b01      	ldr	r3, [pc, #4]	@ (80051a8 <__errno+0x8>)
 80051a2:	6818      	ldr	r0, [r3, #0]
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	200000d4 	.word	0x200000d4

080051ac <__libc_init_array>:
 80051ac:	b570      	push	{r4, r5, r6, lr}
 80051ae:	2600      	movs	r6, #0
 80051b0:	4d0c      	ldr	r5, [pc, #48]	@ (80051e4 <__libc_init_array+0x38>)
 80051b2:	4c0d      	ldr	r4, [pc, #52]	@ (80051e8 <__libc_init_array+0x3c>)
 80051b4:	1b64      	subs	r4, r4, r5
 80051b6:	10a4      	asrs	r4, r4, #2
 80051b8:	42a6      	cmp	r6, r4
 80051ba:	d109      	bne.n	80051d0 <__libc_init_array+0x24>
 80051bc:	f000 fc78 	bl	8005ab0 <_init>
 80051c0:	2600      	movs	r6, #0
 80051c2:	4d0a      	ldr	r5, [pc, #40]	@ (80051ec <__libc_init_array+0x40>)
 80051c4:	4c0a      	ldr	r4, [pc, #40]	@ (80051f0 <__libc_init_array+0x44>)
 80051c6:	1b64      	subs	r4, r4, r5
 80051c8:	10a4      	asrs	r4, r4, #2
 80051ca:	42a6      	cmp	r6, r4
 80051cc:	d105      	bne.n	80051da <__libc_init_array+0x2e>
 80051ce:	bd70      	pop	{r4, r5, r6, pc}
 80051d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80051d4:	4798      	blx	r3
 80051d6:	3601      	adds	r6, #1
 80051d8:	e7ee      	b.n	80051b8 <__libc_init_array+0xc>
 80051da:	f855 3b04 	ldr.w	r3, [r5], #4
 80051de:	4798      	blx	r3
 80051e0:	3601      	adds	r6, #1
 80051e2:	e7f2      	b.n	80051ca <__libc_init_array+0x1e>
 80051e4:	0800636c 	.word	0x0800636c
 80051e8:	0800636c 	.word	0x0800636c
 80051ec:	0800636c 	.word	0x0800636c
 80051f0:	08006370 	.word	0x08006370

080051f4 <__retarget_lock_acquire_recursive>:
 80051f4:	4770      	bx	lr

080051f6 <__retarget_lock_release_recursive>:
 80051f6:	4770      	bx	lr

080051f8 <_free_r>:
 80051f8:	b538      	push	{r3, r4, r5, lr}
 80051fa:	4605      	mov	r5, r0
 80051fc:	2900      	cmp	r1, #0
 80051fe:	d040      	beq.n	8005282 <_free_r+0x8a>
 8005200:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005204:	1f0c      	subs	r4, r1, #4
 8005206:	2b00      	cmp	r3, #0
 8005208:	bfb8      	it	lt
 800520a:	18e4      	addlt	r4, r4, r3
 800520c:	f000 f8de 	bl	80053cc <__malloc_lock>
 8005210:	4a1c      	ldr	r2, [pc, #112]	@ (8005284 <_free_r+0x8c>)
 8005212:	6813      	ldr	r3, [r2, #0]
 8005214:	b933      	cbnz	r3, 8005224 <_free_r+0x2c>
 8005216:	6063      	str	r3, [r4, #4]
 8005218:	6014      	str	r4, [r2, #0]
 800521a:	4628      	mov	r0, r5
 800521c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005220:	f000 b8da 	b.w	80053d8 <__malloc_unlock>
 8005224:	42a3      	cmp	r3, r4
 8005226:	d908      	bls.n	800523a <_free_r+0x42>
 8005228:	6820      	ldr	r0, [r4, #0]
 800522a:	1821      	adds	r1, r4, r0
 800522c:	428b      	cmp	r3, r1
 800522e:	bf01      	itttt	eq
 8005230:	6819      	ldreq	r1, [r3, #0]
 8005232:	685b      	ldreq	r3, [r3, #4]
 8005234:	1809      	addeq	r1, r1, r0
 8005236:	6021      	streq	r1, [r4, #0]
 8005238:	e7ed      	b.n	8005216 <_free_r+0x1e>
 800523a:	461a      	mov	r2, r3
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	b10b      	cbz	r3, 8005244 <_free_r+0x4c>
 8005240:	42a3      	cmp	r3, r4
 8005242:	d9fa      	bls.n	800523a <_free_r+0x42>
 8005244:	6811      	ldr	r1, [r2, #0]
 8005246:	1850      	adds	r0, r2, r1
 8005248:	42a0      	cmp	r0, r4
 800524a:	d10b      	bne.n	8005264 <_free_r+0x6c>
 800524c:	6820      	ldr	r0, [r4, #0]
 800524e:	4401      	add	r1, r0
 8005250:	1850      	adds	r0, r2, r1
 8005252:	4283      	cmp	r3, r0
 8005254:	6011      	str	r1, [r2, #0]
 8005256:	d1e0      	bne.n	800521a <_free_r+0x22>
 8005258:	6818      	ldr	r0, [r3, #0]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	4408      	add	r0, r1
 800525e:	6010      	str	r0, [r2, #0]
 8005260:	6053      	str	r3, [r2, #4]
 8005262:	e7da      	b.n	800521a <_free_r+0x22>
 8005264:	d902      	bls.n	800526c <_free_r+0x74>
 8005266:	230c      	movs	r3, #12
 8005268:	602b      	str	r3, [r5, #0]
 800526a:	e7d6      	b.n	800521a <_free_r+0x22>
 800526c:	6820      	ldr	r0, [r4, #0]
 800526e:	1821      	adds	r1, r4, r0
 8005270:	428b      	cmp	r3, r1
 8005272:	bf01      	itttt	eq
 8005274:	6819      	ldreq	r1, [r3, #0]
 8005276:	685b      	ldreq	r3, [r3, #4]
 8005278:	1809      	addeq	r1, r1, r0
 800527a:	6021      	streq	r1, [r4, #0]
 800527c:	6063      	str	r3, [r4, #4]
 800527e:	6054      	str	r4, [r2, #4]
 8005280:	e7cb      	b.n	800521a <_free_r+0x22>
 8005282:	bd38      	pop	{r3, r4, r5, pc}
 8005284:	200005d4 	.word	0x200005d4

08005288 <sbrk_aligned>:
 8005288:	b570      	push	{r4, r5, r6, lr}
 800528a:	4e0f      	ldr	r6, [pc, #60]	@ (80052c8 <sbrk_aligned+0x40>)
 800528c:	460c      	mov	r4, r1
 800528e:	6831      	ldr	r1, [r6, #0]
 8005290:	4605      	mov	r5, r0
 8005292:	b911      	cbnz	r1, 800529a <sbrk_aligned+0x12>
 8005294:	f000 fbaa 	bl	80059ec <_sbrk_r>
 8005298:	6030      	str	r0, [r6, #0]
 800529a:	4621      	mov	r1, r4
 800529c:	4628      	mov	r0, r5
 800529e:	f000 fba5 	bl	80059ec <_sbrk_r>
 80052a2:	1c43      	adds	r3, r0, #1
 80052a4:	d103      	bne.n	80052ae <sbrk_aligned+0x26>
 80052a6:	f04f 34ff 	mov.w	r4, #4294967295
 80052aa:	4620      	mov	r0, r4
 80052ac:	bd70      	pop	{r4, r5, r6, pc}
 80052ae:	1cc4      	adds	r4, r0, #3
 80052b0:	f024 0403 	bic.w	r4, r4, #3
 80052b4:	42a0      	cmp	r0, r4
 80052b6:	d0f8      	beq.n	80052aa <sbrk_aligned+0x22>
 80052b8:	1a21      	subs	r1, r4, r0
 80052ba:	4628      	mov	r0, r5
 80052bc:	f000 fb96 	bl	80059ec <_sbrk_r>
 80052c0:	3001      	adds	r0, #1
 80052c2:	d1f2      	bne.n	80052aa <sbrk_aligned+0x22>
 80052c4:	e7ef      	b.n	80052a6 <sbrk_aligned+0x1e>
 80052c6:	bf00      	nop
 80052c8:	200005d0 	.word	0x200005d0

080052cc <_malloc_r>:
 80052cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052d0:	1ccd      	adds	r5, r1, #3
 80052d2:	f025 0503 	bic.w	r5, r5, #3
 80052d6:	3508      	adds	r5, #8
 80052d8:	2d0c      	cmp	r5, #12
 80052da:	bf38      	it	cc
 80052dc:	250c      	movcc	r5, #12
 80052de:	2d00      	cmp	r5, #0
 80052e0:	4606      	mov	r6, r0
 80052e2:	db01      	blt.n	80052e8 <_malloc_r+0x1c>
 80052e4:	42a9      	cmp	r1, r5
 80052e6:	d904      	bls.n	80052f2 <_malloc_r+0x26>
 80052e8:	230c      	movs	r3, #12
 80052ea:	6033      	str	r3, [r6, #0]
 80052ec:	2000      	movs	r0, #0
 80052ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80053c8 <_malloc_r+0xfc>
 80052f6:	f000 f869 	bl	80053cc <__malloc_lock>
 80052fa:	f8d8 3000 	ldr.w	r3, [r8]
 80052fe:	461c      	mov	r4, r3
 8005300:	bb44      	cbnz	r4, 8005354 <_malloc_r+0x88>
 8005302:	4629      	mov	r1, r5
 8005304:	4630      	mov	r0, r6
 8005306:	f7ff ffbf 	bl	8005288 <sbrk_aligned>
 800530a:	1c43      	adds	r3, r0, #1
 800530c:	4604      	mov	r4, r0
 800530e:	d158      	bne.n	80053c2 <_malloc_r+0xf6>
 8005310:	f8d8 4000 	ldr.w	r4, [r8]
 8005314:	4627      	mov	r7, r4
 8005316:	2f00      	cmp	r7, #0
 8005318:	d143      	bne.n	80053a2 <_malloc_r+0xd6>
 800531a:	2c00      	cmp	r4, #0
 800531c:	d04b      	beq.n	80053b6 <_malloc_r+0xea>
 800531e:	6823      	ldr	r3, [r4, #0]
 8005320:	4639      	mov	r1, r7
 8005322:	4630      	mov	r0, r6
 8005324:	eb04 0903 	add.w	r9, r4, r3
 8005328:	f000 fb60 	bl	80059ec <_sbrk_r>
 800532c:	4581      	cmp	r9, r0
 800532e:	d142      	bne.n	80053b6 <_malloc_r+0xea>
 8005330:	6821      	ldr	r1, [r4, #0]
 8005332:	4630      	mov	r0, r6
 8005334:	1a6d      	subs	r5, r5, r1
 8005336:	4629      	mov	r1, r5
 8005338:	f7ff ffa6 	bl	8005288 <sbrk_aligned>
 800533c:	3001      	adds	r0, #1
 800533e:	d03a      	beq.n	80053b6 <_malloc_r+0xea>
 8005340:	6823      	ldr	r3, [r4, #0]
 8005342:	442b      	add	r3, r5
 8005344:	6023      	str	r3, [r4, #0]
 8005346:	f8d8 3000 	ldr.w	r3, [r8]
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	bb62      	cbnz	r2, 80053a8 <_malloc_r+0xdc>
 800534e:	f8c8 7000 	str.w	r7, [r8]
 8005352:	e00f      	b.n	8005374 <_malloc_r+0xa8>
 8005354:	6822      	ldr	r2, [r4, #0]
 8005356:	1b52      	subs	r2, r2, r5
 8005358:	d420      	bmi.n	800539c <_malloc_r+0xd0>
 800535a:	2a0b      	cmp	r2, #11
 800535c:	d917      	bls.n	800538e <_malloc_r+0xc2>
 800535e:	1961      	adds	r1, r4, r5
 8005360:	42a3      	cmp	r3, r4
 8005362:	6025      	str	r5, [r4, #0]
 8005364:	bf18      	it	ne
 8005366:	6059      	strne	r1, [r3, #4]
 8005368:	6863      	ldr	r3, [r4, #4]
 800536a:	bf08      	it	eq
 800536c:	f8c8 1000 	streq.w	r1, [r8]
 8005370:	5162      	str	r2, [r4, r5]
 8005372:	604b      	str	r3, [r1, #4]
 8005374:	4630      	mov	r0, r6
 8005376:	f000 f82f 	bl	80053d8 <__malloc_unlock>
 800537a:	f104 000b 	add.w	r0, r4, #11
 800537e:	1d23      	adds	r3, r4, #4
 8005380:	f020 0007 	bic.w	r0, r0, #7
 8005384:	1ac2      	subs	r2, r0, r3
 8005386:	bf1c      	itt	ne
 8005388:	1a1b      	subne	r3, r3, r0
 800538a:	50a3      	strne	r3, [r4, r2]
 800538c:	e7af      	b.n	80052ee <_malloc_r+0x22>
 800538e:	6862      	ldr	r2, [r4, #4]
 8005390:	42a3      	cmp	r3, r4
 8005392:	bf0c      	ite	eq
 8005394:	f8c8 2000 	streq.w	r2, [r8]
 8005398:	605a      	strne	r2, [r3, #4]
 800539a:	e7eb      	b.n	8005374 <_malloc_r+0xa8>
 800539c:	4623      	mov	r3, r4
 800539e:	6864      	ldr	r4, [r4, #4]
 80053a0:	e7ae      	b.n	8005300 <_malloc_r+0x34>
 80053a2:	463c      	mov	r4, r7
 80053a4:	687f      	ldr	r7, [r7, #4]
 80053a6:	e7b6      	b.n	8005316 <_malloc_r+0x4a>
 80053a8:	461a      	mov	r2, r3
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	42a3      	cmp	r3, r4
 80053ae:	d1fb      	bne.n	80053a8 <_malloc_r+0xdc>
 80053b0:	2300      	movs	r3, #0
 80053b2:	6053      	str	r3, [r2, #4]
 80053b4:	e7de      	b.n	8005374 <_malloc_r+0xa8>
 80053b6:	230c      	movs	r3, #12
 80053b8:	4630      	mov	r0, r6
 80053ba:	6033      	str	r3, [r6, #0]
 80053bc:	f000 f80c 	bl	80053d8 <__malloc_unlock>
 80053c0:	e794      	b.n	80052ec <_malloc_r+0x20>
 80053c2:	6005      	str	r5, [r0, #0]
 80053c4:	e7d6      	b.n	8005374 <_malloc_r+0xa8>
 80053c6:	bf00      	nop
 80053c8:	200005d4 	.word	0x200005d4

080053cc <__malloc_lock>:
 80053cc:	4801      	ldr	r0, [pc, #4]	@ (80053d4 <__malloc_lock+0x8>)
 80053ce:	f7ff bf11 	b.w	80051f4 <__retarget_lock_acquire_recursive>
 80053d2:	bf00      	nop
 80053d4:	200005cc 	.word	0x200005cc

080053d8 <__malloc_unlock>:
 80053d8:	4801      	ldr	r0, [pc, #4]	@ (80053e0 <__malloc_unlock+0x8>)
 80053da:	f7ff bf0c 	b.w	80051f6 <__retarget_lock_release_recursive>
 80053de:	bf00      	nop
 80053e0:	200005cc 	.word	0x200005cc

080053e4 <__ssputs_r>:
 80053e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053e8:	461f      	mov	r7, r3
 80053ea:	688e      	ldr	r6, [r1, #8]
 80053ec:	4682      	mov	sl, r0
 80053ee:	42be      	cmp	r6, r7
 80053f0:	460c      	mov	r4, r1
 80053f2:	4690      	mov	r8, r2
 80053f4:	680b      	ldr	r3, [r1, #0]
 80053f6:	d82d      	bhi.n	8005454 <__ssputs_r+0x70>
 80053f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80053fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005400:	d026      	beq.n	8005450 <__ssputs_r+0x6c>
 8005402:	6965      	ldr	r5, [r4, #20]
 8005404:	6909      	ldr	r1, [r1, #16]
 8005406:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800540a:	eba3 0901 	sub.w	r9, r3, r1
 800540e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005412:	1c7b      	adds	r3, r7, #1
 8005414:	444b      	add	r3, r9
 8005416:	106d      	asrs	r5, r5, #1
 8005418:	429d      	cmp	r5, r3
 800541a:	bf38      	it	cc
 800541c:	461d      	movcc	r5, r3
 800541e:	0553      	lsls	r3, r2, #21
 8005420:	d527      	bpl.n	8005472 <__ssputs_r+0x8e>
 8005422:	4629      	mov	r1, r5
 8005424:	f7ff ff52 	bl	80052cc <_malloc_r>
 8005428:	4606      	mov	r6, r0
 800542a:	b360      	cbz	r0, 8005486 <__ssputs_r+0xa2>
 800542c:	464a      	mov	r2, r9
 800542e:	6921      	ldr	r1, [r4, #16]
 8005430:	f000 fafa 	bl	8005a28 <memcpy>
 8005434:	89a3      	ldrh	r3, [r4, #12]
 8005436:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800543a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800543e:	81a3      	strh	r3, [r4, #12]
 8005440:	6126      	str	r6, [r4, #16]
 8005442:	444e      	add	r6, r9
 8005444:	6026      	str	r6, [r4, #0]
 8005446:	463e      	mov	r6, r7
 8005448:	6165      	str	r5, [r4, #20]
 800544a:	eba5 0509 	sub.w	r5, r5, r9
 800544e:	60a5      	str	r5, [r4, #8]
 8005450:	42be      	cmp	r6, r7
 8005452:	d900      	bls.n	8005456 <__ssputs_r+0x72>
 8005454:	463e      	mov	r6, r7
 8005456:	4632      	mov	r2, r6
 8005458:	4641      	mov	r1, r8
 800545a:	6820      	ldr	r0, [r4, #0]
 800545c:	f000 faac 	bl	80059b8 <memmove>
 8005460:	2000      	movs	r0, #0
 8005462:	68a3      	ldr	r3, [r4, #8]
 8005464:	1b9b      	subs	r3, r3, r6
 8005466:	60a3      	str	r3, [r4, #8]
 8005468:	6823      	ldr	r3, [r4, #0]
 800546a:	4433      	add	r3, r6
 800546c:	6023      	str	r3, [r4, #0]
 800546e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005472:	462a      	mov	r2, r5
 8005474:	f000 fae6 	bl	8005a44 <_realloc_r>
 8005478:	4606      	mov	r6, r0
 800547a:	2800      	cmp	r0, #0
 800547c:	d1e0      	bne.n	8005440 <__ssputs_r+0x5c>
 800547e:	4650      	mov	r0, sl
 8005480:	6921      	ldr	r1, [r4, #16]
 8005482:	f7ff feb9 	bl	80051f8 <_free_r>
 8005486:	230c      	movs	r3, #12
 8005488:	f8ca 3000 	str.w	r3, [sl]
 800548c:	89a3      	ldrh	r3, [r4, #12]
 800548e:	f04f 30ff 	mov.w	r0, #4294967295
 8005492:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005496:	81a3      	strh	r3, [r4, #12]
 8005498:	e7e9      	b.n	800546e <__ssputs_r+0x8a>
	...

0800549c <_svfiprintf_r>:
 800549c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054a0:	4698      	mov	r8, r3
 80054a2:	898b      	ldrh	r3, [r1, #12]
 80054a4:	4607      	mov	r7, r0
 80054a6:	061b      	lsls	r3, r3, #24
 80054a8:	460d      	mov	r5, r1
 80054aa:	4614      	mov	r4, r2
 80054ac:	b09d      	sub	sp, #116	@ 0x74
 80054ae:	d510      	bpl.n	80054d2 <_svfiprintf_r+0x36>
 80054b0:	690b      	ldr	r3, [r1, #16]
 80054b2:	b973      	cbnz	r3, 80054d2 <_svfiprintf_r+0x36>
 80054b4:	2140      	movs	r1, #64	@ 0x40
 80054b6:	f7ff ff09 	bl	80052cc <_malloc_r>
 80054ba:	6028      	str	r0, [r5, #0]
 80054bc:	6128      	str	r0, [r5, #16]
 80054be:	b930      	cbnz	r0, 80054ce <_svfiprintf_r+0x32>
 80054c0:	230c      	movs	r3, #12
 80054c2:	603b      	str	r3, [r7, #0]
 80054c4:	f04f 30ff 	mov.w	r0, #4294967295
 80054c8:	b01d      	add	sp, #116	@ 0x74
 80054ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054ce:	2340      	movs	r3, #64	@ 0x40
 80054d0:	616b      	str	r3, [r5, #20]
 80054d2:	2300      	movs	r3, #0
 80054d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80054d6:	2320      	movs	r3, #32
 80054d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80054dc:	2330      	movs	r3, #48	@ 0x30
 80054de:	f04f 0901 	mov.w	r9, #1
 80054e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80054e6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005680 <_svfiprintf_r+0x1e4>
 80054ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80054ee:	4623      	mov	r3, r4
 80054f0:	469a      	mov	sl, r3
 80054f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054f6:	b10a      	cbz	r2, 80054fc <_svfiprintf_r+0x60>
 80054f8:	2a25      	cmp	r2, #37	@ 0x25
 80054fa:	d1f9      	bne.n	80054f0 <_svfiprintf_r+0x54>
 80054fc:	ebba 0b04 	subs.w	fp, sl, r4
 8005500:	d00b      	beq.n	800551a <_svfiprintf_r+0x7e>
 8005502:	465b      	mov	r3, fp
 8005504:	4622      	mov	r2, r4
 8005506:	4629      	mov	r1, r5
 8005508:	4638      	mov	r0, r7
 800550a:	f7ff ff6b 	bl	80053e4 <__ssputs_r>
 800550e:	3001      	adds	r0, #1
 8005510:	f000 80a7 	beq.w	8005662 <_svfiprintf_r+0x1c6>
 8005514:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005516:	445a      	add	r2, fp
 8005518:	9209      	str	r2, [sp, #36]	@ 0x24
 800551a:	f89a 3000 	ldrb.w	r3, [sl]
 800551e:	2b00      	cmp	r3, #0
 8005520:	f000 809f 	beq.w	8005662 <_svfiprintf_r+0x1c6>
 8005524:	2300      	movs	r3, #0
 8005526:	f04f 32ff 	mov.w	r2, #4294967295
 800552a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800552e:	f10a 0a01 	add.w	sl, sl, #1
 8005532:	9304      	str	r3, [sp, #16]
 8005534:	9307      	str	r3, [sp, #28]
 8005536:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800553a:	931a      	str	r3, [sp, #104]	@ 0x68
 800553c:	4654      	mov	r4, sl
 800553e:	2205      	movs	r2, #5
 8005540:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005544:	484e      	ldr	r0, [pc, #312]	@ (8005680 <_svfiprintf_r+0x1e4>)
 8005546:	f000 fa61 	bl	8005a0c <memchr>
 800554a:	9a04      	ldr	r2, [sp, #16]
 800554c:	b9d8      	cbnz	r0, 8005586 <_svfiprintf_r+0xea>
 800554e:	06d0      	lsls	r0, r2, #27
 8005550:	bf44      	itt	mi
 8005552:	2320      	movmi	r3, #32
 8005554:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005558:	0711      	lsls	r1, r2, #28
 800555a:	bf44      	itt	mi
 800555c:	232b      	movmi	r3, #43	@ 0x2b
 800555e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005562:	f89a 3000 	ldrb.w	r3, [sl]
 8005566:	2b2a      	cmp	r3, #42	@ 0x2a
 8005568:	d015      	beq.n	8005596 <_svfiprintf_r+0xfa>
 800556a:	4654      	mov	r4, sl
 800556c:	2000      	movs	r0, #0
 800556e:	f04f 0c0a 	mov.w	ip, #10
 8005572:	9a07      	ldr	r2, [sp, #28]
 8005574:	4621      	mov	r1, r4
 8005576:	f811 3b01 	ldrb.w	r3, [r1], #1
 800557a:	3b30      	subs	r3, #48	@ 0x30
 800557c:	2b09      	cmp	r3, #9
 800557e:	d94b      	bls.n	8005618 <_svfiprintf_r+0x17c>
 8005580:	b1b0      	cbz	r0, 80055b0 <_svfiprintf_r+0x114>
 8005582:	9207      	str	r2, [sp, #28]
 8005584:	e014      	b.n	80055b0 <_svfiprintf_r+0x114>
 8005586:	eba0 0308 	sub.w	r3, r0, r8
 800558a:	fa09 f303 	lsl.w	r3, r9, r3
 800558e:	4313      	orrs	r3, r2
 8005590:	46a2      	mov	sl, r4
 8005592:	9304      	str	r3, [sp, #16]
 8005594:	e7d2      	b.n	800553c <_svfiprintf_r+0xa0>
 8005596:	9b03      	ldr	r3, [sp, #12]
 8005598:	1d19      	adds	r1, r3, #4
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	9103      	str	r1, [sp, #12]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	bfbb      	ittet	lt
 80055a2:	425b      	neglt	r3, r3
 80055a4:	f042 0202 	orrlt.w	r2, r2, #2
 80055a8:	9307      	strge	r3, [sp, #28]
 80055aa:	9307      	strlt	r3, [sp, #28]
 80055ac:	bfb8      	it	lt
 80055ae:	9204      	strlt	r2, [sp, #16]
 80055b0:	7823      	ldrb	r3, [r4, #0]
 80055b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80055b4:	d10a      	bne.n	80055cc <_svfiprintf_r+0x130>
 80055b6:	7863      	ldrb	r3, [r4, #1]
 80055b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80055ba:	d132      	bne.n	8005622 <_svfiprintf_r+0x186>
 80055bc:	9b03      	ldr	r3, [sp, #12]
 80055be:	3402      	adds	r4, #2
 80055c0:	1d1a      	adds	r2, r3, #4
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	9203      	str	r2, [sp, #12]
 80055c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80055ca:	9305      	str	r3, [sp, #20]
 80055cc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005684 <_svfiprintf_r+0x1e8>
 80055d0:	2203      	movs	r2, #3
 80055d2:	4650      	mov	r0, sl
 80055d4:	7821      	ldrb	r1, [r4, #0]
 80055d6:	f000 fa19 	bl	8005a0c <memchr>
 80055da:	b138      	cbz	r0, 80055ec <_svfiprintf_r+0x150>
 80055dc:	2240      	movs	r2, #64	@ 0x40
 80055de:	9b04      	ldr	r3, [sp, #16]
 80055e0:	eba0 000a 	sub.w	r0, r0, sl
 80055e4:	4082      	lsls	r2, r0
 80055e6:	4313      	orrs	r3, r2
 80055e8:	3401      	adds	r4, #1
 80055ea:	9304      	str	r3, [sp, #16]
 80055ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055f0:	2206      	movs	r2, #6
 80055f2:	4825      	ldr	r0, [pc, #148]	@ (8005688 <_svfiprintf_r+0x1ec>)
 80055f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80055f8:	f000 fa08 	bl	8005a0c <memchr>
 80055fc:	2800      	cmp	r0, #0
 80055fe:	d036      	beq.n	800566e <_svfiprintf_r+0x1d2>
 8005600:	4b22      	ldr	r3, [pc, #136]	@ (800568c <_svfiprintf_r+0x1f0>)
 8005602:	bb1b      	cbnz	r3, 800564c <_svfiprintf_r+0x1b0>
 8005604:	9b03      	ldr	r3, [sp, #12]
 8005606:	3307      	adds	r3, #7
 8005608:	f023 0307 	bic.w	r3, r3, #7
 800560c:	3308      	adds	r3, #8
 800560e:	9303      	str	r3, [sp, #12]
 8005610:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005612:	4433      	add	r3, r6
 8005614:	9309      	str	r3, [sp, #36]	@ 0x24
 8005616:	e76a      	b.n	80054ee <_svfiprintf_r+0x52>
 8005618:	460c      	mov	r4, r1
 800561a:	2001      	movs	r0, #1
 800561c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005620:	e7a8      	b.n	8005574 <_svfiprintf_r+0xd8>
 8005622:	2300      	movs	r3, #0
 8005624:	f04f 0c0a 	mov.w	ip, #10
 8005628:	4619      	mov	r1, r3
 800562a:	3401      	adds	r4, #1
 800562c:	9305      	str	r3, [sp, #20]
 800562e:	4620      	mov	r0, r4
 8005630:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005634:	3a30      	subs	r2, #48	@ 0x30
 8005636:	2a09      	cmp	r2, #9
 8005638:	d903      	bls.n	8005642 <_svfiprintf_r+0x1a6>
 800563a:	2b00      	cmp	r3, #0
 800563c:	d0c6      	beq.n	80055cc <_svfiprintf_r+0x130>
 800563e:	9105      	str	r1, [sp, #20]
 8005640:	e7c4      	b.n	80055cc <_svfiprintf_r+0x130>
 8005642:	4604      	mov	r4, r0
 8005644:	2301      	movs	r3, #1
 8005646:	fb0c 2101 	mla	r1, ip, r1, r2
 800564a:	e7f0      	b.n	800562e <_svfiprintf_r+0x192>
 800564c:	ab03      	add	r3, sp, #12
 800564e:	9300      	str	r3, [sp, #0]
 8005650:	462a      	mov	r2, r5
 8005652:	4638      	mov	r0, r7
 8005654:	4b0e      	ldr	r3, [pc, #56]	@ (8005690 <_svfiprintf_r+0x1f4>)
 8005656:	a904      	add	r1, sp, #16
 8005658:	f3af 8000 	nop.w
 800565c:	1c42      	adds	r2, r0, #1
 800565e:	4606      	mov	r6, r0
 8005660:	d1d6      	bne.n	8005610 <_svfiprintf_r+0x174>
 8005662:	89ab      	ldrh	r3, [r5, #12]
 8005664:	065b      	lsls	r3, r3, #25
 8005666:	f53f af2d 	bmi.w	80054c4 <_svfiprintf_r+0x28>
 800566a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800566c:	e72c      	b.n	80054c8 <_svfiprintf_r+0x2c>
 800566e:	ab03      	add	r3, sp, #12
 8005670:	9300      	str	r3, [sp, #0]
 8005672:	462a      	mov	r2, r5
 8005674:	4638      	mov	r0, r7
 8005676:	4b06      	ldr	r3, [pc, #24]	@ (8005690 <_svfiprintf_r+0x1f4>)
 8005678:	a904      	add	r1, sp, #16
 800567a:	f000 f87d 	bl	8005778 <_printf_i>
 800567e:	e7ed      	b.n	800565c <_svfiprintf_r+0x1c0>
 8005680:	08006336 	.word	0x08006336
 8005684:	0800633c 	.word	0x0800633c
 8005688:	08006340 	.word	0x08006340
 800568c:	00000000 	.word	0x00000000
 8005690:	080053e5 	.word	0x080053e5

08005694 <_printf_common>:
 8005694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005698:	4616      	mov	r6, r2
 800569a:	4698      	mov	r8, r3
 800569c:	688a      	ldr	r2, [r1, #8]
 800569e:	690b      	ldr	r3, [r1, #16]
 80056a0:	4607      	mov	r7, r0
 80056a2:	4293      	cmp	r3, r2
 80056a4:	bfb8      	it	lt
 80056a6:	4613      	movlt	r3, r2
 80056a8:	6033      	str	r3, [r6, #0]
 80056aa:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80056ae:	460c      	mov	r4, r1
 80056b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80056b4:	b10a      	cbz	r2, 80056ba <_printf_common+0x26>
 80056b6:	3301      	adds	r3, #1
 80056b8:	6033      	str	r3, [r6, #0]
 80056ba:	6823      	ldr	r3, [r4, #0]
 80056bc:	0699      	lsls	r1, r3, #26
 80056be:	bf42      	ittt	mi
 80056c0:	6833      	ldrmi	r3, [r6, #0]
 80056c2:	3302      	addmi	r3, #2
 80056c4:	6033      	strmi	r3, [r6, #0]
 80056c6:	6825      	ldr	r5, [r4, #0]
 80056c8:	f015 0506 	ands.w	r5, r5, #6
 80056cc:	d106      	bne.n	80056dc <_printf_common+0x48>
 80056ce:	f104 0a19 	add.w	sl, r4, #25
 80056d2:	68e3      	ldr	r3, [r4, #12]
 80056d4:	6832      	ldr	r2, [r6, #0]
 80056d6:	1a9b      	subs	r3, r3, r2
 80056d8:	42ab      	cmp	r3, r5
 80056da:	dc2b      	bgt.n	8005734 <_printf_common+0xa0>
 80056dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80056e0:	6822      	ldr	r2, [r4, #0]
 80056e2:	3b00      	subs	r3, #0
 80056e4:	bf18      	it	ne
 80056e6:	2301      	movne	r3, #1
 80056e8:	0692      	lsls	r2, r2, #26
 80056ea:	d430      	bmi.n	800574e <_printf_common+0xba>
 80056ec:	4641      	mov	r1, r8
 80056ee:	4638      	mov	r0, r7
 80056f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80056f4:	47c8      	blx	r9
 80056f6:	3001      	adds	r0, #1
 80056f8:	d023      	beq.n	8005742 <_printf_common+0xae>
 80056fa:	6823      	ldr	r3, [r4, #0]
 80056fc:	6922      	ldr	r2, [r4, #16]
 80056fe:	f003 0306 	and.w	r3, r3, #6
 8005702:	2b04      	cmp	r3, #4
 8005704:	bf14      	ite	ne
 8005706:	2500      	movne	r5, #0
 8005708:	6833      	ldreq	r3, [r6, #0]
 800570a:	f04f 0600 	mov.w	r6, #0
 800570e:	bf08      	it	eq
 8005710:	68e5      	ldreq	r5, [r4, #12]
 8005712:	f104 041a 	add.w	r4, r4, #26
 8005716:	bf08      	it	eq
 8005718:	1aed      	subeq	r5, r5, r3
 800571a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800571e:	bf08      	it	eq
 8005720:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005724:	4293      	cmp	r3, r2
 8005726:	bfc4      	itt	gt
 8005728:	1a9b      	subgt	r3, r3, r2
 800572a:	18ed      	addgt	r5, r5, r3
 800572c:	42b5      	cmp	r5, r6
 800572e:	d11a      	bne.n	8005766 <_printf_common+0xd2>
 8005730:	2000      	movs	r0, #0
 8005732:	e008      	b.n	8005746 <_printf_common+0xb2>
 8005734:	2301      	movs	r3, #1
 8005736:	4652      	mov	r2, sl
 8005738:	4641      	mov	r1, r8
 800573a:	4638      	mov	r0, r7
 800573c:	47c8      	blx	r9
 800573e:	3001      	adds	r0, #1
 8005740:	d103      	bne.n	800574a <_printf_common+0xb6>
 8005742:	f04f 30ff 	mov.w	r0, #4294967295
 8005746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800574a:	3501      	adds	r5, #1
 800574c:	e7c1      	b.n	80056d2 <_printf_common+0x3e>
 800574e:	2030      	movs	r0, #48	@ 0x30
 8005750:	18e1      	adds	r1, r4, r3
 8005752:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005756:	1c5a      	adds	r2, r3, #1
 8005758:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800575c:	4422      	add	r2, r4
 800575e:	3302      	adds	r3, #2
 8005760:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005764:	e7c2      	b.n	80056ec <_printf_common+0x58>
 8005766:	2301      	movs	r3, #1
 8005768:	4622      	mov	r2, r4
 800576a:	4641      	mov	r1, r8
 800576c:	4638      	mov	r0, r7
 800576e:	47c8      	blx	r9
 8005770:	3001      	adds	r0, #1
 8005772:	d0e6      	beq.n	8005742 <_printf_common+0xae>
 8005774:	3601      	adds	r6, #1
 8005776:	e7d9      	b.n	800572c <_printf_common+0x98>

08005778 <_printf_i>:
 8005778:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800577c:	7e0f      	ldrb	r7, [r1, #24]
 800577e:	4691      	mov	r9, r2
 8005780:	2f78      	cmp	r7, #120	@ 0x78
 8005782:	4680      	mov	r8, r0
 8005784:	460c      	mov	r4, r1
 8005786:	469a      	mov	sl, r3
 8005788:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800578a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800578e:	d807      	bhi.n	80057a0 <_printf_i+0x28>
 8005790:	2f62      	cmp	r7, #98	@ 0x62
 8005792:	d80a      	bhi.n	80057aa <_printf_i+0x32>
 8005794:	2f00      	cmp	r7, #0
 8005796:	f000 80d3 	beq.w	8005940 <_printf_i+0x1c8>
 800579a:	2f58      	cmp	r7, #88	@ 0x58
 800579c:	f000 80ba 	beq.w	8005914 <_printf_i+0x19c>
 80057a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80057a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80057a8:	e03a      	b.n	8005820 <_printf_i+0xa8>
 80057aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80057ae:	2b15      	cmp	r3, #21
 80057b0:	d8f6      	bhi.n	80057a0 <_printf_i+0x28>
 80057b2:	a101      	add	r1, pc, #4	@ (adr r1, 80057b8 <_printf_i+0x40>)
 80057b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057b8:	08005811 	.word	0x08005811
 80057bc:	08005825 	.word	0x08005825
 80057c0:	080057a1 	.word	0x080057a1
 80057c4:	080057a1 	.word	0x080057a1
 80057c8:	080057a1 	.word	0x080057a1
 80057cc:	080057a1 	.word	0x080057a1
 80057d0:	08005825 	.word	0x08005825
 80057d4:	080057a1 	.word	0x080057a1
 80057d8:	080057a1 	.word	0x080057a1
 80057dc:	080057a1 	.word	0x080057a1
 80057e0:	080057a1 	.word	0x080057a1
 80057e4:	08005927 	.word	0x08005927
 80057e8:	0800584f 	.word	0x0800584f
 80057ec:	080058e1 	.word	0x080058e1
 80057f0:	080057a1 	.word	0x080057a1
 80057f4:	080057a1 	.word	0x080057a1
 80057f8:	08005949 	.word	0x08005949
 80057fc:	080057a1 	.word	0x080057a1
 8005800:	0800584f 	.word	0x0800584f
 8005804:	080057a1 	.word	0x080057a1
 8005808:	080057a1 	.word	0x080057a1
 800580c:	080058e9 	.word	0x080058e9
 8005810:	6833      	ldr	r3, [r6, #0]
 8005812:	1d1a      	adds	r2, r3, #4
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	6032      	str	r2, [r6, #0]
 8005818:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800581c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005820:	2301      	movs	r3, #1
 8005822:	e09e      	b.n	8005962 <_printf_i+0x1ea>
 8005824:	6833      	ldr	r3, [r6, #0]
 8005826:	6820      	ldr	r0, [r4, #0]
 8005828:	1d19      	adds	r1, r3, #4
 800582a:	6031      	str	r1, [r6, #0]
 800582c:	0606      	lsls	r6, r0, #24
 800582e:	d501      	bpl.n	8005834 <_printf_i+0xbc>
 8005830:	681d      	ldr	r5, [r3, #0]
 8005832:	e003      	b.n	800583c <_printf_i+0xc4>
 8005834:	0645      	lsls	r5, r0, #25
 8005836:	d5fb      	bpl.n	8005830 <_printf_i+0xb8>
 8005838:	f9b3 5000 	ldrsh.w	r5, [r3]
 800583c:	2d00      	cmp	r5, #0
 800583e:	da03      	bge.n	8005848 <_printf_i+0xd0>
 8005840:	232d      	movs	r3, #45	@ 0x2d
 8005842:	426d      	negs	r5, r5
 8005844:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005848:	230a      	movs	r3, #10
 800584a:	4859      	ldr	r0, [pc, #356]	@ (80059b0 <_printf_i+0x238>)
 800584c:	e011      	b.n	8005872 <_printf_i+0xfa>
 800584e:	6821      	ldr	r1, [r4, #0]
 8005850:	6833      	ldr	r3, [r6, #0]
 8005852:	0608      	lsls	r0, r1, #24
 8005854:	f853 5b04 	ldr.w	r5, [r3], #4
 8005858:	d402      	bmi.n	8005860 <_printf_i+0xe8>
 800585a:	0649      	lsls	r1, r1, #25
 800585c:	bf48      	it	mi
 800585e:	b2ad      	uxthmi	r5, r5
 8005860:	2f6f      	cmp	r7, #111	@ 0x6f
 8005862:	6033      	str	r3, [r6, #0]
 8005864:	bf14      	ite	ne
 8005866:	230a      	movne	r3, #10
 8005868:	2308      	moveq	r3, #8
 800586a:	4851      	ldr	r0, [pc, #324]	@ (80059b0 <_printf_i+0x238>)
 800586c:	2100      	movs	r1, #0
 800586e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005872:	6866      	ldr	r6, [r4, #4]
 8005874:	2e00      	cmp	r6, #0
 8005876:	bfa8      	it	ge
 8005878:	6821      	ldrge	r1, [r4, #0]
 800587a:	60a6      	str	r6, [r4, #8]
 800587c:	bfa4      	itt	ge
 800587e:	f021 0104 	bicge.w	r1, r1, #4
 8005882:	6021      	strge	r1, [r4, #0]
 8005884:	b90d      	cbnz	r5, 800588a <_printf_i+0x112>
 8005886:	2e00      	cmp	r6, #0
 8005888:	d04b      	beq.n	8005922 <_printf_i+0x1aa>
 800588a:	4616      	mov	r6, r2
 800588c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005890:	fb03 5711 	mls	r7, r3, r1, r5
 8005894:	5dc7      	ldrb	r7, [r0, r7]
 8005896:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800589a:	462f      	mov	r7, r5
 800589c:	42bb      	cmp	r3, r7
 800589e:	460d      	mov	r5, r1
 80058a0:	d9f4      	bls.n	800588c <_printf_i+0x114>
 80058a2:	2b08      	cmp	r3, #8
 80058a4:	d10b      	bne.n	80058be <_printf_i+0x146>
 80058a6:	6823      	ldr	r3, [r4, #0]
 80058a8:	07df      	lsls	r7, r3, #31
 80058aa:	d508      	bpl.n	80058be <_printf_i+0x146>
 80058ac:	6923      	ldr	r3, [r4, #16]
 80058ae:	6861      	ldr	r1, [r4, #4]
 80058b0:	4299      	cmp	r1, r3
 80058b2:	bfde      	ittt	le
 80058b4:	2330      	movle	r3, #48	@ 0x30
 80058b6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80058ba:	f106 36ff 	addle.w	r6, r6, #4294967295
 80058be:	1b92      	subs	r2, r2, r6
 80058c0:	6122      	str	r2, [r4, #16]
 80058c2:	464b      	mov	r3, r9
 80058c4:	4621      	mov	r1, r4
 80058c6:	4640      	mov	r0, r8
 80058c8:	f8cd a000 	str.w	sl, [sp]
 80058cc:	aa03      	add	r2, sp, #12
 80058ce:	f7ff fee1 	bl	8005694 <_printf_common>
 80058d2:	3001      	adds	r0, #1
 80058d4:	d14a      	bne.n	800596c <_printf_i+0x1f4>
 80058d6:	f04f 30ff 	mov.w	r0, #4294967295
 80058da:	b004      	add	sp, #16
 80058dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058e0:	6823      	ldr	r3, [r4, #0]
 80058e2:	f043 0320 	orr.w	r3, r3, #32
 80058e6:	6023      	str	r3, [r4, #0]
 80058e8:	2778      	movs	r7, #120	@ 0x78
 80058ea:	4832      	ldr	r0, [pc, #200]	@ (80059b4 <_printf_i+0x23c>)
 80058ec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80058f0:	6823      	ldr	r3, [r4, #0]
 80058f2:	6831      	ldr	r1, [r6, #0]
 80058f4:	061f      	lsls	r7, r3, #24
 80058f6:	f851 5b04 	ldr.w	r5, [r1], #4
 80058fa:	d402      	bmi.n	8005902 <_printf_i+0x18a>
 80058fc:	065f      	lsls	r7, r3, #25
 80058fe:	bf48      	it	mi
 8005900:	b2ad      	uxthmi	r5, r5
 8005902:	6031      	str	r1, [r6, #0]
 8005904:	07d9      	lsls	r1, r3, #31
 8005906:	bf44      	itt	mi
 8005908:	f043 0320 	orrmi.w	r3, r3, #32
 800590c:	6023      	strmi	r3, [r4, #0]
 800590e:	b11d      	cbz	r5, 8005918 <_printf_i+0x1a0>
 8005910:	2310      	movs	r3, #16
 8005912:	e7ab      	b.n	800586c <_printf_i+0xf4>
 8005914:	4826      	ldr	r0, [pc, #152]	@ (80059b0 <_printf_i+0x238>)
 8005916:	e7e9      	b.n	80058ec <_printf_i+0x174>
 8005918:	6823      	ldr	r3, [r4, #0]
 800591a:	f023 0320 	bic.w	r3, r3, #32
 800591e:	6023      	str	r3, [r4, #0]
 8005920:	e7f6      	b.n	8005910 <_printf_i+0x198>
 8005922:	4616      	mov	r6, r2
 8005924:	e7bd      	b.n	80058a2 <_printf_i+0x12a>
 8005926:	6833      	ldr	r3, [r6, #0]
 8005928:	6825      	ldr	r5, [r4, #0]
 800592a:	1d18      	adds	r0, r3, #4
 800592c:	6961      	ldr	r1, [r4, #20]
 800592e:	6030      	str	r0, [r6, #0]
 8005930:	062e      	lsls	r6, r5, #24
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	d501      	bpl.n	800593a <_printf_i+0x1c2>
 8005936:	6019      	str	r1, [r3, #0]
 8005938:	e002      	b.n	8005940 <_printf_i+0x1c8>
 800593a:	0668      	lsls	r0, r5, #25
 800593c:	d5fb      	bpl.n	8005936 <_printf_i+0x1be>
 800593e:	8019      	strh	r1, [r3, #0]
 8005940:	2300      	movs	r3, #0
 8005942:	4616      	mov	r6, r2
 8005944:	6123      	str	r3, [r4, #16]
 8005946:	e7bc      	b.n	80058c2 <_printf_i+0x14a>
 8005948:	6833      	ldr	r3, [r6, #0]
 800594a:	2100      	movs	r1, #0
 800594c:	1d1a      	adds	r2, r3, #4
 800594e:	6032      	str	r2, [r6, #0]
 8005950:	681e      	ldr	r6, [r3, #0]
 8005952:	6862      	ldr	r2, [r4, #4]
 8005954:	4630      	mov	r0, r6
 8005956:	f000 f859 	bl	8005a0c <memchr>
 800595a:	b108      	cbz	r0, 8005960 <_printf_i+0x1e8>
 800595c:	1b80      	subs	r0, r0, r6
 800595e:	6060      	str	r0, [r4, #4]
 8005960:	6863      	ldr	r3, [r4, #4]
 8005962:	6123      	str	r3, [r4, #16]
 8005964:	2300      	movs	r3, #0
 8005966:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800596a:	e7aa      	b.n	80058c2 <_printf_i+0x14a>
 800596c:	4632      	mov	r2, r6
 800596e:	4649      	mov	r1, r9
 8005970:	4640      	mov	r0, r8
 8005972:	6923      	ldr	r3, [r4, #16]
 8005974:	47d0      	blx	sl
 8005976:	3001      	adds	r0, #1
 8005978:	d0ad      	beq.n	80058d6 <_printf_i+0x15e>
 800597a:	6823      	ldr	r3, [r4, #0]
 800597c:	079b      	lsls	r3, r3, #30
 800597e:	d413      	bmi.n	80059a8 <_printf_i+0x230>
 8005980:	68e0      	ldr	r0, [r4, #12]
 8005982:	9b03      	ldr	r3, [sp, #12]
 8005984:	4298      	cmp	r0, r3
 8005986:	bfb8      	it	lt
 8005988:	4618      	movlt	r0, r3
 800598a:	e7a6      	b.n	80058da <_printf_i+0x162>
 800598c:	2301      	movs	r3, #1
 800598e:	4632      	mov	r2, r6
 8005990:	4649      	mov	r1, r9
 8005992:	4640      	mov	r0, r8
 8005994:	47d0      	blx	sl
 8005996:	3001      	adds	r0, #1
 8005998:	d09d      	beq.n	80058d6 <_printf_i+0x15e>
 800599a:	3501      	adds	r5, #1
 800599c:	68e3      	ldr	r3, [r4, #12]
 800599e:	9903      	ldr	r1, [sp, #12]
 80059a0:	1a5b      	subs	r3, r3, r1
 80059a2:	42ab      	cmp	r3, r5
 80059a4:	dcf2      	bgt.n	800598c <_printf_i+0x214>
 80059a6:	e7eb      	b.n	8005980 <_printf_i+0x208>
 80059a8:	2500      	movs	r5, #0
 80059aa:	f104 0619 	add.w	r6, r4, #25
 80059ae:	e7f5      	b.n	800599c <_printf_i+0x224>
 80059b0:	08006347 	.word	0x08006347
 80059b4:	08006358 	.word	0x08006358

080059b8 <memmove>:
 80059b8:	4288      	cmp	r0, r1
 80059ba:	b510      	push	{r4, lr}
 80059bc:	eb01 0402 	add.w	r4, r1, r2
 80059c0:	d902      	bls.n	80059c8 <memmove+0x10>
 80059c2:	4284      	cmp	r4, r0
 80059c4:	4623      	mov	r3, r4
 80059c6:	d807      	bhi.n	80059d8 <memmove+0x20>
 80059c8:	1e43      	subs	r3, r0, #1
 80059ca:	42a1      	cmp	r1, r4
 80059cc:	d008      	beq.n	80059e0 <memmove+0x28>
 80059ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80059d6:	e7f8      	b.n	80059ca <memmove+0x12>
 80059d8:	4601      	mov	r1, r0
 80059da:	4402      	add	r2, r0
 80059dc:	428a      	cmp	r2, r1
 80059de:	d100      	bne.n	80059e2 <memmove+0x2a>
 80059e0:	bd10      	pop	{r4, pc}
 80059e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80059e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80059ea:	e7f7      	b.n	80059dc <memmove+0x24>

080059ec <_sbrk_r>:
 80059ec:	b538      	push	{r3, r4, r5, lr}
 80059ee:	2300      	movs	r3, #0
 80059f0:	4d05      	ldr	r5, [pc, #20]	@ (8005a08 <_sbrk_r+0x1c>)
 80059f2:	4604      	mov	r4, r0
 80059f4:	4608      	mov	r0, r1
 80059f6:	602b      	str	r3, [r5, #0]
 80059f8:	f7fb fa66 	bl	8000ec8 <_sbrk>
 80059fc:	1c43      	adds	r3, r0, #1
 80059fe:	d102      	bne.n	8005a06 <_sbrk_r+0x1a>
 8005a00:	682b      	ldr	r3, [r5, #0]
 8005a02:	b103      	cbz	r3, 8005a06 <_sbrk_r+0x1a>
 8005a04:	6023      	str	r3, [r4, #0]
 8005a06:	bd38      	pop	{r3, r4, r5, pc}
 8005a08:	200005c8 	.word	0x200005c8

08005a0c <memchr>:
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	b510      	push	{r4, lr}
 8005a10:	b2c9      	uxtb	r1, r1
 8005a12:	4402      	add	r2, r0
 8005a14:	4293      	cmp	r3, r2
 8005a16:	4618      	mov	r0, r3
 8005a18:	d101      	bne.n	8005a1e <memchr+0x12>
 8005a1a:	2000      	movs	r0, #0
 8005a1c:	e003      	b.n	8005a26 <memchr+0x1a>
 8005a1e:	7804      	ldrb	r4, [r0, #0]
 8005a20:	3301      	adds	r3, #1
 8005a22:	428c      	cmp	r4, r1
 8005a24:	d1f6      	bne.n	8005a14 <memchr+0x8>
 8005a26:	bd10      	pop	{r4, pc}

08005a28 <memcpy>:
 8005a28:	440a      	add	r2, r1
 8005a2a:	4291      	cmp	r1, r2
 8005a2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a30:	d100      	bne.n	8005a34 <memcpy+0xc>
 8005a32:	4770      	bx	lr
 8005a34:	b510      	push	{r4, lr}
 8005a36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a3a:	4291      	cmp	r1, r2
 8005a3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a40:	d1f9      	bne.n	8005a36 <memcpy+0xe>
 8005a42:	bd10      	pop	{r4, pc}

08005a44 <_realloc_r>:
 8005a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a48:	4680      	mov	r8, r0
 8005a4a:	4615      	mov	r5, r2
 8005a4c:	460c      	mov	r4, r1
 8005a4e:	b921      	cbnz	r1, 8005a5a <_realloc_r+0x16>
 8005a50:	4611      	mov	r1, r2
 8005a52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a56:	f7ff bc39 	b.w	80052cc <_malloc_r>
 8005a5a:	b92a      	cbnz	r2, 8005a68 <_realloc_r+0x24>
 8005a5c:	f7ff fbcc 	bl	80051f8 <_free_r>
 8005a60:	2400      	movs	r4, #0
 8005a62:	4620      	mov	r0, r4
 8005a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a68:	f000 f81a 	bl	8005aa0 <_malloc_usable_size_r>
 8005a6c:	4285      	cmp	r5, r0
 8005a6e:	4606      	mov	r6, r0
 8005a70:	d802      	bhi.n	8005a78 <_realloc_r+0x34>
 8005a72:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005a76:	d8f4      	bhi.n	8005a62 <_realloc_r+0x1e>
 8005a78:	4629      	mov	r1, r5
 8005a7a:	4640      	mov	r0, r8
 8005a7c:	f7ff fc26 	bl	80052cc <_malloc_r>
 8005a80:	4607      	mov	r7, r0
 8005a82:	2800      	cmp	r0, #0
 8005a84:	d0ec      	beq.n	8005a60 <_realloc_r+0x1c>
 8005a86:	42b5      	cmp	r5, r6
 8005a88:	462a      	mov	r2, r5
 8005a8a:	4621      	mov	r1, r4
 8005a8c:	bf28      	it	cs
 8005a8e:	4632      	movcs	r2, r6
 8005a90:	f7ff ffca 	bl	8005a28 <memcpy>
 8005a94:	4621      	mov	r1, r4
 8005a96:	4640      	mov	r0, r8
 8005a98:	f7ff fbae 	bl	80051f8 <_free_r>
 8005a9c:	463c      	mov	r4, r7
 8005a9e:	e7e0      	b.n	8005a62 <_realloc_r+0x1e>

08005aa0 <_malloc_usable_size_r>:
 8005aa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005aa4:	1f18      	subs	r0, r3, #4
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	bfbc      	itt	lt
 8005aaa:	580b      	ldrlt	r3, [r1, r0]
 8005aac:	18c0      	addlt	r0, r0, r3
 8005aae:	4770      	bx	lr

08005ab0 <_init>:
 8005ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ab2:	bf00      	nop
 8005ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ab6:	bc08      	pop	{r3}
 8005ab8:	469e      	mov	lr, r3
 8005aba:	4770      	bx	lr

08005abc <_fini>:
 8005abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005abe:	bf00      	nop
 8005ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ac2:	bc08      	pop	{r3}
 8005ac4:	469e      	mov	lr, r3
 8005ac6:	4770      	bx	lr
