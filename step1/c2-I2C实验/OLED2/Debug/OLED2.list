
OLED2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ef0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000844  08001ffc  08001ffc  00002ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002840  08002840  000040d0  2**0
                  CONTENTS
  4 .ARM          00000000  08002840  08002840  000040d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002840  08002840  000040d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002840  08002840  00003840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002844  08002844  00003844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d0  20000000  08002848  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  200000d0  08002918  000040d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08002918  00004144  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000040d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006330  00000000  00000000  000040f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000162f  00000000  00000000  0000a429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000790  00000000  00000000  0000ba58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005ac  00000000  00000000  0000c1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016327  00000000  00000000  0000c794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b317  00000000  00000000  00022abb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e719  00000000  00000000  0002ddd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ac4eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d28  00000000  00000000  000ac530  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  000ae258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000d0 	.word	0x200000d0
 8000128:	00000000 	.word	0x00000000
 800012c:	08001fe4 	.word	0x08001fe4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000d4 	.word	0x200000d4
 8000148:	08001fe4 	.word	0x08001fe4

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000152:	4b14      	ldr	r3, [pc, #80]	@ (80001a4 <MX_GPIO_Init+0x58>)
 8000154:	699b      	ldr	r3, [r3, #24]
 8000156:	4a13      	ldr	r2, [pc, #76]	@ (80001a4 <MX_GPIO_Init+0x58>)
 8000158:	f043 0320 	orr.w	r3, r3, #32
 800015c:	6193      	str	r3, [r2, #24]
 800015e:	4b11      	ldr	r3, [pc, #68]	@ (80001a4 <MX_GPIO_Init+0x58>)
 8000160:	699b      	ldr	r3, [r3, #24]
 8000162:	f003 0320 	and.w	r3, r3, #32
 8000166:	60fb      	str	r3, [r7, #12]
 8000168:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800016a:	4b0e      	ldr	r3, [pc, #56]	@ (80001a4 <MX_GPIO_Init+0x58>)
 800016c:	699b      	ldr	r3, [r3, #24]
 800016e:	4a0d      	ldr	r2, [pc, #52]	@ (80001a4 <MX_GPIO_Init+0x58>)
 8000170:	f043 0308 	orr.w	r3, r3, #8
 8000174:	6193      	str	r3, [r2, #24]
 8000176:	4b0b      	ldr	r3, [pc, #44]	@ (80001a4 <MX_GPIO_Init+0x58>)
 8000178:	699b      	ldr	r3, [r3, #24]
 800017a:	f003 0308 	and.w	r3, r3, #8
 800017e:	60bb      	str	r3, [r7, #8]
 8000180:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000182:	4b08      	ldr	r3, [pc, #32]	@ (80001a4 <MX_GPIO_Init+0x58>)
 8000184:	699b      	ldr	r3, [r3, #24]
 8000186:	4a07      	ldr	r2, [pc, #28]	@ (80001a4 <MX_GPIO_Init+0x58>)
 8000188:	f043 0304 	orr.w	r3, r3, #4
 800018c:	6193      	str	r3, [r2, #24]
 800018e:	4b05      	ldr	r3, [pc, #20]	@ (80001a4 <MX_GPIO_Init+0x58>)
 8000190:	699b      	ldr	r3, [r3, #24]
 8000192:	f003 0304 	and.w	r3, r3, #4
 8000196:	607b      	str	r3, [r7, #4]
 8000198:	687b      	ldr	r3, [r7, #4]

}
 800019a:	bf00      	nop
 800019c:	3714      	adds	r7, #20
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	40021000 	.word	0x40021000

080001a8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80001ac:	4b12      	ldr	r3, [pc, #72]	@ (80001f8 <MX_I2C2_Init+0x50>)
 80001ae:	4a13      	ldr	r2, [pc, #76]	@ (80001fc <MX_I2C2_Init+0x54>)
 80001b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80001b2:	4b11      	ldr	r3, [pc, #68]	@ (80001f8 <MX_I2C2_Init+0x50>)
 80001b4:	4a12      	ldr	r2, [pc, #72]	@ (8000200 <MX_I2C2_Init+0x58>)
 80001b6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80001b8:	4b0f      	ldr	r3, [pc, #60]	@ (80001f8 <MX_I2C2_Init+0x50>)
 80001ba:	2200      	movs	r2, #0
 80001bc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80001be:	4b0e      	ldr	r3, [pc, #56]	@ (80001f8 <MX_I2C2_Init+0x50>)
 80001c0:	2200      	movs	r2, #0
 80001c2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80001c4:	4b0c      	ldr	r3, [pc, #48]	@ (80001f8 <MX_I2C2_Init+0x50>)
 80001c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80001ca:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80001cc:	4b0a      	ldr	r3, [pc, #40]	@ (80001f8 <MX_I2C2_Init+0x50>)
 80001ce:	2200      	movs	r2, #0
 80001d0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80001d2:	4b09      	ldr	r3, [pc, #36]	@ (80001f8 <MX_I2C2_Init+0x50>)
 80001d4:	2200      	movs	r2, #0
 80001d6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80001d8:	4b07      	ldr	r3, [pc, #28]	@ (80001f8 <MX_I2C2_Init+0x50>)
 80001da:	2200      	movs	r2, #0
 80001dc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80001de:	4b06      	ldr	r3, [pc, #24]	@ (80001f8 <MX_I2C2_Init+0x50>)
 80001e0:	2200      	movs	r2, #0
 80001e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <MX_I2C2_Init+0x50>)
 80001e6:	f000 fe29 	bl	8000e3c <HAL_I2C_Init>
 80001ea:	4603      	mov	r3, r0
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d001      	beq.n	80001f4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80001f0:	f000 f8b5 	bl	800035e <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80001f4:	bf00      	nop
 80001f6:	bd80      	pop	{r7, pc}
 80001f8:	200000ec 	.word	0x200000ec
 80001fc:	40005800 	.word	0x40005800
 8000200:	00061a80 	.word	0x00061a80

08000204 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b088      	sub	sp, #32
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800020c:	f107 0310 	add.w	r3, r7, #16
 8000210:	2200      	movs	r2, #0
 8000212:	601a      	str	r2, [r3, #0]
 8000214:	605a      	str	r2, [r3, #4]
 8000216:	609a      	str	r2, [r3, #8]
 8000218:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	4a16      	ldr	r2, [pc, #88]	@ (8000278 <HAL_I2C_MspInit+0x74>)
 8000220:	4293      	cmp	r3, r2
 8000222:	d124      	bne.n	800026e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000224:	4b15      	ldr	r3, [pc, #84]	@ (800027c <HAL_I2C_MspInit+0x78>)
 8000226:	699b      	ldr	r3, [r3, #24]
 8000228:	4a14      	ldr	r2, [pc, #80]	@ (800027c <HAL_I2C_MspInit+0x78>)
 800022a:	f043 0308 	orr.w	r3, r3, #8
 800022e:	6193      	str	r3, [r2, #24]
 8000230:	4b12      	ldr	r3, [pc, #72]	@ (800027c <HAL_I2C_MspInit+0x78>)
 8000232:	699b      	ldr	r3, [r3, #24]
 8000234:	f003 0308 	and.w	r3, r3, #8
 8000238:	60fb      	str	r3, [r7, #12]
 800023a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800023c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000240:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000242:	2312      	movs	r3, #18
 8000244:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000246:	2303      	movs	r3, #3
 8000248:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800024a:	f107 0310 	add.w	r3, r7, #16
 800024e:	4619      	mov	r1, r3
 8000250:	480b      	ldr	r0, [pc, #44]	@ (8000280 <HAL_I2C_MspInit+0x7c>)
 8000252:	f000 fc6f 	bl	8000b34 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000256:	4b09      	ldr	r3, [pc, #36]	@ (800027c <HAL_I2C_MspInit+0x78>)
 8000258:	69db      	ldr	r3, [r3, #28]
 800025a:	4a08      	ldr	r2, [pc, #32]	@ (800027c <HAL_I2C_MspInit+0x78>)
 800025c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000260:	61d3      	str	r3, [r2, #28]
 8000262:	4b06      	ldr	r3, [pc, #24]	@ (800027c <HAL_I2C_MspInit+0x78>)
 8000264:	69db      	ldr	r3, [r3, #28]
 8000266:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800026a:	60bb      	str	r3, [r7, #8]
 800026c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800026e:	bf00      	nop
 8000270:	3720      	adds	r7, #32
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	40005800 	.word	0x40005800
 800027c:	40021000 	.word	0x40021000
 8000280:	40010c00 	.word	0x40010c00

08000284 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800028a:	f000 fae9 	bl	8000860 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028e:	f000 f821 	bl	80002d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000292:	f7ff ff5b 	bl	800014c <MX_GPIO_Init>
  MX_I2C2_Init();
 8000296:	f7ff ff87 	bl	80001a8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
   OLED_Init();                           //OLED初始
 800029a:	f000 f867 	bl	800036c <OLED_Init>
   OLED_Clear();                         //清屏
 800029e:	f000 f8b3 	bl	8000408 <OLED_Clear>
   OLED_DrawBMP(42,1, 85, 5,BMP1,0);//正相显示图片BMP1
 80002a2:	2300      	movs	r3, #0
 80002a4:	9301      	str	r3, [sp, #4]
 80002a6:	4b09      	ldr	r3, [pc, #36]	@ (80002cc <main+0x48>)
 80002a8:	9300      	str	r3, [sp, #0]
 80002aa:	2305      	movs	r3, #5
 80002ac:	2255      	movs	r2, #85	@ 0x55
 80002ae:	2101      	movs	r1, #1
 80002b0:	202a      	movs	r0, #42	@ 0x2a
 80002b2:	f000 f9ee 	bl	8000692 <OLED_DrawBMP>
   OLED_ShowString(14,6,"Summer Pocket",16, 0);
 80002b6:	2300      	movs	r3, #0
 80002b8:	9300      	str	r3, [sp, #0]
 80002ba:	2310      	movs	r3, #16
 80002bc:	4a04      	ldr	r2, [pc, #16]	@ (80002d0 <main+0x4c>)
 80002be:	2106      	movs	r1, #6
 80002c0:	200e      	movs	r0, #14
 80002c2:	f000 f99d 	bl	8000600 <OLED_ShowString>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002c6:	bf00      	nop
 80002c8:	e7fd      	b.n	80002c6 <main+0x42>
 80002ca:	bf00      	nop
 80002cc:	20000018 	.word	0x20000018
 80002d0:	08001ffc 	.word	0x08001ffc

080002d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b090      	sub	sp, #64	@ 0x40
 80002d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002da:	f107 0318 	add.w	r3, r7, #24
 80002de:	2228      	movs	r2, #40	@ 0x28
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f001 fe52 	bl	8001f8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]
 80002f2:	60da      	str	r2, [r3, #12]
 80002f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002f6:	2301      	movs	r3, #1
 80002f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000300:	2300      	movs	r3, #0
 8000302:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000304:	2301      	movs	r3, #1
 8000306:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000308:	2302      	movs	r3, #2
 800030a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800030c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000310:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000312:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000316:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000318:	f107 0318 	add.w	r3, r7, #24
 800031c:	4618      	mov	r0, r3
 800031e:	f001 fa39 	bl	8001794 <HAL_RCC_OscConfig>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000328:	f000 f819 	bl	800035e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032c:	230f      	movs	r3, #15
 800032e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000330:	2302      	movs	r3, #2
 8000332:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000334:	2300      	movs	r3, #0
 8000336:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000338:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800033c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800033e:	2300      	movs	r3, #0
 8000340:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	2102      	movs	r1, #2
 8000346:	4618      	mov	r0, r3
 8000348:	f001 fca6 	bl	8001c98 <HAL_RCC_ClockConfig>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000352:	f000 f804 	bl	800035e <Error_Handler>
  }
}
 8000356:	bf00      	nop
 8000358:	3740      	adds	r7, #64	@ 0x40
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}

0800035e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800035e:	b480      	push	{r7}
 8000360:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000362:	b672      	cpsid	i
}
 8000364:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000366:	bf00      	nop
 8000368:	e7fd      	b.n	8000366 <Error_Handler+0x8>
	...

0800036c <OLED_Init>:
 * @function: void OLED_Init(void)
 * @description: OLED初始化
 * @return {*}
 */
void OLED_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
	HAL_Delay(200);
 8000372:	20c8      	movs	r0, #200	@ 0xc8
 8000374:	f000 fad6 	bl	8000924 <HAL_Delay>

	uint8_t i = 0;
 8000378:	2300      	movs	r3, #0
 800037a:	71fb      	strb	r3, [r7, #7]
	for(i=0; i<23; i++)
 800037c:	2300      	movs	r3, #0
 800037e:	71fb      	strb	r3, [r7, #7]
 8000380:	e008      	b.n	8000394 <OLED_Init+0x28>
	{
		OLED_WR_CMD(CMD_Data[i]);
 8000382:	79fb      	ldrb	r3, [r7, #7]
 8000384:	4a07      	ldr	r2, [pc, #28]	@ (80003a4 <OLED_Init+0x38>)
 8000386:	5cd3      	ldrb	r3, [r2, r3]
 8000388:	4618      	mov	r0, r3
 800038a:	f000 f80d 	bl	80003a8 <OLED_WR_CMD>
	for(i=0; i<23; i++)
 800038e:	79fb      	ldrb	r3, [r7, #7]
 8000390:	3301      	adds	r3, #1
 8000392:	71fb      	strb	r3, [r7, #7]
 8000394:	79fb      	ldrb	r3, [r7, #7]
 8000396:	2b16      	cmp	r3, #22
 8000398:	d9f3      	bls.n	8000382 <OLED_Init+0x16>
	}

}
 800039a:	bf00      	nop
 800039c:	bf00      	nop
 800039e:	3708      	adds	r7, #8
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	20000000 	.word	0x20000000

080003a8 <OLED_WR_CMD>:
 * @description: 向设备写控制命令
 * @param {uint8_t} cmd 芯片手册规定的命令
 * @return {*}
 */
void OLED_WR_CMD(uint8_t cmd)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b086      	sub	sp, #24
 80003ac:	af04      	add	r7, sp, #16
 80003ae:	4603      	mov	r3, r0
 80003b0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2 ,0x78,0x00,I2C_MEMADD_SIZE_8BIT,&cmd,1,0x100);
 80003b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80003b6:	9302      	str	r3, [sp, #8]
 80003b8:	2301      	movs	r3, #1
 80003ba:	9301      	str	r3, [sp, #4]
 80003bc:	1dfb      	adds	r3, r7, #7
 80003be:	9300      	str	r3, [sp, #0]
 80003c0:	2301      	movs	r3, #1
 80003c2:	2200      	movs	r2, #0
 80003c4:	2178      	movs	r1, #120	@ 0x78
 80003c6:	4803      	ldr	r0, [pc, #12]	@ (80003d4 <OLED_WR_CMD+0x2c>)
 80003c8:	f000 fe7c 	bl	80010c4 <HAL_I2C_Mem_Write>
}
 80003cc:	bf00      	nop
 80003ce:	3708      	adds	r7, #8
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	200000ec 	.word	0x200000ec

080003d8 <OLED_WR_DATA>:
 * @description: 向设备写控制数据
 * @param {uint8_t} data 数据
 * @return {*}
 */
void OLED_WR_DATA(uint8_t data)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b086      	sub	sp, #24
 80003dc:	af04      	add	r7, sp, #16
 80003de:	4603      	mov	r3, r0
 80003e0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2 ,0x78,0x40,I2C_MEMADD_SIZE_8BIT,&data,1,0x100);
 80003e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80003e6:	9302      	str	r3, [sp, #8]
 80003e8:	2301      	movs	r3, #1
 80003ea:	9301      	str	r3, [sp, #4]
 80003ec:	1dfb      	adds	r3, r7, #7
 80003ee:	9300      	str	r3, [sp, #0]
 80003f0:	2301      	movs	r3, #1
 80003f2:	2240      	movs	r2, #64	@ 0x40
 80003f4:	2178      	movs	r1, #120	@ 0x78
 80003f6:	4803      	ldr	r0, [pc, #12]	@ (8000404 <OLED_WR_DATA+0x2c>)
 80003f8:	f000 fe64 	bl	80010c4 <HAL_I2C_Mem_Write>
}
 80003fc:	bf00      	nop
 80003fe:	3708      	adds	r7, #8
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	200000ec 	.word	0x200000ec

08000408 <OLED_Clear>:
 * @function: OLED_Clear(void)
 * @description: 清屏,整个屏幕是黑色的!和没点亮一样!!!
 * @return {*}
 */
void OLED_Clear(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i=0;i<8;i++)
 800040e:	2300      	movs	r3, #0
 8000410:	71fb      	strb	r3, [r7, #7]
 8000412:	e01b      	b.n	800044c <OLED_Clear+0x44>
	{
		OLED_WR_CMD(0xb0+i);    //设置页地址（0~7）
 8000414:	79fb      	ldrb	r3, [r7, #7]
 8000416:	3b50      	subs	r3, #80	@ 0x50
 8000418:	b2db      	uxtb	r3, r3
 800041a:	4618      	mov	r0, r3
 800041c:	f7ff ffc4 	bl	80003a8 <OLED_WR_CMD>
		OLED_WR_CMD(0x00);      //设置显示位置—列低地址
 8000420:	2000      	movs	r0, #0
 8000422:	f7ff ffc1 	bl	80003a8 <OLED_WR_CMD>
		OLED_WR_CMD(0x10);      //设置显示位置—列高地址
 8000426:	2010      	movs	r0, #16
 8000428:	f7ff ffbe 	bl	80003a8 <OLED_WR_CMD>
		for(n=0;n<128;n++)
 800042c:	2300      	movs	r3, #0
 800042e:	71bb      	strb	r3, [r7, #6]
 8000430:	e005      	b.n	800043e <OLED_Clear+0x36>
			OLED_WR_DATA(0);
 8000432:	2000      	movs	r0, #0
 8000434:	f7ff ffd0 	bl	80003d8 <OLED_WR_DATA>
		for(n=0;n<128;n++)
 8000438:	79bb      	ldrb	r3, [r7, #6]
 800043a:	3301      	adds	r3, #1
 800043c:	71bb      	strb	r3, [r7, #6]
 800043e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000442:	2b00      	cmp	r3, #0
 8000444:	daf5      	bge.n	8000432 <OLED_Clear+0x2a>
	for(i=0;i<8;i++)
 8000446:	79fb      	ldrb	r3, [r7, #7]
 8000448:	3301      	adds	r3, #1
 800044a:	71fb      	strb	r3, [r7, #7]
 800044c:	79fb      	ldrb	r3, [r7, #7]
 800044e:	2b07      	cmp	r3, #7
 8000450:	d9e0      	bls.n	8000414 <OLED_Clear+0xc>
	}
}
 8000452:	bf00      	nop
 8000454:	bf00      	nop
 8000456:	3708      	adds	r7, #8
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}

0800045c <OLED_Set_Pos>:
 * @description: 坐标设置
 * @param {uint8_t} x,y
 * @return {*}
 */
void OLED_Set_Pos(uint8_t x, uint8_t y)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	4603      	mov	r3, r0
 8000464:	460a      	mov	r2, r1
 8000466:	71fb      	strb	r3, [r7, #7]
 8000468:	4613      	mov	r3, r2
 800046a:	71bb      	strb	r3, [r7, #6]
	OLED_WR_CMD(0xb0+y);	//设置页地址（0~7）
 800046c:	79bb      	ldrb	r3, [r7, #6]
 800046e:	3b50      	subs	r3, #80	@ 0x50
 8000470:	b2db      	uxtb	r3, r3
 8000472:	4618      	mov	r0, r3
 8000474:	f7ff ff98 	bl	80003a8 <OLED_WR_CMD>
	OLED_WR_CMD(((x&0xf0)>>4)|0x10); //设置显示位置—列高地址
 8000478:	79fb      	ldrb	r3, [r7, #7]
 800047a:	091b      	lsrs	r3, r3, #4
 800047c:	b2db      	uxtb	r3, r3
 800047e:	f043 0310 	orr.w	r3, r3, #16
 8000482:	b2db      	uxtb	r3, r3
 8000484:	4618      	mov	r0, r3
 8000486:	f7ff ff8f 	bl	80003a8 <OLED_WR_CMD>
	OLED_WR_CMD(x&0x0f);	//设置显示位置—列低地址
 800048a:	79fb      	ldrb	r3, [r7, #7]
 800048c:	f003 030f 	and.w	r3, r3, #15
 8000490:	b2db      	uxtb	r3, r3
 8000492:	4618      	mov	r0, r3
 8000494:	f7ff ff88 	bl	80003a8 <OLED_WR_CMD>
}
 8000498:	bf00      	nop
 800049a:	3708      	adds	r7, #8
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}

080004a0 <OLED_ShowChar>:
 * @param {uint8_t} Char_Size待显示字符的字体大小,选择字体 16/12
 * @param {uint8_t} Color_Turn是否反相显示(1反相、0不反相)
 * @return {*}
 */
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t Char_Size,uint8_t Color_Turn)
{
 80004a0:	b590      	push	{r4, r7, lr}
 80004a2:	b085      	sub	sp, #20
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	4604      	mov	r4, r0
 80004a8:	4608      	mov	r0, r1
 80004aa:	4611      	mov	r1, r2
 80004ac:	461a      	mov	r2, r3
 80004ae:	4623      	mov	r3, r4
 80004b0:	71fb      	strb	r3, [r7, #7]
 80004b2:	4603      	mov	r3, r0
 80004b4:	71bb      	strb	r3, [r7, #6]
 80004b6:	460b      	mov	r3, r1
 80004b8:	717b      	strb	r3, [r7, #5]
 80004ba:	4613      	mov	r3, r2
 80004bc:	713b      	strb	r3, [r7, #4]
	unsigned char c=0,i=0;
 80004be:	2300      	movs	r3, #0
 80004c0:	73bb      	strb	r3, [r7, #14]
 80004c2:	2300      	movs	r3, #0
 80004c4:	73fb      	strb	r3, [r7, #15]
		c=chr-' ';//得到偏移后的值
 80004c6:	797b      	ldrb	r3, [r7, #5]
 80004c8:	3b20      	subs	r3, #32
 80004ca:	73bb      	strb	r3, [r7, #14]
		if(x>128-1){x=0;y=y+2;}
 80004cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	da04      	bge.n	80004de <OLED_ShowChar+0x3e>
 80004d4:	2300      	movs	r3, #0
 80004d6:	71fb      	strb	r3, [r7, #7]
 80004d8:	79bb      	ldrb	r3, [r7, #6]
 80004da:	3302      	adds	r3, #2
 80004dc:	71bb      	strb	r3, [r7, #6]
		if(Char_Size ==16)
 80004de:	793b      	ldrb	r3, [r7, #4]
 80004e0:	2b10      	cmp	r3, #16
 80004e2:	d154      	bne.n	800058e <OLED_ShowChar+0xee>
		{
			OLED_Set_Pos(x,y);
 80004e4:	79ba      	ldrb	r2, [r7, #6]
 80004e6:	79fb      	ldrb	r3, [r7, #7]
 80004e8:	4611      	mov	r1, r2
 80004ea:	4618      	mov	r0, r3
 80004ec:	f7ff ffb6 	bl	800045c <OLED_Set_Pos>
			for(i=0;i<8;i++)
 80004f0:	2300      	movs	r3, #0
 80004f2:	73fb      	strb	r3, [r7, #15]
 80004f4:	e01b      	b.n	800052e <OLED_ShowChar+0x8e>
				{
				  if(Color_Turn)
 80004f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d00b      	beq.n	8000516 <OLED_ShowChar+0x76>
					  OLED_WR_DATA(~F8X16[c*16+i]);
 80004fe:	7bbb      	ldrb	r3, [r7, #14]
 8000500:	011a      	lsls	r2, r3, #4
 8000502:	7bfb      	ldrb	r3, [r7, #15]
 8000504:	4413      	add	r3, r2
 8000506:	4a3c      	ldr	r2, [pc, #240]	@ (80005f8 <OLED_ShowChar+0x158>)
 8000508:	5cd3      	ldrb	r3, [r2, r3]
 800050a:	43db      	mvns	r3, r3
 800050c:	b2db      	uxtb	r3, r3
 800050e:	4618      	mov	r0, r3
 8000510:	f7ff ff62 	bl	80003d8 <OLED_WR_DATA>
 8000514:	e008      	b.n	8000528 <OLED_ShowChar+0x88>
				  else
					  OLED_WR_DATA(F8X16[c*16+i]);
 8000516:	7bbb      	ldrb	r3, [r7, #14]
 8000518:	011a      	lsls	r2, r3, #4
 800051a:	7bfb      	ldrb	r3, [r7, #15]
 800051c:	4413      	add	r3, r2
 800051e:	4a36      	ldr	r2, [pc, #216]	@ (80005f8 <OLED_ShowChar+0x158>)
 8000520:	5cd3      	ldrb	r3, [r2, r3]
 8000522:	4618      	mov	r0, r3
 8000524:	f7ff ff58 	bl	80003d8 <OLED_WR_DATA>
			for(i=0;i<8;i++)
 8000528:	7bfb      	ldrb	r3, [r7, #15]
 800052a:	3301      	adds	r3, #1
 800052c:	73fb      	strb	r3, [r7, #15]
 800052e:	7bfb      	ldrb	r3, [r7, #15]
 8000530:	2b07      	cmp	r3, #7
 8000532:	d9e0      	bls.n	80004f6 <OLED_ShowChar+0x56>
				}
			OLED_Set_Pos(x,y+1);
 8000534:	79bb      	ldrb	r3, [r7, #6]
 8000536:	3301      	adds	r3, #1
 8000538:	b2da      	uxtb	r2, r3
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	4611      	mov	r1, r2
 800053e:	4618      	mov	r0, r3
 8000540:	f7ff ff8c 	bl	800045c <OLED_Set_Pos>
			for(i=0;i<8;i++)
 8000544:	2300      	movs	r3, #0
 8000546:	73fb      	strb	r3, [r7, #15]
 8000548:	e01d      	b.n	8000586 <OLED_ShowChar+0xe6>
			    {
				  if(Color_Turn)
 800054a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d00c      	beq.n	800056c <OLED_ShowChar+0xcc>
					  OLED_WR_DATA(~F8X16[c*16+i+8]);
 8000552:	7bbb      	ldrb	r3, [r7, #14]
 8000554:	011a      	lsls	r2, r3, #4
 8000556:	7bfb      	ldrb	r3, [r7, #15]
 8000558:	4413      	add	r3, r2
 800055a:	3308      	adds	r3, #8
 800055c:	4a26      	ldr	r2, [pc, #152]	@ (80005f8 <OLED_ShowChar+0x158>)
 800055e:	5cd3      	ldrb	r3, [r2, r3]
 8000560:	43db      	mvns	r3, r3
 8000562:	b2db      	uxtb	r3, r3
 8000564:	4618      	mov	r0, r3
 8000566:	f7ff ff37 	bl	80003d8 <OLED_WR_DATA>
 800056a:	e009      	b.n	8000580 <OLED_ShowChar+0xe0>
				  else
					  OLED_WR_DATA(F8X16[c*16+i+8]);
 800056c:	7bbb      	ldrb	r3, [r7, #14]
 800056e:	011a      	lsls	r2, r3, #4
 8000570:	7bfb      	ldrb	r3, [r7, #15]
 8000572:	4413      	add	r3, r2
 8000574:	3308      	adds	r3, #8
 8000576:	4a20      	ldr	r2, [pc, #128]	@ (80005f8 <OLED_ShowChar+0x158>)
 8000578:	5cd3      	ldrb	r3, [r2, r3]
 800057a:	4618      	mov	r0, r3
 800057c:	f7ff ff2c 	bl	80003d8 <OLED_WR_DATA>
			for(i=0;i<8;i++)
 8000580:	7bfb      	ldrb	r3, [r7, #15]
 8000582:	3301      	adds	r3, #1
 8000584:	73fb      	strb	r3, [r7, #15]
 8000586:	7bfb      	ldrb	r3, [r7, #15]
 8000588:	2b07      	cmp	r3, #7
 800058a:	d9de      	bls.n	800054a <OLED_ShowChar+0xaa>
					  OLED_WR_DATA(~F6x8[c][i]);
				  else
					  OLED_WR_DATA(F6x8[c][i]);
			    }
		  }
}
 800058c:	e02f      	b.n	80005ee <OLED_ShowChar+0x14e>
				OLED_Set_Pos(x,y);
 800058e:	79ba      	ldrb	r2, [r7, #6]
 8000590:	79fb      	ldrb	r3, [r7, #7]
 8000592:	4611      	mov	r1, r2
 8000594:	4618      	mov	r0, r3
 8000596:	f7ff ff61 	bl	800045c <OLED_Set_Pos>
				for(i=0;i<6;i++)
 800059a:	2300      	movs	r3, #0
 800059c:	73fb      	strb	r3, [r7, #15]
 800059e:	e023      	b.n	80005e8 <OLED_ShowChar+0x148>
				  if(Color_Turn)
 80005a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d00f      	beq.n	80005c8 <OLED_ShowChar+0x128>
					  OLED_WR_DATA(~F6x8[c][i]);
 80005a8:	7bba      	ldrb	r2, [r7, #14]
 80005aa:	7bf9      	ldrb	r1, [r7, #15]
 80005ac:	4813      	ldr	r0, [pc, #76]	@ (80005fc <OLED_ShowChar+0x15c>)
 80005ae:	4613      	mov	r3, r2
 80005b0:	005b      	lsls	r3, r3, #1
 80005b2:	4413      	add	r3, r2
 80005b4:	005b      	lsls	r3, r3, #1
 80005b6:	4403      	add	r3, r0
 80005b8:	440b      	add	r3, r1
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	43db      	mvns	r3, r3
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	4618      	mov	r0, r3
 80005c2:	f7ff ff09 	bl	80003d8 <OLED_WR_DATA>
 80005c6:	e00c      	b.n	80005e2 <OLED_ShowChar+0x142>
					  OLED_WR_DATA(F6x8[c][i]);
 80005c8:	7bba      	ldrb	r2, [r7, #14]
 80005ca:	7bf9      	ldrb	r1, [r7, #15]
 80005cc:	480b      	ldr	r0, [pc, #44]	@ (80005fc <OLED_ShowChar+0x15c>)
 80005ce:	4613      	mov	r3, r2
 80005d0:	005b      	lsls	r3, r3, #1
 80005d2:	4413      	add	r3, r2
 80005d4:	005b      	lsls	r3, r3, #1
 80005d6:	4403      	add	r3, r0
 80005d8:	440b      	add	r3, r1
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	4618      	mov	r0, r3
 80005de:	f7ff fefb 	bl	80003d8 <OLED_WR_DATA>
				for(i=0;i<6;i++)
 80005e2:	7bfb      	ldrb	r3, [r7, #15]
 80005e4:	3301      	adds	r3, #1
 80005e6:	73fb      	strb	r3, [r7, #15]
 80005e8:	7bfb      	ldrb	r3, [r7, #15]
 80005ea:	2b05      	cmp	r3, #5
 80005ec:	d9d8      	bls.n	80005a0 <OLED_ShowChar+0x100>
}
 80005ee:	bf00      	nop
 80005f0:	3714      	adds	r7, #20
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd90      	pop	{r4, r7, pc}
 80005f6:	bf00      	nop
 80005f8:	08002234 	.word	0x08002234
 80005fc:	0800200c 	.word	0x0800200c

08000600 <OLED_ShowString>:
 * @param {uint8_t} Char_Size待显示字符串的字体大小,选择字体 16/12，16为8X16，12为6x8
 * @param {uint8_t} Color_Turn是否反相显示(1反相、0不反相)
 * @return {*}
 */
void OLED_ShowString(uint8_t x,uint8_t y,char*chr,uint8_t Char_Size, uint8_t Color_Turn)
{
 8000600:	b590      	push	{r4, r7, lr}
 8000602:	b087      	sub	sp, #28
 8000604:	af02      	add	r7, sp, #8
 8000606:	603a      	str	r2, [r7, #0]
 8000608:	461a      	mov	r2, r3
 800060a:	4603      	mov	r3, r0
 800060c:	71fb      	strb	r3, [r7, #7]
 800060e:	460b      	mov	r3, r1
 8000610:	71bb      	strb	r3, [r7, #6]
 8000612:	4613      	mov	r3, r2
 8000614:	717b      	strb	r3, [r7, #5]
	uint8_t  j=0;
 8000616:	2300      	movs	r3, #0
 8000618:	73fb      	strb	r3, [r7, #15]
	while (chr[j]!='\0')
 800061a:	e02f      	b.n	800067c <OLED_ShowString+0x7c>
	{		OLED_ShowChar(x,y,chr[j],Char_Size, Color_Turn);
 800061c:	7bfb      	ldrb	r3, [r7, #15]
 800061e:	683a      	ldr	r2, [r7, #0]
 8000620:	4413      	add	r3, r2
 8000622:	781a      	ldrb	r2, [r3, #0]
 8000624:	797c      	ldrb	r4, [r7, #5]
 8000626:	79b9      	ldrb	r1, [r7, #6]
 8000628:	79f8      	ldrb	r0, [r7, #7]
 800062a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800062e:	9300      	str	r3, [sp, #0]
 8000630:	4623      	mov	r3, r4
 8000632:	f7ff ff35 	bl	80004a0 <OLED_ShowChar>
			if (Char_Size == 12) //6X8的字体列加6，显示下一个字符
 8000636:	797b      	ldrb	r3, [r7, #5]
 8000638:	2b0c      	cmp	r3, #12
 800063a:	d103      	bne.n	8000644 <OLED_ShowString+0x44>
				x += 6;
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	3306      	adds	r3, #6
 8000640:	71fb      	strb	r3, [r7, #7]
 8000642:	e002      	b.n	800064a <OLED_ShowString+0x4a>
			else  //8X16的字体列加8，显示下一个字符
				x += 8;
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	3308      	adds	r3, #8
 8000648:	71fb      	strb	r3, [r7, #7]

			if (x > 122 && Char_Size==12) //TextSize6x8如果一行不够显示了，从下一行继续显示
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	2b7a      	cmp	r3, #122	@ 0x7a
 800064e:	d907      	bls.n	8000660 <OLED_ShowString+0x60>
 8000650:	797b      	ldrb	r3, [r7, #5]
 8000652:	2b0c      	cmp	r3, #12
 8000654:	d104      	bne.n	8000660 <OLED_ShowString+0x60>
			{
				x = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	71fb      	strb	r3, [r7, #7]
				y++;
 800065a:	79bb      	ldrb	r3, [r7, #6]
 800065c:	3301      	adds	r3, #1
 800065e:	71bb      	strb	r3, [r7, #6]
			}
			if (x > 120 && Char_Size== 16) //TextSize8x16如果一行不够显示了，从下一行继续显示
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	2b78      	cmp	r3, #120	@ 0x78
 8000664:	d907      	bls.n	8000676 <OLED_ShowString+0x76>
 8000666:	797b      	ldrb	r3, [r7, #5]
 8000668:	2b10      	cmp	r3, #16
 800066a:	d104      	bne.n	8000676 <OLED_ShowString+0x76>
			{
				x = 0;
 800066c:	2300      	movs	r3, #0
 800066e:	71fb      	strb	r3, [r7, #7]
				y++;
 8000670:	79bb      	ldrb	r3, [r7, #6]
 8000672:	3301      	adds	r3, #1
 8000674:	71bb      	strb	r3, [r7, #6]
			}
			j++;
 8000676:	7bfb      	ldrb	r3, [r7, #15]
 8000678:	3301      	adds	r3, #1
 800067a:	73fb      	strb	r3, [r7, #15]
	while (chr[j]!='\0')
 800067c:	7bfb      	ldrb	r3, [r7, #15]
 800067e:	683a      	ldr	r2, [r7, #0]
 8000680:	4413      	add	r3, r2
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d1c9      	bne.n	800061c <OLED_ShowString+0x1c>
	}
}
 8000688:	bf00      	nop
 800068a:	bf00      	nop
 800068c:	3714      	adds	r7, #20
 800068e:	46bd      	mov	sp, r7
 8000690:	bd90      	pop	{r4, r7, pc}

08000692 <OLED_DrawBMP>:
 * @param {uint8_t} *BMP待显示的图像数据
 * @param {uint8_t} Color_Turn是否反相显示(1反相、0不反相)
 * @return {*}
 */
void OLED_DrawBMP(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t *  BMP,uint8_t Color_Turn)
{
 8000692:	b590      	push	{r4, r7, lr}
 8000694:	b085      	sub	sp, #20
 8000696:	af00      	add	r7, sp, #0
 8000698:	4604      	mov	r4, r0
 800069a:	4608      	mov	r0, r1
 800069c:	4611      	mov	r1, r2
 800069e:	461a      	mov	r2, r3
 80006a0:	4623      	mov	r3, r4
 80006a2:	71fb      	strb	r3, [r7, #7]
 80006a4:	4603      	mov	r3, r0
 80006a6:	71bb      	strb	r3, [r7, #6]
 80006a8:	460b      	mov	r3, r1
 80006aa:	717b      	strb	r3, [r7, #5]
 80006ac:	4613      	mov	r3, r2
 80006ae:	713b      	strb	r3, [r7, #4]
   uint32_t j = 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	60fb      	str	r3, [r7, #12]
   uint8_t x = 0, y = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	72fb      	strb	r3, [r7, #11]
 80006b8:	2300      	movs	r3, #0
 80006ba:	72bb      	strb	r3, [r7, #10]

  if(y1%8==0)
 80006bc:	793b      	ldrb	r3, [r7, #4]
 80006be:	f003 0307 	and.w	r3, r3, #7
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d103      	bne.n	80006d0 <OLED_DrawBMP+0x3e>
		y = y1/8;
 80006c8:	793b      	ldrb	r3, [r7, #4]
 80006ca:	08db      	lsrs	r3, r3, #3
 80006cc:	72bb      	strb	r3, [r7, #10]
 80006ce:	e004      	b.n	80006da <OLED_DrawBMP+0x48>
  else
		y = y1/8 + 1;
 80006d0:	793b      	ldrb	r3, [r7, #4]
 80006d2:	08db      	lsrs	r3, r3, #3
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	3301      	adds	r3, #1
 80006d8:	72bb      	strb	r3, [r7, #10]
	for(y=y0;y<y1;y++)
 80006da:	79bb      	ldrb	r3, [r7, #6]
 80006dc:	72bb      	strb	r3, [r7, #10]
 80006de:	e02b      	b.n	8000738 <OLED_DrawBMP+0xa6>
	{
		OLED_Set_Pos(x0,y);
 80006e0:	7aba      	ldrb	r2, [r7, #10]
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	4611      	mov	r1, r2
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff feb8 	bl	800045c <OLED_Set_Pos>
    for(x=x0;x<x1;x++)
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	72fb      	strb	r3, [r7, #11]
 80006f0:	e01b      	b.n	800072a <OLED_DrawBMP+0x98>
		{
			if (Color_Turn)
 80006f2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d00b      	beq.n	8000712 <OLED_DrawBMP+0x80>
				OLED_WR_DATA(~BMP[j++]);//显示反相图片
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	1c5a      	adds	r2, r3, #1
 80006fe:	60fa      	str	r2, [r7, #12]
 8000700:	6a3a      	ldr	r2, [r7, #32]
 8000702:	4413      	add	r3, r2
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	43db      	mvns	r3, r3
 8000708:	b2db      	uxtb	r3, r3
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff fe64 	bl	80003d8 <OLED_WR_DATA>
 8000710:	e008      	b.n	8000724 <OLED_DrawBMP+0x92>
			else
				OLED_WR_DATA(BMP[j++]);//显示图片
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	1c5a      	adds	r2, r3, #1
 8000716:	60fa      	str	r2, [r7, #12]
 8000718:	6a3a      	ldr	r2, [r7, #32]
 800071a:	4413      	add	r3, r2
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff fe5a 	bl	80003d8 <OLED_WR_DATA>
    for(x=x0;x<x1;x++)
 8000724:	7afb      	ldrb	r3, [r7, #11]
 8000726:	3301      	adds	r3, #1
 8000728:	72fb      	strb	r3, [r7, #11]
 800072a:	7afa      	ldrb	r2, [r7, #11]
 800072c:	797b      	ldrb	r3, [r7, #5]
 800072e:	429a      	cmp	r2, r3
 8000730:	d3df      	bcc.n	80006f2 <OLED_DrawBMP+0x60>
	for(y=y0;y<y1;y++)
 8000732:	7abb      	ldrb	r3, [r7, #10]
 8000734:	3301      	adds	r3, #1
 8000736:	72bb      	strb	r3, [r7, #10]
 8000738:	7aba      	ldrb	r2, [r7, #10]
 800073a:	793b      	ldrb	r3, [r7, #4]
 800073c:	429a      	cmp	r2, r3
 800073e:	d3cf      	bcc.n	80006e0 <OLED_DrawBMP+0x4e>

		}
	}
}
 8000740:	bf00      	nop
 8000742:	bf00      	nop
 8000744:	3714      	adds	r7, #20
 8000746:	46bd      	mov	sp, r7
 8000748:	bd90      	pop	{r4, r7, pc}
	...

0800074c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800074c:	b480      	push	{r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000752:	4b15      	ldr	r3, [pc, #84]	@ (80007a8 <HAL_MspInit+0x5c>)
 8000754:	699b      	ldr	r3, [r3, #24]
 8000756:	4a14      	ldr	r2, [pc, #80]	@ (80007a8 <HAL_MspInit+0x5c>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	6193      	str	r3, [r2, #24]
 800075e:	4b12      	ldr	r3, [pc, #72]	@ (80007a8 <HAL_MspInit+0x5c>)
 8000760:	699b      	ldr	r3, [r3, #24]
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800076a:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <HAL_MspInit+0x5c>)
 800076c:	69db      	ldr	r3, [r3, #28]
 800076e:	4a0e      	ldr	r2, [pc, #56]	@ (80007a8 <HAL_MspInit+0x5c>)
 8000770:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000774:	61d3      	str	r3, [r2, #28]
 8000776:	4b0c      	ldr	r3, [pc, #48]	@ (80007a8 <HAL_MspInit+0x5c>)
 8000778:	69db      	ldr	r3, [r3, #28]
 800077a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000782:	4b0a      	ldr	r3, [pc, #40]	@ (80007ac <HAL_MspInit+0x60>)
 8000784:	685b      	ldr	r3, [r3, #4]
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	4a04      	ldr	r2, [pc, #16]	@ (80007ac <HAL_MspInit+0x60>)
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800079e:	bf00      	nop
 80007a0:	3714      	adds	r7, #20
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr
 80007a8:	40021000 	.word	0x40021000
 80007ac:	40010000 	.word	0x40010000

080007b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007b4:	bf00      	nop
 80007b6:	e7fd      	b.n	80007b4 <NMI_Handler+0x4>

080007b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007bc:	bf00      	nop
 80007be:	e7fd      	b.n	80007bc <HardFault_Handler+0x4>

080007c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c4:	bf00      	nop
 80007c6:	e7fd      	b.n	80007c4 <MemManage_Handler+0x4>

080007c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <BusFault_Handler+0x4>

080007d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d4:	bf00      	nop
 80007d6:	e7fd      	b.n	80007d4 <UsageFault_Handler+0x4>

080007d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr

080007e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr

080007f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr

080007fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000800:	f000 f874 	bl	80008ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}

08000808 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr

08000814 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000814:	f7ff fff8 	bl	8000808 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000818:	480b      	ldr	r0, [pc, #44]	@ (8000848 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800081a:	490c      	ldr	r1, [pc, #48]	@ (800084c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800081c:	4a0c      	ldr	r2, [pc, #48]	@ (8000850 <LoopFillZerobss+0x16>)
  movs r3, #0
 800081e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000820:	e002      	b.n	8000828 <LoopCopyDataInit>

08000822 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000822:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000824:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000826:	3304      	adds	r3, #4

08000828 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000828:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800082a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800082c:	d3f9      	bcc.n	8000822 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800082e:	4a09      	ldr	r2, [pc, #36]	@ (8000854 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000830:	4c09      	ldr	r4, [pc, #36]	@ (8000858 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000832:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000834:	e001      	b.n	800083a <LoopFillZerobss>

08000836 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000836:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000838:	3204      	adds	r2, #4

0800083a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800083a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800083c:	d3fb      	bcc.n	8000836 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800083e:	f001 fbad 	bl	8001f9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000842:	f7ff fd1f 	bl	8000284 <main>
  bx lr
 8000846:	4770      	bx	lr
  ldr r0, =_sdata
 8000848:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800084c:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8000850:	08002848 	.word	0x08002848
  ldr r2, =_sbss
 8000854:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8000858:	20000144 	.word	0x20000144

0800085c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800085c:	e7fe      	b.n	800085c <ADC1_2_IRQHandler>
	...

08000860 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000864:	4b08      	ldr	r3, [pc, #32]	@ (8000888 <HAL_Init+0x28>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a07      	ldr	r2, [pc, #28]	@ (8000888 <HAL_Init+0x28>)
 800086a:	f043 0310 	orr.w	r3, r3, #16
 800086e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000870:	2003      	movs	r0, #3
 8000872:	f000 f92b 	bl	8000acc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000876:	200f      	movs	r0, #15
 8000878:	f000 f808 	bl	800088c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800087c:	f7ff ff66 	bl	800074c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000880:	2300      	movs	r3, #0
}
 8000882:	4618      	mov	r0, r3
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40022000 	.word	0x40022000

0800088c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000894:	4b12      	ldr	r3, [pc, #72]	@ (80008e0 <HAL_InitTick+0x54>)
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	4b12      	ldr	r3, [pc, #72]	@ (80008e4 <HAL_InitTick+0x58>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	4619      	mov	r1, r3
 800089e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 f935 	bl	8000b1a <HAL_SYSTICK_Config>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008b6:	2301      	movs	r3, #1
 80008b8:	e00e      	b.n	80008d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	2b0f      	cmp	r3, #15
 80008be:	d80a      	bhi.n	80008d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008c0:	2200      	movs	r2, #0
 80008c2:	6879      	ldr	r1, [r7, #4]
 80008c4:	f04f 30ff 	mov.w	r0, #4294967295
 80008c8:	f000 f90b 	bl	8000ae2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008cc:	4a06      	ldr	r2, [pc, #24]	@ (80008e8 <HAL_InitTick+0x5c>)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008d2:	2300      	movs	r3, #0
 80008d4:	e000      	b.n	80008d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008d6:	2301      	movs	r3, #1
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	200000c4 	.word	0x200000c4
 80008e4:	200000cc 	.word	0x200000cc
 80008e8:	200000c8 	.word	0x200000c8

080008ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008f0:	4b05      	ldr	r3, [pc, #20]	@ (8000908 <HAL_IncTick+0x1c>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	461a      	mov	r2, r3
 80008f6:	4b05      	ldr	r3, [pc, #20]	@ (800090c <HAL_IncTick+0x20>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4413      	add	r3, r2
 80008fc:	4a03      	ldr	r2, [pc, #12]	@ (800090c <HAL_IncTick+0x20>)
 80008fe:	6013      	str	r3, [r2, #0]
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr
 8000908:	200000cc 	.word	0x200000cc
 800090c:	20000140 	.word	0x20000140

08000910 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  return uwTick;
 8000914:	4b02      	ldr	r3, [pc, #8]	@ (8000920 <HAL_GetTick+0x10>)
 8000916:	681b      	ldr	r3, [r3, #0]
}
 8000918:	4618      	mov	r0, r3
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr
 8000920:	20000140 	.word	0x20000140

08000924 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800092c:	f7ff fff0 	bl	8000910 <HAL_GetTick>
 8000930:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800093c:	d005      	beq.n	800094a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800093e:	4b0a      	ldr	r3, [pc, #40]	@ (8000968 <HAL_Delay+0x44>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	461a      	mov	r2, r3
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	4413      	add	r3, r2
 8000948:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800094a:	bf00      	nop
 800094c:	f7ff ffe0 	bl	8000910 <HAL_GetTick>
 8000950:	4602      	mov	r2, r0
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	68fa      	ldr	r2, [r7, #12]
 8000958:	429a      	cmp	r2, r3
 800095a:	d8f7      	bhi.n	800094c <HAL_Delay+0x28>
  {
  }
}
 800095c:	bf00      	nop
 800095e:	bf00      	nop
 8000960:	3710      	adds	r7, #16
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	200000cc 	.word	0x200000cc

0800096c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800096c:	b480      	push	{r7}
 800096e:	b085      	sub	sp, #20
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	f003 0307 	and.w	r3, r3, #7
 800097a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800097c:	4b0c      	ldr	r3, [pc, #48]	@ (80009b0 <__NVIC_SetPriorityGrouping+0x44>)
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000982:	68ba      	ldr	r2, [r7, #8]
 8000984:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000988:	4013      	ands	r3, r2
 800098a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000994:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000998:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800099c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800099e:	4a04      	ldr	r2, [pc, #16]	@ (80009b0 <__NVIC_SetPriorityGrouping+0x44>)
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	60d3      	str	r3, [r2, #12]
}
 80009a4:	bf00      	nop
 80009a6:	3714      	adds	r7, #20
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bc80      	pop	{r7}
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	e000ed00 	.word	0xe000ed00

080009b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009b8:	4b04      	ldr	r3, [pc, #16]	@ (80009cc <__NVIC_GetPriorityGrouping+0x18>)
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	0a1b      	lsrs	r3, r3, #8
 80009be:	f003 0307 	and.w	r3, r3, #7
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bc80      	pop	{r7}
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	6039      	str	r1, [r7, #0]
 80009da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	db0a      	blt.n	80009fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	b2da      	uxtb	r2, r3
 80009e8:	490c      	ldr	r1, [pc, #48]	@ (8000a1c <__NVIC_SetPriority+0x4c>)
 80009ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ee:	0112      	lsls	r2, r2, #4
 80009f0:	b2d2      	uxtb	r2, r2
 80009f2:	440b      	add	r3, r1
 80009f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009f8:	e00a      	b.n	8000a10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	b2da      	uxtb	r2, r3
 80009fe:	4908      	ldr	r1, [pc, #32]	@ (8000a20 <__NVIC_SetPriority+0x50>)
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	f003 030f 	and.w	r3, r3, #15
 8000a06:	3b04      	subs	r3, #4
 8000a08:	0112      	lsls	r2, r2, #4
 8000a0a:	b2d2      	uxtb	r2, r2
 8000a0c:	440b      	add	r3, r1
 8000a0e:	761a      	strb	r2, [r3, #24]
}
 8000a10:	bf00      	nop
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bc80      	pop	{r7}
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	e000e100 	.word	0xe000e100
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b089      	sub	sp, #36	@ 0x24
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	60f8      	str	r0, [r7, #12]
 8000a2c:	60b9      	str	r1, [r7, #8]
 8000a2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	f003 0307 	and.w	r3, r3, #7
 8000a36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a38:	69fb      	ldr	r3, [r7, #28]
 8000a3a:	f1c3 0307 	rsb	r3, r3, #7
 8000a3e:	2b04      	cmp	r3, #4
 8000a40:	bf28      	it	cs
 8000a42:	2304      	movcs	r3, #4
 8000a44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a46:	69fb      	ldr	r3, [r7, #28]
 8000a48:	3304      	adds	r3, #4
 8000a4a:	2b06      	cmp	r3, #6
 8000a4c:	d902      	bls.n	8000a54 <NVIC_EncodePriority+0x30>
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	3b03      	subs	r3, #3
 8000a52:	e000      	b.n	8000a56 <NVIC_EncodePriority+0x32>
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a58:	f04f 32ff 	mov.w	r2, #4294967295
 8000a5c:	69bb      	ldr	r3, [r7, #24]
 8000a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a62:	43da      	mvns	r2, r3
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	401a      	ands	r2, r3
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	fa01 f303 	lsl.w	r3, r1, r3
 8000a76:	43d9      	mvns	r1, r3
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a7c:	4313      	orrs	r3, r2
         );
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3724      	adds	r7, #36	@ 0x24
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr

08000a88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	3b01      	subs	r3, #1
 8000a94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a98:	d301      	bcc.n	8000a9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e00f      	b.n	8000abe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac8 <SysTick_Config+0x40>)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	3b01      	subs	r3, #1
 8000aa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aa6:	210f      	movs	r1, #15
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aac:	f7ff ff90 	bl	80009d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ab0:	4b05      	ldr	r3, [pc, #20]	@ (8000ac8 <SysTick_Config+0x40>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ab6:	4b04      	ldr	r3, [pc, #16]	@ (8000ac8 <SysTick_Config+0x40>)
 8000ab8:	2207      	movs	r2, #7
 8000aba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000abc:	2300      	movs	r3, #0
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	e000e010 	.word	0xe000e010

08000acc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f7ff ff49 	bl	800096c <__NVIC_SetPriorityGrouping>
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b086      	sub	sp, #24
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	4603      	mov	r3, r0
 8000aea:	60b9      	str	r1, [r7, #8]
 8000aec:	607a      	str	r2, [r7, #4]
 8000aee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000af4:	f7ff ff5e 	bl	80009b4 <__NVIC_GetPriorityGrouping>
 8000af8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	68b9      	ldr	r1, [r7, #8]
 8000afe:	6978      	ldr	r0, [r7, #20]
 8000b00:	f7ff ff90 	bl	8000a24 <NVIC_EncodePriority>
 8000b04:	4602      	mov	r2, r0
 8000b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b0a:	4611      	mov	r1, r2
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff ff5f 	bl	80009d0 <__NVIC_SetPriority>
}
 8000b12:	bf00      	nop
 8000b14:	3718      	adds	r7, #24
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b082      	sub	sp, #8
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f7ff ffb0 	bl	8000a88 <SysTick_Config>
 8000b28:	4603      	mov	r3, r0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
	...

08000b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b08b      	sub	sp, #44	@ 0x2c
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b42:	2300      	movs	r3, #0
 8000b44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b46:	e169      	b.n	8000e1c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b48:	2201      	movs	r2, #1
 8000b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	69fa      	ldr	r2, [r7, #28]
 8000b58:	4013      	ands	r3, r2
 8000b5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b5c:	69ba      	ldr	r2, [r7, #24]
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	f040 8158 	bne.w	8000e16 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	4a9a      	ldr	r2, [pc, #616]	@ (8000dd4 <HAL_GPIO_Init+0x2a0>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d05e      	beq.n	8000c2e <HAL_GPIO_Init+0xfa>
 8000b70:	4a98      	ldr	r2, [pc, #608]	@ (8000dd4 <HAL_GPIO_Init+0x2a0>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d875      	bhi.n	8000c62 <HAL_GPIO_Init+0x12e>
 8000b76:	4a98      	ldr	r2, [pc, #608]	@ (8000dd8 <HAL_GPIO_Init+0x2a4>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d058      	beq.n	8000c2e <HAL_GPIO_Init+0xfa>
 8000b7c:	4a96      	ldr	r2, [pc, #600]	@ (8000dd8 <HAL_GPIO_Init+0x2a4>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d86f      	bhi.n	8000c62 <HAL_GPIO_Init+0x12e>
 8000b82:	4a96      	ldr	r2, [pc, #600]	@ (8000ddc <HAL_GPIO_Init+0x2a8>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d052      	beq.n	8000c2e <HAL_GPIO_Init+0xfa>
 8000b88:	4a94      	ldr	r2, [pc, #592]	@ (8000ddc <HAL_GPIO_Init+0x2a8>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d869      	bhi.n	8000c62 <HAL_GPIO_Init+0x12e>
 8000b8e:	4a94      	ldr	r2, [pc, #592]	@ (8000de0 <HAL_GPIO_Init+0x2ac>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d04c      	beq.n	8000c2e <HAL_GPIO_Init+0xfa>
 8000b94:	4a92      	ldr	r2, [pc, #584]	@ (8000de0 <HAL_GPIO_Init+0x2ac>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d863      	bhi.n	8000c62 <HAL_GPIO_Init+0x12e>
 8000b9a:	4a92      	ldr	r2, [pc, #584]	@ (8000de4 <HAL_GPIO_Init+0x2b0>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d046      	beq.n	8000c2e <HAL_GPIO_Init+0xfa>
 8000ba0:	4a90      	ldr	r2, [pc, #576]	@ (8000de4 <HAL_GPIO_Init+0x2b0>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d85d      	bhi.n	8000c62 <HAL_GPIO_Init+0x12e>
 8000ba6:	2b12      	cmp	r3, #18
 8000ba8:	d82a      	bhi.n	8000c00 <HAL_GPIO_Init+0xcc>
 8000baa:	2b12      	cmp	r3, #18
 8000bac:	d859      	bhi.n	8000c62 <HAL_GPIO_Init+0x12e>
 8000bae:	a201      	add	r2, pc, #4	@ (adr r2, 8000bb4 <HAL_GPIO_Init+0x80>)
 8000bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bb4:	08000c2f 	.word	0x08000c2f
 8000bb8:	08000c09 	.word	0x08000c09
 8000bbc:	08000c1b 	.word	0x08000c1b
 8000bc0:	08000c5d 	.word	0x08000c5d
 8000bc4:	08000c63 	.word	0x08000c63
 8000bc8:	08000c63 	.word	0x08000c63
 8000bcc:	08000c63 	.word	0x08000c63
 8000bd0:	08000c63 	.word	0x08000c63
 8000bd4:	08000c63 	.word	0x08000c63
 8000bd8:	08000c63 	.word	0x08000c63
 8000bdc:	08000c63 	.word	0x08000c63
 8000be0:	08000c63 	.word	0x08000c63
 8000be4:	08000c63 	.word	0x08000c63
 8000be8:	08000c63 	.word	0x08000c63
 8000bec:	08000c63 	.word	0x08000c63
 8000bf0:	08000c63 	.word	0x08000c63
 8000bf4:	08000c63 	.word	0x08000c63
 8000bf8:	08000c11 	.word	0x08000c11
 8000bfc:	08000c25 	.word	0x08000c25
 8000c00:	4a79      	ldr	r2, [pc, #484]	@ (8000de8 <HAL_GPIO_Init+0x2b4>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d013      	beq.n	8000c2e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c06:	e02c      	b.n	8000c62 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	623b      	str	r3, [r7, #32]
          break;
 8000c0e:	e029      	b.n	8000c64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	3304      	adds	r3, #4
 8000c16:	623b      	str	r3, [r7, #32]
          break;
 8000c18:	e024      	b.n	8000c64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	68db      	ldr	r3, [r3, #12]
 8000c1e:	3308      	adds	r3, #8
 8000c20:	623b      	str	r3, [r7, #32]
          break;
 8000c22:	e01f      	b.n	8000c64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	330c      	adds	r3, #12
 8000c2a:	623b      	str	r3, [r7, #32]
          break;
 8000c2c:	e01a      	b.n	8000c64 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d102      	bne.n	8000c3c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c36:	2304      	movs	r3, #4
 8000c38:	623b      	str	r3, [r7, #32]
          break;
 8000c3a:	e013      	b.n	8000c64 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d105      	bne.n	8000c50 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c44:	2308      	movs	r3, #8
 8000c46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	69fa      	ldr	r2, [r7, #28]
 8000c4c:	611a      	str	r2, [r3, #16]
          break;
 8000c4e:	e009      	b.n	8000c64 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c50:	2308      	movs	r3, #8
 8000c52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	69fa      	ldr	r2, [r7, #28]
 8000c58:	615a      	str	r2, [r3, #20]
          break;
 8000c5a:	e003      	b.n	8000c64 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	623b      	str	r3, [r7, #32]
          break;
 8000c60:	e000      	b.n	8000c64 <HAL_GPIO_Init+0x130>
          break;
 8000c62:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	2bff      	cmp	r3, #255	@ 0xff
 8000c68:	d801      	bhi.n	8000c6e <HAL_GPIO_Init+0x13a>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	e001      	b.n	8000c72 <HAL_GPIO_Init+0x13e>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	3304      	adds	r3, #4
 8000c72:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	2bff      	cmp	r3, #255	@ 0xff
 8000c78:	d802      	bhi.n	8000c80 <HAL_GPIO_Init+0x14c>
 8000c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	e002      	b.n	8000c86 <HAL_GPIO_Init+0x152>
 8000c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c82:	3b08      	subs	r3, #8
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	210f      	movs	r1, #15
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	fa01 f303 	lsl.w	r3, r1, r3
 8000c94:	43db      	mvns	r3, r3
 8000c96:	401a      	ands	r2, r3
 8000c98:	6a39      	ldr	r1, [r7, #32]
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca0:	431a      	orrs	r2, r3
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	f000 80b1 	beq.w	8000e16 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cb4:	4b4d      	ldr	r3, [pc, #308]	@ (8000dec <HAL_GPIO_Init+0x2b8>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	4a4c      	ldr	r2, [pc, #304]	@ (8000dec <HAL_GPIO_Init+0x2b8>)
 8000cba:	f043 0301 	orr.w	r3, r3, #1
 8000cbe:	6193      	str	r3, [r2, #24]
 8000cc0:	4b4a      	ldr	r3, [pc, #296]	@ (8000dec <HAL_GPIO_Init+0x2b8>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	f003 0301 	and.w	r3, r3, #1
 8000cc8:	60bb      	str	r3, [r7, #8]
 8000cca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ccc:	4a48      	ldr	r2, [pc, #288]	@ (8000df0 <HAL_GPIO_Init+0x2bc>)
 8000cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cd0:	089b      	lsrs	r3, r3, #2
 8000cd2:	3302      	adds	r3, #2
 8000cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cdc:	f003 0303 	and.w	r3, r3, #3
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	220f      	movs	r2, #15
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	68fa      	ldr	r2, [r7, #12]
 8000cec:	4013      	ands	r3, r2
 8000cee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4a40      	ldr	r2, [pc, #256]	@ (8000df4 <HAL_GPIO_Init+0x2c0>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d013      	beq.n	8000d20 <HAL_GPIO_Init+0x1ec>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4a3f      	ldr	r2, [pc, #252]	@ (8000df8 <HAL_GPIO_Init+0x2c4>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d00d      	beq.n	8000d1c <HAL_GPIO_Init+0x1e8>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4a3e      	ldr	r2, [pc, #248]	@ (8000dfc <HAL_GPIO_Init+0x2c8>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d007      	beq.n	8000d18 <HAL_GPIO_Init+0x1e4>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4a3d      	ldr	r2, [pc, #244]	@ (8000e00 <HAL_GPIO_Init+0x2cc>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d101      	bne.n	8000d14 <HAL_GPIO_Init+0x1e0>
 8000d10:	2303      	movs	r3, #3
 8000d12:	e006      	b.n	8000d22 <HAL_GPIO_Init+0x1ee>
 8000d14:	2304      	movs	r3, #4
 8000d16:	e004      	b.n	8000d22 <HAL_GPIO_Init+0x1ee>
 8000d18:	2302      	movs	r3, #2
 8000d1a:	e002      	b.n	8000d22 <HAL_GPIO_Init+0x1ee>
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	e000      	b.n	8000d22 <HAL_GPIO_Init+0x1ee>
 8000d20:	2300      	movs	r3, #0
 8000d22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d24:	f002 0203 	and.w	r2, r2, #3
 8000d28:	0092      	lsls	r2, r2, #2
 8000d2a:	4093      	lsls	r3, r2
 8000d2c:	68fa      	ldr	r2, [r7, #12]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d32:	492f      	ldr	r1, [pc, #188]	@ (8000df0 <HAL_GPIO_Init+0x2bc>)
 8000d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d36:	089b      	lsrs	r3, r3, #2
 8000d38:	3302      	adds	r3, #2
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d006      	beq.n	8000d5a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d4c:	4b2d      	ldr	r3, [pc, #180]	@ (8000e04 <HAL_GPIO_Init+0x2d0>)
 8000d4e:	689a      	ldr	r2, [r3, #8]
 8000d50:	492c      	ldr	r1, [pc, #176]	@ (8000e04 <HAL_GPIO_Init+0x2d0>)
 8000d52:	69bb      	ldr	r3, [r7, #24]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	608b      	str	r3, [r1, #8]
 8000d58:	e006      	b.n	8000d68 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d5a:	4b2a      	ldr	r3, [pc, #168]	@ (8000e04 <HAL_GPIO_Init+0x2d0>)
 8000d5c:	689a      	ldr	r2, [r3, #8]
 8000d5e:	69bb      	ldr	r3, [r7, #24]
 8000d60:	43db      	mvns	r3, r3
 8000d62:	4928      	ldr	r1, [pc, #160]	@ (8000e04 <HAL_GPIO_Init+0x2d0>)
 8000d64:	4013      	ands	r3, r2
 8000d66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d006      	beq.n	8000d82 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d74:	4b23      	ldr	r3, [pc, #140]	@ (8000e04 <HAL_GPIO_Init+0x2d0>)
 8000d76:	68da      	ldr	r2, [r3, #12]
 8000d78:	4922      	ldr	r1, [pc, #136]	@ (8000e04 <HAL_GPIO_Init+0x2d0>)
 8000d7a:	69bb      	ldr	r3, [r7, #24]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	60cb      	str	r3, [r1, #12]
 8000d80:	e006      	b.n	8000d90 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d82:	4b20      	ldr	r3, [pc, #128]	@ (8000e04 <HAL_GPIO_Init+0x2d0>)
 8000d84:	68da      	ldr	r2, [r3, #12]
 8000d86:	69bb      	ldr	r3, [r7, #24]
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	491e      	ldr	r1, [pc, #120]	@ (8000e04 <HAL_GPIO_Init+0x2d0>)
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d006      	beq.n	8000daa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d9c:	4b19      	ldr	r3, [pc, #100]	@ (8000e04 <HAL_GPIO_Init+0x2d0>)
 8000d9e:	685a      	ldr	r2, [r3, #4]
 8000da0:	4918      	ldr	r1, [pc, #96]	@ (8000e04 <HAL_GPIO_Init+0x2d0>)
 8000da2:	69bb      	ldr	r3, [r7, #24]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	604b      	str	r3, [r1, #4]
 8000da8:	e006      	b.n	8000db8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000daa:	4b16      	ldr	r3, [pc, #88]	@ (8000e04 <HAL_GPIO_Init+0x2d0>)
 8000dac:	685a      	ldr	r2, [r3, #4]
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	43db      	mvns	r3, r3
 8000db2:	4914      	ldr	r1, [pc, #80]	@ (8000e04 <HAL_GPIO_Init+0x2d0>)
 8000db4:	4013      	ands	r3, r2
 8000db6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d021      	beq.n	8000e08 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e04 <HAL_GPIO_Init+0x2d0>)
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	490e      	ldr	r1, [pc, #56]	@ (8000e04 <HAL_GPIO_Init+0x2d0>)
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	600b      	str	r3, [r1, #0]
 8000dd0:	e021      	b.n	8000e16 <HAL_GPIO_Init+0x2e2>
 8000dd2:	bf00      	nop
 8000dd4:	10320000 	.word	0x10320000
 8000dd8:	10310000 	.word	0x10310000
 8000ddc:	10220000 	.word	0x10220000
 8000de0:	10210000 	.word	0x10210000
 8000de4:	10120000 	.word	0x10120000
 8000de8:	10110000 	.word	0x10110000
 8000dec:	40021000 	.word	0x40021000
 8000df0:	40010000 	.word	0x40010000
 8000df4:	40010800 	.word	0x40010800
 8000df8:	40010c00 	.word	0x40010c00
 8000dfc:	40011000 	.word	0x40011000
 8000e00:	40011400 	.word	0x40011400
 8000e04:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e08:	4b0b      	ldr	r3, [pc, #44]	@ (8000e38 <HAL_GPIO_Init+0x304>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	4909      	ldr	r1, [pc, #36]	@ (8000e38 <HAL_GPIO_Init+0x304>)
 8000e12:	4013      	ands	r3, r2
 8000e14:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e18:	3301      	adds	r3, #1
 8000e1a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e22:	fa22 f303 	lsr.w	r3, r2, r3
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	f47f ae8e 	bne.w	8000b48 <HAL_GPIO_Init+0x14>
  }
}
 8000e2c:	bf00      	nop
 8000e2e:	bf00      	nop
 8000e30:	372c      	adds	r7, #44	@ 0x2c
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr
 8000e38:	40010400 	.word	0x40010400

08000e3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d101      	bne.n	8000e4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e12b      	b.n	80010a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d106      	bne.n	8000e68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f7ff f9ce 	bl	8000204 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2224      	movs	r2, #36	@ 0x24
 8000e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f022 0201 	bic.w	r2, r2, #1
 8000e7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000e8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000e9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000ea0:	f001 f842 	bl	8001f28 <HAL_RCC_GetPCLK1Freq>
 8000ea4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	4a81      	ldr	r2, [pc, #516]	@ (80010b0 <HAL_I2C_Init+0x274>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d807      	bhi.n	8000ec0 <HAL_I2C_Init+0x84>
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4a80      	ldr	r2, [pc, #512]	@ (80010b4 <HAL_I2C_Init+0x278>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	bf94      	ite	ls
 8000eb8:	2301      	movls	r3, #1
 8000eba:	2300      	movhi	r3, #0
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	e006      	b.n	8000ece <HAL_I2C_Init+0x92>
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	4a7d      	ldr	r2, [pc, #500]	@ (80010b8 <HAL_I2C_Init+0x27c>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	bf94      	ite	ls
 8000ec8:	2301      	movls	r3, #1
 8000eca:	2300      	movhi	r3, #0
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e0e7      	b.n	80010a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	4a78      	ldr	r2, [pc, #480]	@ (80010bc <HAL_I2C_Init+0x280>)
 8000eda:	fba2 2303 	umull	r2, r3, r2, r3
 8000ede:	0c9b      	lsrs	r3, r3, #18
 8000ee0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	68ba      	ldr	r2, [r7, #8]
 8000ef2:	430a      	orrs	r2, r1
 8000ef4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	6a1b      	ldr	r3, [r3, #32]
 8000efc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	4a6a      	ldr	r2, [pc, #424]	@ (80010b0 <HAL_I2C_Init+0x274>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d802      	bhi.n	8000f10 <HAL_I2C_Init+0xd4>
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	e009      	b.n	8000f24 <HAL_I2C_Init+0xe8>
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000f16:	fb02 f303 	mul.w	r3, r2, r3
 8000f1a:	4a69      	ldr	r2, [pc, #420]	@ (80010c0 <HAL_I2C_Init+0x284>)
 8000f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f20:	099b      	lsrs	r3, r3, #6
 8000f22:	3301      	adds	r3, #1
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	6812      	ldr	r2, [r2, #0]
 8000f28:	430b      	orrs	r3, r1
 8000f2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	69db      	ldr	r3, [r3, #28]
 8000f32:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8000f36:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	495c      	ldr	r1, [pc, #368]	@ (80010b0 <HAL_I2C_Init+0x274>)
 8000f40:	428b      	cmp	r3, r1
 8000f42:	d819      	bhi.n	8000f78 <HAL_I2C_Init+0x13c>
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	1e59      	subs	r1, r3, #1
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f52:	1c59      	adds	r1, r3, #1
 8000f54:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8000f58:	400b      	ands	r3, r1
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d00a      	beq.n	8000f74 <HAL_I2C_Init+0x138>
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	1e59      	subs	r1, r3, #1
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f72:	e051      	b.n	8001018 <HAL_I2C_Init+0x1dc>
 8000f74:	2304      	movs	r3, #4
 8000f76:	e04f      	b.n	8001018 <HAL_I2C_Init+0x1dc>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d111      	bne.n	8000fa4 <HAL_I2C_Init+0x168>
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	1e58      	subs	r0, r3, #1
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6859      	ldr	r1, [r3, #4]
 8000f88:	460b      	mov	r3, r1
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	440b      	add	r3, r1
 8000f8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f92:	3301      	adds	r3, #1
 8000f94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	bf0c      	ite	eq
 8000f9c:	2301      	moveq	r3, #1
 8000f9e:	2300      	movne	r3, #0
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	e012      	b.n	8000fca <HAL_I2C_Init+0x18e>
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	1e58      	subs	r0, r3, #1
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6859      	ldr	r1, [r3, #4]
 8000fac:	460b      	mov	r3, r1
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	440b      	add	r3, r1
 8000fb2:	0099      	lsls	r1, r3, #2
 8000fb4:	440b      	add	r3, r1
 8000fb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fba:	3301      	adds	r3, #1
 8000fbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	bf0c      	ite	eq
 8000fc4:	2301      	moveq	r3, #1
 8000fc6:	2300      	movne	r3, #0
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <HAL_I2C_Init+0x196>
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e022      	b.n	8001018 <HAL_I2C_Init+0x1dc>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d10e      	bne.n	8000ff8 <HAL_I2C_Init+0x1bc>
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	1e58      	subs	r0, r3, #1
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6859      	ldr	r1, [r3, #4]
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	440b      	add	r3, r1
 8000fe8:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fec:	3301      	adds	r3, #1
 8000fee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ff2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ff6:	e00f      	b.n	8001018 <HAL_I2C_Init+0x1dc>
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	1e58      	subs	r0, r3, #1
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6859      	ldr	r1, [r3, #4]
 8001000:	460b      	mov	r3, r1
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	440b      	add	r3, r1
 8001006:	0099      	lsls	r1, r3, #2
 8001008:	440b      	add	r3, r1
 800100a:	fbb0 f3f3 	udiv	r3, r0, r3
 800100e:	3301      	adds	r3, #1
 8001010:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001014:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001018:	6879      	ldr	r1, [r7, #4]
 800101a:	6809      	ldr	r1, [r1, #0]
 800101c:	4313      	orrs	r3, r2
 800101e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	69da      	ldr	r2, [r3, #28]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6a1b      	ldr	r3, [r3, #32]
 8001032:	431a      	orrs	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	430a      	orrs	r2, r1
 800103a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001046:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	6911      	ldr	r1, [r2, #16]
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	68d2      	ldr	r2, [r2, #12]
 8001052:	4311      	orrs	r1, r2
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	6812      	ldr	r2, [r2, #0]
 8001058:	430b      	orrs	r3, r1
 800105a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	695a      	ldr	r2, [r3, #20]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	699b      	ldr	r3, [r3, #24]
 800106e:	431a      	orrs	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	430a      	orrs	r2, r1
 8001076:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f042 0201 	orr.w	r2, r2, #1
 8001086:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2200      	movs	r2, #0
 800108c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2220      	movs	r2, #32
 8001092:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2200      	movs	r2, #0
 800109a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2200      	movs	r2, #0
 80010a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	000186a0 	.word	0x000186a0
 80010b4:	001e847f 	.word	0x001e847f
 80010b8:	003d08ff 	.word	0x003d08ff
 80010bc:	431bde83 	.word	0x431bde83
 80010c0:	10624dd3 	.word	0x10624dd3

080010c4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b088      	sub	sp, #32
 80010c8:	af02      	add	r7, sp, #8
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	4608      	mov	r0, r1
 80010ce:	4611      	mov	r1, r2
 80010d0:	461a      	mov	r2, r3
 80010d2:	4603      	mov	r3, r0
 80010d4:	817b      	strh	r3, [r7, #10]
 80010d6:	460b      	mov	r3, r1
 80010d8:	813b      	strh	r3, [r7, #8]
 80010da:	4613      	mov	r3, r2
 80010dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80010de:	f7ff fc17 	bl	8000910 <HAL_GetTick>
 80010e2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	2b20      	cmp	r3, #32
 80010ee:	f040 80d9 	bne.w	80012a4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	2319      	movs	r3, #25
 80010f8:	2201      	movs	r2, #1
 80010fa:	496d      	ldr	r1, [pc, #436]	@ (80012b0 <HAL_I2C_Mem_Write+0x1ec>)
 80010fc:	68f8      	ldr	r0, [r7, #12]
 80010fe:	f000 f971 	bl	80013e4 <I2C_WaitOnFlagUntilTimeout>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001108:	2302      	movs	r3, #2
 800110a:	e0cc      	b.n	80012a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001112:	2b01      	cmp	r3, #1
 8001114:	d101      	bne.n	800111a <HAL_I2C_Mem_Write+0x56>
 8001116:	2302      	movs	r3, #2
 8001118:	e0c5      	b.n	80012a6 <HAL_I2C_Mem_Write+0x1e2>
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	2201      	movs	r2, #1
 800111e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	2b01      	cmp	r3, #1
 800112e:	d007      	beq.n	8001140 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f042 0201 	orr.w	r2, r2, #1
 800113e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800114e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2221      	movs	r2, #33	@ 0x21
 8001154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	2240      	movs	r2, #64	@ 0x40
 800115c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2200      	movs	r2, #0
 8001164:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	6a3a      	ldr	r2, [r7, #32]
 800116a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001170:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001176:	b29a      	uxth	r2, r3
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	4a4d      	ldr	r2, [pc, #308]	@ (80012b4 <HAL_I2C_Mem_Write+0x1f0>)
 8001180:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001182:	88f8      	ldrh	r0, [r7, #6]
 8001184:	893a      	ldrh	r2, [r7, #8]
 8001186:	8979      	ldrh	r1, [r7, #10]
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	9301      	str	r3, [sp, #4]
 800118c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	4603      	mov	r3, r0
 8001192:	68f8      	ldr	r0, [r7, #12]
 8001194:	f000 f890 	bl	80012b8 <I2C_RequestMemoryWrite>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d052      	beq.n	8001244 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e081      	b.n	80012a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011a2:	697a      	ldr	r2, [r7, #20]
 80011a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80011a6:	68f8      	ldr	r0, [r7, #12]
 80011a8:	f000 fa36 	bl	8001618 <I2C_WaitOnTXEFlagUntilTimeout>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d00d      	beq.n	80011ce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	d107      	bne.n	80011ca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80011c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e06b      	b.n	80012a6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011d2:	781a      	ldrb	r2, [r3, #0]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011de:	1c5a      	adds	r2, r3, #1
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011e8:	3b01      	subs	r3, #1
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	3b01      	subs	r3, #1
 80011f8:	b29a      	uxth	r2, r3
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	695b      	ldr	r3, [r3, #20]
 8001204:	f003 0304 	and.w	r3, r3, #4
 8001208:	2b04      	cmp	r3, #4
 800120a:	d11b      	bne.n	8001244 <HAL_I2C_Mem_Write+0x180>
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001210:	2b00      	cmp	r3, #0
 8001212:	d017      	beq.n	8001244 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001218:	781a      	ldrb	r2, [r3, #0]
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001224:	1c5a      	adds	r2, r3, #1
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800122e:	3b01      	subs	r3, #1
 8001230:	b29a      	uxth	r2, r3
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800123a:	b29b      	uxth	r3, r3
 800123c:	3b01      	subs	r3, #1
 800123e:	b29a      	uxth	r2, r3
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001248:	2b00      	cmp	r3, #0
 800124a:	d1aa      	bne.n	80011a2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800124c:	697a      	ldr	r2, [r7, #20]
 800124e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001250:	68f8      	ldr	r0, [r7, #12]
 8001252:	f000 fa29 	bl	80016a8 <I2C_WaitOnBTFFlagUntilTimeout>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d00d      	beq.n	8001278 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001260:	2b04      	cmp	r3, #4
 8001262:	d107      	bne.n	8001274 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001272:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	e016      	b.n	80012a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001286:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	2220      	movs	r2, #32
 800128c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	2200      	movs	r2, #0
 8001294:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2200      	movs	r2, #0
 800129c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80012a0:	2300      	movs	r3, #0
 80012a2:	e000      	b.n	80012a6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80012a4:	2302      	movs	r3, #2
  }
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3718      	adds	r7, #24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	00100002 	.word	0x00100002
 80012b4:	ffff0000 	.word	0xffff0000

080012b8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af02      	add	r7, sp, #8
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	4608      	mov	r0, r1
 80012c2:	4611      	mov	r1, r2
 80012c4:	461a      	mov	r2, r3
 80012c6:	4603      	mov	r3, r0
 80012c8:	817b      	strh	r3, [r7, #10]
 80012ca:	460b      	mov	r3, r1
 80012cc:	813b      	strh	r3, [r7, #8]
 80012ce:	4613      	mov	r3, r2
 80012d0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80012e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80012e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	6a3b      	ldr	r3, [r7, #32]
 80012e8:	2200      	movs	r2, #0
 80012ea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80012ee:	68f8      	ldr	r0, [r7, #12]
 80012f0:	f000 f878 	bl	80013e4 <I2C_WaitOnFlagUntilTimeout>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d00d      	beq.n	8001316 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001304:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001308:	d103      	bne.n	8001312 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001310:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e05f      	b.n	80013d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001316:	897b      	ldrh	r3, [r7, #10]
 8001318:	b2db      	uxtb	r3, r3
 800131a:	461a      	mov	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001324:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001328:	6a3a      	ldr	r2, [r7, #32]
 800132a:	492d      	ldr	r1, [pc, #180]	@ (80013e0 <I2C_RequestMemoryWrite+0x128>)
 800132c:	68f8      	ldr	r0, [r7, #12]
 800132e:	f000 f8d3 	bl	80014d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e04c      	b.n	80013d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	617b      	str	r3, [r7, #20]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	699b      	ldr	r3, [r3, #24]
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001352:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001354:	6a39      	ldr	r1, [r7, #32]
 8001356:	68f8      	ldr	r0, [r7, #12]
 8001358:	f000 f95e 	bl	8001618 <I2C_WaitOnTXEFlagUntilTimeout>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d00d      	beq.n	800137e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001366:	2b04      	cmp	r3, #4
 8001368:	d107      	bne.n	800137a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001378:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e02b      	b.n	80013d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800137e:	88fb      	ldrh	r3, [r7, #6]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d105      	bne.n	8001390 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001384:	893b      	ldrh	r3, [r7, #8]
 8001386:	b2da      	uxtb	r2, r3
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	611a      	str	r2, [r3, #16]
 800138e:	e021      	b.n	80013d4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001390:	893b      	ldrh	r3, [r7, #8]
 8001392:	0a1b      	lsrs	r3, r3, #8
 8001394:	b29b      	uxth	r3, r3
 8001396:	b2da      	uxtb	r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800139e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013a0:	6a39      	ldr	r1, [r7, #32]
 80013a2:	68f8      	ldr	r0, [r7, #12]
 80013a4:	f000 f938 	bl	8001618 <I2C_WaitOnTXEFlagUntilTimeout>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d00d      	beq.n	80013ca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b2:	2b04      	cmp	r3, #4
 80013b4:	d107      	bne.n	80013c6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80013c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e005      	b.n	80013d6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80013ca:	893b      	ldrh	r3, [r7, #8]
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3718      	adds	r7, #24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	00010002 	.word	0x00010002

080013e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	603b      	str	r3, [r7, #0]
 80013f0:	4613      	mov	r3, r2
 80013f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80013f4:	e048      	b.n	8001488 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013fc:	d044      	beq.n	8001488 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013fe:	f7ff fa87 	bl	8000910 <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	683a      	ldr	r2, [r7, #0]
 800140a:	429a      	cmp	r2, r3
 800140c:	d302      	bcc.n	8001414 <I2C_WaitOnFlagUntilTimeout+0x30>
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d139      	bne.n	8001488 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	0c1b      	lsrs	r3, r3, #16
 8001418:	b2db      	uxtb	r3, r3
 800141a:	2b01      	cmp	r3, #1
 800141c:	d10d      	bne.n	800143a <I2C_WaitOnFlagUntilTimeout+0x56>
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	695b      	ldr	r3, [r3, #20]
 8001424:	43da      	mvns	r2, r3
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	4013      	ands	r3, r2
 800142a:	b29b      	uxth	r3, r3
 800142c:	2b00      	cmp	r3, #0
 800142e:	bf0c      	ite	eq
 8001430:	2301      	moveq	r3, #1
 8001432:	2300      	movne	r3, #0
 8001434:	b2db      	uxtb	r3, r3
 8001436:	461a      	mov	r2, r3
 8001438:	e00c      	b.n	8001454 <I2C_WaitOnFlagUntilTimeout+0x70>
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	43da      	mvns	r2, r3
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	4013      	ands	r3, r2
 8001446:	b29b      	uxth	r3, r3
 8001448:	2b00      	cmp	r3, #0
 800144a:	bf0c      	ite	eq
 800144c:	2301      	moveq	r3, #1
 800144e:	2300      	movne	r3, #0
 8001450:	b2db      	uxtb	r3, r3
 8001452:	461a      	mov	r2, r3
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	429a      	cmp	r2, r3
 8001458:	d116      	bne.n	8001488 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2200      	movs	r2, #0
 800145e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2220      	movs	r2, #32
 8001464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	2200      	movs	r2, #0
 800146c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001474:	f043 0220 	orr.w	r2, r3, #32
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2200      	movs	r2, #0
 8001480:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e023      	b.n	80014d0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	0c1b      	lsrs	r3, r3, #16
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b01      	cmp	r3, #1
 8001490:	d10d      	bne.n	80014ae <I2C_WaitOnFlagUntilTimeout+0xca>
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	695b      	ldr	r3, [r3, #20]
 8001498:	43da      	mvns	r2, r3
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	4013      	ands	r3, r2
 800149e:	b29b      	uxth	r3, r3
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	bf0c      	ite	eq
 80014a4:	2301      	moveq	r3, #1
 80014a6:	2300      	movne	r3, #0
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	461a      	mov	r2, r3
 80014ac:	e00c      	b.n	80014c8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	43da      	mvns	r2, r3
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	4013      	ands	r3, r2
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	2b00      	cmp	r3, #0
 80014be:	bf0c      	ite	eq
 80014c0:	2301      	moveq	r3, #1
 80014c2:	2300      	movne	r3, #0
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	461a      	mov	r2, r3
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d093      	beq.n	80013f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80014ce:	2300      	movs	r3, #0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
 80014e4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80014e6:	e071      	b.n	80015cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	695b      	ldr	r3, [r3, #20]
 80014ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014f6:	d123      	bne.n	8001540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001506:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001510:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2200      	movs	r2, #0
 8001516:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2220      	movs	r2, #32
 800151c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2200      	movs	r2, #0
 8001524:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152c:	f043 0204 	orr.w	r2, r3, #4
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2200      	movs	r2, #0
 8001538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e067      	b.n	8001610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001546:	d041      	beq.n	80015cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001548:	f7ff f9e2 	bl	8000910 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	429a      	cmp	r2, r3
 8001556:	d302      	bcc.n	800155e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d136      	bne.n	80015cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	0c1b      	lsrs	r3, r3, #16
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b01      	cmp	r3, #1
 8001566:	d10c      	bne.n	8001582 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	43da      	mvns	r2, r3
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	4013      	ands	r3, r2
 8001574:	b29b      	uxth	r3, r3
 8001576:	2b00      	cmp	r3, #0
 8001578:	bf14      	ite	ne
 800157a:	2301      	movne	r3, #1
 800157c:	2300      	moveq	r3, #0
 800157e:	b2db      	uxtb	r3, r3
 8001580:	e00b      	b.n	800159a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	43da      	mvns	r2, r3
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	4013      	ands	r3, r2
 800158e:	b29b      	uxth	r3, r3
 8001590:	2b00      	cmp	r3, #0
 8001592:	bf14      	ite	ne
 8001594:	2301      	movne	r3, #1
 8001596:	2300      	moveq	r3, #0
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	d016      	beq.n	80015cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2200      	movs	r2, #0
 80015a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2220      	movs	r2, #32
 80015a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b8:	f043 0220 	orr.w	r2, r3, #32
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2200      	movs	r2, #0
 80015c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e021      	b.n	8001610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	0c1b      	lsrs	r3, r3, #16
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d10c      	bne.n	80015f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	695b      	ldr	r3, [r3, #20]
 80015dc:	43da      	mvns	r2, r3
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	4013      	ands	r3, r2
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	bf14      	ite	ne
 80015e8:	2301      	movne	r3, #1
 80015ea:	2300      	moveq	r3, #0
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	e00b      	b.n	8001608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	43da      	mvns	r2, r3
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	4013      	ands	r3, r2
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	2b00      	cmp	r3, #0
 8001600:	bf14      	ite	ne
 8001602:	2301      	movne	r3, #1
 8001604:	2300      	moveq	r3, #0
 8001606:	b2db      	uxtb	r3, r3
 8001608:	2b00      	cmp	r3, #0
 800160a:	f47f af6d 	bne.w	80014e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800160e:	2300      	movs	r3, #0
}
 8001610:	4618      	mov	r0, r3
 8001612:	3710      	adds	r7, #16
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001624:	e034      	b.n	8001690 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001626:	68f8      	ldr	r0, [r7, #12]
 8001628:	f000 f886 	bl	8001738 <I2C_IsAcknowledgeFailed>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e034      	b.n	80016a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800163c:	d028      	beq.n	8001690 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800163e:	f7ff f967 	bl	8000910 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	68ba      	ldr	r2, [r7, #8]
 800164a:	429a      	cmp	r2, r3
 800164c:	d302      	bcc.n	8001654 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d11d      	bne.n	8001690 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800165e:	2b80      	cmp	r3, #128	@ 0x80
 8001660:	d016      	beq.n	8001690 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2200      	movs	r2, #0
 8001666:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2220      	movs	r2, #32
 800166c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2200      	movs	r2, #0
 8001674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167c:	f043 0220 	orr.w	r2, r3, #32
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e007      	b.n	80016a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800169a:	2b80      	cmp	r3, #128	@ 0x80
 800169c:	d1c3      	bne.n	8001626 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80016b4:	e034      	b.n	8001720 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80016b6:	68f8      	ldr	r0, [r7, #12]
 80016b8:	f000 f83e 	bl	8001738 <I2C_IsAcknowledgeFailed>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e034      	b.n	8001730 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016cc:	d028      	beq.n	8001720 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016ce:	f7ff f91f 	bl	8000910 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	68ba      	ldr	r2, [r7, #8]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d302      	bcc.n	80016e4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d11d      	bne.n	8001720 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	695b      	ldr	r3, [r3, #20]
 80016ea:	f003 0304 	and.w	r3, r3, #4
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	d016      	beq.n	8001720 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2200      	movs	r2, #0
 80016f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2220      	movs	r2, #32
 80016fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170c:	f043 0220 	orr.w	r2, r3, #32
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2200      	movs	r2, #0
 8001718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e007      	b.n	8001730 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	f003 0304 	and.w	r3, r3, #4
 800172a:	2b04      	cmp	r3, #4
 800172c:	d1c3      	bne.n	80016b6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800174a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800174e:	d11b      	bne.n	8001788 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001758:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2220      	movs	r2, #32
 8001764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001774:	f043 0204 	orr.w	r2, r3, #4
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e000      	b.n	800178a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr

08001794 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d101      	bne.n	80017a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e272      	b.n	8001c8c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	f000 8087 	beq.w	80018c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017b4:	4b92      	ldr	r3, [pc, #584]	@ (8001a00 <HAL_RCC_OscConfig+0x26c>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f003 030c 	and.w	r3, r3, #12
 80017bc:	2b04      	cmp	r3, #4
 80017be:	d00c      	beq.n	80017da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017c0:	4b8f      	ldr	r3, [pc, #572]	@ (8001a00 <HAL_RCC_OscConfig+0x26c>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 030c 	and.w	r3, r3, #12
 80017c8:	2b08      	cmp	r3, #8
 80017ca:	d112      	bne.n	80017f2 <HAL_RCC_OscConfig+0x5e>
 80017cc:	4b8c      	ldr	r3, [pc, #560]	@ (8001a00 <HAL_RCC_OscConfig+0x26c>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017d8:	d10b      	bne.n	80017f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017da:	4b89      	ldr	r3, [pc, #548]	@ (8001a00 <HAL_RCC_OscConfig+0x26c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d06c      	beq.n	80018c0 <HAL_RCC_OscConfig+0x12c>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d168      	bne.n	80018c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e24c      	b.n	8001c8c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017fa:	d106      	bne.n	800180a <HAL_RCC_OscConfig+0x76>
 80017fc:	4b80      	ldr	r3, [pc, #512]	@ (8001a00 <HAL_RCC_OscConfig+0x26c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a7f      	ldr	r2, [pc, #508]	@ (8001a00 <HAL_RCC_OscConfig+0x26c>)
 8001802:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001806:	6013      	str	r3, [r2, #0]
 8001808:	e02e      	b.n	8001868 <HAL_RCC_OscConfig+0xd4>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d10c      	bne.n	800182c <HAL_RCC_OscConfig+0x98>
 8001812:	4b7b      	ldr	r3, [pc, #492]	@ (8001a00 <HAL_RCC_OscConfig+0x26c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a7a      	ldr	r2, [pc, #488]	@ (8001a00 <HAL_RCC_OscConfig+0x26c>)
 8001818:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	4b78      	ldr	r3, [pc, #480]	@ (8001a00 <HAL_RCC_OscConfig+0x26c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a77      	ldr	r2, [pc, #476]	@ (8001a00 <HAL_RCC_OscConfig+0x26c>)
 8001824:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	e01d      	b.n	8001868 <HAL_RCC_OscConfig+0xd4>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001834:	d10c      	bne.n	8001850 <HAL_RCC_OscConfig+0xbc>
 8001836:	4b72      	ldr	r3, [pc, #456]	@ (8001a00 <HAL_RCC_OscConfig+0x26c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a71      	ldr	r2, [pc, #452]	@ (8001a00 <HAL_RCC_OscConfig+0x26c>)
 800183c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001840:	6013      	str	r3, [r2, #0]
 8001842:	4b6f      	ldr	r3, [pc, #444]	@ (8001a00 <HAL_RCC_OscConfig+0x26c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a6e      	ldr	r2, [pc, #440]	@ (8001a00 <HAL_RCC_OscConfig+0x26c>)
 8001848:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800184c:	6013      	str	r3, [r2, #0]
 800184e:	e00b      	b.n	8001868 <HAL_RCC_OscConfig+0xd4>
 8001850:	4b6b      	ldr	r3, [pc, #428]	@ (8001a00 <HAL_RCC_OscConfig+0x26c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a6a      	ldr	r2, [pc, #424]	@ (8001a00 <HAL_RCC_OscConfig+0x26c>)
 8001856:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800185a:	6013      	str	r3, [r2, #0]
 800185c:	4b68      	ldr	r3, [pc, #416]	@ (8001a00 <HAL_RCC_OscConfig+0x26c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a67      	ldr	r2, [pc, #412]	@ (8001a00 <HAL_RCC_OscConfig+0x26c>)
 8001862:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001866:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d013      	beq.n	8001898 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001870:	f7ff f84e 	bl	8000910 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001878:	f7ff f84a 	bl	8000910 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b64      	cmp	r3, #100	@ 0x64
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e200      	b.n	8001c8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800188a:	4b5d      	ldr	r3, [pc, #372]	@ (8001a00 <HAL_RCC_OscConfig+0x26c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d0f0      	beq.n	8001878 <HAL_RCC_OscConfig+0xe4>
 8001896:	e014      	b.n	80018c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001898:	f7ff f83a 	bl	8000910 <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018a0:	f7ff f836 	bl	8000910 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b64      	cmp	r3, #100	@ 0x64
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e1ec      	b.n	8001c8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018b2:	4b53      	ldr	r3, [pc, #332]	@ (8001a00 <HAL_RCC_OscConfig+0x26c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1f0      	bne.n	80018a0 <HAL_RCC_OscConfig+0x10c>
 80018be:	e000      	b.n	80018c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d063      	beq.n	8001996 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018ce:	4b4c      	ldr	r3, [pc, #304]	@ (8001a00 <HAL_RCC_OscConfig+0x26c>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f003 030c 	and.w	r3, r3, #12
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d00b      	beq.n	80018f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018da:	4b49      	ldr	r3, [pc, #292]	@ (8001a00 <HAL_RCC_OscConfig+0x26c>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f003 030c 	and.w	r3, r3, #12
 80018e2:	2b08      	cmp	r3, #8
 80018e4:	d11c      	bne.n	8001920 <HAL_RCC_OscConfig+0x18c>
 80018e6:	4b46      	ldr	r3, [pc, #280]	@ (8001a00 <HAL_RCC_OscConfig+0x26c>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d116      	bne.n	8001920 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018f2:	4b43      	ldr	r3, [pc, #268]	@ (8001a00 <HAL_RCC_OscConfig+0x26c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d005      	beq.n	800190a <HAL_RCC_OscConfig+0x176>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d001      	beq.n	800190a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e1c0      	b.n	8001c8c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800190a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a00 <HAL_RCC_OscConfig+0x26c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	4939      	ldr	r1, [pc, #228]	@ (8001a00 <HAL_RCC_OscConfig+0x26c>)
 800191a:	4313      	orrs	r3, r2
 800191c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800191e:	e03a      	b.n	8001996 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	691b      	ldr	r3, [r3, #16]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d020      	beq.n	800196a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001928:	4b36      	ldr	r3, [pc, #216]	@ (8001a04 <HAL_RCC_OscConfig+0x270>)
 800192a:	2201      	movs	r2, #1
 800192c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192e:	f7fe ffef 	bl	8000910 <HAL_GetTick>
 8001932:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001936:	f7fe ffeb 	bl	8000910 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e1a1      	b.n	8001c8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001948:	4b2d      	ldr	r3, [pc, #180]	@ (8001a00 <HAL_RCC_OscConfig+0x26c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d0f0      	beq.n	8001936 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001954:	4b2a      	ldr	r3, [pc, #168]	@ (8001a00 <HAL_RCC_OscConfig+0x26c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	695b      	ldr	r3, [r3, #20]
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	4927      	ldr	r1, [pc, #156]	@ (8001a00 <HAL_RCC_OscConfig+0x26c>)
 8001964:	4313      	orrs	r3, r2
 8001966:	600b      	str	r3, [r1, #0]
 8001968:	e015      	b.n	8001996 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800196a:	4b26      	ldr	r3, [pc, #152]	@ (8001a04 <HAL_RCC_OscConfig+0x270>)
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001970:	f7fe ffce 	bl	8000910 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001978:	f7fe ffca 	bl	8000910 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e180      	b.n	8001c8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800198a:	4b1d      	ldr	r3, [pc, #116]	@ (8001a00 <HAL_RCC_OscConfig+0x26c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1f0      	bne.n	8001978 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0308 	and.w	r3, r3, #8
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d03a      	beq.n	8001a18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d019      	beq.n	80019de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019aa:	4b17      	ldr	r3, [pc, #92]	@ (8001a08 <HAL_RCC_OscConfig+0x274>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b0:	f7fe ffae 	bl	8000910 <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019b8:	f7fe ffaa 	bl	8000910 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e160      	b.n	8001c8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001a00 <HAL_RCC_OscConfig+0x26c>)
 80019cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d0f0      	beq.n	80019b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019d6:	2001      	movs	r0, #1
 80019d8:	f000 faba 	bl	8001f50 <RCC_Delay>
 80019dc:	e01c      	b.n	8001a18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019de:	4b0a      	ldr	r3, [pc, #40]	@ (8001a08 <HAL_RCC_OscConfig+0x274>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019e4:	f7fe ff94 	bl	8000910 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019ea:	e00f      	b.n	8001a0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019ec:	f7fe ff90 	bl	8000910 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d908      	bls.n	8001a0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e146      	b.n	8001c8c <HAL_RCC_OscConfig+0x4f8>
 80019fe:	bf00      	nop
 8001a00:	40021000 	.word	0x40021000
 8001a04:	42420000 	.word	0x42420000
 8001a08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a0c:	4b92      	ldr	r3, [pc, #584]	@ (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d1e9      	bne.n	80019ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0304 	and.w	r3, r3, #4
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	f000 80a6 	beq.w	8001b72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a26:	2300      	movs	r3, #0
 8001a28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a2a:	4b8b      	ldr	r3, [pc, #556]	@ (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d10d      	bne.n	8001a52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a36:	4b88      	ldr	r3, [pc, #544]	@ (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	4a87      	ldr	r2, [pc, #540]	@ (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001a3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a40:	61d3      	str	r3, [r2, #28]
 8001a42:	4b85      	ldr	r3, [pc, #532]	@ (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a4a:	60bb      	str	r3, [r7, #8]
 8001a4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a52:	4b82      	ldr	r3, [pc, #520]	@ (8001c5c <HAL_RCC_OscConfig+0x4c8>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d118      	bne.n	8001a90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a5e:	4b7f      	ldr	r3, [pc, #508]	@ (8001c5c <HAL_RCC_OscConfig+0x4c8>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a7e      	ldr	r2, [pc, #504]	@ (8001c5c <HAL_RCC_OscConfig+0x4c8>)
 8001a64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a6a:	f7fe ff51 	bl	8000910 <HAL_GetTick>
 8001a6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a70:	e008      	b.n	8001a84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a72:	f7fe ff4d 	bl	8000910 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b64      	cmp	r3, #100	@ 0x64
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e103      	b.n	8001c8c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a84:	4b75      	ldr	r3, [pc, #468]	@ (8001c5c <HAL_RCC_OscConfig+0x4c8>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d0f0      	beq.n	8001a72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d106      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x312>
 8001a98:	4b6f      	ldr	r3, [pc, #444]	@ (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	4a6e      	ldr	r2, [pc, #440]	@ (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001a9e:	f043 0301 	orr.w	r3, r3, #1
 8001aa2:	6213      	str	r3, [r2, #32]
 8001aa4:	e02d      	b.n	8001b02 <HAL_RCC_OscConfig+0x36e>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d10c      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x334>
 8001aae:	4b6a      	ldr	r3, [pc, #424]	@ (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001ab0:	6a1b      	ldr	r3, [r3, #32]
 8001ab2:	4a69      	ldr	r2, [pc, #420]	@ (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001ab4:	f023 0301 	bic.w	r3, r3, #1
 8001ab8:	6213      	str	r3, [r2, #32]
 8001aba:	4b67      	ldr	r3, [pc, #412]	@ (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001abc:	6a1b      	ldr	r3, [r3, #32]
 8001abe:	4a66      	ldr	r2, [pc, #408]	@ (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001ac0:	f023 0304 	bic.w	r3, r3, #4
 8001ac4:	6213      	str	r3, [r2, #32]
 8001ac6:	e01c      	b.n	8001b02 <HAL_RCC_OscConfig+0x36e>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	2b05      	cmp	r3, #5
 8001ace:	d10c      	bne.n	8001aea <HAL_RCC_OscConfig+0x356>
 8001ad0:	4b61      	ldr	r3, [pc, #388]	@ (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001ad2:	6a1b      	ldr	r3, [r3, #32]
 8001ad4:	4a60      	ldr	r2, [pc, #384]	@ (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001ad6:	f043 0304 	orr.w	r3, r3, #4
 8001ada:	6213      	str	r3, [r2, #32]
 8001adc:	4b5e      	ldr	r3, [pc, #376]	@ (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	4a5d      	ldr	r2, [pc, #372]	@ (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001ae2:	f043 0301 	orr.w	r3, r3, #1
 8001ae6:	6213      	str	r3, [r2, #32]
 8001ae8:	e00b      	b.n	8001b02 <HAL_RCC_OscConfig+0x36e>
 8001aea:	4b5b      	ldr	r3, [pc, #364]	@ (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001aec:	6a1b      	ldr	r3, [r3, #32]
 8001aee:	4a5a      	ldr	r2, [pc, #360]	@ (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001af0:	f023 0301 	bic.w	r3, r3, #1
 8001af4:	6213      	str	r3, [r2, #32]
 8001af6:	4b58      	ldr	r3, [pc, #352]	@ (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001af8:	6a1b      	ldr	r3, [r3, #32]
 8001afa:	4a57      	ldr	r2, [pc, #348]	@ (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001afc:	f023 0304 	bic.w	r3, r3, #4
 8001b00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d015      	beq.n	8001b36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b0a:	f7fe ff01 	bl	8000910 <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b10:	e00a      	b.n	8001b28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b12:	f7fe fefd 	bl	8000910 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e0b1      	b.n	8001c8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b28:	4b4b      	ldr	r3, [pc, #300]	@ (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001b2a:	6a1b      	ldr	r3, [r3, #32]
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d0ee      	beq.n	8001b12 <HAL_RCC_OscConfig+0x37e>
 8001b34:	e014      	b.n	8001b60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b36:	f7fe feeb 	bl	8000910 <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b3c:	e00a      	b.n	8001b54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b3e:	f7fe fee7 	bl	8000910 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e09b      	b.n	8001c8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b54:	4b40      	ldr	r3, [pc, #256]	@ (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001b56:	6a1b      	ldr	r3, [r3, #32]
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1ee      	bne.n	8001b3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b60:	7dfb      	ldrb	r3, [r7, #23]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d105      	bne.n	8001b72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b66:	4b3c      	ldr	r3, [pc, #240]	@ (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	4a3b      	ldr	r2, [pc, #236]	@ (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001b6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f000 8087 	beq.w	8001c8a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b7c:	4b36      	ldr	r3, [pc, #216]	@ (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 030c 	and.w	r3, r3, #12
 8001b84:	2b08      	cmp	r3, #8
 8001b86:	d061      	beq.n	8001c4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	69db      	ldr	r3, [r3, #28]
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d146      	bne.n	8001c1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b90:	4b33      	ldr	r3, [pc, #204]	@ (8001c60 <HAL_RCC_OscConfig+0x4cc>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b96:	f7fe febb 	bl	8000910 <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b9e:	f7fe feb7 	bl	8000910 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e06d      	b.n	8001c8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bb0:	4b29      	ldr	r3, [pc, #164]	@ (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1f0      	bne.n	8001b9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bc4:	d108      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bc6:	4b24      	ldr	r3, [pc, #144]	@ (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	4921      	ldr	r1, [pc, #132]	@ (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bd8:	4b1f      	ldr	r3, [pc, #124]	@ (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a19      	ldr	r1, [r3, #32]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be8:	430b      	orrs	r3, r1
 8001bea:	491b      	ldr	r1, [pc, #108]	@ (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001bec:	4313      	orrs	r3, r2
 8001bee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c60 <HAL_RCC_OscConfig+0x4cc>)
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf6:	f7fe fe8b 	bl	8000910 <HAL_GetTick>
 8001bfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bfc:	e008      	b.n	8001c10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bfe:	f7fe fe87 	bl	8000910 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e03d      	b.n	8001c8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c10:	4b11      	ldr	r3, [pc, #68]	@ (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d0f0      	beq.n	8001bfe <HAL_RCC_OscConfig+0x46a>
 8001c1c:	e035      	b.n	8001c8a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c1e:	4b10      	ldr	r3, [pc, #64]	@ (8001c60 <HAL_RCC_OscConfig+0x4cc>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c24:	f7fe fe74 	bl	8000910 <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c2c:	f7fe fe70 	bl	8000910 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e026      	b.n	8001c8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c3e:	4b06      	ldr	r3, [pc, #24]	@ (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f0      	bne.n	8001c2c <HAL_RCC_OscConfig+0x498>
 8001c4a:	e01e      	b.n	8001c8a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	69db      	ldr	r3, [r3, #28]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d107      	bne.n	8001c64 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e019      	b.n	8001c8c <HAL_RCC_OscConfig+0x4f8>
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	40007000 	.word	0x40007000
 8001c60:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c64:	4b0b      	ldr	r3, [pc, #44]	@ (8001c94 <HAL_RCC_OscConfig+0x500>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a1b      	ldr	r3, [r3, #32]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d106      	bne.n	8001c86 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d001      	beq.n	8001c8a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e000      	b.n	8001c8c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3718      	adds	r7, #24
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40021000 	.word	0x40021000

08001c98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d101      	bne.n	8001cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e0d0      	b.n	8001e4e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cac:	4b6a      	ldr	r3, [pc, #424]	@ (8001e58 <HAL_RCC_ClockConfig+0x1c0>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0307 	and.w	r3, r3, #7
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d910      	bls.n	8001cdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cba:	4b67      	ldr	r3, [pc, #412]	@ (8001e58 <HAL_RCC_ClockConfig+0x1c0>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f023 0207 	bic.w	r2, r3, #7
 8001cc2:	4965      	ldr	r1, [pc, #404]	@ (8001e58 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cca:	4b63      	ldr	r3, [pc, #396]	@ (8001e58 <HAL_RCC_ClockConfig+0x1c0>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	683a      	ldr	r2, [r7, #0]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d001      	beq.n	8001cdc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e0b8      	b.n	8001e4e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d020      	beq.n	8001d2a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0304 	and.w	r3, r3, #4
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d005      	beq.n	8001d00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cf4:	4b59      	ldr	r3, [pc, #356]	@ (8001e5c <HAL_RCC_ClockConfig+0x1c4>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	4a58      	ldr	r2, [pc, #352]	@ (8001e5c <HAL_RCC_ClockConfig+0x1c4>)
 8001cfa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001cfe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0308 	and.w	r3, r3, #8
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d005      	beq.n	8001d18 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d0c:	4b53      	ldr	r3, [pc, #332]	@ (8001e5c <HAL_RCC_ClockConfig+0x1c4>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	4a52      	ldr	r2, [pc, #328]	@ (8001e5c <HAL_RCC_ClockConfig+0x1c4>)
 8001d12:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001d16:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d18:	4b50      	ldr	r3, [pc, #320]	@ (8001e5c <HAL_RCC_ClockConfig+0x1c4>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	494d      	ldr	r1, [pc, #308]	@ (8001e5c <HAL_RCC_ClockConfig+0x1c4>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d040      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d107      	bne.n	8001d4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d3e:	4b47      	ldr	r3, [pc, #284]	@ (8001e5c <HAL_RCC_ClockConfig+0x1c4>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d115      	bne.n	8001d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e07f      	b.n	8001e4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d107      	bne.n	8001d66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d56:	4b41      	ldr	r3, [pc, #260]	@ (8001e5c <HAL_RCC_ClockConfig+0x1c4>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d109      	bne.n	8001d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e073      	b.n	8001e4e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d66:	4b3d      	ldr	r3, [pc, #244]	@ (8001e5c <HAL_RCC_ClockConfig+0x1c4>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e06b      	b.n	8001e4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d76:	4b39      	ldr	r3, [pc, #228]	@ (8001e5c <HAL_RCC_ClockConfig+0x1c4>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f023 0203 	bic.w	r2, r3, #3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	4936      	ldr	r1, [pc, #216]	@ (8001e5c <HAL_RCC_ClockConfig+0x1c4>)
 8001d84:	4313      	orrs	r3, r2
 8001d86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d88:	f7fe fdc2 	bl	8000910 <HAL_GetTick>
 8001d8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d8e:	e00a      	b.n	8001da6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d90:	f7fe fdbe 	bl	8000910 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e053      	b.n	8001e4e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001da6:	4b2d      	ldr	r3, [pc, #180]	@ (8001e5c <HAL_RCC_ClockConfig+0x1c4>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f003 020c 	and.w	r2, r3, #12
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d1eb      	bne.n	8001d90 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001db8:	4b27      	ldr	r3, [pc, #156]	@ (8001e58 <HAL_RCC_ClockConfig+0x1c0>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0307 	and.w	r3, r3, #7
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d210      	bcs.n	8001de8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dc6:	4b24      	ldr	r3, [pc, #144]	@ (8001e58 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f023 0207 	bic.w	r2, r3, #7
 8001dce:	4922      	ldr	r1, [pc, #136]	@ (8001e58 <HAL_RCC_ClockConfig+0x1c0>)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd6:	4b20      	ldr	r3, [pc, #128]	@ (8001e58 <HAL_RCC_ClockConfig+0x1c0>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	683a      	ldr	r2, [r7, #0]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d001      	beq.n	8001de8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e032      	b.n	8001e4e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d008      	beq.n	8001e06 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001df4:	4b19      	ldr	r3, [pc, #100]	@ (8001e5c <HAL_RCC_ClockConfig+0x1c4>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	4916      	ldr	r1, [pc, #88]	@ (8001e5c <HAL_RCC_ClockConfig+0x1c4>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0308 	and.w	r3, r3, #8
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d009      	beq.n	8001e26 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e12:	4b12      	ldr	r3, [pc, #72]	@ (8001e5c <HAL_RCC_ClockConfig+0x1c4>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	490e      	ldr	r1, [pc, #56]	@ (8001e5c <HAL_RCC_ClockConfig+0x1c4>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e26:	f000 f821 	bl	8001e6c <HAL_RCC_GetSysClockFreq>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e5c <HAL_RCC_ClockConfig+0x1c4>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	091b      	lsrs	r3, r3, #4
 8001e32:	f003 030f 	and.w	r3, r3, #15
 8001e36:	490a      	ldr	r1, [pc, #40]	@ (8001e60 <HAL_RCC_ClockConfig+0x1c8>)
 8001e38:	5ccb      	ldrb	r3, [r1, r3]
 8001e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e3e:	4a09      	ldr	r2, [pc, #36]	@ (8001e64 <HAL_RCC_ClockConfig+0x1cc>)
 8001e40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e42:	4b09      	ldr	r3, [pc, #36]	@ (8001e68 <HAL_RCC_ClockConfig+0x1d0>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7fe fd20 	bl	800088c <HAL_InitTick>

  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40022000 	.word	0x40022000
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	08002814 	.word	0x08002814
 8001e64:	200000c4 	.word	0x200000c4
 8001e68:	200000c8 	.word	0x200000c8

08001e6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b087      	sub	sp, #28
 8001e70:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e72:	2300      	movs	r3, #0
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	2300      	movs	r3, #0
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	617b      	str	r3, [r7, #20]
 8001e7e:	2300      	movs	r3, #0
 8001e80:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e82:	2300      	movs	r3, #0
 8001e84:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e86:	4b1e      	ldr	r3, [pc, #120]	@ (8001f00 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f003 030c 	and.w	r3, r3, #12
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	d002      	beq.n	8001e9c <HAL_RCC_GetSysClockFreq+0x30>
 8001e96:	2b08      	cmp	r3, #8
 8001e98:	d003      	beq.n	8001ea2 <HAL_RCC_GetSysClockFreq+0x36>
 8001e9a:	e027      	b.n	8001eec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e9c:	4b19      	ldr	r3, [pc, #100]	@ (8001f04 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e9e:	613b      	str	r3, [r7, #16]
      break;
 8001ea0:	e027      	b.n	8001ef2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	0c9b      	lsrs	r3, r3, #18
 8001ea6:	f003 030f 	and.w	r3, r3, #15
 8001eaa:	4a17      	ldr	r2, [pc, #92]	@ (8001f08 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001eac:	5cd3      	ldrb	r3, [r2, r3]
 8001eae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d010      	beq.n	8001edc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001eba:	4b11      	ldr	r3, [pc, #68]	@ (8001f00 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	0c5b      	lsrs	r3, r3, #17
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	4a11      	ldr	r2, [pc, #68]	@ (8001f0c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ec6:	5cd3      	ldrb	r3, [r2, r3]
 8001ec8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a0d      	ldr	r2, [pc, #52]	@ (8001f04 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ece:	fb03 f202 	mul.w	r2, r3, r2
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed8:	617b      	str	r3, [r7, #20]
 8001eda:	e004      	b.n	8001ee6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a0c      	ldr	r2, [pc, #48]	@ (8001f10 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ee0:	fb02 f303 	mul.w	r3, r2, r3
 8001ee4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	613b      	str	r3, [r7, #16]
      break;
 8001eea:	e002      	b.n	8001ef2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001eec:	4b05      	ldr	r3, [pc, #20]	@ (8001f04 <HAL_RCC_GetSysClockFreq+0x98>)
 8001eee:	613b      	str	r3, [r7, #16]
      break;
 8001ef0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ef2:	693b      	ldr	r3, [r7, #16]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	371c      	adds	r7, #28
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc80      	pop	{r7}
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	40021000 	.word	0x40021000
 8001f04:	007a1200 	.word	0x007a1200
 8001f08:	0800282c 	.word	0x0800282c
 8001f0c:	0800283c 	.word	0x0800283c
 8001f10:	003d0900 	.word	0x003d0900

08001f14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f18:	4b02      	ldr	r3, [pc, #8]	@ (8001f24 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bc80      	pop	{r7}
 8001f22:	4770      	bx	lr
 8001f24:	200000c4 	.word	0x200000c4

08001f28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f2c:	f7ff fff2 	bl	8001f14 <HAL_RCC_GetHCLKFreq>
 8001f30:	4602      	mov	r2, r0
 8001f32:	4b05      	ldr	r3, [pc, #20]	@ (8001f48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	0a1b      	lsrs	r3, r3, #8
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	4903      	ldr	r1, [pc, #12]	@ (8001f4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f3e:	5ccb      	ldrb	r3, [r1, r3]
 8001f40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	08002824 	.word	0x08002824

08001f50 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f58:	4b0a      	ldr	r3, [pc, #40]	@ (8001f84 <RCC_Delay+0x34>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a0a      	ldr	r2, [pc, #40]	@ (8001f88 <RCC_Delay+0x38>)
 8001f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f62:	0a5b      	lsrs	r3, r3, #9
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	fb02 f303 	mul.w	r3, r2, r3
 8001f6a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f6c:	bf00      	nop
  }
  while (Delay --);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	1e5a      	subs	r2, r3, #1
 8001f72:	60fa      	str	r2, [r7, #12]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d1f9      	bne.n	8001f6c <RCC_Delay+0x1c>
}
 8001f78:	bf00      	nop
 8001f7a:	bf00      	nop
 8001f7c:	3714      	adds	r7, #20
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr
 8001f84:	200000c4 	.word	0x200000c4
 8001f88:	10624dd3 	.word	0x10624dd3

08001f8c <memset>:
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	4402      	add	r2, r0
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d100      	bne.n	8001f96 <memset+0xa>
 8001f94:	4770      	bx	lr
 8001f96:	f803 1b01 	strb.w	r1, [r3], #1
 8001f9a:	e7f9      	b.n	8001f90 <memset+0x4>

08001f9c <__libc_init_array>:
 8001f9c:	b570      	push	{r4, r5, r6, lr}
 8001f9e:	2600      	movs	r6, #0
 8001fa0:	4d0c      	ldr	r5, [pc, #48]	@ (8001fd4 <__libc_init_array+0x38>)
 8001fa2:	4c0d      	ldr	r4, [pc, #52]	@ (8001fd8 <__libc_init_array+0x3c>)
 8001fa4:	1b64      	subs	r4, r4, r5
 8001fa6:	10a4      	asrs	r4, r4, #2
 8001fa8:	42a6      	cmp	r6, r4
 8001faa:	d109      	bne.n	8001fc0 <__libc_init_array+0x24>
 8001fac:	f000 f81a 	bl	8001fe4 <_init>
 8001fb0:	2600      	movs	r6, #0
 8001fb2:	4d0a      	ldr	r5, [pc, #40]	@ (8001fdc <__libc_init_array+0x40>)
 8001fb4:	4c0a      	ldr	r4, [pc, #40]	@ (8001fe0 <__libc_init_array+0x44>)
 8001fb6:	1b64      	subs	r4, r4, r5
 8001fb8:	10a4      	asrs	r4, r4, #2
 8001fba:	42a6      	cmp	r6, r4
 8001fbc:	d105      	bne.n	8001fca <__libc_init_array+0x2e>
 8001fbe:	bd70      	pop	{r4, r5, r6, pc}
 8001fc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fc4:	4798      	blx	r3
 8001fc6:	3601      	adds	r6, #1
 8001fc8:	e7ee      	b.n	8001fa8 <__libc_init_array+0xc>
 8001fca:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fce:	4798      	blx	r3
 8001fd0:	3601      	adds	r6, #1
 8001fd2:	e7f2      	b.n	8001fba <__libc_init_array+0x1e>
 8001fd4:	08002840 	.word	0x08002840
 8001fd8:	08002840 	.word	0x08002840
 8001fdc:	08002840 	.word	0x08002840
 8001fe0:	08002844 	.word	0x08002844

08001fe4 <_init>:
 8001fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fe6:	bf00      	nop
 8001fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fea:	bc08      	pop	{r3}
 8001fec:	469e      	mov	lr, r3
 8001fee:	4770      	bx	lr

08001ff0 <_fini>:
 8001ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ff2:	bf00      	nop
 8001ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ff6:	bc08      	pop	{r3}
 8001ff8:	469e      	mov	lr, r3
 8001ffa:	4770      	bx	lr
