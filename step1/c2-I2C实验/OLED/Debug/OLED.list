
OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002218  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009f8  08002324  08002324  00003324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d1c  08002d1c  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002d1c  08002d1c  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d1c  08002d1c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d1c  08002d1c  00003d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002d20  08002d20  00003d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002d24  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004fc  2000000c  08002d30  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000508  08002d30  00004508  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006d0e  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001756  00000000  00000000  0000ad43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c8  00000000  00000000  0000c4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001706d  00000000  00000000  0000cc68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000c0b9  00000000  00000000  00023cd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000822cd  00000000  00000000  0002fd8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000b205b  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 000005eb  00000000  00000000  000b209e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001ea4  00000000  00000000  000b268c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  000b4530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800230c 	.word	0x0800230c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800230c 	.word	0x0800230c

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000152:	4b14      	ldr	r3, [pc, #80]	@ (80001a4 <MX_GPIO_Init+0x58>)
 8000154:	699b      	ldr	r3, [r3, #24]
 8000156:	4a13      	ldr	r2, [pc, #76]	@ (80001a4 <MX_GPIO_Init+0x58>)
 8000158:	f043 0320 	orr.w	r3, r3, #32
 800015c:	6193      	str	r3, [r2, #24]
 800015e:	4b11      	ldr	r3, [pc, #68]	@ (80001a4 <MX_GPIO_Init+0x58>)
 8000160:	699b      	ldr	r3, [r3, #24]
 8000162:	f003 0320 	and.w	r3, r3, #32
 8000166:	60fb      	str	r3, [r7, #12]
 8000168:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800016a:	4b0e      	ldr	r3, [pc, #56]	@ (80001a4 <MX_GPIO_Init+0x58>)
 800016c:	699b      	ldr	r3, [r3, #24]
 800016e:	4a0d      	ldr	r2, [pc, #52]	@ (80001a4 <MX_GPIO_Init+0x58>)
 8000170:	f043 0304 	orr.w	r3, r3, #4
 8000174:	6193      	str	r3, [r2, #24]
 8000176:	4b0b      	ldr	r3, [pc, #44]	@ (80001a4 <MX_GPIO_Init+0x58>)
 8000178:	699b      	ldr	r3, [r3, #24]
 800017a:	f003 0304 	and.w	r3, r3, #4
 800017e:	60bb      	str	r3, [r7, #8]
 8000180:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000182:	4b08      	ldr	r3, [pc, #32]	@ (80001a4 <MX_GPIO_Init+0x58>)
 8000184:	699b      	ldr	r3, [r3, #24]
 8000186:	4a07      	ldr	r2, [pc, #28]	@ (80001a4 <MX_GPIO_Init+0x58>)
 8000188:	f043 0308 	orr.w	r3, r3, #8
 800018c:	6193      	str	r3, [r2, #24]
 800018e:	4b05      	ldr	r3, [pc, #20]	@ (80001a4 <MX_GPIO_Init+0x58>)
 8000190:	699b      	ldr	r3, [r3, #24]
 8000192:	f003 0308 	and.w	r3, r3, #8
 8000196:	607b      	str	r3, [r7, #4]
 8000198:	687b      	ldr	r3, [r7, #4]

}
 800019a:	bf00      	nop
 800019c:	3714      	adds	r7, #20
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	40021000 	.word	0x40021000

080001a8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80001ac:	4b12      	ldr	r3, [pc, #72]	@ (80001f8 <MX_I2C1_Init+0x50>)
 80001ae:	4a13      	ldr	r2, [pc, #76]	@ (80001fc <MX_I2C1_Init+0x54>)
 80001b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80001b2:	4b11      	ldr	r3, [pc, #68]	@ (80001f8 <MX_I2C1_Init+0x50>)
 80001b4:	4a12      	ldr	r2, [pc, #72]	@ (8000200 <MX_I2C1_Init+0x58>)
 80001b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80001b8:	4b0f      	ldr	r3, [pc, #60]	@ (80001f8 <MX_I2C1_Init+0x50>)
 80001ba:	2200      	movs	r2, #0
 80001bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80001be:	4b0e      	ldr	r3, [pc, #56]	@ (80001f8 <MX_I2C1_Init+0x50>)
 80001c0:	2200      	movs	r2, #0
 80001c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80001c4:	4b0c      	ldr	r3, [pc, #48]	@ (80001f8 <MX_I2C1_Init+0x50>)
 80001c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80001ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80001cc:	4b0a      	ldr	r3, [pc, #40]	@ (80001f8 <MX_I2C1_Init+0x50>)
 80001ce:	2200      	movs	r2, #0
 80001d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80001d2:	4b09      	ldr	r3, [pc, #36]	@ (80001f8 <MX_I2C1_Init+0x50>)
 80001d4:	2200      	movs	r2, #0
 80001d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80001d8:	4b07      	ldr	r3, [pc, #28]	@ (80001f8 <MX_I2C1_Init+0x50>)
 80001da:	2200      	movs	r2, #0
 80001dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80001de:	4b06      	ldr	r3, [pc, #24]	@ (80001f8 <MX_I2C1_Init+0x50>)
 80001e0:	2200      	movs	r2, #0
 80001e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <MX_I2C1_Init+0x50>)
 80001e6:	f000 ffaf 	bl	8001148 <HAL_I2C_Init>
 80001ea:	4603      	mov	r3, r0
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d001      	beq.n	80001f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80001f0:	f000 f8c3 	bl	800037a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80001f4:	bf00      	nop
 80001f6:	bd80      	pop	{r7, pc}
 80001f8:	20000028 	.word	0x20000028
 80001fc:	40005400 	.word	0x40005400
 8000200:	00061a80 	.word	0x00061a80

08000204 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b088      	sub	sp, #32
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800020c:	f107 0310 	add.w	r3, r7, #16
 8000210:	2200      	movs	r2, #0
 8000212:	601a      	str	r2, [r3, #0]
 8000214:	605a      	str	r2, [r3, #4]
 8000216:	609a      	str	r2, [r3, #8]
 8000218:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	4a15      	ldr	r2, [pc, #84]	@ (8000274 <HAL_I2C_MspInit+0x70>)
 8000220:	4293      	cmp	r3, r2
 8000222:	d123      	bne.n	800026c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000224:	4b14      	ldr	r3, [pc, #80]	@ (8000278 <HAL_I2C_MspInit+0x74>)
 8000226:	699b      	ldr	r3, [r3, #24]
 8000228:	4a13      	ldr	r2, [pc, #76]	@ (8000278 <HAL_I2C_MspInit+0x74>)
 800022a:	f043 0308 	orr.w	r3, r3, #8
 800022e:	6193      	str	r3, [r2, #24]
 8000230:	4b11      	ldr	r3, [pc, #68]	@ (8000278 <HAL_I2C_MspInit+0x74>)
 8000232:	699b      	ldr	r3, [r3, #24]
 8000234:	f003 0308 	and.w	r3, r3, #8
 8000238:	60fb      	str	r3, [r7, #12]
 800023a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800023c:	23c0      	movs	r3, #192	@ 0xc0
 800023e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000240:	2312      	movs	r3, #18
 8000242:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000244:	2303      	movs	r3, #3
 8000246:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000248:	f107 0310 	add.w	r3, r7, #16
 800024c:	4619      	mov	r1, r3
 800024e:	480b      	ldr	r0, [pc, #44]	@ (800027c <HAL_I2C_MspInit+0x78>)
 8000250:	f000 fdf6 	bl	8000e40 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000254:	4b08      	ldr	r3, [pc, #32]	@ (8000278 <HAL_I2C_MspInit+0x74>)
 8000256:	69db      	ldr	r3, [r3, #28]
 8000258:	4a07      	ldr	r2, [pc, #28]	@ (8000278 <HAL_I2C_MspInit+0x74>)
 800025a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800025e:	61d3      	str	r3, [r2, #28]
 8000260:	4b05      	ldr	r3, [pc, #20]	@ (8000278 <HAL_I2C_MspInit+0x74>)
 8000262:	69db      	ldr	r3, [r3, #28]
 8000264:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000268:	60bb      	str	r3, [r7, #8]
 800026a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800026c:	bf00      	nop
 800026e:	3720      	adds	r7, #32
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}
 8000274:	40005400 	.word	0x40005400
 8000278:	40021000 	.word	0x40021000
 800027c:	40010c00 	.word	0x40010c00

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000286:	f000 fc71 	bl	8000b6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028a:	f000 f831 	bl	80002f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028e:	f7ff ff5d 	bl	800014c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000292:	f7ff ff89 	bl	80001a8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(20);
 8000296:	2014      	movs	r0, #20
 8000298:	f000 fcca 	bl	8000c30 <HAL_Delay>
  OLED_Init();
 800029c:	f000 f89c 	bl	80003d8 <OLED_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(uint8_t i=0; i<64; i++){
 80002a0:	2300      	movs	r3, #0
 80002a2:	71fb      	strb	r3, [r7, #7]
 80002a4:	e019      	b.n	80002da <main+0x5a>
		  OLED_NewFrame();
 80002a6:	f000 f8ed 	bl	8000484 <OLED_NewFrame>

		  OLED_DrawImage(14, 0, &thImg, OLED_COLOR_NORMAL);
 80002aa:	2300      	movs	r3, #0
 80002ac:	4a0d      	ldr	r2, [pc, #52]	@ (80002e4 <main+0x64>)
 80002ae:	2100      	movs	r1, #0
 80002b0:	200e      	movs	r0, #14
 80002b2:	f000 fab4 	bl	800081e <OLED_DrawImage>
		  OLED_PrintString(64-2*i, 80, "Key Soft", &font16x16, OLED_COLOR_NORMAL);
 80002b6:	79fb      	ldrb	r3, [r7, #7]
 80002b8:	f1c3 0320 	rsb	r3, r3, #32
 80002bc:	b2db      	uxtb	r3, r3
 80002be:	005b      	lsls	r3, r3, #1
 80002c0:	b2d8      	uxtb	r0, r3
 80002c2:	2300      	movs	r3, #0
 80002c4:	9300      	str	r3, [sp, #0]
 80002c6:	4b08      	ldr	r3, [pc, #32]	@ (80002e8 <main+0x68>)
 80002c8:	4a08      	ldr	r2, [pc, #32]	@ (80002ec <main+0x6c>)
 80002ca:	2150      	movs	r1, #80	@ 0x50
 80002cc:	f000 fb1d 	bl	800090a <OLED_PrintString>

		  OLED_ShowFrame();
 80002d0:	f000 f8e4 	bl	800049c <OLED_ShowFrame>
	  for(uint8_t i=0; i<64; i++){
 80002d4:	79fb      	ldrb	r3, [r7, #7]
 80002d6:	3301      	adds	r3, #1
 80002d8:	71fb      	strb	r3, [r7, #7]
 80002da:	79fb      	ldrb	r3, [r7, #7]
 80002dc:	2b3f      	cmp	r3, #63	@ 0x3f
 80002de:	d9e2      	bls.n	80002a6 <main+0x26>
 80002e0:	e7de      	b.n	80002a0 <main+0x20>
 80002e2:	bf00      	nop
 80002e4:	08002ce8 	.word	0x08002ce8
 80002e8:	080029b8 	.word	0x080029b8
 80002ec:	08002324 	.word	0x08002324

080002f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b090      	sub	sp, #64	@ 0x40
 80002f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f6:	f107 0318 	add.w	r3, r7, #24
 80002fa:	2228      	movs	r2, #40	@ 0x28
 80002fc:	2100      	movs	r1, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f001 ffca 	bl	8002298 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000304:	1d3b      	adds	r3, r7, #4
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
 800030a:	605a      	str	r2, [r3, #4]
 800030c:	609a      	str	r2, [r3, #8]
 800030e:	60da      	str	r2, [r3, #12]
 8000310:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000312:	2301      	movs	r3, #1
 8000314:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000316:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800031a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800031c:	2300      	movs	r3, #0
 800031e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000320:	2301      	movs	r3, #1
 8000322:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000324:	2302      	movs	r3, #2
 8000326:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000328:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800032c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800032e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000332:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000334:	f107 0318 	add.w	r3, r7, #24
 8000338:	4618      	mov	r0, r3
 800033a:	f001 fba1 	bl	8001a80 <HAL_RCC_OscConfig>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000344:	f000 f819 	bl	800037a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000348:	230f      	movs	r3, #15
 800034a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800034c:	2302      	movs	r3, #2
 800034e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000350:	2300      	movs	r3, #0
 8000352:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000354:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000358:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800035a:	2300      	movs	r3, #0
 800035c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	2102      	movs	r1, #2
 8000362:	4618      	mov	r0, r3
 8000364:	f001 fe0e 	bl	8001f84 <HAL_RCC_ClockConfig>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800036e:	f000 f804 	bl	800037a <Error_Handler>
  }
}
 8000372:	bf00      	nop
 8000374:	3740      	adds	r7, #64	@ 0x40
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}

0800037a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800037a:	b480      	push	{r7}
 800037c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800037e:	b672      	cpsid	i
}
 8000380:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000382:	bf00      	nop
 8000384:	e7fd      	b.n	8000382 <Error_Handler+0x8>
	...

08000388 <OLED_Send>:
 * @param data 要发送的数据
 * @param len 要发送的数据长度
 * @return None
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他平台时应根据实际情况修改此函数
 */
void OLED_Send(uint8_t *data, uint8_t len) {
 8000388:	b580      	push	{r7, lr}
 800038a:	b084      	sub	sp, #16
 800038c:	af02      	add	r7, sp, #8
 800038e:	6078      	str	r0, [r7, #4]
 8000390:	460b      	mov	r3, r1
 8000392:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, data, len, HAL_MAX_DELAY);
 8000394:	78fb      	ldrb	r3, [r7, #3]
 8000396:	b29b      	uxth	r3, r3
 8000398:	f04f 32ff 	mov.w	r2, #4294967295
 800039c:	9200      	str	r2, [sp, #0]
 800039e:	687a      	ldr	r2, [r7, #4]
 80003a0:	217a      	movs	r1, #122	@ 0x7a
 80003a2:	4803      	ldr	r0, [pc, #12]	@ (80003b0 <OLED_Send+0x28>)
 80003a4:	f001 f814 	bl	80013d0 <HAL_I2C_Master_Transmit>
}
 80003a8:	bf00      	nop
 80003aa:	3708      	adds	r7, #8
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	20000028 	.word	0x20000028

080003b4 <OLED_SendCmd>:

/**
 * @brief 向OLED发送指令
 */
void OLED_SendCmd(uint8_t cmd) {
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	4603      	mov	r3, r0
 80003bc:	71fb      	strb	r3, [r7, #7]
  static uint8_t sendBuffer[2] = {0};
  sendBuffer[1] = cmd;
 80003be:	4a05      	ldr	r2, [pc, #20]	@ (80003d4 <OLED_SendCmd+0x20>)
 80003c0:	79fb      	ldrb	r3, [r7, #7]
 80003c2:	7053      	strb	r3, [r2, #1]
  OLED_Send(sendBuffer, 2);
 80003c4:	2102      	movs	r1, #2
 80003c6:	4803      	ldr	r0, [pc, #12]	@ (80003d4 <OLED_SendCmd+0x20>)
 80003c8:	f7ff ffde 	bl	8000388 <OLED_Send>
}
 80003cc:	bf00      	nop
 80003ce:	3708      	adds	r7, #8
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	2000047c 	.word	0x2000047c

080003d8 <OLED_Init>:

/**
 * @brief 初始化OLED
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_Init() {
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
  OLED_SendCmd(0xAE); /*关闭显示 display off*/
 80003dc:	20ae      	movs	r0, #174	@ 0xae
 80003de:	f7ff ffe9 	bl	80003b4 <OLED_SendCmd>

  OLED_SendCmd(0x02); /*设置列起始地址 set lower column address*/
 80003e2:	2002      	movs	r0, #2
 80003e4:	f7ff ffe6 	bl	80003b4 <OLED_SendCmd>
  OLED_SendCmd(0x10); /*设置列结束地址 set higher column address*/
 80003e8:	2010      	movs	r0, #16
 80003ea:	f7ff ffe3 	bl	80003b4 <OLED_SendCmd>

  OLED_SendCmd(0x40); /*设置起始行 set display start line*/
 80003ee:	2040      	movs	r0, #64	@ 0x40
 80003f0:	f7ff ffe0 	bl	80003b4 <OLED_SendCmd>

  OLED_SendCmd(0xB0); /*设置页地址 set page address*/
 80003f4:	20b0      	movs	r0, #176	@ 0xb0
 80003f6:	f7ff ffdd 	bl	80003b4 <OLED_SendCmd>

  OLED_SendCmd(0x81); /*设置对比度 contract control*/
 80003fa:	2081      	movs	r0, #129	@ 0x81
 80003fc:	f7ff ffda 	bl	80003b4 <OLED_SendCmd>
  OLED_SendCmd(0xCF); /*128*/
 8000400:	20cf      	movs	r0, #207	@ 0xcf
 8000402:	f7ff ffd7 	bl	80003b4 <OLED_SendCmd>

  OLED_SendCmd(0xA1); /*设置分段重映射 从右到左 set segment remap*/
 8000406:	20a1      	movs	r0, #161	@ 0xa1
 8000408:	f7ff ffd4 	bl	80003b4 <OLED_SendCmd>

  OLED_SendCmd(0xA6); /*正向显示 normal / reverse*/
 800040c:	20a6      	movs	r0, #166	@ 0xa6
 800040e:	f7ff ffd1 	bl	80003b4 <OLED_SendCmd>

  OLED_SendCmd(0xA8); /*多路复用率 multiplex ratio*/
 8000412:	20a8      	movs	r0, #168	@ 0xa8
 8000414:	f7ff ffce 	bl	80003b4 <OLED_SendCmd>
  OLED_SendCmd(0x3F); /*duty = 1/64*/
 8000418:	203f      	movs	r0, #63	@ 0x3f
 800041a:	f7ff ffcb 	bl	80003b4 <OLED_SendCmd>

  OLED_SendCmd(0xAD); /*设置启动电荷泵 set charge pump enable*/
 800041e:	20ad      	movs	r0, #173	@ 0xad
 8000420:	f7ff ffc8 	bl	80003b4 <OLED_SendCmd>
  OLED_SendCmd(0x8B); /*启动DC-DC */
 8000424:	208b      	movs	r0, #139	@ 0x8b
 8000426:	f7ff ffc5 	bl	80003b4 <OLED_SendCmd>

  OLED_SendCmd(0x33); /*设置泵电压 set VPP 10V */
 800042a:	2033      	movs	r0, #51	@ 0x33
 800042c:	f7ff ffc2 	bl	80003b4 <OLED_SendCmd>

  OLED_SendCmd(0xC8); /*设置输出扫描方向 COM[N-1]到COM[0] Com scan direction*/
 8000430:	20c8      	movs	r0, #200	@ 0xc8
 8000432:	f7ff ffbf 	bl	80003b4 <OLED_SendCmd>

  OLED_SendCmd(0xD3); /*设置显示偏移 set display offset*/
 8000436:	20d3      	movs	r0, #211	@ 0xd3
 8000438:	f7ff ffbc 	bl	80003b4 <OLED_SendCmd>
  OLED_SendCmd(0x00); /* 0x00 */
 800043c:	2000      	movs	r0, #0
 800043e:	f7ff ffb9 	bl	80003b4 <OLED_SendCmd>

  OLED_SendCmd(0xD5); /*设置内部时钟频率 set osc frequency*/
 8000442:	20d5      	movs	r0, #213	@ 0xd5
 8000444:	f7ff ffb6 	bl	80003b4 <OLED_SendCmd>
  OLED_SendCmd(0xC0);
 8000448:	20c0      	movs	r0, #192	@ 0xc0
 800044a:	f7ff ffb3 	bl	80003b4 <OLED_SendCmd>

  OLED_SendCmd(0xD9); /*设置放电/预充电时间 set pre-charge period*/
 800044e:	20d9      	movs	r0, #217	@ 0xd9
 8000450:	f7ff ffb0 	bl	80003b4 <OLED_SendCmd>
  OLED_SendCmd(0x1F); /*0x22*/
 8000454:	201f      	movs	r0, #31
 8000456:	f7ff ffad 	bl	80003b4 <OLED_SendCmd>

  OLED_SendCmd(0xDA); /*设置引脚布局 set COM pins*/
 800045a:	20da      	movs	r0, #218	@ 0xda
 800045c:	f7ff ffaa 	bl	80003b4 <OLED_SendCmd>
  OLED_SendCmd(0x12);
 8000460:	2012      	movs	r0, #18
 8000462:	f7ff ffa7 	bl	80003b4 <OLED_SendCmd>

  OLED_SendCmd(0xDB); /*设置电平 set vcomh*/
 8000466:	20db      	movs	r0, #219	@ 0xdb
 8000468:	f7ff ffa4 	bl	80003b4 <OLED_SendCmd>
  OLED_SendCmd(0x40);
 800046c:	2040      	movs	r0, #64	@ 0x40
 800046e:	f7ff ffa1 	bl	80003b4 <OLED_SendCmd>

  OLED_NewFrame();
 8000472:	f000 f807 	bl	8000484 <OLED_NewFrame>
  OLED_ShowFrame();
 8000476:	f000 f811 	bl	800049c <OLED_ShowFrame>

  OLED_SendCmd(0xAF); /*开启显示 display ON*/
 800047a:	20af      	movs	r0, #175	@ 0xaf
 800047c:	f7ff ff9a 	bl	80003b4 <OLED_SendCmd>
}
 8000480:	bf00      	nop
 8000482:	bd80      	pop	{r7, pc}

08000484 <OLED_NewFrame>:
// ========================== 显存操作函数 ==========================

/**
 * @brief 清空显存 绘制新的一帧
 */
void OLED_NewFrame() {
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  memset(OLED_GRAM, 0, sizeof(OLED_GRAM));
 8000488:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800048c:	2100      	movs	r1, #0
 800048e:	4802      	ldr	r0, [pc, #8]	@ (8000498 <OLED_NewFrame+0x14>)
 8000490:	f001 ff02 	bl	8002298 <memset>
}
 8000494:	bf00      	nop
 8000496:	bd80      	pop	{r7, pc}
 8000498:	2000007c 	.word	0x2000007c

0800049c <OLED_ShowFrame>:

/**
 * @brief 将当前显存显示到屏幕上
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_ShowFrame() {
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
  static uint8_t sendBuffer[OLED_COLUMN + 1];
  sendBuffer[0] = 0x40;
 80004a2:	4b15      	ldr	r3, [pc, #84]	@ (80004f8 <OLED_ShowFrame+0x5c>)
 80004a4:	2240      	movs	r2, #64	@ 0x40
 80004a6:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < OLED_PAGE; i++) {
 80004a8:	2300      	movs	r3, #0
 80004aa:	71fb      	strb	r3, [r7, #7]
 80004ac:	e01b      	b.n	80004e6 <OLED_ShowFrame+0x4a>
    OLED_SendCmd(0xB0 + i); // 设置页地址
 80004ae:	79fb      	ldrb	r3, [r7, #7]
 80004b0:	3b50      	subs	r3, #80	@ 0x50
 80004b2:	b2db      	uxtb	r3, r3
 80004b4:	4618      	mov	r0, r3
 80004b6:	f7ff ff7d 	bl	80003b4 <OLED_SendCmd>
    OLED_SendCmd(0x02);     // 设置列地址低4位
 80004ba:	2002      	movs	r0, #2
 80004bc:	f7ff ff7a 	bl	80003b4 <OLED_SendCmd>
    OLED_SendCmd(0x10);     // 设置列地址高4位
 80004c0:	2010      	movs	r0, #16
 80004c2:	f7ff ff77 	bl	80003b4 <OLED_SendCmd>
    memcpy(sendBuffer + 1, OLED_GRAM[i], OLED_COLUMN);
 80004c6:	480d      	ldr	r0, [pc, #52]	@ (80004fc <OLED_ShowFrame+0x60>)
 80004c8:	79fb      	ldrb	r3, [r7, #7]
 80004ca:	01db      	lsls	r3, r3, #7
 80004cc:	4a0c      	ldr	r2, [pc, #48]	@ (8000500 <OLED_ShowFrame+0x64>)
 80004ce:	4413      	add	r3, r2
 80004d0:	2280      	movs	r2, #128	@ 0x80
 80004d2:	4619      	mov	r1, r3
 80004d4:	f001 ff0c 	bl	80022f0 <memcpy>
    OLED_Send(sendBuffer, OLED_COLUMN + 1);
 80004d8:	2181      	movs	r1, #129	@ 0x81
 80004da:	4807      	ldr	r0, [pc, #28]	@ (80004f8 <OLED_ShowFrame+0x5c>)
 80004dc:	f7ff ff54 	bl	8000388 <OLED_Send>
  for (uint8_t i = 0; i < OLED_PAGE; i++) {
 80004e0:	79fb      	ldrb	r3, [r7, #7]
 80004e2:	3301      	adds	r3, #1
 80004e4:	71fb      	strb	r3, [r7, #7]
 80004e6:	79fb      	ldrb	r3, [r7, #7]
 80004e8:	2b07      	cmp	r3, #7
 80004ea:	d9e0      	bls.n	80004ae <OLED_ShowFrame+0x12>
  }
}
 80004ec:	bf00      	nop
 80004ee:	bf00      	nop
 80004f0:	3708      	adds	r7, #8
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	20000480 	.word	0x20000480
 80004fc:	20000481 	.word	0x20000481
 8000500:	2000007c 	.word	0x2000007c

08000504 <OLED_SetByte_Fine>:
 * @param color 颜色
 * @note 此函数将显存中的某一字节的第start位到第end位设置为与data相同
 * @note start和end的范围为0-7, start必须小于等于end
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数只能设置显存中的某一真实字节
 */
void OLED_SetByte_Fine(uint8_t page, uint8_t column, uint8_t data, uint8_t start, uint8_t end, OLED_ColorMode color) {
 8000504:	b490      	push	{r4, r7}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	4604      	mov	r4, r0
 800050c:	4608      	mov	r0, r1
 800050e:	4611      	mov	r1, r2
 8000510:	461a      	mov	r2, r3
 8000512:	4623      	mov	r3, r4
 8000514:	71fb      	strb	r3, [r7, #7]
 8000516:	4603      	mov	r3, r0
 8000518:	71bb      	strb	r3, [r7, #6]
 800051a:	460b      	mov	r3, r1
 800051c:	717b      	strb	r3, [r7, #5]
 800051e:	4613      	mov	r3, r2
 8000520:	713b      	strb	r3, [r7, #4]
  static uint8_t temp;
  if (page >= OLED_PAGE || column >= OLED_COLUMN) return;
 8000522:	79fb      	ldrb	r3, [r7, #7]
 8000524:	2b07      	cmp	r3, #7
 8000526:	d860      	bhi.n	80005ea <OLED_SetByte_Fine+0xe6>
 8000528:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800052c:	2b00      	cmp	r3, #0
 800052e:	db5c      	blt.n	80005ea <OLED_SetByte_Fine+0xe6>
  if (color) data = ~data;
 8000530:	7d3b      	ldrb	r3, [r7, #20]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d002      	beq.n	800053c <OLED_SetByte_Fine+0x38>
 8000536:	797b      	ldrb	r3, [r7, #5]
 8000538:	43db      	mvns	r3, r3
 800053a:	717b      	strb	r3, [r7, #5]

  temp = data | (0xff << (end + 1)) | (0xff >> (8 - start));
 800053c:	7c3b      	ldrb	r3, [r7, #16]
 800053e:	3301      	adds	r3, #1
 8000540:	22ff      	movs	r2, #255	@ 0xff
 8000542:	fa02 f303 	lsl.w	r3, r2, r3
 8000546:	b25a      	sxtb	r2, r3
 8000548:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800054c:	4313      	orrs	r3, r2
 800054e:	b25a      	sxtb	r2, r3
 8000550:	793b      	ldrb	r3, [r7, #4]
 8000552:	f1c3 0308 	rsb	r3, r3, #8
 8000556:	21ff      	movs	r1, #255	@ 0xff
 8000558:	fa41 f303 	asr.w	r3, r1, r3
 800055c:	b25b      	sxtb	r3, r3
 800055e:	4313      	orrs	r3, r2
 8000560:	b25b      	sxtb	r3, r3
 8000562:	b2da      	uxtb	r2, r3
 8000564:	4b23      	ldr	r3, [pc, #140]	@ (80005f4 <OLED_SetByte_Fine+0xf0>)
 8000566:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] &= temp;
 8000568:	79fa      	ldrb	r2, [r7, #7]
 800056a:	79bb      	ldrb	r3, [r7, #6]
 800056c:	4922      	ldr	r1, [pc, #136]	@ (80005f8 <OLED_SetByte_Fine+0xf4>)
 800056e:	01d2      	lsls	r2, r2, #7
 8000570:	440a      	add	r2, r1
 8000572:	4413      	add	r3, r2
 8000574:	7818      	ldrb	r0, [r3, #0]
 8000576:	4b1f      	ldr	r3, [pc, #124]	@ (80005f4 <OLED_SetByte_Fine+0xf0>)
 8000578:	7819      	ldrb	r1, [r3, #0]
 800057a:	79fa      	ldrb	r2, [r7, #7]
 800057c:	79bb      	ldrb	r3, [r7, #6]
 800057e:	4001      	ands	r1, r0
 8000580:	b2c8      	uxtb	r0, r1
 8000582:	491d      	ldr	r1, [pc, #116]	@ (80005f8 <OLED_SetByte_Fine+0xf4>)
 8000584:	01d2      	lsls	r2, r2, #7
 8000586:	440a      	add	r2, r1
 8000588:	4413      	add	r3, r2
 800058a:	4602      	mov	r2, r0
 800058c:	701a      	strb	r2, [r3, #0]
  temp = data & ~(0xff << (end + 1)) & ~(0xff >> (8 - start));
 800058e:	7c3b      	ldrb	r3, [r7, #16]
 8000590:	3301      	adds	r3, #1
 8000592:	22ff      	movs	r2, #255	@ 0xff
 8000594:	fa02 f303 	lsl.w	r3, r2, r3
 8000598:	b25b      	sxtb	r3, r3
 800059a:	43db      	mvns	r3, r3
 800059c:	b25a      	sxtb	r2, r3
 800059e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80005a2:	4013      	ands	r3, r2
 80005a4:	b25a      	sxtb	r2, r3
 80005a6:	793b      	ldrb	r3, [r7, #4]
 80005a8:	f1c3 0308 	rsb	r3, r3, #8
 80005ac:	21ff      	movs	r1, #255	@ 0xff
 80005ae:	fa41 f303 	asr.w	r3, r1, r3
 80005b2:	b25b      	sxtb	r3, r3
 80005b4:	43db      	mvns	r3, r3
 80005b6:	b25b      	sxtb	r3, r3
 80005b8:	4013      	ands	r3, r2
 80005ba:	b25b      	sxtb	r3, r3
 80005bc:	b2da      	uxtb	r2, r3
 80005be:	4b0d      	ldr	r3, [pc, #52]	@ (80005f4 <OLED_SetByte_Fine+0xf0>)
 80005c0:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] |= temp;
 80005c2:	79fa      	ldrb	r2, [r7, #7]
 80005c4:	79bb      	ldrb	r3, [r7, #6]
 80005c6:	490c      	ldr	r1, [pc, #48]	@ (80005f8 <OLED_SetByte_Fine+0xf4>)
 80005c8:	01d2      	lsls	r2, r2, #7
 80005ca:	440a      	add	r2, r1
 80005cc:	4413      	add	r3, r2
 80005ce:	7818      	ldrb	r0, [r3, #0]
 80005d0:	4b08      	ldr	r3, [pc, #32]	@ (80005f4 <OLED_SetByte_Fine+0xf0>)
 80005d2:	7819      	ldrb	r1, [r3, #0]
 80005d4:	79fa      	ldrb	r2, [r7, #7]
 80005d6:	79bb      	ldrb	r3, [r7, #6]
 80005d8:	4301      	orrs	r1, r0
 80005da:	b2c8      	uxtb	r0, r1
 80005dc:	4906      	ldr	r1, [pc, #24]	@ (80005f8 <OLED_SetByte_Fine+0xf4>)
 80005de:	01d2      	lsls	r2, r2, #7
 80005e0:	440a      	add	r2, r1
 80005e2:	4413      	add	r3, r2
 80005e4:	4602      	mov	r2, r0
 80005e6:	701a      	strb	r2, [r3, #0]
 80005e8:	e000      	b.n	80005ec <OLED_SetByte_Fine+0xe8>
  if (page >= OLED_PAGE || column >= OLED_COLUMN) return;
 80005ea:	bf00      	nop
  // 使用OLED_SetPixel实现
  // for (uint8_t i = start; i <= end; i++) {
  //   OLED_SetPixel(column, page * 8 + i, !((data >> i) & 0x01));
  // }
}
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc90      	pop	{r4, r7}
 80005f2:	4770      	bx	lr
 80005f4:	20000501 	.word	0x20000501
 80005f8:	2000007c 	.word	0x2000007c

080005fc <OLED_SetBits_Fine>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始向下数len位设置为与data相同
 * @note len的范围为1-8
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits_Fine(uint8_t x, uint8_t y, uint8_t data, uint8_t len, OLED_ColorMode color) {
 80005fc:	b5b0      	push	{r4, r5, r7, lr}
 80005fe:	b086      	sub	sp, #24
 8000600:	af02      	add	r7, sp, #8
 8000602:	4604      	mov	r4, r0
 8000604:	4608      	mov	r0, r1
 8000606:	4611      	mov	r1, r2
 8000608:	461a      	mov	r2, r3
 800060a:	4623      	mov	r3, r4
 800060c:	71fb      	strb	r3, [r7, #7]
 800060e:	4603      	mov	r3, r0
 8000610:	71bb      	strb	r3, [r7, #6]
 8000612:	460b      	mov	r3, r1
 8000614:	717b      	strb	r3, [r7, #5]
 8000616:	4613      	mov	r3, r2
 8000618:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 800061a:	79bb      	ldrb	r3, [r7, #6]
 800061c:	08db      	lsrs	r3, r3, #3
 800061e:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 8000620:	79bb      	ldrb	r3, [r7, #6]
 8000622:	f003 0307 	and.w	r3, r3, #7
 8000626:	73bb      	strb	r3, [r7, #14]
  if (bit + len > 8) {
 8000628:	7bba      	ldrb	r2, [r7, #14]
 800062a:	793b      	ldrb	r3, [r7, #4]
 800062c:	4413      	add	r3, r2
 800062e:	2b08      	cmp	r3, #8
 8000630:	dd29      	ble.n	8000686 <OLED_SetBits_Fine+0x8a>
    OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 8000632:	797a      	ldrb	r2, [r7, #5]
 8000634:	7bbb      	ldrb	r3, [r7, #14]
 8000636:	fa02 f303 	lsl.w	r3, r2, r3
 800063a:	b2da      	uxtb	r2, r3
 800063c:	7bbc      	ldrb	r4, [r7, #14]
 800063e:	79f9      	ldrb	r1, [r7, #7]
 8000640:	7bf8      	ldrb	r0, [r7, #15]
 8000642:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000646:	9301      	str	r3, [sp, #4]
 8000648:	2307      	movs	r3, #7
 800064a:	9300      	str	r3, [sp, #0]
 800064c:	4623      	mov	r3, r4
 800064e:	f7ff ff59 	bl	8000504 <OLED_SetByte_Fine>
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, len + bit - 1 - 8, color);
 8000652:	7bfb      	ldrb	r3, [r7, #15]
 8000654:	3301      	adds	r3, #1
 8000656:	b2d8      	uxtb	r0, r3
 8000658:	797a      	ldrb	r2, [r7, #5]
 800065a:	7bbb      	ldrb	r3, [r7, #14]
 800065c:	f1c3 0308 	rsb	r3, r3, #8
 8000660:	fa42 f303 	asr.w	r3, r2, r3
 8000664:	b2dc      	uxtb	r4, r3
 8000666:	793a      	ldrb	r2, [r7, #4]
 8000668:	7bbb      	ldrb	r3, [r7, #14]
 800066a:	4413      	add	r3, r2
 800066c:	b2db      	uxtb	r3, r3
 800066e:	3b09      	subs	r3, #9
 8000670:	b2db      	uxtb	r3, r3
 8000672:	79f9      	ldrb	r1, [r7, #7]
 8000674:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000678:	9201      	str	r2, [sp, #4]
 800067a:	9300      	str	r3, [sp, #0]
 800067c:	2300      	movs	r3, #0
 800067e:	4622      	mov	r2, r4
 8000680:	f7ff ff40 	bl	8000504 <OLED_SetByte_Fine>
  }
  // 使用OLED_SetPixel实现
  // for (uint8_t i = 0; i < len; i++) {
  //   OLED_SetPixel(x, y + i, !((data >> i) & 0x01));
  // }
}
 8000684:	e015      	b.n	80006b2 <OLED_SetBits_Fine+0xb6>
    OLED_SetByte_Fine(page, x, data << bit, bit, bit + len - 1, color);
 8000686:	797a      	ldrb	r2, [r7, #5]
 8000688:	7bbb      	ldrb	r3, [r7, #14]
 800068a:	fa02 f303 	lsl.w	r3, r2, r3
 800068e:	b2dc      	uxtb	r4, r3
 8000690:	7bba      	ldrb	r2, [r7, #14]
 8000692:	793b      	ldrb	r3, [r7, #4]
 8000694:	4413      	add	r3, r2
 8000696:	b2db      	uxtb	r3, r3
 8000698:	3b01      	subs	r3, #1
 800069a:	b2db      	uxtb	r3, r3
 800069c:	7bbd      	ldrb	r5, [r7, #14]
 800069e:	79f9      	ldrb	r1, [r7, #7]
 80006a0:	7bf8      	ldrb	r0, [r7, #15]
 80006a2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80006a6:	9201      	str	r2, [sp, #4]
 80006a8:	9300      	str	r3, [sp, #0]
 80006aa:	462b      	mov	r3, r5
 80006ac:	4622      	mov	r2, r4
 80006ae:	f7ff ff29 	bl	8000504 <OLED_SetByte_Fine>
}
 80006b2:	bf00      	nop
 80006b4:	3710      	adds	r7, #16
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bdb0      	pop	{r4, r5, r7, pc}

080006ba <OLED_SetBits>:
 * @param data 数据
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始向下数8位设置为与data相同
 * @note 此函数与OLED_SetByte的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits(uint8_t x, uint8_t y, uint8_t data, OLED_ColorMode color) {
 80006ba:	b590      	push	{r4, r7, lr}
 80006bc:	b087      	sub	sp, #28
 80006be:	af02      	add	r7, sp, #8
 80006c0:	4604      	mov	r4, r0
 80006c2:	4608      	mov	r0, r1
 80006c4:	4611      	mov	r1, r2
 80006c6:	461a      	mov	r2, r3
 80006c8:	4623      	mov	r3, r4
 80006ca:	71fb      	strb	r3, [r7, #7]
 80006cc:	4603      	mov	r3, r0
 80006ce:	71bb      	strb	r3, [r7, #6]
 80006d0:	460b      	mov	r3, r1
 80006d2:	717b      	strb	r3, [r7, #5]
 80006d4:	4613      	mov	r3, r2
 80006d6:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 80006d8:	79bb      	ldrb	r3, [r7, #6]
 80006da:	08db      	lsrs	r3, r3, #3
 80006dc:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 80006de:	79bb      	ldrb	r3, [r7, #6]
 80006e0:	f003 0307 	and.w	r3, r3, #7
 80006e4:	73bb      	strb	r3, [r7, #14]
  OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 80006e6:	797a      	ldrb	r2, [r7, #5]
 80006e8:	7bbb      	ldrb	r3, [r7, #14]
 80006ea:	fa02 f303 	lsl.w	r3, r2, r3
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	7bbc      	ldrb	r4, [r7, #14]
 80006f2:	79f9      	ldrb	r1, [r7, #7]
 80006f4:	7bf8      	ldrb	r0, [r7, #15]
 80006f6:	793b      	ldrb	r3, [r7, #4]
 80006f8:	9301      	str	r3, [sp, #4]
 80006fa:	2307      	movs	r3, #7
 80006fc:	9300      	str	r3, [sp, #0]
 80006fe:	4623      	mov	r3, r4
 8000700:	f7ff ff00 	bl	8000504 <OLED_SetByte_Fine>
  if (bit) {
 8000704:	7bbb      	ldrb	r3, [r7, #14]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d014      	beq.n	8000734 <OLED_SetBits+0x7a>
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, bit - 1, color);
 800070a:	7bfb      	ldrb	r3, [r7, #15]
 800070c:	3301      	adds	r3, #1
 800070e:	b2d8      	uxtb	r0, r3
 8000710:	797a      	ldrb	r2, [r7, #5]
 8000712:	7bbb      	ldrb	r3, [r7, #14]
 8000714:	f1c3 0308 	rsb	r3, r3, #8
 8000718:	fa42 f303 	asr.w	r3, r2, r3
 800071c:	b2dc      	uxtb	r4, r3
 800071e:	7bbb      	ldrb	r3, [r7, #14]
 8000720:	3b01      	subs	r3, #1
 8000722:	b2db      	uxtb	r3, r3
 8000724:	79f9      	ldrb	r1, [r7, #7]
 8000726:	793a      	ldrb	r2, [r7, #4]
 8000728:	9201      	str	r2, [sp, #4]
 800072a:	9300      	str	r3, [sp, #0]
 800072c:	2300      	movs	r3, #0
 800072e:	4622      	mov	r2, r4
 8000730:	f7ff fee8 	bl	8000504 <OLED_SetByte_Fine>
  }
}
 8000734:	bf00      	nop
 8000736:	3714      	adds	r7, #20
 8000738:	46bd      	mov	sp, r7
 800073a:	bd90      	pop	{r4, r7, pc}

0800073c <OLED_SetBlock>:
 * @param h 高度
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始的w*h个像素设置为data中的数据
 * @note data的数据应该采用列行式排列
 */
void OLED_SetBlock(uint8_t x, uint8_t y, const uint8_t *data, uint8_t w, uint8_t h, OLED_ColorMode color) {
 800073c:	b590      	push	{r4, r7, lr}
 800073e:	b087      	sub	sp, #28
 8000740:	af02      	add	r7, sp, #8
 8000742:	603a      	str	r2, [r7, #0]
 8000744:	461a      	mov	r2, r3
 8000746:	4603      	mov	r3, r0
 8000748:	71fb      	strb	r3, [r7, #7]
 800074a:	460b      	mov	r3, r1
 800074c:	71bb      	strb	r3, [r7, #6]
 800074e:	4613      	mov	r3, r2
 8000750:	717b      	strb	r3, [r7, #5]
  uint8_t fullRow = h / 8; // 完整的行数
 8000752:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000756:	08db      	lsrs	r3, r3, #3
 8000758:	733b      	strb	r3, [r7, #12]
  uint8_t partBit = h % 8; // 不完整的字节中的有效位数
 800075a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800075e:	f003 0307 	and.w	r3, r3, #7
 8000762:	72fb      	strb	r3, [r7, #11]
  for (uint8_t i = 0; i < w; i++) {
 8000764:	2300      	movs	r3, #0
 8000766:	73fb      	strb	r3, [r7, #15]
 8000768:	e025      	b.n	80007b6 <OLED_SetBlock+0x7a>
    for (uint8_t j = 0; j < fullRow; j++) {
 800076a:	2300      	movs	r3, #0
 800076c:	73bb      	strb	r3, [r7, #14]
 800076e:	e01b      	b.n	80007a8 <OLED_SetBlock+0x6c>
      OLED_SetBits(x + i, y + j * 8, data[i + j * w], color);
 8000770:	79fa      	ldrb	r2, [r7, #7]
 8000772:	7bfb      	ldrb	r3, [r7, #15]
 8000774:	4413      	add	r3, r2
 8000776:	b2d8      	uxtb	r0, r3
 8000778:	7bbb      	ldrb	r3, [r7, #14]
 800077a:	00db      	lsls	r3, r3, #3
 800077c:	b2da      	uxtb	r2, r3
 800077e:	79bb      	ldrb	r3, [r7, #6]
 8000780:	4413      	add	r3, r2
 8000782:	b2dc      	uxtb	r4, r3
 8000784:	7bfa      	ldrb	r2, [r7, #15]
 8000786:	7bbb      	ldrb	r3, [r7, #14]
 8000788:	7979      	ldrb	r1, [r7, #5]
 800078a:	fb01 f303 	mul.w	r3, r1, r3
 800078e:	4413      	add	r3, r2
 8000790:	461a      	mov	r2, r3
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	4413      	add	r3, r2
 8000796:	781a      	ldrb	r2, [r3, #0]
 8000798:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800079c:	4621      	mov	r1, r4
 800079e:	f7ff ff8c 	bl	80006ba <OLED_SetBits>
    for (uint8_t j = 0; j < fullRow; j++) {
 80007a2:	7bbb      	ldrb	r3, [r7, #14]
 80007a4:	3301      	adds	r3, #1
 80007a6:	73bb      	strb	r3, [r7, #14]
 80007a8:	7bba      	ldrb	r2, [r7, #14]
 80007aa:	7b3b      	ldrb	r3, [r7, #12]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d3df      	bcc.n	8000770 <OLED_SetBlock+0x34>
  for (uint8_t i = 0; i < w; i++) {
 80007b0:	7bfb      	ldrb	r3, [r7, #15]
 80007b2:	3301      	adds	r3, #1
 80007b4:	73fb      	strb	r3, [r7, #15]
 80007b6:	7bfa      	ldrb	r2, [r7, #15]
 80007b8:	797b      	ldrb	r3, [r7, #5]
 80007ba:	429a      	cmp	r2, r3
 80007bc:	d3d5      	bcc.n	800076a <OLED_SetBlock+0x2e>
    }
  }
  if (partBit) {
 80007be:	7afb      	ldrb	r3, [r7, #11]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d028      	beq.n	8000816 <OLED_SetBlock+0xda>
    uint16_t fullNum = w * fullRow; // 完整的字节数
 80007c4:	797b      	ldrb	r3, [r7, #5]
 80007c6:	b29b      	uxth	r3, r3
 80007c8:	7b3a      	ldrb	r2, [r7, #12]
 80007ca:	b292      	uxth	r2, r2
 80007cc:	fb02 f303 	mul.w	r3, r2, r3
 80007d0:	813b      	strh	r3, [r7, #8]
    for (uint8_t i = 0; i < w; i++) {
 80007d2:	2300      	movs	r3, #0
 80007d4:	737b      	strb	r3, [r7, #13]
 80007d6:	e01a      	b.n	800080e <OLED_SetBlock+0xd2>
      OLED_SetBits_Fine(x + i, y + (fullRow * 8), data[fullNum + i], partBit, color);
 80007d8:	79fa      	ldrb	r2, [r7, #7]
 80007da:	7b7b      	ldrb	r3, [r7, #13]
 80007dc:	4413      	add	r3, r2
 80007de:	b2d8      	uxtb	r0, r3
 80007e0:	7b3b      	ldrb	r3, [r7, #12]
 80007e2:	00db      	lsls	r3, r3, #3
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	79bb      	ldrb	r3, [r7, #6]
 80007e8:	4413      	add	r3, r2
 80007ea:	b2d9      	uxtb	r1, r3
 80007ec:	893a      	ldrh	r2, [r7, #8]
 80007ee:	7b7b      	ldrb	r3, [r7, #13]
 80007f0:	4413      	add	r3, r2
 80007f2:	461a      	mov	r2, r3
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	4413      	add	r3, r2
 80007f8:	781a      	ldrb	r2, [r3, #0]
 80007fa:	7afc      	ldrb	r4, [r7, #11]
 80007fc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000800:	9300      	str	r3, [sp, #0]
 8000802:	4623      	mov	r3, r4
 8000804:	f7ff fefa 	bl	80005fc <OLED_SetBits_Fine>
    for (uint8_t i = 0; i < w; i++) {
 8000808:	7b7b      	ldrb	r3, [r7, #13]
 800080a:	3301      	adds	r3, #1
 800080c:	737b      	strb	r3, [r7, #13]
 800080e:	7b7a      	ldrb	r2, [r7, #13]
 8000810:	797b      	ldrb	r3, [r7, #5]
 8000812:	429a      	cmp	r2, r3
 8000814:	d3e0      	bcc.n	80007d8 <OLED_SetBlock+0x9c>
  //       if (j * 8 + k >= h) break; // 防止越界(不完整的字节
  //       OLED_SetPixel(x + i, y + j * 8 + k, !((data[i + j * w] >> k) & 0x01));
  //     }
  //   }
  // }
}
 8000816:	bf00      	nop
 8000818:	3714      	adds	r7, #20
 800081a:	46bd      	mov	sp, r7
 800081c:	bd90      	pop	{r4, r7, pc}

0800081e <OLED_DrawImage>:
 * @param x 起始点横坐标
 * @param y 起始点纵坐标
 * @param img 图片
 * @param color 颜色
 */
void OLED_DrawImage(uint8_t x, uint8_t y, const Image *img, OLED_ColorMode color) {
 800081e:	b5b0      	push	{r4, r5, r7, lr}
 8000820:	b084      	sub	sp, #16
 8000822:	af02      	add	r7, sp, #8
 8000824:	603a      	str	r2, [r7, #0]
 8000826:	461a      	mov	r2, r3
 8000828:	4603      	mov	r3, r0
 800082a:	71fb      	strb	r3, [r7, #7]
 800082c:	460b      	mov	r3, r1
 800082e:	71bb      	strb	r3, [r7, #6]
 8000830:	4613      	mov	r3, r2
 8000832:	717b      	strb	r3, [r7, #5]
  OLED_SetBlock(x, y, img->data, img->w, img->h, color);
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	685c      	ldr	r4, [r3, #4]
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	781d      	ldrb	r5, [r3, #0]
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	785b      	ldrb	r3, [r3, #1]
 8000840:	79b9      	ldrb	r1, [r7, #6]
 8000842:	79f8      	ldrb	r0, [r7, #7]
 8000844:	797a      	ldrb	r2, [r7, #5]
 8000846:	9201      	str	r2, [sp, #4]
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	462b      	mov	r3, r5
 800084c:	4622      	mov	r2, r4
 800084e:	f7ff ff75 	bl	800073c <OLED_SetBlock>
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bdb0      	pop	{r4, r5, r7, pc}

0800085a <OLED_PrintASCIIChar>:
 * @param y 起始点纵坐标
 * @param ch 字符
 * @param font 字体
 * @param color 颜色
 */
void OLED_PrintASCIIChar(uint8_t x, uint8_t y, char ch, const ASCIIFont *font, OLED_ColorMode color) {
 800085a:	b5b0      	push	{r4, r5, r7, lr}
 800085c:	b084      	sub	sp, #16
 800085e:	af02      	add	r7, sp, #8
 8000860:	603b      	str	r3, [r7, #0]
 8000862:	4603      	mov	r3, r0
 8000864:	71fb      	strb	r3, [r7, #7]
 8000866:	460b      	mov	r3, r1
 8000868:	71bb      	strb	r3, [r7, #6]
 800086a:	4613      	mov	r3, r2
 800086c:	717b      	strb	r3, [r7, #5]
  OLED_SetBlock(x, y, font->chars + (ch - ' ') * (((font->h + 7) / 8) * font->w), font->w, font->h, color);
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	685a      	ldr	r2, [r3, #4]
 8000872:	797b      	ldrb	r3, [r7, #5]
 8000874:	f1a3 0120 	sub.w	r1, r3, #32
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	3307      	adds	r3, #7
 800087e:	2b00      	cmp	r3, #0
 8000880:	da00      	bge.n	8000884 <OLED_PrintASCIIChar+0x2a>
 8000882:	3307      	adds	r3, #7
 8000884:	10db      	asrs	r3, r3, #3
 8000886:	4618      	mov	r0, r3
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	785b      	ldrb	r3, [r3, #1]
 800088c:	fb00 f303 	mul.w	r3, r0, r3
 8000890:	fb01 f303 	mul.w	r3, r1, r3
 8000894:	18d4      	adds	r4, r2, r3
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	785d      	ldrb	r5, [r3, #1]
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	79b9      	ldrb	r1, [r7, #6]
 80008a0:	79f8      	ldrb	r0, [r7, #7]
 80008a2:	7e3a      	ldrb	r2, [r7, #24]
 80008a4:	9201      	str	r2, [sp, #4]
 80008a6:	9300      	str	r3, [sp, #0]
 80008a8:	462b      	mov	r3, r5
 80008aa:	4622      	mov	r2, r4
 80008ac:	f7ff ff46 	bl	800073c <OLED_SetBlock>
}
 80008b0:	bf00      	nop
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bdb0      	pop	{r4, r5, r7, pc}

080008b8 <_OLED_GetUTF8Len>:
}

/**
 * @brief 获取UTF-8编码的字符长度
 */
uint8_t _OLED_GetUTF8Len(char *string) {
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  if ((string[0] & 0x80) == 0x00) {
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	b25b      	sxtb	r3, r3
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	db01      	blt.n	80008ce <_OLED_GetUTF8Len+0x16>
    return 1;
 80008ca:	2301      	movs	r3, #1
 80008cc:	e018      	b.n	8000900 <_OLED_GetUTF8Len+0x48>
  } else if ((string[0] & 0xE0) == 0xC0) {
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80008d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80008d8:	d101      	bne.n	80008de <_OLED_GetUTF8Len+0x26>
    return 2;
 80008da:	2302      	movs	r3, #2
 80008dc:	e010      	b.n	8000900 <_OLED_GetUTF8Len+0x48>
  } else if ((string[0] & 0xF0) == 0xE0) {
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80008e6:	2be0      	cmp	r3, #224	@ 0xe0
 80008e8:	d101      	bne.n	80008ee <_OLED_GetUTF8Len+0x36>
    return 3;
 80008ea:	2303      	movs	r3, #3
 80008ec:	e008      	b.n	8000900 <_OLED_GetUTF8Len+0x48>
  } else if ((string[0] & 0xF8) == 0xF0) {
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 80008f6:	2bf0      	cmp	r3, #240	@ 0xf0
 80008f8:	d101      	bne.n	80008fe <_OLED_GetUTF8Len+0x46>
    return 4;
 80008fa:	2304      	movs	r3, #4
 80008fc:	e000      	b.n	8000900 <_OLED_GetUTF8Len+0x48>
  }
  return 0;
 80008fe:	2300      	movs	r3, #0
}
 8000900:	4618      	mov	r0, r3
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	bc80      	pop	{r7}
 8000908:	4770      	bx	lr

0800090a <OLED_PrintString>:
 *
 * @note 为保证字符串中的中文会被自动识别并绘制, 需:
 * 1. 编译器字符集设置为UTF-8
 * 2. 使用波特律动LED取模工具生成字模(https://led.baud-dance.com)
 */
void OLED_PrintString(uint8_t x, uint8_t y, char *str, const Font *font, OLED_ColorMode color) {
 800090a:	b5b0      	push	{r4, r5, r7, lr}
 800090c:	b08a      	sub	sp, #40	@ 0x28
 800090e:	af02      	add	r7, sp, #8
 8000910:	60ba      	str	r2, [r7, #8]
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	4603      	mov	r3, r0
 8000916:	73fb      	strb	r3, [r7, #15]
 8000918:	460b      	mov	r3, r1
 800091a:	73bb      	strb	r3, [r7, #14]
  uint16_t i = 0;                                       // 字符串索引
 800091c:	2300      	movs	r3, #0
 800091e:	83fb      	strh	r3, [r7, #30]
  uint8_t oneLen = (((font->h + 7) / 8) * font->w) + 4; // 一个字模占多少字节
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	3307      	adds	r3, #7
 8000926:	2b00      	cmp	r3, #0
 8000928:	da00      	bge.n	800092c <OLED_PrintString+0x22>
 800092a:	3307      	adds	r3, #7
 800092c:	10db      	asrs	r3, r3, #3
 800092e:	b2db      	uxtb	r3, r3
 8000930:	687a      	ldr	r2, [r7, #4]
 8000932:	7852      	ldrb	r2, [r2, #1]
 8000934:	fb02 f303 	mul.w	r3, r2, r3
 8000938:	b2db      	uxtb	r3, r3
 800093a:	3304      	adds	r3, #4
 800093c:	76fb      	strb	r3, [r7, #27]
  uint8_t found;                                        // 是否找到字模
  uint8_t utf8Len;                                      // UTF-8编码长度
  uint8_t *head;                                        // 字模头指针
  while (str[i]) {
 800093e:	e07d      	b.n	8000a3c <OLED_PrintString+0x132>
    found = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	777b      	strb	r3, [r7, #29]
    utf8Len = _OLED_GetUTF8Len(str + i);
 8000944:	8bfb      	ldrh	r3, [r7, #30]
 8000946:	68ba      	ldr	r2, [r7, #8]
 8000948:	4413      	add	r3, r2
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff ffb4 	bl	80008b8 <_OLED_GetUTF8Len>
 8000950:	4603      	mov	r3, r0
 8000952:	76bb      	strb	r3, [r7, #26]
    if (utf8Len == 0) break; // 有问题的UTF-8编码
 8000954:	7ebb      	ldrb	r3, [r7, #26]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d078      	beq.n	8000a4c <OLED_PrintString+0x142>

    // 寻找字符  TODO 优化查找算法, 二分查找或者hash
    for (uint8_t j = 0; j < font->len; j++) {
 800095a:	2300      	movs	r3, #0
 800095c:	773b      	strb	r3, [r7, #28]
 800095e:	e032      	b.n	80009c6 <OLED_PrintString+0xbc>
      head = (uint8_t *)(font->chars) + (j * oneLen);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	7f3a      	ldrb	r2, [r7, #28]
 8000966:	7ef9      	ldrb	r1, [r7, #27]
 8000968:	fb01 f202 	mul.w	r2, r1, r2
 800096c:	4413      	add	r3, r2
 800096e:	617b      	str	r3, [r7, #20]
      if (memcmp(str + i, head, utf8Len) == 0) {
 8000970:	8bfb      	ldrh	r3, [r7, #30]
 8000972:	68ba      	ldr	r2, [r7, #8]
 8000974:	4413      	add	r3, r2
 8000976:	7eba      	ldrb	r2, [r7, #26]
 8000978:	6979      	ldr	r1, [r7, #20]
 800097a:	4618      	mov	r0, r3
 800097c:	f001 fc7c 	bl	8002278 <memcmp>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d11c      	bne.n	80009c0 <OLED_PrintString+0xb6>
        OLED_SetBlock(x, y, head + 4, font->w, font->h, color);
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	1d1c      	adds	r4, r3, #4
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	785d      	ldrb	r5, [r3, #1]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	7bb9      	ldrb	r1, [r7, #14]
 8000994:	7bf8      	ldrb	r0, [r7, #15]
 8000996:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800099a:	9201      	str	r2, [sp, #4]
 800099c:	9300      	str	r3, [sp, #0]
 800099e:	462b      	mov	r3, r5
 80009a0:	4622      	mov	r2, r4
 80009a2:	f7ff fecb 	bl	800073c <OLED_SetBlock>
        // 移动光标
        x += font->w;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	785a      	ldrb	r2, [r3, #1]
 80009aa:	7bfb      	ldrb	r3, [r7, #15]
 80009ac:	4413      	add	r3, r2
 80009ae:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 80009b0:	7ebb      	ldrb	r3, [r7, #26]
 80009b2:	b29a      	uxth	r2, r3
 80009b4:	8bfb      	ldrh	r3, [r7, #30]
 80009b6:	4413      	add	r3, r2
 80009b8:	83fb      	strh	r3, [r7, #30]
        found = 1;
 80009ba:	2301      	movs	r3, #1
 80009bc:	777b      	strb	r3, [r7, #29]
        break;
 80009be:	e007      	b.n	80009d0 <OLED_PrintString+0xc6>
    for (uint8_t j = 0; j < font->len; j++) {
 80009c0:	7f3b      	ldrb	r3, [r7, #28]
 80009c2:	3301      	adds	r3, #1
 80009c4:	773b      	strb	r3, [r7, #28]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	7a1b      	ldrb	r3, [r3, #8]
 80009ca:	7f3a      	ldrb	r2, [r7, #28]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d3c7      	bcc.n	8000960 <OLED_PrintString+0x56>
      }
    }

    // 若未找到字模,且为ASCII字符, 则缺省显示ASCII字符
    if (found == 0) {
 80009d0:	7f7b      	ldrb	r3, [r7, #29]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d132      	bne.n	8000a3c <OLED_PrintString+0x132>
      if (utf8Len == 1) {
 80009d6:	7ebb      	ldrb	r3, [r7, #26]
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d119      	bne.n	8000a10 <OLED_PrintString+0x106>
        OLED_PrintASCIIChar(x, y, str[i], font->ascii, color);
 80009dc:	8bfb      	ldrh	r3, [r7, #30]
 80009de:	68ba      	ldr	r2, [r7, #8]
 80009e0:	4413      	add	r3, r2
 80009e2:	781a      	ldrb	r2, [r3, #0]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	68dc      	ldr	r4, [r3, #12]
 80009e8:	7bb9      	ldrb	r1, [r7, #14]
 80009ea:	7bf8      	ldrb	r0, [r7, #15]
 80009ec:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80009f0:	9300      	str	r3, [sp, #0]
 80009f2:	4623      	mov	r3, r4
 80009f4:	f7ff ff31 	bl	800085a <OLED_PrintASCIIChar>
        // 移动光标
        x += font->ascii->w;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	785a      	ldrb	r2, [r3, #1]
 80009fe:	7bfb      	ldrb	r3, [r7, #15]
 8000a00:	4413      	add	r3, r2
 8000a02:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 8000a04:	7ebb      	ldrb	r3, [r7, #26]
 8000a06:	b29a      	uxth	r2, r3
 8000a08:	8bfb      	ldrh	r3, [r7, #30]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	83fb      	strh	r3, [r7, #30]
 8000a0e:	e015      	b.n	8000a3c <OLED_PrintString+0x132>
      } else {
        OLED_PrintASCIIChar(x, y, ' ', font->ascii, color);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	68da      	ldr	r2, [r3, #12]
 8000a14:	7bb9      	ldrb	r1, [r7, #14]
 8000a16:	7bf8      	ldrb	r0, [r7, #15]
 8000a18:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000a1c:	9300      	str	r3, [sp, #0]
 8000a1e:	4613      	mov	r3, r2
 8000a20:	2220      	movs	r2, #32
 8000a22:	f7ff ff1a 	bl	800085a <OLED_PrintASCIIChar>
        x += font->ascii->w;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	68db      	ldr	r3, [r3, #12]
 8000a2a:	785a      	ldrb	r2, [r3, #1]
 8000a2c:	7bfb      	ldrb	r3, [r7, #15]
 8000a2e:	4413      	add	r3, r2
 8000a30:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 8000a32:	7ebb      	ldrb	r3, [r7, #26]
 8000a34:	b29a      	uxth	r2, r3
 8000a36:	8bfb      	ldrh	r3, [r7, #30]
 8000a38:	4413      	add	r3, r2
 8000a3a:	83fb      	strh	r3, [r7, #30]
  while (str[i]) {
 8000a3c:	8bfb      	ldrh	r3, [r7, #30]
 8000a3e:	68ba      	ldr	r2, [r7, #8]
 8000a40:	4413      	add	r3, r2
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	f47f af7b 	bne.w	8000940 <OLED_PrintString+0x36>
      }
    }
  }
}
 8000a4a:	e000      	b.n	8000a4e <OLED_PrintString+0x144>
    if (utf8Len == 0) break; // 有问题的UTF-8编码
 8000a4c:	bf00      	nop
}
 8000a4e:	bf00      	nop
 8000a50:	3720      	adds	r7, #32
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000a58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a5e:	4b15      	ldr	r3, [pc, #84]	@ (8000ab4 <HAL_MspInit+0x5c>)
 8000a60:	699b      	ldr	r3, [r3, #24]
 8000a62:	4a14      	ldr	r2, [pc, #80]	@ (8000ab4 <HAL_MspInit+0x5c>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6193      	str	r3, [r2, #24]
 8000a6a:	4b12      	ldr	r3, [pc, #72]	@ (8000ab4 <HAL_MspInit+0x5c>)
 8000a6c:	699b      	ldr	r3, [r3, #24]
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a76:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab4 <HAL_MspInit+0x5c>)
 8000a78:	69db      	ldr	r3, [r3, #28]
 8000a7a:	4a0e      	ldr	r2, [pc, #56]	@ (8000ab4 <HAL_MspInit+0x5c>)
 8000a7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a80:	61d3      	str	r3, [r2, #28]
 8000a82:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab4 <HAL_MspInit+0x5c>)
 8000a84:	69db      	ldr	r3, [r3, #28]
 8000a86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab8 <HAL_MspInit+0x60>)
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	4a04      	ldr	r2, [pc, #16]	@ (8000ab8 <HAL_MspInit+0x60>)
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	3714      	adds	r7, #20
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	40010000 	.word	0x40010000

08000abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <NMI_Handler+0x4>

08000ac4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <HardFault_Handler+0x4>

08000acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <MemManage_Handler+0x4>

08000ad4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <BusFault_Handler+0x4>

08000adc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <UsageFault_Handler+0x4>

08000ae4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr

08000af0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr

08000afc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr

08000b08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b0c:	f000 f874 	bl	8000bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr

08000b20 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b20:	f7ff fff8 	bl	8000b14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b24:	480b      	ldr	r0, [pc, #44]	@ (8000b54 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b26:	490c      	ldr	r1, [pc, #48]	@ (8000b58 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b28:	4a0c      	ldr	r2, [pc, #48]	@ (8000b5c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b2c:	e002      	b.n	8000b34 <LoopCopyDataInit>

08000b2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b32:	3304      	adds	r3, #4

08000b34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b38:	d3f9      	bcc.n	8000b2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b3a:	4a09      	ldr	r2, [pc, #36]	@ (8000b60 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b3c:	4c09      	ldr	r4, [pc, #36]	@ (8000b64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b40:	e001      	b.n	8000b46 <LoopFillZerobss>

08000b42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b44:	3204      	adds	r2, #4

08000b46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b48:	d3fb      	bcc.n	8000b42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b4a:	f001 fbad 	bl	80022a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b4e:	f7ff fb97 	bl	8000280 <main>
  bx lr
 8000b52:	4770      	bx	lr
  ldr r0, =_sdata
 8000b54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b58:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b5c:	08002d24 	.word	0x08002d24
  ldr r2, =_sbss
 8000b60:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b64:	20000508 	.word	0x20000508

08000b68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b68:	e7fe      	b.n	8000b68 <ADC1_2_IRQHandler>
	...

08000b6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b70:	4b08      	ldr	r3, [pc, #32]	@ (8000b94 <HAL_Init+0x28>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a07      	ldr	r2, [pc, #28]	@ (8000b94 <HAL_Init+0x28>)
 8000b76:	f043 0310 	orr.w	r3, r3, #16
 8000b7a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b7c:	2003      	movs	r0, #3
 8000b7e:	f000 f92b 	bl	8000dd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b82:	200f      	movs	r0, #15
 8000b84:	f000 f808 	bl	8000b98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b88:	f7ff ff66 	bl	8000a58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40022000 	.word	0x40022000

08000b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ba0:	4b12      	ldr	r3, [pc, #72]	@ (8000bec <HAL_InitTick+0x54>)
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	4b12      	ldr	r3, [pc, #72]	@ (8000bf0 <HAL_InitTick+0x58>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	4619      	mov	r1, r3
 8000baa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f000 f935 	bl	8000e26 <HAL_SYSTICK_Config>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e00e      	b.n	8000be4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2b0f      	cmp	r3, #15
 8000bca:	d80a      	bhi.n	8000be2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	6879      	ldr	r1, [r7, #4]
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd4:	f000 f90b 	bl	8000dee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bd8:	4a06      	ldr	r2, [pc, #24]	@ (8000bf4 <HAL_InitTick+0x5c>)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bde:	2300      	movs	r3, #0
 8000be0:	e000      	b.n	8000be4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000000 	.word	0x20000000
 8000bf0:	20000008 	.word	0x20000008
 8000bf4:	20000004 	.word	0x20000004

08000bf8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bfc:	4b05      	ldr	r3, [pc, #20]	@ (8000c14 <HAL_IncTick+0x1c>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	461a      	mov	r2, r3
 8000c02:	4b05      	ldr	r3, [pc, #20]	@ (8000c18 <HAL_IncTick+0x20>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4413      	add	r3, r2
 8000c08:	4a03      	ldr	r2, [pc, #12]	@ (8000c18 <HAL_IncTick+0x20>)
 8000c0a:	6013      	str	r3, [r2, #0]
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr
 8000c14:	20000008 	.word	0x20000008
 8000c18:	20000504 	.word	0x20000504

08000c1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c20:	4b02      	ldr	r3, [pc, #8]	@ (8000c2c <HAL_GetTick+0x10>)
 8000c22:	681b      	ldr	r3, [r3, #0]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr
 8000c2c:	20000504 	.word	0x20000504

08000c30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c38:	f7ff fff0 	bl	8000c1c <HAL_GetTick>
 8000c3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c48:	d005      	beq.n	8000c56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c74 <HAL_Delay+0x44>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	461a      	mov	r2, r3
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	4413      	add	r3, r2
 8000c54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c56:	bf00      	nop
 8000c58:	f7ff ffe0 	bl	8000c1c <HAL_GetTick>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	68fa      	ldr	r2, [r7, #12]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d8f7      	bhi.n	8000c58 <HAL_Delay+0x28>
  {
  }
}
 8000c68:	bf00      	nop
 8000c6a:	bf00      	nop
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000008 	.word	0x20000008

08000c78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f003 0307 	and.w	r3, r3, #7
 8000c86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c88:	4b0c      	ldr	r3, [pc, #48]	@ (8000cbc <__NVIC_SetPriorityGrouping+0x44>)
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c8e:	68ba      	ldr	r2, [r7, #8]
 8000c90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c94:	4013      	ands	r3, r2
 8000c96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ca0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ca4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ca8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000caa:	4a04      	ldr	r2, [pc, #16]	@ (8000cbc <__NVIC_SetPriorityGrouping+0x44>)
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	60d3      	str	r3, [r2, #12]
}
 8000cb0:	bf00      	nop
 8000cb2:	3714      	adds	r7, #20
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc4:	4b04      	ldr	r3, [pc, #16]	@ (8000cd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	0a1b      	lsrs	r3, r3, #8
 8000cca:	f003 0307 	and.w	r3, r3, #7
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bc80      	pop	{r7}
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	6039      	str	r1, [r7, #0]
 8000ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	db0a      	blt.n	8000d06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	b2da      	uxtb	r2, r3
 8000cf4:	490c      	ldr	r1, [pc, #48]	@ (8000d28 <__NVIC_SetPriority+0x4c>)
 8000cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfa:	0112      	lsls	r2, r2, #4
 8000cfc:	b2d2      	uxtb	r2, r2
 8000cfe:	440b      	add	r3, r1
 8000d00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d04:	e00a      	b.n	8000d1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	b2da      	uxtb	r2, r3
 8000d0a:	4908      	ldr	r1, [pc, #32]	@ (8000d2c <__NVIC_SetPriority+0x50>)
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	f003 030f 	and.w	r3, r3, #15
 8000d12:	3b04      	subs	r3, #4
 8000d14:	0112      	lsls	r2, r2, #4
 8000d16:	b2d2      	uxtb	r2, r2
 8000d18:	440b      	add	r3, r1
 8000d1a:	761a      	strb	r2, [r3, #24]
}
 8000d1c:	bf00      	nop
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	e000e100 	.word	0xe000e100
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b089      	sub	sp, #36	@ 0x24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	f003 0307 	and.w	r3, r3, #7
 8000d42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	f1c3 0307 	rsb	r3, r3, #7
 8000d4a:	2b04      	cmp	r3, #4
 8000d4c:	bf28      	it	cs
 8000d4e:	2304      	movcs	r3, #4
 8000d50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	3304      	adds	r3, #4
 8000d56:	2b06      	cmp	r3, #6
 8000d58:	d902      	bls.n	8000d60 <NVIC_EncodePriority+0x30>
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	3b03      	subs	r3, #3
 8000d5e:	e000      	b.n	8000d62 <NVIC_EncodePriority+0x32>
 8000d60:	2300      	movs	r3, #0
 8000d62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d64:	f04f 32ff 	mov.w	r2, #4294967295
 8000d68:	69bb      	ldr	r3, [r7, #24]
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	43da      	mvns	r2, r3
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	401a      	ands	r2, r3
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d78:	f04f 31ff 	mov.w	r1, #4294967295
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d82:	43d9      	mvns	r1, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d88:	4313      	orrs	r3, r2
         );
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3724      	adds	r7, #36	@ 0x24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bc80      	pop	{r7}
 8000d92:	4770      	bx	lr

08000d94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000da4:	d301      	bcc.n	8000daa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000da6:	2301      	movs	r3, #1
 8000da8:	e00f      	b.n	8000dca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000daa:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd4 <SysTick_Config+0x40>)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3b01      	subs	r3, #1
 8000db0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000db2:	210f      	movs	r1, #15
 8000db4:	f04f 30ff 	mov.w	r0, #4294967295
 8000db8:	f7ff ff90 	bl	8000cdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dbc:	4b05      	ldr	r3, [pc, #20]	@ (8000dd4 <SysTick_Config+0x40>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dc2:	4b04      	ldr	r3, [pc, #16]	@ (8000dd4 <SysTick_Config+0x40>)
 8000dc4:	2207      	movs	r2, #7
 8000dc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	e000e010 	.word	0xe000e010

08000dd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f7ff ff49 	bl	8000c78 <__NVIC_SetPriorityGrouping>
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b086      	sub	sp, #24
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	4603      	mov	r3, r0
 8000df6:	60b9      	str	r1, [r7, #8]
 8000df8:	607a      	str	r2, [r7, #4]
 8000dfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e00:	f7ff ff5e 	bl	8000cc0 <__NVIC_GetPriorityGrouping>
 8000e04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	68b9      	ldr	r1, [r7, #8]
 8000e0a:	6978      	ldr	r0, [r7, #20]
 8000e0c:	f7ff ff90 	bl	8000d30 <NVIC_EncodePriority>
 8000e10:	4602      	mov	r2, r0
 8000e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e16:	4611      	mov	r1, r2
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff ff5f 	bl	8000cdc <__NVIC_SetPriority>
}
 8000e1e:	bf00      	nop
 8000e20:	3718      	adds	r7, #24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f7ff ffb0 	bl	8000d94 <SysTick_Config>
 8000e34:	4603      	mov	r3, r0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
	...

08000e40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b08b      	sub	sp, #44	@ 0x2c
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e52:	e169      	b.n	8001128 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e54:	2201      	movs	r2, #1
 8000e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	69fa      	ldr	r2, [r7, #28]
 8000e64:	4013      	ands	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	f040 8158 	bne.w	8001122 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	4a9a      	ldr	r2, [pc, #616]	@ (80010e0 <HAL_GPIO_Init+0x2a0>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d05e      	beq.n	8000f3a <HAL_GPIO_Init+0xfa>
 8000e7c:	4a98      	ldr	r2, [pc, #608]	@ (80010e0 <HAL_GPIO_Init+0x2a0>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d875      	bhi.n	8000f6e <HAL_GPIO_Init+0x12e>
 8000e82:	4a98      	ldr	r2, [pc, #608]	@ (80010e4 <HAL_GPIO_Init+0x2a4>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d058      	beq.n	8000f3a <HAL_GPIO_Init+0xfa>
 8000e88:	4a96      	ldr	r2, [pc, #600]	@ (80010e4 <HAL_GPIO_Init+0x2a4>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d86f      	bhi.n	8000f6e <HAL_GPIO_Init+0x12e>
 8000e8e:	4a96      	ldr	r2, [pc, #600]	@ (80010e8 <HAL_GPIO_Init+0x2a8>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d052      	beq.n	8000f3a <HAL_GPIO_Init+0xfa>
 8000e94:	4a94      	ldr	r2, [pc, #592]	@ (80010e8 <HAL_GPIO_Init+0x2a8>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d869      	bhi.n	8000f6e <HAL_GPIO_Init+0x12e>
 8000e9a:	4a94      	ldr	r2, [pc, #592]	@ (80010ec <HAL_GPIO_Init+0x2ac>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d04c      	beq.n	8000f3a <HAL_GPIO_Init+0xfa>
 8000ea0:	4a92      	ldr	r2, [pc, #584]	@ (80010ec <HAL_GPIO_Init+0x2ac>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d863      	bhi.n	8000f6e <HAL_GPIO_Init+0x12e>
 8000ea6:	4a92      	ldr	r2, [pc, #584]	@ (80010f0 <HAL_GPIO_Init+0x2b0>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d046      	beq.n	8000f3a <HAL_GPIO_Init+0xfa>
 8000eac:	4a90      	ldr	r2, [pc, #576]	@ (80010f0 <HAL_GPIO_Init+0x2b0>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d85d      	bhi.n	8000f6e <HAL_GPIO_Init+0x12e>
 8000eb2:	2b12      	cmp	r3, #18
 8000eb4:	d82a      	bhi.n	8000f0c <HAL_GPIO_Init+0xcc>
 8000eb6:	2b12      	cmp	r3, #18
 8000eb8:	d859      	bhi.n	8000f6e <HAL_GPIO_Init+0x12e>
 8000eba:	a201      	add	r2, pc, #4	@ (adr r2, 8000ec0 <HAL_GPIO_Init+0x80>)
 8000ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec0:	08000f3b 	.word	0x08000f3b
 8000ec4:	08000f15 	.word	0x08000f15
 8000ec8:	08000f27 	.word	0x08000f27
 8000ecc:	08000f69 	.word	0x08000f69
 8000ed0:	08000f6f 	.word	0x08000f6f
 8000ed4:	08000f6f 	.word	0x08000f6f
 8000ed8:	08000f6f 	.word	0x08000f6f
 8000edc:	08000f6f 	.word	0x08000f6f
 8000ee0:	08000f6f 	.word	0x08000f6f
 8000ee4:	08000f6f 	.word	0x08000f6f
 8000ee8:	08000f6f 	.word	0x08000f6f
 8000eec:	08000f6f 	.word	0x08000f6f
 8000ef0:	08000f6f 	.word	0x08000f6f
 8000ef4:	08000f6f 	.word	0x08000f6f
 8000ef8:	08000f6f 	.word	0x08000f6f
 8000efc:	08000f6f 	.word	0x08000f6f
 8000f00:	08000f6f 	.word	0x08000f6f
 8000f04:	08000f1d 	.word	0x08000f1d
 8000f08:	08000f31 	.word	0x08000f31
 8000f0c:	4a79      	ldr	r2, [pc, #484]	@ (80010f4 <HAL_GPIO_Init+0x2b4>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d013      	beq.n	8000f3a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f12:	e02c      	b.n	8000f6e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	623b      	str	r3, [r7, #32]
          break;
 8000f1a:	e029      	b.n	8000f70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	3304      	adds	r3, #4
 8000f22:	623b      	str	r3, [r7, #32]
          break;
 8000f24:	e024      	b.n	8000f70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	68db      	ldr	r3, [r3, #12]
 8000f2a:	3308      	adds	r3, #8
 8000f2c:	623b      	str	r3, [r7, #32]
          break;
 8000f2e:	e01f      	b.n	8000f70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	330c      	adds	r3, #12
 8000f36:	623b      	str	r3, [r7, #32]
          break;
 8000f38:	e01a      	b.n	8000f70 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d102      	bne.n	8000f48 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f42:	2304      	movs	r3, #4
 8000f44:	623b      	str	r3, [r7, #32]
          break;
 8000f46:	e013      	b.n	8000f70 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d105      	bne.n	8000f5c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f50:	2308      	movs	r3, #8
 8000f52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	69fa      	ldr	r2, [r7, #28]
 8000f58:	611a      	str	r2, [r3, #16]
          break;
 8000f5a:	e009      	b.n	8000f70 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f5c:	2308      	movs	r3, #8
 8000f5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	69fa      	ldr	r2, [r7, #28]
 8000f64:	615a      	str	r2, [r3, #20]
          break;
 8000f66:	e003      	b.n	8000f70 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	623b      	str	r3, [r7, #32]
          break;
 8000f6c:	e000      	b.n	8000f70 <HAL_GPIO_Init+0x130>
          break;
 8000f6e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	2bff      	cmp	r3, #255	@ 0xff
 8000f74:	d801      	bhi.n	8000f7a <HAL_GPIO_Init+0x13a>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	e001      	b.n	8000f7e <HAL_GPIO_Init+0x13e>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	2bff      	cmp	r3, #255	@ 0xff
 8000f84:	d802      	bhi.n	8000f8c <HAL_GPIO_Init+0x14c>
 8000f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	e002      	b.n	8000f92 <HAL_GPIO_Init+0x152>
 8000f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f8e:	3b08      	subs	r3, #8
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	210f      	movs	r1, #15
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	401a      	ands	r2, r3
 8000fa4:	6a39      	ldr	r1, [r7, #32]
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fac:	431a      	orrs	r2, r3
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	f000 80b1 	beq.w	8001122 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fc0:	4b4d      	ldr	r3, [pc, #308]	@ (80010f8 <HAL_GPIO_Init+0x2b8>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	4a4c      	ldr	r2, [pc, #304]	@ (80010f8 <HAL_GPIO_Init+0x2b8>)
 8000fc6:	f043 0301 	orr.w	r3, r3, #1
 8000fca:	6193      	str	r3, [r2, #24]
 8000fcc:	4b4a      	ldr	r3, [pc, #296]	@ (80010f8 <HAL_GPIO_Init+0x2b8>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	f003 0301 	and.w	r3, r3, #1
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fd8:	4a48      	ldr	r2, [pc, #288]	@ (80010fc <HAL_GPIO_Init+0x2bc>)
 8000fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fdc:	089b      	lsrs	r3, r3, #2
 8000fde:	3302      	adds	r3, #2
 8000fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fe8:	f003 0303 	and.w	r3, r3, #3
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	220f      	movs	r2, #15
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a40      	ldr	r2, [pc, #256]	@ (8001100 <HAL_GPIO_Init+0x2c0>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d013      	beq.n	800102c <HAL_GPIO_Init+0x1ec>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a3f      	ldr	r2, [pc, #252]	@ (8001104 <HAL_GPIO_Init+0x2c4>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d00d      	beq.n	8001028 <HAL_GPIO_Init+0x1e8>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4a3e      	ldr	r2, [pc, #248]	@ (8001108 <HAL_GPIO_Init+0x2c8>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d007      	beq.n	8001024 <HAL_GPIO_Init+0x1e4>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4a3d      	ldr	r2, [pc, #244]	@ (800110c <HAL_GPIO_Init+0x2cc>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d101      	bne.n	8001020 <HAL_GPIO_Init+0x1e0>
 800101c:	2303      	movs	r3, #3
 800101e:	e006      	b.n	800102e <HAL_GPIO_Init+0x1ee>
 8001020:	2304      	movs	r3, #4
 8001022:	e004      	b.n	800102e <HAL_GPIO_Init+0x1ee>
 8001024:	2302      	movs	r3, #2
 8001026:	e002      	b.n	800102e <HAL_GPIO_Init+0x1ee>
 8001028:	2301      	movs	r3, #1
 800102a:	e000      	b.n	800102e <HAL_GPIO_Init+0x1ee>
 800102c:	2300      	movs	r3, #0
 800102e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001030:	f002 0203 	and.w	r2, r2, #3
 8001034:	0092      	lsls	r2, r2, #2
 8001036:	4093      	lsls	r3, r2
 8001038:	68fa      	ldr	r2, [r7, #12]
 800103a:	4313      	orrs	r3, r2
 800103c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800103e:	492f      	ldr	r1, [pc, #188]	@ (80010fc <HAL_GPIO_Init+0x2bc>)
 8001040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001042:	089b      	lsrs	r3, r3, #2
 8001044:	3302      	adds	r3, #2
 8001046:	68fa      	ldr	r2, [r7, #12]
 8001048:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d006      	beq.n	8001066 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001058:	4b2d      	ldr	r3, [pc, #180]	@ (8001110 <HAL_GPIO_Init+0x2d0>)
 800105a:	689a      	ldr	r2, [r3, #8]
 800105c:	492c      	ldr	r1, [pc, #176]	@ (8001110 <HAL_GPIO_Init+0x2d0>)
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	4313      	orrs	r3, r2
 8001062:	608b      	str	r3, [r1, #8]
 8001064:	e006      	b.n	8001074 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001066:	4b2a      	ldr	r3, [pc, #168]	@ (8001110 <HAL_GPIO_Init+0x2d0>)
 8001068:	689a      	ldr	r2, [r3, #8]
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	43db      	mvns	r3, r3
 800106e:	4928      	ldr	r1, [pc, #160]	@ (8001110 <HAL_GPIO_Init+0x2d0>)
 8001070:	4013      	ands	r3, r2
 8001072:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d006      	beq.n	800108e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001080:	4b23      	ldr	r3, [pc, #140]	@ (8001110 <HAL_GPIO_Init+0x2d0>)
 8001082:	68da      	ldr	r2, [r3, #12]
 8001084:	4922      	ldr	r1, [pc, #136]	@ (8001110 <HAL_GPIO_Init+0x2d0>)
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	4313      	orrs	r3, r2
 800108a:	60cb      	str	r3, [r1, #12]
 800108c:	e006      	b.n	800109c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800108e:	4b20      	ldr	r3, [pc, #128]	@ (8001110 <HAL_GPIO_Init+0x2d0>)
 8001090:	68da      	ldr	r2, [r3, #12]
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	43db      	mvns	r3, r3
 8001096:	491e      	ldr	r1, [pc, #120]	@ (8001110 <HAL_GPIO_Init+0x2d0>)
 8001098:	4013      	ands	r3, r2
 800109a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d006      	beq.n	80010b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010a8:	4b19      	ldr	r3, [pc, #100]	@ (8001110 <HAL_GPIO_Init+0x2d0>)
 80010aa:	685a      	ldr	r2, [r3, #4]
 80010ac:	4918      	ldr	r1, [pc, #96]	@ (8001110 <HAL_GPIO_Init+0x2d0>)
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	604b      	str	r3, [r1, #4]
 80010b4:	e006      	b.n	80010c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010b6:	4b16      	ldr	r3, [pc, #88]	@ (8001110 <HAL_GPIO_Init+0x2d0>)
 80010b8:	685a      	ldr	r2, [r3, #4]
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	43db      	mvns	r3, r3
 80010be:	4914      	ldr	r1, [pc, #80]	@ (8001110 <HAL_GPIO_Init+0x2d0>)
 80010c0:	4013      	ands	r3, r2
 80010c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d021      	beq.n	8001114 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001110 <HAL_GPIO_Init+0x2d0>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	490e      	ldr	r1, [pc, #56]	@ (8001110 <HAL_GPIO_Init+0x2d0>)
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	4313      	orrs	r3, r2
 80010da:	600b      	str	r3, [r1, #0]
 80010dc:	e021      	b.n	8001122 <HAL_GPIO_Init+0x2e2>
 80010de:	bf00      	nop
 80010e0:	10320000 	.word	0x10320000
 80010e4:	10310000 	.word	0x10310000
 80010e8:	10220000 	.word	0x10220000
 80010ec:	10210000 	.word	0x10210000
 80010f0:	10120000 	.word	0x10120000
 80010f4:	10110000 	.word	0x10110000
 80010f8:	40021000 	.word	0x40021000
 80010fc:	40010000 	.word	0x40010000
 8001100:	40010800 	.word	0x40010800
 8001104:	40010c00 	.word	0x40010c00
 8001108:	40011000 	.word	0x40011000
 800110c:	40011400 	.word	0x40011400
 8001110:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001114:	4b0b      	ldr	r3, [pc, #44]	@ (8001144 <HAL_GPIO_Init+0x304>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	43db      	mvns	r3, r3
 800111c:	4909      	ldr	r1, [pc, #36]	@ (8001144 <HAL_GPIO_Init+0x304>)
 800111e:	4013      	ands	r3, r2
 8001120:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001124:	3301      	adds	r3, #1
 8001126:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800112e:	fa22 f303 	lsr.w	r3, r2, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	f47f ae8e 	bne.w	8000e54 <HAL_GPIO_Init+0x14>
  }
}
 8001138:	bf00      	nop
 800113a:	bf00      	nop
 800113c:	372c      	adds	r7, #44	@ 0x2c
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr
 8001144:	40010400 	.word	0x40010400

08001148 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d101      	bne.n	800115a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e12b      	b.n	80013b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001160:	b2db      	uxtb	r3, r3
 8001162:	2b00      	cmp	r3, #0
 8001164:	d106      	bne.n	8001174 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2200      	movs	r2, #0
 800116a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff f848 	bl	8000204 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2224      	movs	r2, #36	@ 0x24
 8001178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f022 0201 	bic.w	r2, r2, #1
 800118a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800119a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80011aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80011ac:	f001 f832 	bl	8002214 <HAL_RCC_GetPCLK1Freq>
 80011b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	4a81      	ldr	r2, [pc, #516]	@ (80013bc <HAL_I2C_Init+0x274>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d807      	bhi.n	80011cc <HAL_I2C_Init+0x84>
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4a80      	ldr	r2, [pc, #512]	@ (80013c0 <HAL_I2C_Init+0x278>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	bf94      	ite	ls
 80011c4:	2301      	movls	r3, #1
 80011c6:	2300      	movhi	r3, #0
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	e006      	b.n	80011da <HAL_I2C_Init+0x92>
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	4a7d      	ldr	r2, [pc, #500]	@ (80013c4 <HAL_I2C_Init+0x27c>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	bf94      	ite	ls
 80011d4:	2301      	movls	r3, #1
 80011d6:	2300      	movhi	r3, #0
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e0e7      	b.n	80013b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	4a78      	ldr	r2, [pc, #480]	@ (80013c8 <HAL_I2C_Init+0x280>)
 80011e6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ea:	0c9b      	lsrs	r3, r3, #18
 80011ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	68ba      	ldr	r2, [r7, #8]
 80011fe:	430a      	orrs	r2, r1
 8001200:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	6a1b      	ldr	r3, [r3, #32]
 8001208:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	4a6a      	ldr	r2, [pc, #424]	@ (80013bc <HAL_I2C_Init+0x274>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d802      	bhi.n	800121c <HAL_I2C_Init+0xd4>
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	3301      	adds	r3, #1
 800121a:	e009      	b.n	8001230 <HAL_I2C_Init+0xe8>
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001222:	fb02 f303 	mul.w	r3, r2, r3
 8001226:	4a69      	ldr	r2, [pc, #420]	@ (80013cc <HAL_I2C_Init+0x284>)
 8001228:	fba2 2303 	umull	r2, r3, r2, r3
 800122c:	099b      	lsrs	r3, r3, #6
 800122e:	3301      	adds	r3, #1
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	6812      	ldr	r2, [r2, #0]
 8001234:	430b      	orrs	r3, r1
 8001236:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001242:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	495c      	ldr	r1, [pc, #368]	@ (80013bc <HAL_I2C_Init+0x274>)
 800124c:	428b      	cmp	r3, r1
 800124e:	d819      	bhi.n	8001284 <HAL_I2C_Init+0x13c>
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	1e59      	subs	r1, r3, #1
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	fbb1 f3f3 	udiv	r3, r1, r3
 800125e:	1c59      	adds	r1, r3, #1
 8001260:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001264:	400b      	ands	r3, r1
 8001266:	2b00      	cmp	r3, #0
 8001268:	d00a      	beq.n	8001280 <HAL_I2C_Init+0x138>
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	1e59      	subs	r1, r3, #1
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	fbb1 f3f3 	udiv	r3, r1, r3
 8001278:	3301      	adds	r3, #1
 800127a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800127e:	e051      	b.n	8001324 <HAL_I2C_Init+0x1dc>
 8001280:	2304      	movs	r3, #4
 8001282:	e04f      	b.n	8001324 <HAL_I2C_Init+0x1dc>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d111      	bne.n	80012b0 <HAL_I2C_Init+0x168>
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	1e58      	subs	r0, r3, #1
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6859      	ldr	r1, [r3, #4]
 8001294:	460b      	mov	r3, r1
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	440b      	add	r3, r1
 800129a:	fbb0 f3f3 	udiv	r3, r0, r3
 800129e:	3301      	adds	r3, #1
 80012a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	bf0c      	ite	eq
 80012a8:	2301      	moveq	r3, #1
 80012aa:	2300      	movne	r3, #0
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	e012      	b.n	80012d6 <HAL_I2C_Init+0x18e>
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	1e58      	subs	r0, r3, #1
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6859      	ldr	r1, [r3, #4]
 80012b8:	460b      	mov	r3, r1
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	440b      	add	r3, r1
 80012be:	0099      	lsls	r1, r3, #2
 80012c0:	440b      	add	r3, r1
 80012c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80012c6:	3301      	adds	r3, #1
 80012c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	bf0c      	ite	eq
 80012d0:	2301      	moveq	r3, #1
 80012d2:	2300      	movne	r3, #0
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <HAL_I2C_Init+0x196>
 80012da:	2301      	movs	r3, #1
 80012dc:	e022      	b.n	8001324 <HAL_I2C_Init+0x1dc>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d10e      	bne.n	8001304 <HAL_I2C_Init+0x1bc>
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	1e58      	subs	r0, r3, #1
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6859      	ldr	r1, [r3, #4]
 80012ee:	460b      	mov	r3, r1
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	440b      	add	r3, r1
 80012f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80012f8:	3301      	adds	r3, #1
 80012fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001302:	e00f      	b.n	8001324 <HAL_I2C_Init+0x1dc>
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	1e58      	subs	r0, r3, #1
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6859      	ldr	r1, [r3, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	440b      	add	r3, r1
 8001312:	0099      	lsls	r1, r3, #2
 8001314:	440b      	add	r3, r1
 8001316:	fbb0 f3f3 	udiv	r3, r0, r3
 800131a:	3301      	adds	r3, #1
 800131c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001320:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001324:	6879      	ldr	r1, [r7, #4]
 8001326:	6809      	ldr	r1, [r1, #0]
 8001328:	4313      	orrs	r3, r2
 800132a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	69da      	ldr	r2, [r3, #28]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6a1b      	ldr	r3, [r3, #32]
 800133e:	431a      	orrs	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	430a      	orrs	r2, r1
 8001346:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001352:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	6911      	ldr	r1, [r2, #16]
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	68d2      	ldr	r2, [r2, #12]
 800135e:	4311      	orrs	r1, r2
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	6812      	ldr	r2, [r2, #0]
 8001364:	430b      	orrs	r3, r1
 8001366:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	695a      	ldr	r2, [r3, #20]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	699b      	ldr	r3, [r3, #24]
 800137a:	431a      	orrs	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	430a      	orrs	r2, r1
 8001382:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f042 0201 	orr.w	r2, r2, #1
 8001392:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2220      	movs	r2, #32
 800139e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	000186a0 	.word	0x000186a0
 80013c0:	001e847f 	.word	0x001e847f
 80013c4:	003d08ff 	.word	0x003d08ff
 80013c8:	431bde83 	.word	0x431bde83
 80013cc:	10624dd3 	.word	0x10624dd3

080013d0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b088      	sub	sp, #32
 80013d4:	af02      	add	r7, sp, #8
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	607a      	str	r2, [r7, #4]
 80013da:	461a      	mov	r2, r3
 80013dc:	460b      	mov	r3, r1
 80013de:	817b      	strh	r3, [r7, #10]
 80013e0:	4613      	mov	r3, r2
 80013e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80013e4:	f7ff fc1a 	bl	8000c1c <HAL_GetTick>
 80013e8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	2b20      	cmp	r3, #32
 80013f4:	f040 80e0 	bne.w	80015b8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	9300      	str	r3, [sp, #0]
 80013fc:	2319      	movs	r3, #25
 80013fe:	2201      	movs	r2, #1
 8001400:	4970      	ldr	r1, [pc, #448]	@ (80015c4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001402:	68f8      	ldr	r0, [r7, #12]
 8001404:	f000 f964 	bl	80016d0 <I2C_WaitOnFlagUntilTimeout>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800140e:	2302      	movs	r3, #2
 8001410:	e0d3      	b.n	80015ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001418:	2b01      	cmp	r3, #1
 800141a:	d101      	bne.n	8001420 <HAL_I2C_Master_Transmit+0x50>
 800141c:	2302      	movs	r3, #2
 800141e:	e0cc      	b.n	80015ba <HAL_I2C_Master_Transmit+0x1ea>
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	2201      	movs	r2, #1
 8001424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	2b01      	cmp	r3, #1
 8001434:	d007      	beq.n	8001446 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f042 0201 	orr.w	r2, r2, #1
 8001444:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001454:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2221      	movs	r2, #33	@ 0x21
 800145a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2210      	movs	r2, #16
 8001462:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2200      	movs	r2, #0
 800146a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	893a      	ldrh	r2, [r7, #8]
 8001476:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800147c:	b29a      	uxth	r2, r3
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	4a50      	ldr	r2, [pc, #320]	@ (80015c8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001486:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001488:	8979      	ldrh	r1, [r7, #10]
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	6a3a      	ldr	r2, [r7, #32]
 800148e:	68f8      	ldr	r0, [r7, #12]
 8001490:	f000 f89c 	bl	80015cc <I2C_MasterRequestWrite>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e08d      	b.n	80015ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	695b      	ldr	r3, [r3, #20]
 80014a8:	613b      	str	r3, [r7, #16]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	613b      	str	r3, [r7, #16]
 80014b2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80014b4:	e066      	b.n	8001584 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014b6:	697a      	ldr	r2, [r7, #20]
 80014b8:	6a39      	ldr	r1, [r7, #32]
 80014ba:	68f8      	ldr	r0, [r7, #12]
 80014bc:	f000 fa22 	bl	8001904 <I2C_WaitOnTXEFlagUntilTimeout>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d00d      	beq.n	80014e2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ca:	2b04      	cmp	r3, #4
 80014cc:	d107      	bne.n	80014de <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80014dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e06b      	b.n	80015ba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e6:	781a      	ldrb	r2, [r3, #0]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014f2:	1c5a      	adds	r2, r3, #1
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	3b01      	subs	r3, #1
 8001500:	b29a      	uxth	r2, r3
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800150a:	3b01      	subs	r3, #1
 800150c:	b29a      	uxth	r2, r3
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	695b      	ldr	r3, [r3, #20]
 8001518:	f003 0304 	and.w	r3, r3, #4
 800151c:	2b04      	cmp	r3, #4
 800151e:	d11b      	bne.n	8001558 <HAL_I2C_Master_Transmit+0x188>
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001524:	2b00      	cmp	r3, #0
 8001526:	d017      	beq.n	8001558 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800152c:	781a      	ldrb	r2, [r3, #0]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001538:	1c5a      	adds	r2, r3, #1
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001542:	b29b      	uxth	r3, r3
 8001544:	3b01      	subs	r3, #1
 8001546:	b29a      	uxth	r2, r3
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001550:	3b01      	subs	r3, #1
 8001552:	b29a      	uxth	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001558:	697a      	ldr	r2, [r7, #20]
 800155a:	6a39      	ldr	r1, [r7, #32]
 800155c:	68f8      	ldr	r0, [r7, #12]
 800155e:	f000 fa19 	bl	8001994 <I2C_WaitOnBTFFlagUntilTimeout>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d00d      	beq.n	8001584 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156c:	2b04      	cmp	r3, #4
 800156e:	d107      	bne.n	8001580 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800157e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e01a      	b.n	80015ba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001588:	2b00      	cmp	r3, #0
 800158a:	d194      	bne.n	80014b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800159a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2220      	movs	r2, #32
 80015a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2200      	movs	r2, #0
 80015a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80015b4:	2300      	movs	r3, #0
 80015b6:	e000      	b.n	80015ba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80015b8:	2302      	movs	r3, #2
  }
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3718      	adds	r7, #24
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	00100002 	.word	0x00100002
 80015c8:	ffff0000 	.word	0xffff0000

080015cc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b088      	sub	sp, #32
 80015d0:	af02      	add	r7, sp, #8
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	607a      	str	r2, [r7, #4]
 80015d6:	603b      	str	r3, [r7, #0]
 80015d8:	460b      	mov	r3, r1
 80015da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015e0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	2b08      	cmp	r3, #8
 80015e6:	d006      	beq.n	80015f6 <I2C_MasterRequestWrite+0x2a>
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d003      	beq.n	80015f6 <I2C_MasterRequestWrite+0x2a>
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80015f4:	d108      	bne.n	8001608 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	e00b      	b.n	8001620 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160c:	2b12      	cmp	r3, #18
 800160e:	d107      	bne.n	8001620 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800161e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800162c:	68f8      	ldr	r0, [r7, #12]
 800162e:	f000 f84f 	bl	80016d0 <I2C_WaitOnFlagUntilTimeout>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d00d      	beq.n	8001654 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001642:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001646:	d103      	bne.n	8001650 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800164e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e035      	b.n	80016c0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	691b      	ldr	r3, [r3, #16]
 8001658:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800165c:	d108      	bne.n	8001670 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800165e:	897b      	ldrh	r3, [r7, #10]
 8001660:	b2db      	uxtb	r3, r3
 8001662:	461a      	mov	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800166c:	611a      	str	r2, [r3, #16]
 800166e:	e01b      	b.n	80016a8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001670:	897b      	ldrh	r3, [r7, #10]
 8001672:	11db      	asrs	r3, r3, #7
 8001674:	b2db      	uxtb	r3, r3
 8001676:	f003 0306 	and.w	r3, r3, #6
 800167a:	b2db      	uxtb	r3, r3
 800167c:	f063 030f 	orn	r3, r3, #15
 8001680:	b2da      	uxtb	r2, r3
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	490e      	ldr	r1, [pc, #56]	@ (80016c8 <I2C_MasterRequestWrite+0xfc>)
 800168e:	68f8      	ldr	r0, [r7, #12]
 8001690:	f000 f898 	bl	80017c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e010      	b.n	80016c0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800169e:	897b      	ldrh	r3, [r7, #10]
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	4907      	ldr	r1, [pc, #28]	@ (80016cc <I2C_MasterRequestWrite+0x100>)
 80016ae:	68f8      	ldr	r0, [r7, #12]
 80016b0:	f000 f888 	bl	80017c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e000      	b.n	80016c0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80016be:	2300      	movs	r3, #0
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	00010008 	.word	0x00010008
 80016cc:	00010002 	.word	0x00010002

080016d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	603b      	str	r3, [r7, #0]
 80016dc:	4613      	mov	r3, r2
 80016de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016e0:	e048      	b.n	8001774 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016e8:	d044      	beq.n	8001774 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016ea:	f7ff fa97 	bl	8000c1c <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d302      	bcc.n	8001700 <I2C_WaitOnFlagUntilTimeout+0x30>
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d139      	bne.n	8001774 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	0c1b      	lsrs	r3, r3, #16
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b01      	cmp	r3, #1
 8001708:	d10d      	bne.n	8001726 <I2C_WaitOnFlagUntilTimeout+0x56>
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	695b      	ldr	r3, [r3, #20]
 8001710:	43da      	mvns	r2, r3
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	4013      	ands	r3, r2
 8001716:	b29b      	uxth	r3, r3
 8001718:	2b00      	cmp	r3, #0
 800171a:	bf0c      	ite	eq
 800171c:	2301      	moveq	r3, #1
 800171e:	2300      	movne	r3, #0
 8001720:	b2db      	uxtb	r3, r3
 8001722:	461a      	mov	r2, r3
 8001724:	e00c      	b.n	8001740 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	43da      	mvns	r2, r3
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	4013      	ands	r3, r2
 8001732:	b29b      	uxth	r3, r3
 8001734:	2b00      	cmp	r3, #0
 8001736:	bf0c      	ite	eq
 8001738:	2301      	moveq	r3, #1
 800173a:	2300      	movne	r3, #0
 800173c:	b2db      	uxtb	r3, r3
 800173e:	461a      	mov	r2, r3
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	429a      	cmp	r2, r3
 8001744:	d116      	bne.n	8001774 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2200      	movs	r2, #0
 800174a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2220      	movs	r2, #32
 8001750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2200      	movs	r2, #0
 8001758:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001760:	f043 0220 	orr.w	r2, r3, #32
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2200      	movs	r2, #0
 800176c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e023      	b.n	80017bc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	0c1b      	lsrs	r3, r3, #16
 8001778:	b2db      	uxtb	r3, r3
 800177a:	2b01      	cmp	r3, #1
 800177c:	d10d      	bne.n	800179a <I2C_WaitOnFlagUntilTimeout+0xca>
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	695b      	ldr	r3, [r3, #20]
 8001784:	43da      	mvns	r2, r3
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	4013      	ands	r3, r2
 800178a:	b29b      	uxth	r3, r3
 800178c:	2b00      	cmp	r3, #0
 800178e:	bf0c      	ite	eq
 8001790:	2301      	moveq	r3, #1
 8001792:	2300      	movne	r3, #0
 8001794:	b2db      	uxtb	r3, r3
 8001796:	461a      	mov	r2, r3
 8001798:	e00c      	b.n	80017b4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	43da      	mvns	r2, r3
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	4013      	ands	r3, r2
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	bf0c      	ite	eq
 80017ac:	2301      	moveq	r3, #1
 80017ae:	2300      	movne	r3, #0
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	461a      	mov	r2, r3
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d093      	beq.n	80016e2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
 80017d0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80017d2:	e071      	b.n	80018b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017e2:	d123      	bne.n	800182c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017f2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80017fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2200      	movs	r2, #0
 8001802:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2220      	movs	r2, #32
 8001808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2200      	movs	r2, #0
 8001810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001818:	f043 0204 	orr.w	r2, r3, #4
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2200      	movs	r2, #0
 8001824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e067      	b.n	80018fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001832:	d041      	beq.n	80018b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001834:	f7ff f9f2 	bl	8000c1c <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	429a      	cmp	r2, r3
 8001842:	d302      	bcc.n	800184a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d136      	bne.n	80018b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	0c1b      	lsrs	r3, r3, #16
 800184e:	b2db      	uxtb	r3, r3
 8001850:	2b01      	cmp	r3, #1
 8001852:	d10c      	bne.n	800186e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	43da      	mvns	r2, r3
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	4013      	ands	r3, r2
 8001860:	b29b      	uxth	r3, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	bf14      	ite	ne
 8001866:	2301      	movne	r3, #1
 8001868:	2300      	moveq	r3, #0
 800186a:	b2db      	uxtb	r3, r3
 800186c:	e00b      	b.n	8001886 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	43da      	mvns	r2, r3
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	4013      	ands	r3, r2
 800187a:	b29b      	uxth	r3, r3
 800187c:	2b00      	cmp	r3, #0
 800187e:	bf14      	ite	ne
 8001880:	2301      	movne	r3, #1
 8001882:	2300      	moveq	r3, #0
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	d016      	beq.n	80018b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2200      	movs	r2, #0
 800188e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2220      	movs	r2, #32
 8001894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2200      	movs	r2, #0
 800189c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a4:	f043 0220 	orr.w	r2, r3, #32
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e021      	b.n	80018fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	0c1b      	lsrs	r3, r3, #16
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d10c      	bne.n	80018dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	695b      	ldr	r3, [r3, #20]
 80018c8:	43da      	mvns	r2, r3
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	4013      	ands	r3, r2
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	bf14      	ite	ne
 80018d4:	2301      	movne	r3, #1
 80018d6:	2300      	moveq	r3, #0
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	e00b      	b.n	80018f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	43da      	mvns	r2, r3
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	4013      	ands	r3, r2
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	bf14      	ite	ne
 80018ee:	2301      	movne	r3, #1
 80018f0:	2300      	moveq	r3, #0
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	f47f af6d 	bne.w	80017d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80018fa:	2300      	movs	r3, #0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001910:	e034      	b.n	800197c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001912:	68f8      	ldr	r0, [r7, #12]
 8001914:	f000 f886 	bl	8001a24 <I2C_IsAcknowledgeFailed>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e034      	b.n	800198c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001928:	d028      	beq.n	800197c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800192a:	f7ff f977 	bl	8000c1c <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	68ba      	ldr	r2, [r7, #8]
 8001936:	429a      	cmp	r2, r3
 8001938:	d302      	bcc.n	8001940 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d11d      	bne.n	800197c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	695b      	ldr	r3, [r3, #20]
 8001946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800194a:	2b80      	cmp	r3, #128	@ 0x80
 800194c:	d016      	beq.n	800197c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2200      	movs	r2, #0
 8001952:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2220      	movs	r2, #32
 8001958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2200      	movs	r2, #0
 8001960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001968:	f043 0220 	orr.w	r2, r3, #32
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2200      	movs	r2, #0
 8001974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e007      	b.n	800198c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001986:	2b80      	cmp	r3, #128	@ 0x80
 8001988:	d1c3      	bne.n	8001912 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	3710      	adds	r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80019a0:	e034      	b.n	8001a0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80019a2:	68f8      	ldr	r0, [r7, #12]
 80019a4:	f000 f83e 	bl	8001a24 <I2C_IsAcknowledgeFailed>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e034      	b.n	8001a1c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b8:	d028      	beq.n	8001a0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019ba:	f7ff f92f 	bl	8000c1c <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	68ba      	ldr	r2, [r7, #8]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d302      	bcc.n	80019d0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d11d      	bne.n	8001a0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	f003 0304 	and.w	r3, r3, #4
 80019da:	2b04      	cmp	r3, #4
 80019dc:	d016      	beq.n	8001a0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2200      	movs	r2, #0
 80019e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2220      	movs	r2, #32
 80019e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f8:	f043 0220 	orr.w	r2, r3, #32
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e007      	b.n	8001a1c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	f003 0304 	and.w	r3, r3, #4
 8001a16:	2b04      	cmp	r3, #4
 8001a18:	d1c3      	bne.n	80019a2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a3a:	d11b      	bne.n	8001a74 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001a44:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2220      	movs	r2, #32
 8001a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a60:	f043 0204 	orr.w	r2, r3, #4
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e000      	b.n	8001a76 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr

08001a80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e272      	b.n	8001f78 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f000 8087 	beq.w	8001bae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001aa0:	4b92      	ldr	r3, [pc, #584]	@ (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 030c 	and.w	r3, r3, #12
 8001aa8:	2b04      	cmp	r3, #4
 8001aaa:	d00c      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001aac:	4b8f      	ldr	r3, [pc, #572]	@ (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 030c 	and.w	r3, r3, #12
 8001ab4:	2b08      	cmp	r3, #8
 8001ab6:	d112      	bne.n	8001ade <HAL_RCC_OscConfig+0x5e>
 8001ab8:	4b8c      	ldr	r3, [pc, #560]	@ (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ac0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ac4:	d10b      	bne.n	8001ade <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac6:	4b89      	ldr	r3, [pc, #548]	@ (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d06c      	beq.n	8001bac <HAL_RCC_OscConfig+0x12c>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d168      	bne.n	8001bac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e24c      	b.n	8001f78 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ae6:	d106      	bne.n	8001af6 <HAL_RCC_OscConfig+0x76>
 8001ae8:	4b80      	ldr	r3, [pc, #512]	@ (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a7f      	ldr	r2, [pc, #508]	@ (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001aee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001af2:	6013      	str	r3, [r2, #0]
 8001af4:	e02e      	b.n	8001b54 <HAL_RCC_OscConfig+0xd4>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d10c      	bne.n	8001b18 <HAL_RCC_OscConfig+0x98>
 8001afe:	4b7b      	ldr	r3, [pc, #492]	@ (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a7a      	ldr	r2, [pc, #488]	@ (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001b04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b08:	6013      	str	r3, [r2, #0]
 8001b0a:	4b78      	ldr	r3, [pc, #480]	@ (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a77      	ldr	r2, [pc, #476]	@ (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001b10:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b14:	6013      	str	r3, [r2, #0]
 8001b16:	e01d      	b.n	8001b54 <HAL_RCC_OscConfig+0xd4>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b20:	d10c      	bne.n	8001b3c <HAL_RCC_OscConfig+0xbc>
 8001b22:	4b72      	ldr	r3, [pc, #456]	@ (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a71      	ldr	r2, [pc, #452]	@ (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001b28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b2c:	6013      	str	r3, [r2, #0]
 8001b2e:	4b6f      	ldr	r3, [pc, #444]	@ (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a6e      	ldr	r2, [pc, #440]	@ (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001b34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b38:	6013      	str	r3, [r2, #0]
 8001b3a:	e00b      	b.n	8001b54 <HAL_RCC_OscConfig+0xd4>
 8001b3c:	4b6b      	ldr	r3, [pc, #428]	@ (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a6a      	ldr	r2, [pc, #424]	@ (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001b42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b46:	6013      	str	r3, [r2, #0]
 8001b48:	4b68      	ldr	r3, [pc, #416]	@ (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a67      	ldr	r2, [pc, #412]	@ (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001b4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d013      	beq.n	8001b84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5c:	f7ff f85e 	bl	8000c1c <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b64:	f7ff f85a 	bl	8000c1c <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b64      	cmp	r3, #100	@ 0x64
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e200      	b.n	8001f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b76:	4b5d      	ldr	r3, [pc, #372]	@ (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d0f0      	beq.n	8001b64 <HAL_RCC_OscConfig+0xe4>
 8001b82:	e014      	b.n	8001bae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b84:	f7ff f84a 	bl	8000c1c <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b8c:	f7ff f846 	bl	8000c1c <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b64      	cmp	r3, #100	@ 0x64
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e1ec      	b.n	8001f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b9e:	4b53      	ldr	r3, [pc, #332]	@ (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1f0      	bne.n	8001b8c <HAL_RCC_OscConfig+0x10c>
 8001baa:	e000      	b.n	8001bae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d063      	beq.n	8001c82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bba:	4b4c      	ldr	r3, [pc, #304]	@ (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f003 030c 	and.w	r3, r3, #12
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d00b      	beq.n	8001bde <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bc6:	4b49      	ldr	r3, [pc, #292]	@ (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f003 030c 	and.w	r3, r3, #12
 8001bce:	2b08      	cmp	r3, #8
 8001bd0:	d11c      	bne.n	8001c0c <HAL_RCC_OscConfig+0x18c>
 8001bd2:	4b46      	ldr	r3, [pc, #280]	@ (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d116      	bne.n	8001c0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bde:	4b43      	ldr	r3, [pc, #268]	@ (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d005      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x176>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d001      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e1c0      	b.n	8001f78 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf6:	4b3d      	ldr	r3, [pc, #244]	@ (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	4939      	ldr	r1, [pc, #228]	@ (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c0a:	e03a      	b.n	8001c82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d020      	beq.n	8001c56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c14:	4b36      	ldr	r3, [pc, #216]	@ (8001cf0 <HAL_RCC_OscConfig+0x270>)
 8001c16:	2201      	movs	r2, #1
 8001c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1a:	f7fe ffff 	bl	8000c1c <HAL_GetTick>
 8001c1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c20:	e008      	b.n	8001c34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c22:	f7fe fffb 	bl	8000c1c <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e1a1      	b.n	8001f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c34:	4b2d      	ldr	r3, [pc, #180]	@ (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d0f0      	beq.n	8001c22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c40:	4b2a      	ldr	r3, [pc, #168]	@ (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	695b      	ldr	r3, [r3, #20]
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	4927      	ldr	r1, [pc, #156]	@ (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	600b      	str	r3, [r1, #0]
 8001c54:	e015      	b.n	8001c82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c56:	4b26      	ldr	r3, [pc, #152]	@ (8001cf0 <HAL_RCC_OscConfig+0x270>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5c:	f7fe ffde 	bl	8000c1c <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c64:	f7fe ffda 	bl	8000c1c <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e180      	b.n	8001f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c76:	4b1d      	ldr	r3, [pc, #116]	@ (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1f0      	bne.n	8001c64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0308 	and.w	r3, r3, #8
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d03a      	beq.n	8001d04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d019      	beq.n	8001cca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c96:	4b17      	ldr	r3, [pc, #92]	@ (8001cf4 <HAL_RCC_OscConfig+0x274>)
 8001c98:	2201      	movs	r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c9c:	f7fe ffbe 	bl	8000c1c <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ca4:	f7fe ffba 	bl	8000c1c <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e160      	b.n	8001f78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0f0      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cc2:	2001      	movs	r0, #1
 8001cc4:	f000 faba 	bl	800223c <RCC_Delay>
 8001cc8:	e01c      	b.n	8001d04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cca:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf4 <HAL_RCC_OscConfig+0x274>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd0:	f7fe ffa4 	bl	8000c1c <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cd6:	e00f      	b.n	8001cf8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cd8:	f7fe ffa0 	bl	8000c1c <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d908      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e146      	b.n	8001f78 <HAL_RCC_OscConfig+0x4f8>
 8001cea:	bf00      	nop
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	42420000 	.word	0x42420000
 8001cf4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cf8:	4b92      	ldr	r3, [pc, #584]	@ (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1e9      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0304 	and.w	r3, r3, #4
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f000 80a6 	beq.w	8001e5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d12:	2300      	movs	r3, #0
 8001d14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d16:	4b8b      	ldr	r3, [pc, #556]	@ (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d10d      	bne.n	8001d3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d22:	4b88      	ldr	r3, [pc, #544]	@ (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	4a87      	ldr	r2, [pc, #540]	@ (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001d28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d2c:	61d3      	str	r3, [r2, #28]
 8001d2e:	4b85      	ldr	r3, [pc, #532]	@ (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d36:	60bb      	str	r3, [r7, #8]
 8001d38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d3e:	4b82      	ldr	r3, [pc, #520]	@ (8001f48 <HAL_RCC_OscConfig+0x4c8>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d118      	bne.n	8001d7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d4a:	4b7f      	ldr	r3, [pc, #508]	@ (8001f48 <HAL_RCC_OscConfig+0x4c8>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a7e      	ldr	r2, [pc, #504]	@ (8001f48 <HAL_RCC_OscConfig+0x4c8>)
 8001d50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d56:	f7fe ff61 	bl	8000c1c <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d5c:	e008      	b.n	8001d70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d5e:	f7fe ff5d 	bl	8000c1c <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b64      	cmp	r3, #100	@ 0x64
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e103      	b.n	8001f78 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d70:	4b75      	ldr	r3, [pc, #468]	@ (8001f48 <HAL_RCC_OscConfig+0x4c8>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d0f0      	beq.n	8001d5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d106      	bne.n	8001d92 <HAL_RCC_OscConfig+0x312>
 8001d84:	4b6f      	ldr	r3, [pc, #444]	@ (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	4a6e      	ldr	r2, [pc, #440]	@ (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001d8a:	f043 0301 	orr.w	r3, r3, #1
 8001d8e:	6213      	str	r3, [r2, #32]
 8001d90:	e02d      	b.n	8001dee <HAL_RCC_OscConfig+0x36e>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d10c      	bne.n	8001db4 <HAL_RCC_OscConfig+0x334>
 8001d9a:	4b6a      	ldr	r3, [pc, #424]	@ (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001d9c:	6a1b      	ldr	r3, [r3, #32]
 8001d9e:	4a69      	ldr	r2, [pc, #420]	@ (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001da0:	f023 0301 	bic.w	r3, r3, #1
 8001da4:	6213      	str	r3, [r2, #32]
 8001da6:	4b67      	ldr	r3, [pc, #412]	@ (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001da8:	6a1b      	ldr	r3, [r3, #32]
 8001daa:	4a66      	ldr	r2, [pc, #408]	@ (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001dac:	f023 0304 	bic.w	r3, r3, #4
 8001db0:	6213      	str	r3, [r2, #32]
 8001db2:	e01c      	b.n	8001dee <HAL_RCC_OscConfig+0x36e>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	2b05      	cmp	r3, #5
 8001dba:	d10c      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x356>
 8001dbc:	4b61      	ldr	r3, [pc, #388]	@ (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001dbe:	6a1b      	ldr	r3, [r3, #32]
 8001dc0:	4a60      	ldr	r2, [pc, #384]	@ (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001dc2:	f043 0304 	orr.w	r3, r3, #4
 8001dc6:	6213      	str	r3, [r2, #32]
 8001dc8:	4b5e      	ldr	r3, [pc, #376]	@ (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001dca:	6a1b      	ldr	r3, [r3, #32]
 8001dcc:	4a5d      	ldr	r2, [pc, #372]	@ (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001dce:	f043 0301 	orr.w	r3, r3, #1
 8001dd2:	6213      	str	r3, [r2, #32]
 8001dd4:	e00b      	b.n	8001dee <HAL_RCC_OscConfig+0x36e>
 8001dd6:	4b5b      	ldr	r3, [pc, #364]	@ (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001dd8:	6a1b      	ldr	r3, [r3, #32]
 8001dda:	4a5a      	ldr	r2, [pc, #360]	@ (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001ddc:	f023 0301 	bic.w	r3, r3, #1
 8001de0:	6213      	str	r3, [r2, #32]
 8001de2:	4b58      	ldr	r3, [pc, #352]	@ (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001de4:	6a1b      	ldr	r3, [r3, #32]
 8001de6:	4a57      	ldr	r2, [pc, #348]	@ (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001de8:	f023 0304 	bic.w	r3, r3, #4
 8001dec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d015      	beq.n	8001e22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df6:	f7fe ff11 	bl	8000c1c <HAL_GetTick>
 8001dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dfc:	e00a      	b.n	8001e14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dfe:	f7fe ff0d 	bl	8000c1c <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e0b1      	b.n	8001f78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e14:	4b4b      	ldr	r3, [pc, #300]	@ (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001e16:	6a1b      	ldr	r3, [r3, #32]
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0ee      	beq.n	8001dfe <HAL_RCC_OscConfig+0x37e>
 8001e20:	e014      	b.n	8001e4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e22:	f7fe fefb 	bl	8000c1c <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e28:	e00a      	b.n	8001e40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e2a:	f7fe fef7 	bl	8000c1c <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e09b      	b.n	8001f78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e40:	4b40      	ldr	r3, [pc, #256]	@ (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1ee      	bne.n	8001e2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e4c:	7dfb      	ldrb	r3, [r7, #23]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d105      	bne.n	8001e5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e52:	4b3c      	ldr	r3, [pc, #240]	@ (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	4a3b      	ldr	r2, [pc, #236]	@ (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001e58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 8087 	beq.w	8001f76 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e68:	4b36      	ldr	r3, [pc, #216]	@ (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f003 030c 	and.w	r3, r3, #12
 8001e70:	2b08      	cmp	r3, #8
 8001e72:	d061      	beq.n	8001f38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	69db      	ldr	r3, [r3, #28]
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d146      	bne.n	8001f0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e7c:	4b33      	ldr	r3, [pc, #204]	@ (8001f4c <HAL_RCC_OscConfig+0x4cc>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e82:	f7fe fecb 	bl	8000c1c <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e88:	e008      	b.n	8001e9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e8a:	f7fe fec7 	bl	8000c1c <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e06d      	b.n	8001f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e9c:	4b29      	ldr	r3, [pc, #164]	@ (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1f0      	bne.n	8001e8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001eb0:	d108      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001eb2:	4b24      	ldr	r3, [pc, #144]	@ (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	4921      	ldr	r1, [pc, #132]	@ (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ec4:	4b1f      	ldr	r3, [pc, #124]	@ (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a19      	ldr	r1, [r3, #32]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed4:	430b      	orrs	r3, r1
 8001ed6:	491b      	ldr	r1, [pc, #108]	@ (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001edc:	4b1b      	ldr	r3, [pc, #108]	@ (8001f4c <HAL_RCC_OscConfig+0x4cc>)
 8001ede:	2201      	movs	r2, #1
 8001ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee2:	f7fe fe9b 	bl	8000c1c <HAL_GetTick>
 8001ee6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ee8:	e008      	b.n	8001efc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eea:	f7fe fe97 	bl	8000c1c <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e03d      	b.n	8001f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001efc:	4b11      	ldr	r3, [pc, #68]	@ (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d0f0      	beq.n	8001eea <HAL_RCC_OscConfig+0x46a>
 8001f08:	e035      	b.n	8001f76 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f0a:	4b10      	ldr	r3, [pc, #64]	@ (8001f4c <HAL_RCC_OscConfig+0x4cc>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f10:	f7fe fe84 	bl	8000c1c <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f18:	f7fe fe80 	bl	8000c1c <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e026      	b.n	8001f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f2a:	4b06      	ldr	r3, [pc, #24]	@ (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f0      	bne.n	8001f18 <HAL_RCC_OscConfig+0x498>
 8001f36:	e01e      	b.n	8001f76 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	69db      	ldr	r3, [r3, #28]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d107      	bne.n	8001f50 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e019      	b.n	8001f78 <HAL_RCC_OscConfig+0x4f8>
 8001f44:	40021000 	.word	0x40021000
 8001f48:	40007000 	.word	0x40007000
 8001f4c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f50:	4b0b      	ldr	r3, [pc, #44]	@ (8001f80 <HAL_RCC_OscConfig+0x500>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d106      	bne.n	8001f72 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d001      	beq.n	8001f76 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e000      	b.n	8001f78 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3718      	adds	r7, #24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40021000 	.word	0x40021000

08001f84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e0d0      	b.n	800213a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f98:	4b6a      	ldr	r3, [pc, #424]	@ (8002144 <HAL_RCC_ClockConfig+0x1c0>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d910      	bls.n	8001fc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa6:	4b67      	ldr	r3, [pc, #412]	@ (8002144 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f023 0207 	bic.w	r2, r3, #7
 8001fae:	4965      	ldr	r1, [pc, #404]	@ (8002144 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb6:	4b63      	ldr	r3, [pc, #396]	@ (8002144 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d001      	beq.n	8001fc8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e0b8      	b.n	800213a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d020      	beq.n	8002016 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d005      	beq.n	8001fec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fe0:	4b59      	ldr	r3, [pc, #356]	@ (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	4a58      	ldr	r2, [pc, #352]	@ (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001fea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0308 	and.w	r3, r3, #8
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d005      	beq.n	8002004 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ff8:	4b53      	ldr	r3, [pc, #332]	@ (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	4a52      	ldr	r2, [pc, #328]	@ (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002002:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002004:	4b50      	ldr	r3, [pc, #320]	@ (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	494d      	ldr	r1, [pc, #308]	@ (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 8002012:	4313      	orrs	r3, r2
 8002014:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b00      	cmp	r3, #0
 8002020:	d040      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d107      	bne.n	800203a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800202a:	4b47      	ldr	r3, [pc, #284]	@ (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d115      	bne.n	8002062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e07f      	b.n	800213a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2b02      	cmp	r3, #2
 8002040:	d107      	bne.n	8002052 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002042:	4b41      	ldr	r3, [pc, #260]	@ (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d109      	bne.n	8002062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e073      	b.n	800213a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002052:	4b3d      	ldr	r3, [pc, #244]	@ (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e06b      	b.n	800213a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002062:	4b39      	ldr	r3, [pc, #228]	@ (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f023 0203 	bic.w	r2, r3, #3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	4936      	ldr	r1, [pc, #216]	@ (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 8002070:	4313      	orrs	r3, r2
 8002072:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002074:	f7fe fdd2 	bl	8000c1c <HAL_GetTick>
 8002078:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800207a:	e00a      	b.n	8002092 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800207c:	f7fe fdce 	bl	8000c1c <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	f241 3288 	movw	r2, #5000	@ 0x1388
 800208a:	4293      	cmp	r3, r2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e053      	b.n	800213a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002092:	4b2d      	ldr	r3, [pc, #180]	@ (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f003 020c 	and.w	r2, r3, #12
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d1eb      	bne.n	800207c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020a4:	4b27      	ldr	r3, [pc, #156]	@ (8002144 <HAL_RCC_ClockConfig+0x1c0>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0307 	and.w	r3, r3, #7
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d210      	bcs.n	80020d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020b2:	4b24      	ldr	r3, [pc, #144]	@ (8002144 <HAL_RCC_ClockConfig+0x1c0>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f023 0207 	bic.w	r2, r3, #7
 80020ba:	4922      	ldr	r1, [pc, #136]	@ (8002144 <HAL_RCC_ClockConfig+0x1c0>)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	4313      	orrs	r3, r2
 80020c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020c2:	4b20      	ldr	r3, [pc, #128]	@ (8002144 <HAL_RCC_ClockConfig+0x1c0>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d001      	beq.n	80020d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e032      	b.n	800213a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d008      	beq.n	80020f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020e0:	4b19      	ldr	r3, [pc, #100]	@ (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	4916      	ldr	r1, [pc, #88]	@ (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0308 	and.w	r3, r3, #8
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d009      	beq.n	8002112 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020fe:	4b12      	ldr	r3, [pc, #72]	@ (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	490e      	ldr	r1, [pc, #56]	@ (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 800210e:	4313      	orrs	r3, r2
 8002110:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002112:	f000 f821 	bl	8002158 <HAL_RCC_GetSysClockFreq>
 8002116:	4602      	mov	r2, r0
 8002118:	4b0b      	ldr	r3, [pc, #44]	@ (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	091b      	lsrs	r3, r3, #4
 800211e:	f003 030f 	and.w	r3, r3, #15
 8002122:	490a      	ldr	r1, [pc, #40]	@ (800214c <HAL_RCC_ClockConfig+0x1c8>)
 8002124:	5ccb      	ldrb	r3, [r1, r3]
 8002126:	fa22 f303 	lsr.w	r3, r2, r3
 800212a:	4a09      	ldr	r2, [pc, #36]	@ (8002150 <HAL_RCC_ClockConfig+0x1cc>)
 800212c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800212e:	4b09      	ldr	r3, [pc, #36]	@ (8002154 <HAL_RCC_ClockConfig+0x1d0>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f7fe fd30 	bl	8000b98 <HAL_InitTick>

  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40022000 	.word	0x40022000
 8002148:	40021000 	.word	0x40021000
 800214c:	08002cf0 	.word	0x08002cf0
 8002150:	20000000 	.word	0x20000000
 8002154:	20000004 	.word	0x20000004

08002158 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002158:	b480      	push	{r7}
 800215a:	b087      	sub	sp, #28
 800215c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800215e:	2300      	movs	r3, #0
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	2300      	movs	r3, #0
 8002164:	60bb      	str	r3, [r7, #8]
 8002166:	2300      	movs	r3, #0
 8002168:	617b      	str	r3, [r7, #20]
 800216a:	2300      	movs	r3, #0
 800216c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800216e:	2300      	movs	r3, #0
 8002170:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002172:	4b1e      	ldr	r3, [pc, #120]	@ (80021ec <HAL_RCC_GetSysClockFreq+0x94>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f003 030c 	and.w	r3, r3, #12
 800217e:	2b04      	cmp	r3, #4
 8002180:	d002      	beq.n	8002188 <HAL_RCC_GetSysClockFreq+0x30>
 8002182:	2b08      	cmp	r3, #8
 8002184:	d003      	beq.n	800218e <HAL_RCC_GetSysClockFreq+0x36>
 8002186:	e027      	b.n	80021d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002188:	4b19      	ldr	r3, [pc, #100]	@ (80021f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800218a:	613b      	str	r3, [r7, #16]
      break;
 800218c:	e027      	b.n	80021de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	0c9b      	lsrs	r3, r3, #18
 8002192:	f003 030f 	and.w	r3, r3, #15
 8002196:	4a17      	ldr	r2, [pc, #92]	@ (80021f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002198:	5cd3      	ldrb	r3, [r2, r3]
 800219a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d010      	beq.n	80021c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021a6:	4b11      	ldr	r3, [pc, #68]	@ (80021ec <HAL_RCC_GetSysClockFreq+0x94>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	0c5b      	lsrs	r3, r3, #17
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	4a11      	ldr	r2, [pc, #68]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80021b2:	5cd3      	ldrb	r3, [r2, r3]
 80021b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a0d      	ldr	r2, [pc, #52]	@ (80021f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80021ba:	fb03 f202 	mul.w	r2, r3, r2
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c4:	617b      	str	r3, [r7, #20]
 80021c6:	e004      	b.n	80021d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a0c      	ldr	r2, [pc, #48]	@ (80021fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80021cc:	fb02 f303 	mul.w	r3, r2, r3
 80021d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	613b      	str	r3, [r7, #16]
      break;
 80021d6:	e002      	b.n	80021de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021d8:	4b05      	ldr	r3, [pc, #20]	@ (80021f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80021da:	613b      	str	r3, [r7, #16]
      break;
 80021dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021de:	693b      	ldr	r3, [r7, #16]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	371c      	adds	r7, #28
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	40021000 	.word	0x40021000
 80021f0:	007a1200 	.word	0x007a1200
 80021f4:	08002d08 	.word	0x08002d08
 80021f8:	08002d18 	.word	0x08002d18
 80021fc:	003d0900 	.word	0x003d0900

08002200 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002204:	4b02      	ldr	r3, [pc, #8]	@ (8002210 <HAL_RCC_GetHCLKFreq+0x10>)
 8002206:	681b      	ldr	r3, [r3, #0]
}
 8002208:	4618      	mov	r0, r3
 800220a:	46bd      	mov	sp, r7
 800220c:	bc80      	pop	{r7}
 800220e:	4770      	bx	lr
 8002210:	20000000 	.word	0x20000000

08002214 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002218:	f7ff fff2 	bl	8002200 <HAL_RCC_GetHCLKFreq>
 800221c:	4602      	mov	r2, r0
 800221e:	4b05      	ldr	r3, [pc, #20]	@ (8002234 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	0a1b      	lsrs	r3, r3, #8
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	4903      	ldr	r1, [pc, #12]	@ (8002238 <HAL_RCC_GetPCLK1Freq+0x24>)
 800222a:	5ccb      	ldrb	r3, [r1, r3]
 800222c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002230:	4618      	mov	r0, r3
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40021000 	.word	0x40021000
 8002238:	08002d00 	.word	0x08002d00

0800223c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002244:	4b0a      	ldr	r3, [pc, #40]	@ (8002270 <RCC_Delay+0x34>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a0a      	ldr	r2, [pc, #40]	@ (8002274 <RCC_Delay+0x38>)
 800224a:	fba2 2303 	umull	r2, r3, r2, r3
 800224e:	0a5b      	lsrs	r3, r3, #9
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	fb02 f303 	mul.w	r3, r2, r3
 8002256:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002258:	bf00      	nop
  }
  while (Delay --);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	1e5a      	subs	r2, r3, #1
 800225e:	60fa      	str	r2, [r7, #12]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1f9      	bne.n	8002258 <RCC_Delay+0x1c>
}
 8002264:	bf00      	nop
 8002266:	bf00      	nop
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	bc80      	pop	{r7}
 800226e:	4770      	bx	lr
 8002270:	20000000 	.word	0x20000000
 8002274:	10624dd3 	.word	0x10624dd3

08002278 <memcmp>:
 8002278:	b510      	push	{r4, lr}
 800227a:	3901      	subs	r1, #1
 800227c:	4402      	add	r2, r0
 800227e:	4290      	cmp	r0, r2
 8002280:	d101      	bne.n	8002286 <memcmp+0xe>
 8002282:	2000      	movs	r0, #0
 8002284:	e005      	b.n	8002292 <memcmp+0x1a>
 8002286:	7803      	ldrb	r3, [r0, #0]
 8002288:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800228c:	42a3      	cmp	r3, r4
 800228e:	d001      	beq.n	8002294 <memcmp+0x1c>
 8002290:	1b18      	subs	r0, r3, r4
 8002292:	bd10      	pop	{r4, pc}
 8002294:	3001      	adds	r0, #1
 8002296:	e7f2      	b.n	800227e <memcmp+0x6>

08002298 <memset>:
 8002298:	4603      	mov	r3, r0
 800229a:	4402      	add	r2, r0
 800229c:	4293      	cmp	r3, r2
 800229e:	d100      	bne.n	80022a2 <memset+0xa>
 80022a0:	4770      	bx	lr
 80022a2:	f803 1b01 	strb.w	r1, [r3], #1
 80022a6:	e7f9      	b.n	800229c <memset+0x4>

080022a8 <__libc_init_array>:
 80022a8:	b570      	push	{r4, r5, r6, lr}
 80022aa:	2600      	movs	r6, #0
 80022ac:	4d0c      	ldr	r5, [pc, #48]	@ (80022e0 <__libc_init_array+0x38>)
 80022ae:	4c0d      	ldr	r4, [pc, #52]	@ (80022e4 <__libc_init_array+0x3c>)
 80022b0:	1b64      	subs	r4, r4, r5
 80022b2:	10a4      	asrs	r4, r4, #2
 80022b4:	42a6      	cmp	r6, r4
 80022b6:	d109      	bne.n	80022cc <__libc_init_array+0x24>
 80022b8:	f000 f828 	bl	800230c <_init>
 80022bc:	2600      	movs	r6, #0
 80022be:	4d0a      	ldr	r5, [pc, #40]	@ (80022e8 <__libc_init_array+0x40>)
 80022c0:	4c0a      	ldr	r4, [pc, #40]	@ (80022ec <__libc_init_array+0x44>)
 80022c2:	1b64      	subs	r4, r4, r5
 80022c4:	10a4      	asrs	r4, r4, #2
 80022c6:	42a6      	cmp	r6, r4
 80022c8:	d105      	bne.n	80022d6 <__libc_init_array+0x2e>
 80022ca:	bd70      	pop	{r4, r5, r6, pc}
 80022cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80022d0:	4798      	blx	r3
 80022d2:	3601      	adds	r6, #1
 80022d4:	e7ee      	b.n	80022b4 <__libc_init_array+0xc>
 80022d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80022da:	4798      	blx	r3
 80022dc:	3601      	adds	r6, #1
 80022de:	e7f2      	b.n	80022c6 <__libc_init_array+0x1e>
 80022e0:	08002d1c 	.word	0x08002d1c
 80022e4:	08002d1c 	.word	0x08002d1c
 80022e8:	08002d1c 	.word	0x08002d1c
 80022ec:	08002d20 	.word	0x08002d20

080022f0 <memcpy>:
 80022f0:	440a      	add	r2, r1
 80022f2:	4291      	cmp	r1, r2
 80022f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80022f8:	d100      	bne.n	80022fc <memcpy+0xc>
 80022fa:	4770      	bx	lr
 80022fc:	b510      	push	{r4, lr}
 80022fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002302:	4291      	cmp	r1, r2
 8002304:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002308:	d1f9      	bne.n	80022fe <memcpy+0xe>
 800230a:	bd10      	pop	{r4, pc}

0800230c <_init>:
 800230c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800230e:	bf00      	nop
 8002310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002312:	bc08      	pop	{r3}
 8002314:	469e      	mov	lr, r3
 8002316:	4770      	bx	lr

08002318 <_fini>:
 8002318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800231a:	bf00      	nop
 800231c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800231e:	bc08      	pop	{r3}
 8002320:	469e      	mov	lr, r3
 8002322:	4770      	bx	lr
