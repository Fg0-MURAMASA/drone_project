
I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a774  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  0800a888  0800a888  0000b888  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad10  0800ad10  0000c1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad10  0800ad10  0000bd10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad18  0800ad18  0000c1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad18  0800ad18  0000bd18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ad1c  0800ad1c  0000bd1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800ad20  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  200001d8  0800aef8  0000c1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000478  0800aef8  0000c478  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b33a  00000000  00000000  0000c201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002189  00000000  00000000  0001753b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad0  00000000  00000000  000196c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000851  00000000  00000000  0001a198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018728  00000000  00000000  0001a9e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e2a  00000000  00000000  00033111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008655e  00000000  00000000  00043f3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ca499  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000402c  00000000  00000000  000ca4dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  000ce508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a86c 	.word	0x0800a86c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800a86c 	.word	0x0800a86c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_d2lz>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	2200      	movs	r2, #0
 8001028:	2300      	movs	r3, #0
 800102a:	4604      	mov	r4, r0
 800102c:	460d      	mov	r5, r1
 800102e:	f7ff fcc5 	bl	80009bc <__aeabi_dcmplt>
 8001032:	b928      	cbnz	r0, 8001040 <__aeabi_d2lz+0x1c>
 8001034:	4620      	mov	r0, r4
 8001036:	4629      	mov	r1, r5
 8001038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800103c:	f000 b80a 	b.w	8001054 <__aeabi_d2ulz>
 8001040:	4620      	mov	r0, r4
 8001042:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001046:	f000 f805 	bl	8001054 <__aeabi_d2ulz>
 800104a:	4240      	negs	r0, r0
 800104c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001050:	bd38      	pop	{r3, r4, r5, pc}
 8001052:	bf00      	nop

08001054 <__aeabi_d2ulz>:
 8001054:	b5d0      	push	{r4, r6, r7, lr}
 8001056:	2200      	movs	r2, #0
 8001058:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <__aeabi_d2ulz+0x34>)
 800105a:	4606      	mov	r6, r0
 800105c:	460f      	mov	r7, r1
 800105e:	f7ff fa3b 	bl	80004d8 <__aeabi_dmul>
 8001062:	f7ff fd11 	bl	8000a88 <__aeabi_d2uiz>
 8001066:	4604      	mov	r4, r0
 8001068:	f7ff f9bc 	bl	80003e4 <__aeabi_ui2d>
 800106c:	2200      	movs	r2, #0
 800106e:	4b07      	ldr	r3, [pc, #28]	@ (800108c <__aeabi_d2ulz+0x38>)
 8001070:	f7ff fa32 	bl	80004d8 <__aeabi_dmul>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4630      	mov	r0, r6
 800107a:	4639      	mov	r1, r7
 800107c:	f7ff f874 	bl	8000168 <__aeabi_dsub>
 8001080:	f7ff fd02 	bl	8000a88 <__aeabi_d2uiz>
 8001084:	4621      	mov	r1, r4
 8001086:	bdd0      	pop	{r4, r6, r7, pc}
 8001088:	3df00000 	.word	0x3df00000
 800108c:	41f00000 	.word	0x41f00000

08001090 <AHT20_Init>:

#define AHT20_ADDRESS 0x70

uint8_t readBuffer[6] = {0};

void AHT20_Init( ){
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af02      	add	r7, sp, #8
	uint8_t readBuffer;
	HAL_Delay(40);
 8001096:	2028      	movs	r0, #40	@ 0x28
 8001098:	f000 fccc 	bl	8001a34 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1, AHT20_ADDRESS, &readBuffer, 1, HAL_MAX_DELAY);
 800109c:	1dfa      	adds	r2, r7, #7
 800109e:	f04f 33ff 	mov.w	r3, #4294967295
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	2301      	movs	r3, #1
 80010a6:	2170      	movs	r1, #112	@ 0x70
 80010a8:	480e      	ldr	r0, [pc, #56]	@ (80010e4 <AHT20_Init+0x54>)
 80010aa:	f001 fc41 	bl	8002930 <HAL_I2C_Master_Receive>
	if((readBuffer & 0x08) == 0x00){
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	f003 0308 	and.w	r3, r3, #8
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d110      	bne.n	80010da <AHT20_Init+0x4a>
		uint8_t sendBuffer[3] = { 0xBE, 0x08, 0x00};
 80010b8:	4a0b      	ldr	r2, [pc, #44]	@ (80010e8 <AHT20_Init+0x58>)
 80010ba:	1d3b      	adds	r3, r7, #4
 80010bc:	6812      	ldr	r2, [r2, #0]
 80010be:	4611      	mov	r1, r2
 80010c0:	8019      	strh	r1, [r3, #0]
 80010c2:	3302      	adds	r3, #2
 80010c4:	0c12      	lsrs	r2, r2, #16
 80010c6:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(&hi2c1, AHT20_ADDRESS, sendBuffer, 3, HAL_MAX_DELAY);
 80010c8:	1d3a      	adds	r2, r7, #4
 80010ca:	f04f 33ff 	mov.w	r3, #4294967295
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	2303      	movs	r3, #3
 80010d2:	2170      	movs	r1, #112	@ 0x70
 80010d4:	4803      	ldr	r0, [pc, #12]	@ (80010e4 <AHT20_Init+0x54>)
 80010d6:	f001 fb2d 	bl	8002734 <HAL_I2C_Master_Transmit>
	}
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	200001fc 	.word	0x200001fc
 80010e8:	0800a888 	.word	0x0800a888

080010ec <AHT20_Measure>:
	}

}


void AHT20_Measure(){
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
	static uint8_t sendBuffer[3] = { 0xAC, 0x33, 0x00};
	HAL_I2C_Master_Transmit_DMA(&hi2c1, AHT20_ADDRESS, sendBuffer, 3);
 80010f0:	2303      	movs	r3, #3
 80010f2:	4a03      	ldr	r2, [pc, #12]	@ (8001100 <AHT20_Measure+0x14>)
 80010f4:	2170      	movs	r1, #112	@ 0x70
 80010f6:	4803      	ldr	r0, [pc, #12]	@ (8001104 <AHT20_Measure+0x18>)
 80010f8:	f001 fe86 	bl	8002e08 <HAL_I2C_Master_Transmit_DMA>

}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000000 	.word	0x20000000
 8001104:	200001fc 	.word	0x200001fc

08001108 <AHT20_Get>:


void AHT20_Get(){
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	HAL_I2C_Master_Receive_DMA(&hi2c1, AHT20_ADDRESS, readBuffer, 6 );
 800110c:	2306      	movs	r3, #6
 800110e:	4a03      	ldr	r2, [pc, #12]	@ (800111c <AHT20_Get+0x14>)
 8001110:	2170      	movs	r1, #112	@ 0x70
 8001112:	4803      	ldr	r0, [pc, #12]	@ (8001120 <AHT20_Get+0x18>)
 8001114:	f001 ff9c 	bl	8003050 <HAL_I2C_Master_Receive_DMA>
}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}
 800111c:	200001f4 	.word	0x200001f4
 8001120:	200001fc 	.word	0x200001fc

08001124 <AHT20_Analysis>:

void AHT20_Analysis(float *Temperature, float *Humidity){
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
	if((readBuffer[0] & 0x80) == 0x00){
 800112e:	4b26      	ldr	r3, [pc, #152]	@ (80011c8 <AHT20_Analysis+0xa4>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	b25b      	sxtb	r3, r3
 8001134:	2b00      	cmp	r3, #0
 8001136:	db43      	blt.n	80011c0 <AHT20_Analysis+0x9c>
		uint32_t data = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]
		data = ((uint32_t)readBuffer[3] >> 4 ) + ((uint32_t)readBuffer[2] << 4) + ((uint32_t)readBuffer[1] << 12);
 800113c:	4b22      	ldr	r3, [pc, #136]	@ (80011c8 <AHT20_Analysis+0xa4>)
 800113e:	78db      	ldrb	r3, [r3, #3]
 8001140:	091b      	lsrs	r3, r3, #4
 8001142:	b2db      	uxtb	r3, r3
 8001144:	461a      	mov	r2, r3
 8001146:	4b20      	ldr	r3, [pc, #128]	@ (80011c8 <AHT20_Analysis+0xa4>)
 8001148:	789b      	ldrb	r3, [r3, #2]
 800114a:	011b      	lsls	r3, r3, #4
 800114c:	441a      	add	r2, r3
 800114e:	4b1e      	ldr	r3, [pc, #120]	@ (80011c8 <AHT20_Analysis+0xa4>)
 8001150:	785b      	ldrb	r3, [r3, #1]
 8001152:	031b      	lsls	r3, r3, #12
 8001154:	4413      	add	r3, r2
 8001156:	60fb      	str	r3, [r7, #12]
		*Humidity = data * 100.0f / (1<<20);
 8001158:	68f8      	ldr	r0, [r7, #12]
 800115a:	f7ff fdbb 	bl	8000cd4 <__aeabi_ui2f>
 800115e:	4603      	mov	r3, r0
 8001160:	491a      	ldr	r1, [pc, #104]	@ (80011cc <AHT20_Analysis+0xa8>)
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff fe0e 	bl	8000d84 <__aeabi_fmul>
 8001168:	4603      	mov	r3, r0
 800116a:	f04f 4193 	mov.w	r1, #1233125376	@ 0x49800000
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff febc 	bl	8000eec <__aeabi_fdiv>
 8001174:	4603      	mov	r3, r0
 8001176:	461a      	mov	r2, r3
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	601a      	str	r2, [r3, #0]

		data = ((uint32_t)readBuffer[3] << 16 ) + ((uint32_t)readBuffer[4] << 8) + ((uint32_t)readBuffer[5] );
 800117c:	4b12      	ldr	r3, [pc, #72]	@ (80011c8 <AHT20_Analysis+0xa4>)
 800117e:	78db      	ldrb	r3, [r3, #3]
 8001180:	041a      	lsls	r2, r3, #16
 8001182:	4b11      	ldr	r3, [pc, #68]	@ (80011c8 <AHT20_Analysis+0xa4>)
 8001184:	791b      	ldrb	r3, [r3, #4]
 8001186:	021b      	lsls	r3, r3, #8
 8001188:	4413      	add	r3, r2
 800118a:	4a0f      	ldr	r2, [pc, #60]	@ (80011c8 <AHT20_Analysis+0xa4>)
 800118c:	7952      	ldrb	r2, [r2, #5]
 800118e:	4413      	add	r3, r2
 8001190:	60fb      	str	r3, [r7, #12]
		*Temperature = data * 200.0f / (1 << 20) - 50;
 8001192:	68f8      	ldr	r0, [r7, #12]
 8001194:	f7ff fd9e 	bl	8000cd4 <__aeabi_ui2f>
 8001198:	4603      	mov	r3, r0
 800119a:	490d      	ldr	r1, [pc, #52]	@ (80011d0 <AHT20_Analysis+0xac>)
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff fdf1 	bl	8000d84 <__aeabi_fmul>
 80011a2:	4603      	mov	r3, r0
 80011a4:	f04f 4193 	mov.w	r1, #1233125376	@ 0x49800000
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff fe9f 	bl	8000eec <__aeabi_fdiv>
 80011ae:	4603      	mov	r3, r0
 80011b0:	4908      	ldr	r1, [pc, #32]	@ (80011d4 <AHT20_Analysis+0xb0>)
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff fcdc 	bl	8000b70 <__aeabi_fsub>
 80011b8:	4603      	mov	r3, r0
 80011ba:	461a      	mov	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	601a      	str	r2, [r3, #0]
	}
}
 80011c0:	bf00      	nop
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	200001f4 	.word	0x200001f4
 80011cc:	42c80000 	.word	0x42c80000
 80011d0:	43480000 	.word	0x43480000
 80011d4:	42480000 	.word	0x42480000

080011d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011de:	4b10      	ldr	r3, [pc, #64]	@ (8001220 <MX_DMA_Init+0x48>)
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001220 <MX_DMA_Init+0x48>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	6153      	str	r3, [r2, #20]
 80011ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001220 <MX_DMA_Init+0x48>)
 80011ec:	695b      	ldr	r3, [r3, #20]
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	607b      	str	r3, [r7, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2100      	movs	r1, #0
 80011fa:	2010      	movs	r0, #16
 80011fc:	f000 fd15 	bl	8001c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001200:	2010      	movs	r0, #16
 8001202:	f000 fd2e 	bl	8001c62 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	2100      	movs	r1, #0
 800120a:	2011      	movs	r0, #17
 800120c:	f000 fd0d 	bl	8001c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001210:	2011      	movs	r0, #17
 8001212:	f000 fd26 	bl	8001c62 <HAL_NVIC_EnableIRQ>

}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40021000 	.word	0x40021000

08001224 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800122a:	4b0e      	ldr	r3, [pc, #56]	@ (8001264 <MX_GPIO_Init+0x40>)
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	4a0d      	ldr	r2, [pc, #52]	@ (8001264 <MX_GPIO_Init+0x40>)
 8001230:	f043 0304 	orr.w	r3, r3, #4
 8001234:	6193      	str	r3, [r2, #24]
 8001236:	4b0b      	ldr	r3, [pc, #44]	@ (8001264 <MX_GPIO_Init+0x40>)
 8001238:	699b      	ldr	r3, [r3, #24]
 800123a:	f003 0304 	and.w	r3, r3, #4
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001242:	4b08      	ldr	r3, [pc, #32]	@ (8001264 <MX_GPIO_Init+0x40>)
 8001244:	699b      	ldr	r3, [r3, #24]
 8001246:	4a07      	ldr	r2, [pc, #28]	@ (8001264 <MX_GPIO_Init+0x40>)
 8001248:	f043 0308 	orr.w	r3, r3, #8
 800124c:	6193      	str	r3, [r2, #24]
 800124e:	4b05      	ldr	r3, [pc, #20]	@ (8001264 <MX_GPIO_Init+0x40>)
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	f003 0308 	and.w	r3, r3, #8
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	683b      	ldr	r3, [r7, #0]

}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr
 8001264:	40021000 	.word	0x40021000

08001268 <HAL_I2C_MasterTxCpltCallback>:
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "i2c.h"

/* USER CODE BEGIN 0 */
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c1){
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4a05      	ldr	r2, [pc, #20]	@ (8001288 <HAL_I2C_MasterTxCpltCallback+0x20>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d102      	bne.n	800127e <HAL_I2C_MasterTxCpltCallback+0x16>
		state = 2;
 8001278:	4b04      	ldr	r3, [pc, #16]	@ (800128c <HAL_I2C_MasterTxCpltCallback+0x24>)
 800127a:	2202      	movs	r2, #2
 800127c:	701a      	strb	r2, [r3, #0]
	}
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr
 8001288:	200001fc 	.word	0x200001fc
 800128c:	200002d8 	.word	0x200002d8

08001290 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c1){
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4a05      	ldr	r2, [pc, #20]	@ (80012b0 <HAL_I2C_MasterRxCpltCallback+0x20>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d102      	bne.n	80012a6 <HAL_I2C_MasterRxCpltCallback+0x16>
		state = 4;
 80012a0:	4b04      	ldr	r3, [pc, #16]	@ (80012b4 <HAL_I2C_MasterRxCpltCallback+0x24>)
 80012a2:	2204      	movs	r2, #4
 80012a4:	701a      	strb	r2, [r3, #0]
	}
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr
 80012b0:	200001fc 	.word	0x200001fc
 80012b4:	200002d8 	.word	0x200002d8

080012b8 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012bc:	4b12      	ldr	r3, [pc, #72]	@ (8001308 <MX_I2C1_Init+0x50>)
 80012be:	4a13      	ldr	r2, [pc, #76]	@ (800130c <MX_I2C1_Init+0x54>)
 80012c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012c2:	4b11      	ldr	r3, [pc, #68]	@ (8001308 <MX_I2C1_Init+0x50>)
 80012c4:	4a12      	ldr	r2, [pc, #72]	@ (8001310 <MX_I2C1_Init+0x58>)
 80012c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001308 <MX_I2C1_Init+0x50>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001308 <MX_I2C1_Init+0x50>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001308 <MX_I2C1_Init+0x50>)
 80012d6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001308 <MX_I2C1_Init+0x50>)
 80012de:	2200      	movs	r2, #0
 80012e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012e2:	4b09      	ldr	r3, [pc, #36]	@ (8001308 <MX_I2C1_Init+0x50>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012e8:	4b07      	ldr	r3, [pc, #28]	@ (8001308 <MX_I2C1_Init+0x50>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012ee:	4b06      	ldr	r3, [pc, #24]	@ (8001308 <MX_I2C1_Init+0x50>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012f4:	4804      	ldr	r0, [pc, #16]	@ (8001308 <MX_I2C1_Init+0x50>)
 80012f6:	f001 f8c5 	bl	8002484 <HAL_I2C_Init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001300:	f000 f947 	bl	8001592 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001304:	bf00      	nop
 8001306:	bd80      	pop	{r7, pc}
 8001308:	200001fc 	.word	0x200001fc
 800130c:	40005400 	.word	0x40005400
 8001310:	000186a0 	.word	0x000186a0

08001314 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b088      	sub	sp, #32
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	f107 0310 	add.w	r3, r7, #16
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a43      	ldr	r2, [pc, #268]	@ (800143c <HAL_I2C_MspInit+0x128>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d17f      	bne.n	8001434 <HAL_I2C_MspInit+0x120>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001334:	4b42      	ldr	r3, [pc, #264]	@ (8001440 <HAL_I2C_MspInit+0x12c>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	4a41      	ldr	r2, [pc, #260]	@ (8001440 <HAL_I2C_MspInit+0x12c>)
 800133a:	f043 0308 	orr.w	r3, r3, #8
 800133e:	6193      	str	r3, [r2, #24]
 8001340:	4b3f      	ldr	r3, [pc, #252]	@ (8001440 <HAL_I2C_MspInit+0x12c>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	f003 0308 	and.w	r3, r3, #8
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800134c:	23c0      	movs	r3, #192	@ 0xc0
 800134e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001350:	2312      	movs	r3, #18
 8001352:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001354:	2303      	movs	r3, #3
 8001356:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001358:	f107 0310 	add.w	r3, r7, #16
 800135c:	4619      	mov	r1, r3
 800135e:	4839      	ldr	r0, [pc, #228]	@ (8001444 <HAL_I2C_MspInit+0x130>)
 8001360:	f000 ff0c 	bl	800217c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001364:	4b36      	ldr	r3, [pc, #216]	@ (8001440 <HAL_I2C_MspInit+0x12c>)
 8001366:	69db      	ldr	r3, [r3, #28]
 8001368:	4a35      	ldr	r2, [pc, #212]	@ (8001440 <HAL_I2C_MspInit+0x12c>)
 800136a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800136e:	61d3      	str	r3, [r2, #28]
 8001370:	4b33      	ldr	r3, [pc, #204]	@ (8001440 <HAL_I2C_MspInit+0x12c>)
 8001372:	69db      	ldr	r3, [r3, #28]
 8001374:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 800137c:	4b32      	ldr	r3, [pc, #200]	@ (8001448 <HAL_I2C_MspInit+0x134>)
 800137e:	4a33      	ldr	r2, [pc, #204]	@ (800144c <HAL_I2C_MspInit+0x138>)
 8001380:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001382:	4b31      	ldr	r3, [pc, #196]	@ (8001448 <HAL_I2C_MspInit+0x134>)
 8001384:	2200      	movs	r2, #0
 8001386:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001388:	4b2f      	ldr	r3, [pc, #188]	@ (8001448 <HAL_I2C_MspInit+0x134>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800138e:	4b2e      	ldr	r3, [pc, #184]	@ (8001448 <HAL_I2C_MspInit+0x134>)
 8001390:	2280      	movs	r2, #128	@ 0x80
 8001392:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001394:	4b2c      	ldr	r3, [pc, #176]	@ (8001448 <HAL_I2C_MspInit+0x134>)
 8001396:	2200      	movs	r2, #0
 8001398:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800139a:	4b2b      	ldr	r3, [pc, #172]	@ (8001448 <HAL_I2C_MspInit+0x134>)
 800139c:	2200      	movs	r2, #0
 800139e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80013a0:	4b29      	ldr	r3, [pc, #164]	@ (8001448 <HAL_I2C_MspInit+0x134>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013a6:	4b28      	ldr	r3, [pc, #160]	@ (8001448 <HAL_I2C_MspInit+0x134>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80013ac:	4826      	ldr	r0, [pc, #152]	@ (8001448 <HAL_I2C_MspInit+0x134>)
 80013ae:	f000 fc73 	bl	8001c98 <HAL_DMA_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 80013b8:	f000 f8eb 	bl	8001592 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4a22      	ldr	r2, [pc, #136]	@ (8001448 <HAL_I2C_MspInit+0x134>)
 80013c0:	639a      	str	r2, [r3, #56]	@ 0x38
 80013c2:	4a21      	ldr	r2, [pc, #132]	@ (8001448 <HAL_I2C_MspInit+0x134>)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 80013c8:	4b21      	ldr	r3, [pc, #132]	@ (8001450 <HAL_I2C_MspInit+0x13c>)
 80013ca:	4a22      	ldr	r2, [pc, #136]	@ (8001454 <HAL_I2C_MspInit+0x140>)
 80013cc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013ce:	4b20      	ldr	r3, [pc, #128]	@ (8001450 <HAL_I2C_MspInit+0x13c>)
 80013d0:	2210      	movs	r2, #16
 80013d2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001450 <HAL_I2C_MspInit+0x13c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013da:	4b1d      	ldr	r3, [pc, #116]	@ (8001450 <HAL_I2C_MspInit+0x13c>)
 80013dc:	2280      	movs	r2, #128	@ 0x80
 80013de:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001450 <HAL_I2C_MspInit+0x13c>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001450 <HAL_I2C_MspInit+0x13c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80013ec:	4b18      	ldr	r3, [pc, #96]	@ (8001450 <HAL_I2C_MspInit+0x13c>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013f2:	4b17      	ldr	r3, [pc, #92]	@ (8001450 <HAL_I2C_MspInit+0x13c>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80013f8:	4815      	ldr	r0, [pc, #84]	@ (8001450 <HAL_I2C_MspInit+0x13c>)
 80013fa:	f000 fc4d 	bl	8001c98 <HAL_DMA_Init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <HAL_I2C_MspInit+0xf4>
    {
      Error_Handler();
 8001404:	f000 f8c5 	bl	8001592 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a11      	ldr	r2, [pc, #68]	@ (8001450 <HAL_I2C_MspInit+0x13c>)
 800140c:	635a      	str	r2, [r3, #52]	@ 0x34
 800140e:	4a10      	ldr	r2, [pc, #64]	@ (8001450 <HAL_I2C_MspInit+0x13c>)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001414:	2200      	movs	r2, #0
 8001416:	2100      	movs	r1, #0
 8001418:	201f      	movs	r0, #31
 800141a:	f000 fc06 	bl	8001c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800141e:	201f      	movs	r0, #31
 8001420:	f000 fc1f 	bl	8001c62 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001424:	2200      	movs	r2, #0
 8001426:	2100      	movs	r1, #0
 8001428:	2020      	movs	r0, #32
 800142a:	f000 fbfe 	bl	8001c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800142e:	2020      	movs	r0, #32
 8001430:	f000 fc17 	bl	8001c62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001434:	bf00      	nop
 8001436:	3720      	adds	r7, #32
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40005400 	.word	0x40005400
 8001440:	40021000 	.word	0x40021000
 8001444:	40010c00 	.word	0x40010c00
 8001448:	20000250 	.word	0x20000250
 800144c:	40020080 	.word	0x40020080
 8001450:	20000294 	.word	0x20000294
 8001454:	4002006c 	.word	0x4002006c

08001458 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001458:	b5b0      	push	{r4, r5, r7, lr}
 800145a:	b092      	sub	sp, #72	@ 0x48
 800145c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800145e:	f000 fa87 	bl	8001970 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001462:	f000 f85b 	bl	800151c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001466:	f7ff fedd 	bl	8001224 <MX_GPIO_Init>
  MX_DMA_Init();
 800146a:	f7ff feb5 	bl	80011d8 <MX_DMA_Init>
  MX_I2C1_Init();
 800146e:	f7ff ff23 	bl	80012b8 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001472:	f000 f9e3 	bl	800183c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  AHT20_Init();
 8001476:	f7ff fe0b 	bl	8001090 <AHT20_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(state == 0){
 800147a:	4b25      	ldr	r3, [pc, #148]	@ (8001510 <main+0xb8>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d105      	bne.n	800148e <main+0x36>
		  AHT20_Measure();
 8001482:	f7ff fe33 	bl	80010ec <AHT20_Measure>
		  state = 1;
 8001486:	4b22      	ldr	r3, [pc, #136]	@ (8001510 <main+0xb8>)
 8001488:	2201      	movs	r2, #1
 800148a:	701a      	strb	r2, [r3, #0]
 800148c:	e7f5      	b.n	800147a <main+0x22>
	  }else if(state == 2){
 800148e:	4b20      	ldr	r3, [pc, #128]	@ (8001510 <main+0xb8>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b02      	cmp	r3, #2
 8001494:	d108      	bne.n	80014a8 <main+0x50>
		  HAL_Delay(75);
 8001496:	204b      	movs	r0, #75	@ 0x4b
 8001498:	f000 facc 	bl	8001a34 <HAL_Delay>
		  AHT20_Get();
 800149c:	f7ff fe34 	bl	8001108 <AHT20_Get>
		  state = 3;
 80014a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001510 <main+0xb8>)
 80014a2:	2203      	movs	r2, #3
 80014a4:	701a      	strb	r2, [r3, #0]
 80014a6:	e7e8      	b.n	800147a <main+0x22>
	  }else if(state == 4){
 80014a8:	4b19      	ldr	r3, [pc, #100]	@ (8001510 <main+0xb8>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b04      	cmp	r3, #4
 80014ae:	d1e4      	bne.n	800147a <main+0x22>
		  AHT20_Analysis(&temperature, &humidity);
 80014b0:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80014b4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80014b8:	4611      	mov	r1, r2
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fe32 	bl	8001124 <AHT20_Analysis>
		  sprintf(message, "温度: %.1f ℃, 湿度: %.1f %% \r\n",temperature, humidity);
 80014c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7fe ffb0 	bl	8000428 <__aeabi_f2d>
 80014c8:	4604      	mov	r4, r0
 80014ca:	460d      	mov	r5, r1
 80014cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7fe ffaa 	bl	8000428 <__aeabi_f2d>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	1d38      	adds	r0, r7, #4
 80014da:	e9cd 2300 	strd	r2, r3, [sp]
 80014de:	4622      	mov	r2, r4
 80014e0:	462b      	mov	r3, r5
 80014e2:	490c      	ldr	r1, [pc, #48]	@ (8001514 <main+0xbc>)
 80014e4:	f005 fd96 	bl	8007014 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 80014e8:	1d3b      	adds	r3, r7, #4
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7fe fe30 	bl	8000150 <strlen>
 80014f0:	4603      	mov	r3, r0
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	1d39      	adds	r1, r7, #4
 80014f6:	f04f 33ff 	mov.w	r3, #4294967295
 80014fa:	4807      	ldr	r0, [pc, #28]	@ (8001518 <main+0xc0>)
 80014fc:	f004 fc88 	bl	8005e10 <HAL_UART_Transmit>

		  HAL_Delay(1000);
 8001500:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001504:	f000 fa96 	bl	8001a34 <HAL_Delay>
		  state = 0;
 8001508:	4b01      	ldr	r3, [pc, #4]	@ (8001510 <main+0xb8>)
 800150a:	2200      	movs	r2, #0
 800150c:	701a      	strb	r2, [r3, #0]
	  if(state == 0){
 800150e:	e7b4      	b.n	800147a <main+0x22>
 8001510:	200002d8 	.word	0x200002d8
 8001514:	0800a890 	.word	0x0800a890
 8001518:	200002e0 	.word	0x200002e0

0800151c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b090      	sub	sp, #64	@ 0x40
 8001520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001522:	f107 0318 	add.w	r3, r7, #24
 8001526:	2228      	movs	r2, #40	@ 0x28
 8001528:	2100      	movs	r1, #0
 800152a:	4618      	mov	r0, r3
 800152c:	f005 fdd5 	bl	80070da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	60da      	str	r2, [r3, #12]
 800153c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800153e:	2302      	movs	r3, #2
 8001540:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001542:	2301      	movs	r3, #1
 8001544:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001546:	2310      	movs	r3, #16
 8001548:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800154a:	2300      	movs	r3, #0
 800154c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800154e:	f107 0318 	add.w	r3, r7, #24
 8001552:	4618      	mov	r0, r3
 8001554:	f003 fffc 	bl	8005550 <HAL_RCC_OscConfig>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800155e:	f000 f818 	bl	8001592 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001562:	230f      	movs	r3, #15
 8001564:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001566:	2300      	movs	r3, #0
 8001568:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800156e:	2300      	movs	r3, #0
 8001570:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001572:	2300      	movs	r3, #0
 8001574:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001576:	1d3b      	adds	r3, r7, #4
 8001578:	2100      	movs	r1, #0
 800157a:	4618      	mov	r0, r3
 800157c:	f004 fa6a 	bl	8005a54 <HAL_RCC_ClockConfig>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001586:	f000 f804 	bl	8001592 <Error_Handler>
  }
}
 800158a:	bf00      	nop
 800158c:	3740      	adds	r7, #64	@ 0x40
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001596:	b672      	cpsid	i
}
 8001598:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800159a:	bf00      	nop
 800159c:	e7fd      	b.n	800159a <Error_Handler+0x8>
	...

080015a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015a6:	4b15      	ldr	r3, [pc, #84]	@ (80015fc <HAL_MspInit+0x5c>)
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	4a14      	ldr	r2, [pc, #80]	@ (80015fc <HAL_MspInit+0x5c>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6193      	str	r3, [r2, #24]
 80015b2:	4b12      	ldr	r3, [pc, #72]	@ (80015fc <HAL_MspInit+0x5c>)
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015be:	4b0f      	ldr	r3, [pc, #60]	@ (80015fc <HAL_MspInit+0x5c>)
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	4a0e      	ldr	r2, [pc, #56]	@ (80015fc <HAL_MspInit+0x5c>)
 80015c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015c8:	61d3      	str	r3, [r2, #28]
 80015ca:	4b0c      	ldr	r3, [pc, #48]	@ (80015fc <HAL_MspInit+0x5c>)
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015d2:	607b      	str	r3, [r7, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001600 <HAL_MspInit+0x60>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	4a04      	ldr	r2, [pc, #16]	@ (8001600 <HAL_MspInit+0x60>)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015f2:	bf00      	nop
 80015f4:	3714      	adds	r7, #20
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr
 80015fc:	40021000 	.word	0x40021000
 8001600:	40010000 	.word	0x40010000

08001604 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001608:	bf00      	nop
 800160a:	e7fd      	b.n	8001608 <NMI_Handler+0x4>

0800160c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001610:	bf00      	nop
 8001612:	e7fd      	b.n	8001610 <HardFault_Handler+0x4>

08001614 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001618:	bf00      	nop
 800161a:	e7fd      	b.n	8001618 <MemManage_Handler+0x4>

0800161c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001620:	bf00      	nop
 8001622:	e7fd      	b.n	8001620 <BusFault_Handler+0x4>

08001624 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001628:	bf00      	nop
 800162a:	e7fd      	b.n	8001628 <UsageFault_Handler+0x4>

0800162c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr

08001638 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr

08001644 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr

08001650 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001654:	f000 f9d2 	bl	80019fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}

0800165c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001660:	4802      	ldr	r0, [pc, #8]	@ (800166c <DMA1_Channel6_IRQHandler+0x10>)
 8001662:	f000 fc4b 	bl	8001efc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000294 	.word	0x20000294

08001670 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001674:	4802      	ldr	r0, [pc, #8]	@ (8001680 <DMA1_Channel7_IRQHandler+0x10>)
 8001676:	f000 fc41 	bl	8001efc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000250 	.word	0x20000250

08001684 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001688:	4802      	ldr	r0, [pc, #8]	@ (8001694 <I2C1_EV_IRQHandler+0x10>)
 800168a:	f001 fe05 	bl	8003298 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	200001fc 	.word	0x200001fc

08001698 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800169c:	4802      	ldr	r0, [pc, #8]	@ (80016a8 <I2C1_ER_IRQHandler+0x10>)
 800169e:	f001 ff4e 	bl	800353e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	200001fc 	.word	0x200001fc

080016ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  return 1;
 80016b0:	2301      	movs	r3, #1
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bc80      	pop	{r7}
 80016b8:	4770      	bx	lr

080016ba <_kill>:

int _kill(int pid, int sig)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b082      	sub	sp, #8
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
 80016c2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016c4:	f005 fd5c 	bl	8007180 <__errno>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2216      	movs	r2, #22
 80016cc:	601a      	str	r2, [r3, #0]
  return -1;
 80016ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <_exit>:

void _exit (int status)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016e2:	f04f 31ff 	mov.w	r1, #4294967295
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff ffe7 	bl	80016ba <_kill>
  while (1) {}    /* Make sure we hang here */
 80016ec:	bf00      	nop
 80016ee:	e7fd      	b.n	80016ec <_exit+0x12>

080016f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
 8001700:	e00a      	b.n	8001718 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001702:	f3af 8000 	nop.w
 8001706:	4601      	mov	r1, r0
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	1c5a      	adds	r2, r3, #1
 800170c:	60ba      	str	r2, [r7, #8]
 800170e:	b2ca      	uxtb	r2, r1
 8001710:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	3301      	adds	r3, #1
 8001716:	617b      	str	r3, [r7, #20]
 8001718:	697a      	ldr	r2, [r7, #20]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	429a      	cmp	r2, r3
 800171e:	dbf0      	blt.n	8001702 <_read+0x12>
  }

  return len;
 8001720:	687b      	ldr	r3, [r7, #4]
}
 8001722:	4618      	mov	r0, r3
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b086      	sub	sp, #24
 800172e:	af00      	add	r7, sp, #0
 8001730:	60f8      	str	r0, [r7, #12]
 8001732:	60b9      	str	r1, [r7, #8]
 8001734:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
 800173a:	e009      	b.n	8001750 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	1c5a      	adds	r2, r3, #1
 8001740:	60ba      	str	r2, [r7, #8]
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	4618      	mov	r0, r3
 8001746:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	3301      	adds	r3, #1
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	697a      	ldr	r2, [r7, #20]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	429a      	cmp	r2, r3
 8001756:	dbf1      	blt.n	800173c <_write+0x12>
  }
  return len;
 8001758:	687b      	ldr	r3, [r7, #4]
}
 800175a:	4618      	mov	r0, r3
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <_close>:

int _close(int file)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800176a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800176e:	4618      	mov	r0, r3
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr

08001778 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001788:	605a      	str	r2, [r3, #4]
  return 0;
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	bc80      	pop	{r7}
 8001794:	4770      	bx	lr

08001796 <_isatty>:

int _isatty(int file)
{
 8001796:	b480      	push	{r7}
 8001798:	b083      	sub	sp, #12
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800179e:	2301      	movs	r3, #1
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr

080017aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017aa:	b480      	push	{r7}
 80017ac:	b085      	sub	sp, #20
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	60f8      	str	r0, [r7, #12]
 80017b2:	60b9      	str	r1, [r7, #8]
 80017b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017b6:	2300      	movs	r3, #0
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc80      	pop	{r7}
 80017c0:	4770      	bx	lr
	...

080017c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017cc:	4a14      	ldr	r2, [pc, #80]	@ (8001820 <_sbrk+0x5c>)
 80017ce:	4b15      	ldr	r3, [pc, #84]	@ (8001824 <_sbrk+0x60>)
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017d8:	4b13      	ldr	r3, [pc, #76]	@ (8001828 <_sbrk+0x64>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d102      	bne.n	80017e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017e0:	4b11      	ldr	r3, [pc, #68]	@ (8001828 <_sbrk+0x64>)
 80017e2:	4a12      	ldr	r2, [pc, #72]	@ (800182c <_sbrk+0x68>)
 80017e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017e6:	4b10      	ldr	r3, [pc, #64]	@ (8001828 <_sbrk+0x64>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4413      	add	r3, r2
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d207      	bcs.n	8001804 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017f4:	f005 fcc4 	bl	8007180 <__errno>
 80017f8:	4603      	mov	r3, r0
 80017fa:	220c      	movs	r2, #12
 80017fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001802:	e009      	b.n	8001818 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001804:	4b08      	ldr	r3, [pc, #32]	@ (8001828 <_sbrk+0x64>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800180a:	4b07      	ldr	r3, [pc, #28]	@ (8001828 <_sbrk+0x64>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4413      	add	r3, r2
 8001812:	4a05      	ldr	r2, [pc, #20]	@ (8001828 <_sbrk+0x64>)
 8001814:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001816:	68fb      	ldr	r3, [r7, #12]
}
 8001818:	4618      	mov	r0, r3
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20005000 	.word	0x20005000
 8001824:	00000400 	.word	0x00000400
 8001828:	200002dc 	.word	0x200002dc
 800182c:	20000478 	.word	0x20000478

08001830 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr

0800183c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001840:	4b11      	ldr	r3, [pc, #68]	@ (8001888 <MX_USART2_UART_Init+0x4c>)
 8001842:	4a12      	ldr	r2, [pc, #72]	@ (800188c <MX_USART2_UART_Init+0x50>)
 8001844:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001846:	4b10      	ldr	r3, [pc, #64]	@ (8001888 <MX_USART2_UART_Init+0x4c>)
 8001848:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800184c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800184e:	4b0e      	ldr	r3, [pc, #56]	@ (8001888 <MX_USART2_UART_Init+0x4c>)
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001854:	4b0c      	ldr	r3, [pc, #48]	@ (8001888 <MX_USART2_UART_Init+0x4c>)
 8001856:	2200      	movs	r2, #0
 8001858:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800185a:	4b0b      	ldr	r3, [pc, #44]	@ (8001888 <MX_USART2_UART_Init+0x4c>)
 800185c:	2200      	movs	r2, #0
 800185e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001860:	4b09      	ldr	r3, [pc, #36]	@ (8001888 <MX_USART2_UART_Init+0x4c>)
 8001862:	220c      	movs	r2, #12
 8001864:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001866:	4b08      	ldr	r3, [pc, #32]	@ (8001888 <MX_USART2_UART_Init+0x4c>)
 8001868:	2200      	movs	r2, #0
 800186a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800186c:	4b06      	ldr	r3, [pc, #24]	@ (8001888 <MX_USART2_UART_Init+0x4c>)
 800186e:	2200      	movs	r2, #0
 8001870:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001872:	4805      	ldr	r0, [pc, #20]	@ (8001888 <MX_USART2_UART_Init+0x4c>)
 8001874:	f004 fa7c 	bl	8005d70 <HAL_UART_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800187e:	f7ff fe88 	bl	8001592 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	200002e0 	.word	0x200002e0
 800188c:	40004400 	.word	0x40004400

08001890 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b088      	sub	sp, #32
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001898:	f107 0310 	add.w	r3, r7, #16
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a1b      	ldr	r2, [pc, #108]	@ (8001918 <HAL_UART_MspInit+0x88>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d12f      	bne.n	8001910 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018b0:	4b1a      	ldr	r3, [pc, #104]	@ (800191c <HAL_UART_MspInit+0x8c>)
 80018b2:	69db      	ldr	r3, [r3, #28]
 80018b4:	4a19      	ldr	r2, [pc, #100]	@ (800191c <HAL_UART_MspInit+0x8c>)
 80018b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018ba:	61d3      	str	r3, [r2, #28]
 80018bc:	4b17      	ldr	r3, [pc, #92]	@ (800191c <HAL_UART_MspInit+0x8c>)
 80018be:	69db      	ldr	r3, [r3, #28]
 80018c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c8:	4b14      	ldr	r3, [pc, #80]	@ (800191c <HAL_UART_MspInit+0x8c>)
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	4a13      	ldr	r2, [pc, #76]	@ (800191c <HAL_UART_MspInit+0x8c>)
 80018ce:	f043 0304 	orr.w	r3, r3, #4
 80018d2:	6193      	str	r3, [r2, #24]
 80018d4:	4b11      	ldr	r3, [pc, #68]	@ (800191c <HAL_UART_MspInit+0x8c>)
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	60bb      	str	r3, [r7, #8]
 80018de:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018e0:	2304      	movs	r3, #4
 80018e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e4:	2302      	movs	r3, #2
 80018e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018e8:	2303      	movs	r3, #3
 80018ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ec:	f107 0310 	add.w	r3, r7, #16
 80018f0:	4619      	mov	r1, r3
 80018f2:	480b      	ldr	r0, [pc, #44]	@ (8001920 <HAL_UART_MspInit+0x90>)
 80018f4:	f000 fc42 	bl	800217c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80018f8:	2308      	movs	r3, #8
 80018fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018fc:	2300      	movs	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001904:	f107 0310 	add.w	r3, r7, #16
 8001908:	4619      	mov	r1, r3
 800190a:	4805      	ldr	r0, [pc, #20]	@ (8001920 <HAL_UART_MspInit+0x90>)
 800190c:	f000 fc36 	bl	800217c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001910:	bf00      	nop
 8001912:	3720      	adds	r7, #32
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40004400 	.word	0x40004400
 800191c:	40021000 	.word	0x40021000
 8001920:	40010800 	.word	0x40010800

08001924 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001924:	f7ff ff84 	bl	8001830 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001928:	480b      	ldr	r0, [pc, #44]	@ (8001958 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800192a:	490c      	ldr	r1, [pc, #48]	@ (800195c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800192c:	4a0c      	ldr	r2, [pc, #48]	@ (8001960 <LoopFillZerobss+0x16>)
  movs r3, #0
 800192e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001930:	e002      	b.n	8001938 <LoopCopyDataInit>

08001932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001936:	3304      	adds	r3, #4

08001938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800193a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800193c:	d3f9      	bcc.n	8001932 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800193e:	4a09      	ldr	r2, [pc, #36]	@ (8001964 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001940:	4c09      	ldr	r4, [pc, #36]	@ (8001968 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001944:	e001      	b.n	800194a <LoopFillZerobss>

08001946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001948:	3204      	adds	r2, #4

0800194a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800194a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800194c:	d3fb      	bcc.n	8001946 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800194e:	f005 fc1d 	bl	800718c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001952:	f7ff fd81 	bl	8001458 <main>
  bx lr
 8001956:	4770      	bx	lr
  ldr r0, =_sdata
 8001958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800195c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001960:	0800ad20 	.word	0x0800ad20
  ldr r2, =_sbss
 8001964:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001968:	20000478 	.word	0x20000478

0800196c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800196c:	e7fe      	b.n	800196c <ADC1_2_IRQHandler>
	...

08001970 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001974:	4b08      	ldr	r3, [pc, #32]	@ (8001998 <HAL_Init+0x28>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a07      	ldr	r2, [pc, #28]	@ (8001998 <HAL_Init+0x28>)
 800197a:	f043 0310 	orr.w	r3, r3, #16
 800197e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001980:	2003      	movs	r0, #3
 8001982:	f000 f947 	bl	8001c14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001986:	200f      	movs	r0, #15
 8001988:	f000 f808 	bl	800199c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800198c:	f7ff fe08 	bl	80015a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40022000 	.word	0x40022000

0800199c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019a4:	4b12      	ldr	r3, [pc, #72]	@ (80019f0 <HAL_InitTick+0x54>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	4b12      	ldr	r3, [pc, #72]	@ (80019f4 <HAL_InitTick+0x58>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	4619      	mov	r1, r3
 80019ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ba:	4618      	mov	r0, r3
 80019bc:	f000 f95f 	bl	8001c7e <HAL_SYSTICK_Config>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e00e      	b.n	80019e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b0f      	cmp	r3, #15
 80019ce:	d80a      	bhi.n	80019e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019d0:	2200      	movs	r2, #0
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	f04f 30ff 	mov.w	r0, #4294967295
 80019d8:	f000 f927 	bl	8001c2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019dc:	4a06      	ldr	r2, [pc, #24]	@ (80019f8 <HAL_InitTick+0x5c>)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019e2:	2300      	movs	r3, #0
 80019e4:	e000      	b.n	80019e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	20000004 	.word	0x20000004
 80019f4:	2000000c 	.word	0x2000000c
 80019f8:	20000008 	.word	0x20000008

080019fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a00:	4b05      	ldr	r3, [pc, #20]	@ (8001a18 <HAL_IncTick+0x1c>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	461a      	mov	r2, r3
 8001a06:	4b05      	ldr	r3, [pc, #20]	@ (8001a1c <HAL_IncTick+0x20>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	4a03      	ldr	r2, [pc, #12]	@ (8001a1c <HAL_IncTick+0x20>)
 8001a0e:	6013      	str	r3, [r2, #0]
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bc80      	pop	{r7}
 8001a16:	4770      	bx	lr
 8001a18:	2000000c 	.word	0x2000000c
 8001a1c:	20000328 	.word	0x20000328

08001a20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  return uwTick;
 8001a24:	4b02      	ldr	r3, [pc, #8]	@ (8001a30 <HAL_GetTick+0x10>)
 8001a26:	681b      	ldr	r3, [r3, #0]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr
 8001a30:	20000328 	.word	0x20000328

08001a34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a3c:	f7ff fff0 	bl	8001a20 <HAL_GetTick>
 8001a40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a4c:	d005      	beq.n	8001a5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a78 <HAL_Delay+0x44>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	461a      	mov	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	4413      	add	r3, r2
 8001a58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a5a:	bf00      	nop
 8001a5c:	f7ff ffe0 	bl	8001a20 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d8f7      	bhi.n	8001a5c <HAL_Delay+0x28>
  {
  }
}
 8001a6c:	bf00      	nop
 8001a6e:	bf00      	nop
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	2000000c 	.word	0x2000000c

08001a7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a92:	68ba      	ldr	r2, [r7, #8]
 8001a94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a98:	4013      	ands	r3, r2
 8001a9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001aa4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001aa8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001aac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aae:	4a04      	ldr	r2, [pc, #16]	@ (8001ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	60d3      	str	r3, [r2, #12]
}
 8001ab4:	bf00      	nop
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ac8:	4b04      	ldr	r3, [pc, #16]	@ (8001adc <__NVIC_GetPriorityGrouping+0x18>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	0a1b      	lsrs	r3, r3, #8
 8001ace:	f003 0307 	and.w	r3, r3, #7
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	e000ed00 	.word	0xe000ed00

08001ae0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	db0b      	blt.n	8001b0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001af2:	79fb      	ldrb	r3, [r7, #7]
 8001af4:	f003 021f 	and.w	r2, r3, #31
 8001af8:	4906      	ldr	r1, [pc, #24]	@ (8001b14 <__NVIC_EnableIRQ+0x34>)
 8001afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afe:	095b      	lsrs	r3, r3, #5
 8001b00:	2001      	movs	r0, #1
 8001b02:	fa00 f202 	lsl.w	r2, r0, r2
 8001b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr
 8001b14:	e000e100 	.word	0xe000e100

08001b18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	6039      	str	r1, [r7, #0]
 8001b22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	db0a      	blt.n	8001b42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	b2da      	uxtb	r2, r3
 8001b30:	490c      	ldr	r1, [pc, #48]	@ (8001b64 <__NVIC_SetPriority+0x4c>)
 8001b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b36:	0112      	lsls	r2, r2, #4
 8001b38:	b2d2      	uxtb	r2, r2
 8001b3a:	440b      	add	r3, r1
 8001b3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b40:	e00a      	b.n	8001b58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	4908      	ldr	r1, [pc, #32]	@ (8001b68 <__NVIC_SetPriority+0x50>)
 8001b48:	79fb      	ldrb	r3, [r7, #7]
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	3b04      	subs	r3, #4
 8001b50:	0112      	lsls	r2, r2, #4
 8001b52:	b2d2      	uxtb	r2, r2
 8001b54:	440b      	add	r3, r1
 8001b56:	761a      	strb	r2, [r3, #24]
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bc80      	pop	{r7}
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	e000e100 	.word	0xe000e100
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b089      	sub	sp, #36	@ 0x24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	f1c3 0307 	rsb	r3, r3, #7
 8001b86:	2b04      	cmp	r3, #4
 8001b88:	bf28      	it	cs
 8001b8a:	2304      	movcs	r3, #4
 8001b8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	3304      	adds	r3, #4
 8001b92:	2b06      	cmp	r3, #6
 8001b94:	d902      	bls.n	8001b9c <NVIC_EncodePriority+0x30>
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	3b03      	subs	r3, #3
 8001b9a:	e000      	b.n	8001b9e <NVIC_EncodePriority+0x32>
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43da      	mvns	r2, r3
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	401a      	ands	r2, r3
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	fa01 f303 	lsl.w	r3, r1, r3
 8001bbe:	43d9      	mvns	r1, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc4:	4313      	orrs	r3, r2
         );
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3724      	adds	r7, #36	@ 0x24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr

08001bd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001be0:	d301      	bcc.n	8001be6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001be2:	2301      	movs	r3, #1
 8001be4:	e00f      	b.n	8001c06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001be6:	4a0a      	ldr	r2, [pc, #40]	@ (8001c10 <SysTick_Config+0x40>)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	3b01      	subs	r3, #1
 8001bec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bee:	210f      	movs	r1, #15
 8001bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf4:	f7ff ff90 	bl	8001b18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bf8:	4b05      	ldr	r3, [pc, #20]	@ (8001c10 <SysTick_Config+0x40>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bfe:	4b04      	ldr	r3, [pc, #16]	@ (8001c10 <SysTick_Config+0x40>)
 8001c00:	2207      	movs	r2, #7
 8001c02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	e000e010 	.word	0xe000e010

08001c14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f7ff ff2d 	bl	8001a7c <__NVIC_SetPriorityGrouping>
}
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b086      	sub	sp, #24
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	4603      	mov	r3, r0
 8001c32:	60b9      	str	r1, [r7, #8]
 8001c34:	607a      	str	r2, [r7, #4]
 8001c36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c3c:	f7ff ff42 	bl	8001ac4 <__NVIC_GetPriorityGrouping>
 8001c40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	68b9      	ldr	r1, [r7, #8]
 8001c46:	6978      	ldr	r0, [r7, #20]
 8001c48:	f7ff ff90 	bl	8001b6c <NVIC_EncodePriority>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c52:	4611      	mov	r1, r2
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff ff5f 	bl	8001b18 <__NVIC_SetPriority>
}
 8001c5a:	bf00      	nop
 8001c5c:	3718      	adds	r7, #24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	4603      	mov	r3, r0
 8001c6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff ff35 	bl	8001ae0 <__NVIC_EnableIRQ>
}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b082      	sub	sp, #8
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7ff ffa2 	bl	8001bd0 <SysTick_Config>
 8001c8c:	4603      	mov	r3, r0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
	...

08001c98 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d101      	bne.n	8001cae <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e043      	b.n	8001d36 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	4b22      	ldr	r3, [pc, #136]	@ (8001d40 <HAL_DMA_Init+0xa8>)
 8001cb6:	4413      	add	r3, r2
 8001cb8:	4a22      	ldr	r2, [pc, #136]	@ (8001d44 <HAL_DMA_Init+0xac>)
 8001cba:	fba2 2303 	umull	r2, r3, r2, r3
 8001cbe:	091b      	lsrs	r3, r3, #4
 8001cc0:	009a      	lsls	r2, r3, #2
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a1f      	ldr	r2, [pc, #124]	@ (8001d48 <HAL_DMA_Init+0xb0>)
 8001cca:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2202      	movs	r2, #2
 8001cd0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001ce2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001ce6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001cf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001d10:	68fa      	ldr	r2, [r7, #12]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr
 8001d40:	bffdfff8 	.word	0xbffdfff8
 8001d44:	cccccccd 	.word	0xcccccccd
 8001d48:	40020000 	.word	0x40020000

08001d4c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
 8001d58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d101      	bne.n	8001d6c <HAL_DMA_Start_IT+0x20>
 8001d68:	2302      	movs	r3, #2
 8001d6a:	e04b      	b.n	8001e04 <HAL_DMA_Start_IT+0xb8>
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d13a      	bne.n	8001df6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2202      	movs	r2, #2
 8001d84:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 0201 	bic.w	r2, r2, #1
 8001d9c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	68b9      	ldr	r1, [r7, #8]
 8001da4:	68f8      	ldr	r0, [r7, #12]
 8001da6:	f000 f9bc 	bl	8002122 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d008      	beq.n	8001dc4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f042 020e 	orr.w	r2, r2, #14
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	e00f      	b.n	8001de4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f022 0204 	bic.w	r2, r2, #4
 8001dd2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f042 020a 	orr.w	r2, r2, #10
 8001de2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f042 0201 	orr.w	r2, r2, #1
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	e005      	b.n	8001e02 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001e02:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e14:	2300      	movs	r3, #0
 8001e16:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d005      	beq.n	8001e30 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2204      	movs	r2, #4
 8001e28:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	73fb      	strb	r3, [r7, #15]
 8001e2e:	e051      	b.n	8001ed4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 020e 	bic.w	r2, r2, #14
 8001e3e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f022 0201 	bic.w	r2, r2, #1
 8001e4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a22      	ldr	r2, [pc, #136]	@ (8001ee0 <HAL_DMA_Abort_IT+0xd4>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d029      	beq.n	8001eae <HAL_DMA_Abort_IT+0xa2>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a21      	ldr	r2, [pc, #132]	@ (8001ee4 <HAL_DMA_Abort_IT+0xd8>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d022      	beq.n	8001eaa <HAL_DMA_Abort_IT+0x9e>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a1f      	ldr	r2, [pc, #124]	@ (8001ee8 <HAL_DMA_Abort_IT+0xdc>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d01a      	beq.n	8001ea4 <HAL_DMA_Abort_IT+0x98>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a1e      	ldr	r2, [pc, #120]	@ (8001eec <HAL_DMA_Abort_IT+0xe0>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d012      	beq.n	8001e9e <HAL_DMA_Abort_IT+0x92>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ef0 <HAL_DMA_Abort_IT+0xe4>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d00a      	beq.n	8001e98 <HAL_DMA_Abort_IT+0x8c>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a1b      	ldr	r2, [pc, #108]	@ (8001ef4 <HAL_DMA_Abort_IT+0xe8>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d102      	bne.n	8001e92 <HAL_DMA_Abort_IT+0x86>
 8001e8c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001e90:	e00e      	b.n	8001eb0 <HAL_DMA_Abort_IT+0xa4>
 8001e92:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e96:	e00b      	b.n	8001eb0 <HAL_DMA_Abort_IT+0xa4>
 8001e98:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e9c:	e008      	b.n	8001eb0 <HAL_DMA_Abort_IT+0xa4>
 8001e9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ea2:	e005      	b.n	8001eb0 <HAL_DMA_Abort_IT+0xa4>
 8001ea4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ea8:	e002      	b.n	8001eb0 <HAL_DMA_Abort_IT+0xa4>
 8001eaa:	2310      	movs	r3, #16
 8001eac:	e000      	b.n	8001eb0 <HAL_DMA_Abort_IT+0xa4>
 8001eae:	2301      	movs	r3, #1
 8001eb0:	4a11      	ldr	r2, [pc, #68]	@ (8001ef8 <HAL_DMA_Abort_IT+0xec>)
 8001eb2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	4798      	blx	r3
    } 
  }
  return status;
 8001ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40020008 	.word	0x40020008
 8001ee4:	4002001c 	.word	0x4002001c
 8001ee8:	40020030 	.word	0x40020030
 8001eec:	40020044 	.word	0x40020044
 8001ef0:	40020058 	.word	0x40020058
 8001ef4:	4002006c 	.word	0x4002006c
 8001ef8:	40020000 	.word	0x40020000

08001efc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f18:	2204      	movs	r2, #4
 8001f1a:	409a      	lsls	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d04f      	beq.n	8001fc4 <HAL_DMA_IRQHandler+0xc8>
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	f003 0304 	and.w	r3, r3, #4
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d04a      	beq.n	8001fc4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0320 	and.w	r3, r3, #32
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d107      	bne.n	8001f4c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f022 0204 	bic.w	r2, r2, #4
 8001f4a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a66      	ldr	r2, [pc, #408]	@ (80020ec <HAL_DMA_IRQHandler+0x1f0>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d029      	beq.n	8001faa <HAL_DMA_IRQHandler+0xae>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a65      	ldr	r2, [pc, #404]	@ (80020f0 <HAL_DMA_IRQHandler+0x1f4>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d022      	beq.n	8001fa6 <HAL_DMA_IRQHandler+0xaa>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a63      	ldr	r2, [pc, #396]	@ (80020f4 <HAL_DMA_IRQHandler+0x1f8>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d01a      	beq.n	8001fa0 <HAL_DMA_IRQHandler+0xa4>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a62      	ldr	r2, [pc, #392]	@ (80020f8 <HAL_DMA_IRQHandler+0x1fc>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d012      	beq.n	8001f9a <HAL_DMA_IRQHandler+0x9e>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a60      	ldr	r2, [pc, #384]	@ (80020fc <HAL_DMA_IRQHandler+0x200>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d00a      	beq.n	8001f94 <HAL_DMA_IRQHandler+0x98>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a5f      	ldr	r2, [pc, #380]	@ (8002100 <HAL_DMA_IRQHandler+0x204>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d102      	bne.n	8001f8e <HAL_DMA_IRQHandler+0x92>
 8001f88:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001f8c:	e00e      	b.n	8001fac <HAL_DMA_IRQHandler+0xb0>
 8001f8e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001f92:	e00b      	b.n	8001fac <HAL_DMA_IRQHandler+0xb0>
 8001f94:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001f98:	e008      	b.n	8001fac <HAL_DMA_IRQHandler+0xb0>
 8001f9a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001f9e:	e005      	b.n	8001fac <HAL_DMA_IRQHandler+0xb0>
 8001fa0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fa4:	e002      	b.n	8001fac <HAL_DMA_IRQHandler+0xb0>
 8001fa6:	2340      	movs	r3, #64	@ 0x40
 8001fa8:	e000      	b.n	8001fac <HAL_DMA_IRQHandler+0xb0>
 8001faa:	2304      	movs	r3, #4
 8001fac:	4a55      	ldr	r2, [pc, #340]	@ (8002104 <HAL_DMA_IRQHandler+0x208>)
 8001fae:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f000 8094 	beq.w	80020e2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001fc2:	e08e      	b.n	80020e2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc8:	2202      	movs	r2, #2
 8001fca:	409a      	lsls	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d056      	beq.n	8002082 <HAL_DMA_IRQHandler+0x186>
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d051      	beq.n	8002082 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0320 	and.w	r3, r3, #32
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10b      	bne.n	8002004 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f022 020a 	bic.w	r2, r2, #10
 8001ffa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a38      	ldr	r2, [pc, #224]	@ (80020ec <HAL_DMA_IRQHandler+0x1f0>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d029      	beq.n	8002062 <HAL_DMA_IRQHandler+0x166>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a37      	ldr	r2, [pc, #220]	@ (80020f0 <HAL_DMA_IRQHandler+0x1f4>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d022      	beq.n	800205e <HAL_DMA_IRQHandler+0x162>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a35      	ldr	r2, [pc, #212]	@ (80020f4 <HAL_DMA_IRQHandler+0x1f8>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d01a      	beq.n	8002058 <HAL_DMA_IRQHandler+0x15c>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a34      	ldr	r2, [pc, #208]	@ (80020f8 <HAL_DMA_IRQHandler+0x1fc>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d012      	beq.n	8002052 <HAL_DMA_IRQHandler+0x156>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a32      	ldr	r2, [pc, #200]	@ (80020fc <HAL_DMA_IRQHandler+0x200>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d00a      	beq.n	800204c <HAL_DMA_IRQHandler+0x150>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a31      	ldr	r2, [pc, #196]	@ (8002100 <HAL_DMA_IRQHandler+0x204>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d102      	bne.n	8002046 <HAL_DMA_IRQHandler+0x14a>
 8002040:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002044:	e00e      	b.n	8002064 <HAL_DMA_IRQHandler+0x168>
 8002046:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800204a:	e00b      	b.n	8002064 <HAL_DMA_IRQHandler+0x168>
 800204c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002050:	e008      	b.n	8002064 <HAL_DMA_IRQHandler+0x168>
 8002052:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002056:	e005      	b.n	8002064 <HAL_DMA_IRQHandler+0x168>
 8002058:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800205c:	e002      	b.n	8002064 <HAL_DMA_IRQHandler+0x168>
 800205e:	2320      	movs	r3, #32
 8002060:	e000      	b.n	8002064 <HAL_DMA_IRQHandler+0x168>
 8002062:	2302      	movs	r3, #2
 8002064:	4a27      	ldr	r2, [pc, #156]	@ (8002104 <HAL_DMA_IRQHandler+0x208>)
 8002066:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002074:	2b00      	cmp	r3, #0
 8002076:	d034      	beq.n	80020e2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002080:	e02f      	b.n	80020e2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002086:	2208      	movs	r2, #8
 8002088:	409a      	lsls	r2, r3
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	4013      	ands	r3, r2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d028      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x1e8>
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	f003 0308 	and.w	r3, r3, #8
 8002098:	2b00      	cmp	r3, #0
 800209a:	d023      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 020e 	bic.w	r2, r2, #14
 80020aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020b4:	2101      	movs	r1, #1
 80020b6:	fa01 f202 	lsl.w	r2, r1, r2
 80020ba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2201      	movs	r2, #1
 80020c6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d004      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	4798      	blx	r3
    }
  }
  return;
 80020e2:	bf00      	nop
 80020e4:	bf00      	nop
}
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40020008 	.word	0x40020008
 80020f0:	4002001c 	.word	0x4002001c
 80020f4:	40020030 	.word	0x40020030
 80020f8:	40020044 	.word	0x40020044
 80020fc:	40020058 	.word	0x40020058
 8002100:	4002006c 	.word	0x4002006c
 8002104:	40020000 	.word	0x40020000

08002108 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002116:	b2db      	uxtb	r3, r3
}
 8002118:	4618      	mov	r0, r3
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	bc80      	pop	{r7}
 8002120:	4770      	bx	lr

08002122 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002122:	b480      	push	{r7}
 8002124:	b085      	sub	sp, #20
 8002126:	af00      	add	r7, sp, #0
 8002128:	60f8      	str	r0, [r7, #12]
 800212a:	60b9      	str	r1, [r7, #8]
 800212c:	607a      	str	r2, [r7, #4]
 800212e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002138:	2101      	movs	r1, #1
 800213a:	fa01 f202 	lsl.w	r2, r1, r2
 800213e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2b10      	cmp	r3, #16
 800214e:	d108      	bne.n	8002162 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68ba      	ldr	r2, [r7, #8]
 800215e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002160:	e007      	b.n	8002172 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	60da      	str	r2, [r3, #12]
}
 8002172:	bf00      	nop
 8002174:	3714      	adds	r7, #20
 8002176:	46bd      	mov	sp, r7
 8002178:	bc80      	pop	{r7}
 800217a:	4770      	bx	lr

0800217c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800217c:	b480      	push	{r7}
 800217e:	b08b      	sub	sp, #44	@ 0x2c
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002186:	2300      	movs	r3, #0
 8002188:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800218a:	2300      	movs	r3, #0
 800218c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800218e:	e169      	b.n	8002464 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002190:	2201      	movs	r2, #1
 8002192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	69fa      	ldr	r2, [r7, #28]
 80021a0:	4013      	ands	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	f040 8158 	bne.w	800245e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	4a9a      	ldr	r2, [pc, #616]	@ (800241c <HAL_GPIO_Init+0x2a0>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d05e      	beq.n	8002276 <HAL_GPIO_Init+0xfa>
 80021b8:	4a98      	ldr	r2, [pc, #608]	@ (800241c <HAL_GPIO_Init+0x2a0>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d875      	bhi.n	80022aa <HAL_GPIO_Init+0x12e>
 80021be:	4a98      	ldr	r2, [pc, #608]	@ (8002420 <HAL_GPIO_Init+0x2a4>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d058      	beq.n	8002276 <HAL_GPIO_Init+0xfa>
 80021c4:	4a96      	ldr	r2, [pc, #600]	@ (8002420 <HAL_GPIO_Init+0x2a4>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d86f      	bhi.n	80022aa <HAL_GPIO_Init+0x12e>
 80021ca:	4a96      	ldr	r2, [pc, #600]	@ (8002424 <HAL_GPIO_Init+0x2a8>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d052      	beq.n	8002276 <HAL_GPIO_Init+0xfa>
 80021d0:	4a94      	ldr	r2, [pc, #592]	@ (8002424 <HAL_GPIO_Init+0x2a8>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d869      	bhi.n	80022aa <HAL_GPIO_Init+0x12e>
 80021d6:	4a94      	ldr	r2, [pc, #592]	@ (8002428 <HAL_GPIO_Init+0x2ac>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d04c      	beq.n	8002276 <HAL_GPIO_Init+0xfa>
 80021dc:	4a92      	ldr	r2, [pc, #584]	@ (8002428 <HAL_GPIO_Init+0x2ac>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d863      	bhi.n	80022aa <HAL_GPIO_Init+0x12e>
 80021e2:	4a92      	ldr	r2, [pc, #584]	@ (800242c <HAL_GPIO_Init+0x2b0>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d046      	beq.n	8002276 <HAL_GPIO_Init+0xfa>
 80021e8:	4a90      	ldr	r2, [pc, #576]	@ (800242c <HAL_GPIO_Init+0x2b0>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d85d      	bhi.n	80022aa <HAL_GPIO_Init+0x12e>
 80021ee:	2b12      	cmp	r3, #18
 80021f0:	d82a      	bhi.n	8002248 <HAL_GPIO_Init+0xcc>
 80021f2:	2b12      	cmp	r3, #18
 80021f4:	d859      	bhi.n	80022aa <HAL_GPIO_Init+0x12e>
 80021f6:	a201      	add	r2, pc, #4	@ (adr r2, 80021fc <HAL_GPIO_Init+0x80>)
 80021f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021fc:	08002277 	.word	0x08002277
 8002200:	08002251 	.word	0x08002251
 8002204:	08002263 	.word	0x08002263
 8002208:	080022a5 	.word	0x080022a5
 800220c:	080022ab 	.word	0x080022ab
 8002210:	080022ab 	.word	0x080022ab
 8002214:	080022ab 	.word	0x080022ab
 8002218:	080022ab 	.word	0x080022ab
 800221c:	080022ab 	.word	0x080022ab
 8002220:	080022ab 	.word	0x080022ab
 8002224:	080022ab 	.word	0x080022ab
 8002228:	080022ab 	.word	0x080022ab
 800222c:	080022ab 	.word	0x080022ab
 8002230:	080022ab 	.word	0x080022ab
 8002234:	080022ab 	.word	0x080022ab
 8002238:	080022ab 	.word	0x080022ab
 800223c:	080022ab 	.word	0x080022ab
 8002240:	08002259 	.word	0x08002259
 8002244:	0800226d 	.word	0x0800226d
 8002248:	4a79      	ldr	r2, [pc, #484]	@ (8002430 <HAL_GPIO_Init+0x2b4>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d013      	beq.n	8002276 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800224e:	e02c      	b.n	80022aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	623b      	str	r3, [r7, #32]
          break;
 8002256:	e029      	b.n	80022ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	3304      	adds	r3, #4
 800225e:	623b      	str	r3, [r7, #32]
          break;
 8002260:	e024      	b.n	80022ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	3308      	adds	r3, #8
 8002268:	623b      	str	r3, [r7, #32]
          break;
 800226a:	e01f      	b.n	80022ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	330c      	adds	r3, #12
 8002272:	623b      	str	r3, [r7, #32]
          break;
 8002274:	e01a      	b.n	80022ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d102      	bne.n	8002284 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800227e:	2304      	movs	r3, #4
 8002280:	623b      	str	r3, [r7, #32]
          break;
 8002282:	e013      	b.n	80022ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d105      	bne.n	8002298 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800228c:	2308      	movs	r3, #8
 800228e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	69fa      	ldr	r2, [r7, #28]
 8002294:	611a      	str	r2, [r3, #16]
          break;
 8002296:	e009      	b.n	80022ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002298:	2308      	movs	r3, #8
 800229a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	69fa      	ldr	r2, [r7, #28]
 80022a0:	615a      	str	r2, [r3, #20]
          break;
 80022a2:	e003      	b.n	80022ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022a4:	2300      	movs	r3, #0
 80022a6:	623b      	str	r3, [r7, #32]
          break;
 80022a8:	e000      	b.n	80022ac <HAL_GPIO_Init+0x130>
          break;
 80022aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	2bff      	cmp	r3, #255	@ 0xff
 80022b0:	d801      	bhi.n	80022b6 <HAL_GPIO_Init+0x13a>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	e001      	b.n	80022ba <HAL_GPIO_Init+0x13e>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	3304      	adds	r3, #4
 80022ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	2bff      	cmp	r3, #255	@ 0xff
 80022c0:	d802      	bhi.n	80022c8 <HAL_GPIO_Init+0x14c>
 80022c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	e002      	b.n	80022ce <HAL_GPIO_Init+0x152>
 80022c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ca:	3b08      	subs	r3, #8
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	210f      	movs	r1, #15
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	fa01 f303 	lsl.w	r3, r1, r3
 80022dc:	43db      	mvns	r3, r3
 80022de:	401a      	ands	r2, r3
 80022e0:	6a39      	ldr	r1, [r7, #32]
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	fa01 f303 	lsl.w	r3, r1, r3
 80022e8:	431a      	orrs	r2, r3
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f000 80b1 	beq.w	800245e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022fc:	4b4d      	ldr	r3, [pc, #308]	@ (8002434 <HAL_GPIO_Init+0x2b8>)
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	4a4c      	ldr	r2, [pc, #304]	@ (8002434 <HAL_GPIO_Init+0x2b8>)
 8002302:	f043 0301 	orr.w	r3, r3, #1
 8002306:	6193      	str	r3, [r2, #24]
 8002308:	4b4a      	ldr	r3, [pc, #296]	@ (8002434 <HAL_GPIO_Init+0x2b8>)
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	60bb      	str	r3, [r7, #8]
 8002312:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002314:	4a48      	ldr	r2, [pc, #288]	@ (8002438 <HAL_GPIO_Init+0x2bc>)
 8002316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002318:	089b      	lsrs	r3, r3, #2
 800231a:	3302      	adds	r3, #2
 800231c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002320:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002324:	f003 0303 	and.w	r3, r3, #3
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	220f      	movs	r2, #15
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	4013      	ands	r3, r2
 8002336:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a40      	ldr	r2, [pc, #256]	@ (800243c <HAL_GPIO_Init+0x2c0>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d013      	beq.n	8002368 <HAL_GPIO_Init+0x1ec>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a3f      	ldr	r2, [pc, #252]	@ (8002440 <HAL_GPIO_Init+0x2c4>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d00d      	beq.n	8002364 <HAL_GPIO_Init+0x1e8>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a3e      	ldr	r2, [pc, #248]	@ (8002444 <HAL_GPIO_Init+0x2c8>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d007      	beq.n	8002360 <HAL_GPIO_Init+0x1e4>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a3d      	ldr	r2, [pc, #244]	@ (8002448 <HAL_GPIO_Init+0x2cc>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d101      	bne.n	800235c <HAL_GPIO_Init+0x1e0>
 8002358:	2303      	movs	r3, #3
 800235a:	e006      	b.n	800236a <HAL_GPIO_Init+0x1ee>
 800235c:	2304      	movs	r3, #4
 800235e:	e004      	b.n	800236a <HAL_GPIO_Init+0x1ee>
 8002360:	2302      	movs	r3, #2
 8002362:	e002      	b.n	800236a <HAL_GPIO_Init+0x1ee>
 8002364:	2301      	movs	r3, #1
 8002366:	e000      	b.n	800236a <HAL_GPIO_Init+0x1ee>
 8002368:	2300      	movs	r3, #0
 800236a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800236c:	f002 0203 	and.w	r2, r2, #3
 8002370:	0092      	lsls	r2, r2, #2
 8002372:	4093      	lsls	r3, r2
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	4313      	orrs	r3, r2
 8002378:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800237a:	492f      	ldr	r1, [pc, #188]	@ (8002438 <HAL_GPIO_Init+0x2bc>)
 800237c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800237e:	089b      	lsrs	r3, r3, #2
 8002380:	3302      	adds	r3, #2
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d006      	beq.n	80023a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002394:	4b2d      	ldr	r3, [pc, #180]	@ (800244c <HAL_GPIO_Init+0x2d0>)
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	492c      	ldr	r1, [pc, #176]	@ (800244c <HAL_GPIO_Init+0x2d0>)
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	4313      	orrs	r3, r2
 800239e:	608b      	str	r3, [r1, #8]
 80023a0:	e006      	b.n	80023b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023a2:	4b2a      	ldr	r3, [pc, #168]	@ (800244c <HAL_GPIO_Init+0x2d0>)
 80023a4:	689a      	ldr	r2, [r3, #8]
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	43db      	mvns	r3, r3
 80023aa:	4928      	ldr	r1, [pc, #160]	@ (800244c <HAL_GPIO_Init+0x2d0>)
 80023ac:	4013      	ands	r3, r2
 80023ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d006      	beq.n	80023ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023bc:	4b23      	ldr	r3, [pc, #140]	@ (800244c <HAL_GPIO_Init+0x2d0>)
 80023be:	68da      	ldr	r2, [r3, #12]
 80023c0:	4922      	ldr	r1, [pc, #136]	@ (800244c <HAL_GPIO_Init+0x2d0>)
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	60cb      	str	r3, [r1, #12]
 80023c8:	e006      	b.n	80023d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023ca:	4b20      	ldr	r3, [pc, #128]	@ (800244c <HAL_GPIO_Init+0x2d0>)
 80023cc:	68da      	ldr	r2, [r3, #12]
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	43db      	mvns	r3, r3
 80023d2:	491e      	ldr	r1, [pc, #120]	@ (800244c <HAL_GPIO_Init+0x2d0>)
 80023d4:	4013      	ands	r3, r2
 80023d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d006      	beq.n	80023f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023e4:	4b19      	ldr	r3, [pc, #100]	@ (800244c <HAL_GPIO_Init+0x2d0>)
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	4918      	ldr	r1, [pc, #96]	@ (800244c <HAL_GPIO_Init+0x2d0>)
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	604b      	str	r3, [r1, #4]
 80023f0:	e006      	b.n	8002400 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023f2:	4b16      	ldr	r3, [pc, #88]	@ (800244c <HAL_GPIO_Init+0x2d0>)
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	43db      	mvns	r3, r3
 80023fa:	4914      	ldr	r1, [pc, #80]	@ (800244c <HAL_GPIO_Init+0x2d0>)
 80023fc:	4013      	ands	r3, r2
 80023fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d021      	beq.n	8002450 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800240c:	4b0f      	ldr	r3, [pc, #60]	@ (800244c <HAL_GPIO_Init+0x2d0>)
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	490e      	ldr	r1, [pc, #56]	@ (800244c <HAL_GPIO_Init+0x2d0>)
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	4313      	orrs	r3, r2
 8002416:	600b      	str	r3, [r1, #0]
 8002418:	e021      	b.n	800245e <HAL_GPIO_Init+0x2e2>
 800241a:	bf00      	nop
 800241c:	10320000 	.word	0x10320000
 8002420:	10310000 	.word	0x10310000
 8002424:	10220000 	.word	0x10220000
 8002428:	10210000 	.word	0x10210000
 800242c:	10120000 	.word	0x10120000
 8002430:	10110000 	.word	0x10110000
 8002434:	40021000 	.word	0x40021000
 8002438:	40010000 	.word	0x40010000
 800243c:	40010800 	.word	0x40010800
 8002440:	40010c00 	.word	0x40010c00
 8002444:	40011000 	.word	0x40011000
 8002448:	40011400 	.word	0x40011400
 800244c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002450:	4b0b      	ldr	r3, [pc, #44]	@ (8002480 <HAL_GPIO_Init+0x304>)
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	43db      	mvns	r3, r3
 8002458:	4909      	ldr	r1, [pc, #36]	@ (8002480 <HAL_GPIO_Init+0x304>)
 800245a:	4013      	ands	r3, r2
 800245c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800245e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002460:	3301      	adds	r3, #1
 8002462:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800246a:	fa22 f303 	lsr.w	r3, r2, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	f47f ae8e 	bne.w	8002190 <HAL_GPIO_Init+0x14>
  }
}
 8002474:	bf00      	nop
 8002476:	bf00      	nop
 8002478:	372c      	adds	r7, #44	@ 0x2c
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr
 8002480:	40010400 	.word	0x40010400

08002484 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e12b      	b.n	80026ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d106      	bne.n	80024b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7fe ff32 	bl	8001314 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2224      	movs	r2, #36	@ 0x24
 80024b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 0201 	bic.w	r2, r2, #1
 80024c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80024d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80024e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024e8:	f003 fbfc 	bl	8005ce4 <HAL_RCC_GetPCLK1Freq>
 80024ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	4a81      	ldr	r2, [pc, #516]	@ (80026f8 <HAL_I2C_Init+0x274>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d807      	bhi.n	8002508 <HAL_I2C_Init+0x84>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4a80      	ldr	r2, [pc, #512]	@ (80026fc <HAL_I2C_Init+0x278>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	bf94      	ite	ls
 8002500:	2301      	movls	r3, #1
 8002502:	2300      	movhi	r3, #0
 8002504:	b2db      	uxtb	r3, r3
 8002506:	e006      	b.n	8002516 <HAL_I2C_Init+0x92>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	4a7d      	ldr	r2, [pc, #500]	@ (8002700 <HAL_I2C_Init+0x27c>)
 800250c:	4293      	cmp	r3, r2
 800250e:	bf94      	ite	ls
 8002510:	2301      	movls	r3, #1
 8002512:	2300      	movhi	r3, #0
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e0e7      	b.n	80026ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	4a78      	ldr	r2, [pc, #480]	@ (8002704 <HAL_I2C_Init+0x280>)
 8002522:	fba2 2303 	umull	r2, r3, r2, r3
 8002526:	0c9b      	lsrs	r3, r3, #18
 8002528:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68ba      	ldr	r2, [r7, #8]
 800253a:	430a      	orrs	r2, r1
 800253c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	4a6a      	ldr	r2, [pc, #424]	@ (80026f8 <HAL_I2C_Init+0x274>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d802      	bhi.n	8002558 <HAL_I2C_Init+0xd4>
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	3301      	adds	r3, #1
 8002556:	e009      	b.n	800256c <HAL_I2C_Init+0xe8>
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800255e:	fb02 f303 	mul.w	r3, r2, r3
 8002562:	4a69      	ldr	r2, [pc, #420]	@ (8002708 <HAL_I2C_Init+0x284>)
 8002564:	fba2 2303 	umull	r2, r3, r2, r3
 8002568:	099b      	lsrs	r3, r3, #6
 800256a:	3301      	adds	r3, #1
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6812      	ldr	r2, [r2, #0]
 8002570:	430b      	orrs	r3, r1
 8002572:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800257e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	495c      	ldr	r1, [pc, #368]	@ (80026f8 <HAL_I2C_Init+0x274>)
 8002588:	428b      	cmp	r3, r1
 800258a:	d819      	bhi.n	80025c0 <HAL_I2C_Init+0x13c>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	1e59      	subs	r1, r3, #1
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	fbb1 f3f3 	udiv	r3, r1, r3
 800259a:	1c59      	adds	r1, r3, #1
 800259c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80025a0:	400b      	ands	r3, r1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00a      	beq.n	80025bc <HAL_I2C_Init+0x138>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	1e59      	subs	r1, r3, #1
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80025b4:	3301      	adds	r3, #1
 80025b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025ba:	e051      	b.n	8002660 <HAL_I2C_Init+0x1dc>
 80025bc:	2304      	movs	r3, #4
 80025be:	e04f      	b.n	8002660 <HAL_I2C_Init+0x1dc>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d111      	bne.n	80025ec <HAL_I2C_Init+0x168>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	1e58      	subs	r0, r3, #1
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6859      	ldr	r1, [r3, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	440b      	add	r3, r1
 80025d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80025da:	3301      	adds	r3, #1
 80025dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	bf0c      	ite	eq
 80025e4:	2301      	moveq	r3, #1
 80025e6:	2300      	movne	r3, #0
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	e012      	b.n	8002612 <HAL_I2C_Init+0x18e>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	1e58      	subs	r0, r3, #1
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6859      	ldr	r1, [r3, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	440b      	add	r3, r1
 80025fa:	0099      	lsls	r1, r3, #2
 80025fc:	440b      	add	r3, r1
 80025fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002602:	3301      	adds	r3, #1
 8002604:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002608:	2b00      	cmp	r3, #0
 800260a:	bf0c      	ite	eq
 800260c:	2301      	moveq	r3, #1
 800260e:	2300      	movne	r3, #0
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <HAL_I2C_Init+0x196>
 8002616:	2301      	movs	r3, #1
 8002618:	e022      	b.n	8002660 <HAL_I2C_Init+0x1dc>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10e      	bne.n	8002640 <HAL_I2C_Init+0x1bc>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	1e58      	subs	r0, r3, #1
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6859      	ldr	r1, [r3, #4]
 800262a:	460b      	mov	r3, r1
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	440b      	add	r3, r1
 8002630:	fbb0 f3f3 	udiv	r3, r0, r3
 8002634:	3301      	adds	r3, #1
 8002636:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800263a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800263e:	e00f      	b.n	8002660 <HAL_I2C_Init+0x1dc>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	1e58      	subs	r0, r3, #1
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6859      	ldr	r1, [r3, #4]
 8002648:	460b      	mov	r3, r1
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	0099      	lsls	r1, r3, #2
 8002650:	440b      	add	r3, r1
 8002652:	fbb0 f3f3 	udiv	r3, r0, r3
 8002656:	3301      	adds	r3, #1
 8002658:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800265c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002660:	6879      	ldr	r1, [r7, #4]
 8002662:	6809      	ldr	r1, [r1, #0]
 8002664:	4313      	orrs	r3, r2
 8002666:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	69da      	ldr	r2, [r3, #28]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	431a      	orrs	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	430a      	orrs	r2, r1
 8002682:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800268e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	6911      	ldr	r1, [r2, #16]
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	68d2      	ldr	r2, [r2, #12]
 800269a:	4311      	orrs	r1, r2
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	6812      	ldr	r2, [r2, #0]
 80026a0:	430b      	orrs	r3, r1
 80026a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	695a      	ldr	r2, [r3, #20]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	431a      	orrs	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	430a      	orrs	r2, r1
 80026be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f042 0201 	orr.w	r2, r2, #1
 80026ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2220      	movs	r2, #32
 80026da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	000186a0 	.word	0x000186a0
 80026fc:	001e847f 	.word	0x001e847f
 8002700:	003d08ff 	.word	0x003d08ff
 8002704:	431bde83 	.word	0x431bde83
 8002708:	10624dd3 	.word	0x10624dd3

0800270c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800271e:	2b80      	cmp	r3, #128	@ 0x80
 8002720:	d103      	bne.n	800272a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2200      	movs	r2, #0
 8002728:	611a      	str	r2, [r3, #16]
  }
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr

08002734 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b088      	sub	sp, #32
 8002738:	af02      	add	r7, sp, #8
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	607a      	str	r2, [r7, #4]
 800273e:	461a      	mov	r2, r3
 8002740:	460b      	mov	r3, r1
 8002742:	817b      	strh	r3, [r7, #10]
 8002744:	4613      	mov	r3, r2
 8002746:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002748:	f7ff f96a 	bl	8001a20 <HAL_GetTick>
 800274c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b20      	cmp	r3, #32
 8002758:	f040 80e0 	bne.w	800291c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	2319      	movs	r3, #25
 8002762:	2201      	movs	r2, #1
 8002764:	4970      	ldr	r1, [pc, #448]	@ (8002928 <HAL_I2C_Master_Transmit+0x1f4>)
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f002 fc70 	bl	800504c <I2C_WaitOnFlagUntilTimeout>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002772:	2302      	movs	r3, #2
 8002774:	e0d3      	b.n	800291e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800277c:	2b01      	cmp	r3, #1
 800277e:	d101      	bne.n	8002784 <HAL_I2C_Master_Transmit+0x50>
 8002780:	2302      	movs	r3, #2
 8002782:	e0cc      	b.n	800291e <HAL_I2C_Master_Transmit+0x1ea>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b01      	cmp	r3, #1
 8002798:	d007      	beq.n	80027aa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f042 0201 	orr.w	r2, r2, #1
 80027a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2221      	movs	r2, #33	@ 0x21
 80027be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2210      	movs	r2, #16
 80027c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	893a      	ldrh	r2, [r7, #8]
 80027da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	4a50      	ldr	r2, [pc, #320]	@ (800292c <HAL_I2C_Master_Transmit+0x1f8>)
 80027ea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80027ec:	8979      	ldrh	r1, [r7, #10]
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	6a3a      	ldr	r2, [r7, #32]
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	f002 f91c 	bl	8004a30 <I2C_MasterRequestWrite>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e08d      	b.n	800291e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002802:	2300      	movs	r3, #0
 8002804:	613b      	str	r3, [r7, #16]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	613b      	str	r3, [r7, #16]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	613b      	str	r3, [r7, #16]
 8002816:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002818:	e066      	b.n	80028e8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	6a39      	ldr	r1, [r7, #32]
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f002 fd2e 	bl	8005280 <I2C_WaitOnTXEFlagUntilTimeout>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00d      	beq.n	8002846 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282e:	2b04      	cmp	r3, #4
 8002830:	d107      	bne.n	8002842 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002840:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e06b      	b.n	800291e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800284a:	781a      	ldrb	r2, [r3, #0]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002856:	1c5a      	adds	r2, r3, #1
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002860:	b29b      	uxth	r3, r3
 8002862:	3b01      	subs	r3, #1
 8002864:	b29a      	uxth	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800286e:	3b01      	subs	r3, #1
 8002870:	b29a      	uxth	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	2b04      	cmp	r3, #4
 8002882:	d11b      	bne.n	80028bc <HAL_I2C_Master_Transmit+0x188>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002888:	2b00      	cmp	r3, #0
 800288a:	d017      	beq.n	80028bc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002890:	781a      	ldrb	r2, [r3, #0]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289c:	1c5a      	adds	r2, r3, #1
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	3b01      	subs	r3, #1
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028b4:	3b01      	subs	r3, #1
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028bc:	697a      	ldr	r2, [r7, #20]
 80028be:	6a39      	ldr	r1, [r7, #32]
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f002 fd25 	bl	8005310 <I2C_WaitOnBTFFlagUntilTimeout>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00d      	beq.n	80028e8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d0:	2b04      	cmp	r3, #4
 80028d2:	d107      	bne.n	80028e4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028e2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e01a      	b.n	800291e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d194      	bne.n	800281a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2220      	movs	r2, #32
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002918:	2300      	movs	r3, #0
 800291a:	e000      	b.n	800291e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800291c:	2302      	movs	r3, #2
  }
}
 800291e:	4618      	mov	r0, r3
 8002920:	3718      	adds	r7, #24
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	00100002 	.word	0x00100002
 800292c:	ffff0000 	.word	0xffff0000

08002930 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b08c      	sub	sp, #48	@ 0x30
 8002934:	af02      	add	r7, sp, #8
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	607a      	str	r2, [r7, #4]
 800293a:	461a      	mov	r2, r3
 800293c:	460b      	mov	r3, r1
 800293e:	817b      	strh	r3, [r7, #10]
 8002940:	4613      	mov	r3, r2
 8002942:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002944:	2300      	movs	r3, #0
 8002946:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002948:	f7ff f86a 	bl	8001a20 <HAL_GetTick>
 800294c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b20      	cmp	r3, #32
 8002958:	f040 824b 	bne.w	8002df2 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800295c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295e:	9300      	str	r3, [sp, #0]
 8002960:	2319      	movs	r3, #25
 8002962:	2201      	movs	r2, #1
 8002964:	497f      	ldr	r1, [pc, #508]	@ (8002b64 <HAL_I2C_Master_Receive+0x234>)
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f002 fb70 	bl	800504c <I2C_WaitOnFlagUntilTimeout>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002972:	2302      	movs	r3, #2
 8002974:	e23e      	b.n	8002df4 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800297c:	2b01      	cmp	r3, #1
 800297e:	d101      	bne.n	8002984 <HAL_I2C_Master_Receive+0x54>
 8002980:	2302      	movs	r3, #2
 8002982:	e237      	b.n	8002df4 <HAL_I2C_Master_Receive+0x4c4>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b01      	cmp	r3, #1
 8002998:	d007      	beq.n	80029aa <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f042 0201 	orr.w	r2, r2, #1
 80029a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2222      	movs	r2, #34	@ 0x22
 80029be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2210      	movs	r2, #16
 80029c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	893a      	ldrh	r2, [r7, #8]
 80029da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	4a5f      	ldr	r2, [pc, #380]	@ (8002b68 <HAL_I2C_Master_Receive+0x238>)
 80029ea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80029ec:	8979      	ldrh	r1, [r7, #10]
 80029ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f002 f89e 	bl	8004b34 <I2C_MasterRequestRead>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e1f8      	b.n	8002df4 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d113      	bne.n	8002a32 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	61fb      	str	r3, [r7, #28]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	695b      	ldr	r3, [r3, #20]
 8002a14:	61fb      	str	r3, [r7, #28]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	61fb      	str	r3, [r7, #28]
 8002a1e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	e1cc      	b.n	8002dcc <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d11e      	bne.n	8002a78 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a48:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a4a:	b672      	cpsid	i
}
 8002a4c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61bb      	str	r3, [r7, #24]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	695b      	ldr	r3, [r3, #20]
 8002a58:	61bb      	str	r3, [r7, #24]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	61bb      	str	r3, [r7, #24]
 8002a62:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a72:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002a74:	b662      	cpsie	i
}
 8002a76:	e035      	b.n	8002ae4 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d11e      	bne.n	8002abe <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a8e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a90:	b672      	cpsid	i
}
 8002a92:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a94:	2300      	movs	r3, #0
 8002a96:	617b      	str	r3, [r7, #20]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	617b      	str	r3, [r7, #20]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	617b      	str	r3, [r7, #20]
 8002aa8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ab8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002aba:	b662      	cpsie	i
}
 8002abc:	e012      	b.n	8002ae4 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002acc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ace:	2300      	movs	r3, #0
 8002ad0:	613b      	str	r3, [r7, #16]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	613b      	str	r3, [r7, #16]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	613b      	str	r3, [r7, #16]
 8002ae2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002ae4:	e172      	b.n	8002dcc <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aea:	2b03      	cmp	r3, #3
 8002aec:	f200 811f 	bhi.w	8002d2e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d123      	bne.n	8002b40 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002af8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002afa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f002 fc81 	bl	8005404 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e173      	b.n	8002df4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	691a      	ldr	r2, [r3, #16]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1e:	1c5a      	adds	r2, r3, #1
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	3b01      	subs	r3, #1
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b3e:	e145      	b.n	8002dcc <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d152      	bne.n	8002bee <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4a:	9300      	str	r3, [sp, #0]
 8002b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b4e:	2200      	movs	r2, #0
 8002b50:	4906      	ldr	r1, [pc, #24]	@ (8002b6c <HAL_I2C_Master_Receive+0x23c>)
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f002 fa7a 	bl	800504c <I2C_WaitOnFlagUntilTimeout>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d008      	beq.n	8002b70 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e148      	b.n	8002df4 <HAL_I2C_Master_Receive+0x4c4>
 8002b62:	bf00      	nop
 8002b64:	00100002 	.word	0x00100002
 8002b68:	ffff0000 	.word	0xffff0000
 8002b6c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002b70:	b672      	cpsid	i
}
 8002b72:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	691a      	ldr	r2, [r3, #16]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b8e:	b2d2      	uxtb	r2, r2
 8002b90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b96:	1c5a      	adds	r2, r3, #1
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002bb6:	b662      	cpsie	i
}
 8002bb8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	691a      	ldr	r2, [r3, #16]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc4:	b2d2      	uxtb	r2, r2
 8002bc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bcc:	1c5a      	adds	r2, r3, #1
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	3b01      	subs	r3, #1
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002bec:	e0ee      	b.n	8002dcc <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	4981      	ldr	r1, [pc, #516]	@ (8002dfc <HAL_I2C_Master_Receive+0x4cc>)
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f002 fa27 	bl	800504c <I2C_WaitOnFlagUntilTimeout>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e0f5      	b.n	8002df4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c16:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c18:	b672      	cpsid	i
}
 8002c1a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	691a      	ldr	r2, [r3, #16]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c26:	b2d2      	uxtb	r2, r2
 8002c28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2e:	1c5a      	adds	r2, r3, #1
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	3b01      	subs	r3, #1
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002c4e:	4b6c      	ldr	r3, [pc, #432]	@ (8002e00 <HAL_I2C_Master_Receive+0x4d0>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	08db      	lsrs	r3, r3, #3
 8002c54:	4a6b      	ldr	r2, [pc, #428]	@ (8002e04 <HAL_I2C_Master_Receive+0x4d4>)
 8002c56:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5a:	0a1a      	lsrs	r2, r3, #8
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	00da      	lsls	r2, r3, #3
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002c68:	6a3b      	ldr	r3, [r7, #32]
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002c6e:	6a3b      	ldr	r3, [r7, #32]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d118      	bne.n	8002ca6 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2220      	movs	r2, #32
 8002c7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8e:	f043 0220 	orr.w	r2, r3, #32
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002c96:	b662      	cpsie	i
}
 8002c98:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e0a6      	b.n	8002df4 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	695b      	ldr	r3, [r3, #20]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b04      	cmp	r3, #4
 8002cb2:	d1d9      	bne.n	8002c68 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	691a      	ldr	r2, [r3, #16]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd6:	1c5a      	adds	r2, r3, #1
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002cf6:	b662      	cpsie	i
}
 8002cf8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	691a      	ldr	r2, [r3, #16]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d04:	b2d2      	uxtb	r2, r2
 8002d06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0c:	1c5a      	adds	r2, r3, #1
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d16:	3b01      	subs	r3, #1
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	3b01      	subs	r3, #1
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d2c:	e04e      	b.n	8002dcc <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d30:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f002 fb66 	bl	8005404 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e058      	b.n	8002df4 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	691a      	ldr	r2, [r3, #16]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4c:	b2d2      	uxtb	r2, r2
 8002d4e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d54:	1c5a      	adds	r2, r3, #1
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	f003 0304 	and.w	r3, r3, #4
 8002d7e:	2b04      	cmp	r3, #4
 8002d80:	d124      	bne.n	8002dcc <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d86:	2b03      	cmp	r3, #3
 8002d88:	d107      	bne.n	8002d9a <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d98:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	691a      	ldr	r2, [r3, #16]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dac:	1c5a      	adds	r2, r3, #1
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002db6:	3b01      	subs	r3, #1
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f47f ae88 	bne.w	8002ae6 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2220      	movs	r2, #32
 8002dda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002dee:	2300      	movs	r3, #0
 8002df0:	e000      	b.n	8002df4 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8002df2:	2302      	movs	r3, #2
  }
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3728      	adds	r7, #40	@ 0x28
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	00010004 	.word	0x00010004
 8002e00:	20000004 	.word	0x20000004
 8002e04:	14f8b589 	.word	0x14f8b589

08002e08 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	607a      	str	r2, [r7, #4]
 8002e12:	461a      	mov	r2, r3
 8002e14:	460b      	mov	r3, r1
 8002e16:	817b      	strh	r3, [r7, #10]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	2b20      	cmp	r3, #32
 8002e2a:	f040 8101 	bne.w	8003030 <HAL_I2C_Master_Transmit_DMA+0x228>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002e2e:	4b83      	ldr	r3, [pc, #524]	@ (800303c <HAL_I2C_Master_Transmit_DMA+0x234>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	08db      	lsrs	r3, r3, #3
 8002e34:	4a82      	ldr	r2, [pc, #520]	@ (8003040 <HAL_I2C_Master_Transmit_DMA+0x238>)
 8002e36:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3a:	0a1a      	lsrs	r2, r3, #8
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4413      	add	r3, r2
 8002e42:	009a      	lsls	r2, r3, #2
 8002e44:	4413      	add	r3, r2
 8002e46:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d112      	bne.n	8002e7a <HAL_I2C_Master_Transmit_DMA+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6e:	f043 0220 	orr.w	r2, r3, #32
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8002e76:	2302      	movs	r3, #2
 8002e78:	e0db      	b.n	8003032 <HAL_I2C_Master_Transmit_DMA+0x22a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d0df      	beq.n	8002e48 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d101      	bne.n	8002e96 <HAL_I2C_Master_Transmit_DMA+0x8e>
 8002e92:	2302      	movs	r3, #2
 8002e94:	e0cd      	b.n	8003032 <HAL_I2C_Master_Transmit_DMA+0x22a>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d007      	beq.n	8002ebc <HAL_I2C_Master_Transmit_DMA+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 0201 	orr.w	r2, r2, #1
 8002eba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002eca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2221      	movs	r2, #33	@ 0x21
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2210      	movs	r2, #16
 8002ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	893a      	ldrh	r2, [r7, #8]
 8002eec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	4a52      	ldr	r2, [pc, #328]	@ (8003044 <HAL_I2C_Master_Transmit_DMA+0x23c>)
 8002efc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8002efe:	897a      	ldrh	r2, [r7, #10]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	645a      	str	r2, [r3, #68]	@ 0x44

    if (hi2c->XferSize > 0U)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d073      	beq.n	8002ff4 <HAL_I2C_Master_Transmit_DMA+0x1ec>
    {
      if (hi2c->hdmatx != NULL)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d022      	beq.n	8002f5a <HAL_I2C_Master_Transmit_DMA+0x152>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f18:	4a4b      	ldr	r2, [pc, #300]	@ (8003048 <HAL_I2C_Master_Transmit_DMA+0x240>)
 8002f1a:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f20:	4a4a      	ldr	r2, [pc, #296]	@ (800304c <HAL_I2C_Master_Transmit_DMA+0x244>)
 8002f22:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f28:	2200      	movs	r2, #0
 8002f2a:	62da      	str	r2, [r3, #44]	@ 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f30:	2200      	movs	r2, #0
 8002f32:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	3310      	adds	r3, #16
 8002f44:	461a      	mov	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f4a:	f7fe feff 	bl	8001d4c <HAL_DMA_Start_IT>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8002f52:	7dfb      	ldrb	r3, [r7, #23]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d139      	bne.n	8002fcc <HAL_I2C_Master_Transmit_DMA+0x1c4>
 8002f58:	e013      	b.n	8002f82 <HAL_I2C_Master_Transmit_DMA+0x17a>
        hi2c->State     = HAL_I2C_STATE_READY;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2220      	movs	r2, #32
 8002f5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e057      	b.n	8003032 <HAL_I2C_Master_Transmit_DMA+0x22a>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002f98:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	685a      	ldr	r2, [r3, #4]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fa8:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002fb8:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	e02f      	b.n	800302c <HAL_I2C_Master_Transmit_DMA+0x224>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2220      	movs	r2, #32
 8002fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe0:	f043 0210 	orr.w	r2, r3, #16
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e01e      	b.n	8003032 <HAL_I2C_Master_Transmit_DMA+0x22a>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003002:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003012:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	685a      	ldr	r2, [r3, #4]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 800302a:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 800302c:	2300      	movs	r3, #0
 800302e:	e000      	b.n	8003032 <HAL_I2C_Master_Transmit_DMA+0x22a>
  }
  else
  {
    return HAL_BUSY;
 8003030:	2302      	movs	r3, #2
  }
}
 8003032:	4618      	mov	r0, r3
 8003034:	3718      	adds	r7, #24
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	20000004 	.word	0x20000004
 8003040:	14f8b589 	.word	0x14f8b589
 8003044:	ffff0000 	.word	0xffff0000
 8003048:	08004cd1 	.word	0x08004cd1
 800304c:	08004e8f 	.word	0x08004e8f

08003050 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	607a      	str	r2, [r7, #4]
 800305a:	461a      	mov	r2, r3
 800305c:	460b      	mov	r3, r1
 800305e:	817b      	strh	r3, [r7, #10]
 8003060:	4613      	mov	r3, r2
 8003062:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003064:	2300      	movs	r3, #0
 8003066:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2b20      	cmp	r3, #32
 8003072:	f040 8101 	bne.w	8003278 <HAL_I2C_Master_Receive_DMA+0x228>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003076:	4b83      	ldr	r3, [pc, #524]	@ (8003284 <HAL_I2C_Master_Receive_DMA+0x234>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	08db      	lsrs	r3, r3, #3
 800307c:	4a82      	ldr	r2, [pc, #520]	@ (8003288 <HAL_I2C_Master_Receive_DMA+0x238>)
 800307e:	fba2 2303 	umull	r2, r3, r2, r3
 8003082:	0a1a      	lsrs	r2, r3, #8
 8003084:	4613      	mov	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	009a      	lsls	r2, r3, #2
 800308c:	4413      	add	r3, r2
 800308e:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	3b01      	subs	r3, #1
 8003094:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d112      	bne.n	80030c2 <HAL_I2C_Master_Receive_DMA+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2220      	movs	r2, #32
 80030a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b6:	f043 0220 	orr.w	r2, r3, #32
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80030be:	2302      	movs	r3, #2
 80030c0:	e0db      	b.n	800327a <HAL_I2C_Master_Receive_DMA+0x22a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d0df      	beq.n	8003090 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d101      	bne.n	80030de <HAL_I2C_Master_Receive_DMA+0x8e>
 80030da:	2302      	movs	r3, #2
 80030dc:	e0cd      	b.n	800327a <HAL_I2C_Master_Receive_DMA+0x22a>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d007      	beq.n	8003104 <HAL_I2C_Master_Receive_DMA+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f042 0201 	orr.w	r2, r2, #1
 8003102:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003112:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2222      	movs	r2, #34	@ 0x22
 8003118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2210      	movs	r2, #16
 8003120:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	893a      	ldrh	r2, [r7, #8]
 8003134:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800313a:	b29a      	uxth	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4a52      	ldr	r2, [pc, #328]	@ (800328c <HAL_I2C_Master_Receive_DMA+0x23c>)
 8003144:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8003146:	897a      	ldrh	r2, [r7, #10]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	645a      	str	r2, [r3, #68]	@ 0x44

    if (hi2c->XferSize > 0U)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003150:	2b00      	cmp	r3, #0
 8003152:	d073      	beq.n	800323c <HAL_I2C_Master_Receive_DMA+0x1ec>
    {
      if (hi2c->hdmarx != NULL)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003158:	2b00      	cmp	r3, #0
 800315a:	d022      	beq.n	80031a2 <HAL_I2C_Master_Receive_DMA+0x152>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003160:	4a4b      	ldr	r2, [pc, #300]	@ (8003290 <HAL_I2C_Master_Receive_DMA+0x240>)
 8003162:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003168:	4a4a      	ldr	r2, [pc, #296]	@ (8003294 <HAL_I2C_Master_Receive_DMA+0x244>)
 800316a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003170:	2200      	movs	r2, #0
 8003172:	62da      	str	r2, [r3, #44]	@ 0x2c
        hi2c->hdmarx->XferAbortCallback = NULL;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003178:	2200      	movs	r2, #0
 800317a:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	3310      	adds	r3, #16
 8003186:	4619      	mov	r1, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800318c:	461a      	mov	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003192:	f7fe fddb 	bl	8001d4c <HAL_DMA_Start_IT>
 8003196:	4603      	mov	r3, r0
 8003198:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800319a:	7dfb      	ldrb	r3, [r7, #23]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d139      	bne.n	8003214 <HAL_I2C_Master_Receive_DMA+0x1c4>
 80031a0:	e013      	b.n	80031ca <HAL_I2C_Master_Receive_DMA+0x17a>
        hi2c->State     = HAL_I2C_STATE_READY;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2220      	movs	r2, #32
 80031a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e057      	b.n	800327a <HAL_I2C_Master_Receive_DMA+0x22a>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80031d8:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031e8:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003200:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003210:	605a      	str	r2, [r3, #4]
 8003212:	e02f      	b.n	8003274 <HAL_I2C_Master_Receive_DMA+0x224>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2220      	movs	r2, #32
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003228:	f043 0210 	orr.w	r2, r3, #16
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e01e      	b.n	800327a <HAL_I2C_Master_Receive_DMA+0x22a>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8003252:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003262:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003272:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8003274:	2300      	movs	r3, #0
 8003276:	e000      	b.n	800327a <HAL_I2C_Master_Receive_DMA+0x22a>
  }
  else
  {
    return HAL_BUSY;
 8003278:	2302      	movs	r3, #2
  }
}
 800327a:	4618      	mov	r0, r3
 800327c:	3718      	adds	r7, #24
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	20000004 	.word	0x20000004
 8003288:	14f8b589 	.word	0x14f8b589
 800328c:	ffff0000 	.word	0xffff0000
 8003290:	08004cd1 	.word	0x08004cd1
 8003294:	08004e8f 	.word	0x08004e8f

08003298 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b088      	sub	sp, #32
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80032a0:	2300      	movs	r3, #0
 80032a2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80032b8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032c0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80032c2:	7bfb      	ldrb	r3, [r7, #15]
 80032c4:	2b10      	cmp	r3, #16
 80032c6:	d003      	beq.n	80032d0 <HAL_I2C_EV_IRQHandler+0x38>
 80032c8:	7bfb      	ldrb	r3, [r7, #15]
 80032ca:	2b40      	cmp	r3, #64	@ 0x40
 80032cc:	f040 80b1 	bne.w	8003432 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10d      	bne.n	8003306 <HAL_I2C_EV_IRQHandler+0x6e>
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80032f0:	d003      	beq.n	80032fa <HAL_I2C_EV_IRQHandler+0x62>
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80032f8:	d101      	bne.n	80032fe <HAL_I2C_EV_IRQHandler+0x66>
 80032fa:	2301      	movs	r3, #1
 80032fc:	e000      	b.n	8003300 <HAL_I2C_EV_IRQHandler+0x68>
 80032fe:	2300      	movs	r3, #0
 8003300:	2b01      	cmp	r3, #1
 8003302:	f000 8114 	beq.w	800352e <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00b      	beq.n	8003328 <HAL_I2C_EV_IRQHandler+0x90>
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003316:	2b00      	cmp	r3, #0
 8003318:	d006      	beq.n	8003328 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f002 f8fd 	bl	800551a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 fd62 	bl	8003dea <I2C_Master_SB>
 8003326:	e083      	b.n	8003430 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	f003 0308 	and.w	r3, r3, #8
 800332e:	2b00      	cmp	r3, #0
 8003330:	d008      	beq.n	8003344 <HAL_I2C_EV_IRQHandler+0xac>
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003338:	2b00      	cmp	r3, #0
 800333a:	d003      	beq.n	8003344 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f000 fdd9 	bl	8003ef4 <I2C_Master_ADD10>
 8003342:	e075      	b.n	8003430 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d008      	beq.n	8003360 <HAL_I2C_EV_IRQHandler+0xc8>
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003354:	2b00      	cmp	r3, #0
 8003356:	d003      	beq.n	8003360 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f000 fdf4 	bl	8003f46 <I2C_Master_ADDR>
 800335e:	e067      	b.n	8003430 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	f003 0304 	and.w	r3, r3, #4
 8003366:	2b00      	cmp	r3, #0
 8003368:	d036      	beq.n	80033d8 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003374:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003378:	f000 80db 	beq.w	8003532 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00d      	beq.n	80033a2 <HAL_I2C_EV_IRQHandler+0x10a>
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800338c:	2b00      	cmp	r3, #0
 800338e:	d008      	beq.n	80033a2 <HAL_I2C_EV_IRQHandler+0x10a>
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	f003 0304 	and.w	r3, r3, #4
 8003396:	2b00      	cmp	r3, #0
 8003398:	d103      	bne.n	80033a2 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f9c2 	bl	8003724 <I2C_MasterTransmit_TXE>
 80033a0:	e046      	b.n	8003430 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f000 80c2 	beq.w	8003532 <HAL_I2C_EV_IRQHandler+0x29a>
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 80bc 	beq.w	8003532 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80033ba:	7bbb      	ldrb	r3, [r7, #14]
 80033bc:	2b21      	cmp	r3, #33	@ 0x21
 80033be:	d103      	bne.n	80033c8 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f000 fa4b 	bl	800385c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033c6:	e0b4      	b.n	8003532 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80033c8:	7bfb      	ldrb	r3, [r7, #15]
 80033ca:	2b40      	cmp	r3, #64	@ 0x40
 80033cc:	f040 80b1 	bne.w	8003532 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 fab9 	bl	8003948 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033d6:	e0ac      	b.n	8003532 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033e6:	f000 80a4 	beq.w	8003532 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00d      	beq.n	8003410 <HAL_I2C_EV_IRQHandler+0x178>
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d008      	beq.n	8003410 <HAL_I2C_EV_IRQHandler+0x178>
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	f003 0304 	and.w	r3, r3, #4
 8003404:	2b00      	cmp	r3, #0
 8003406:	d103      	bne.n	8003410 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 fb35 	bl	8003a78 <I2C_MasterReceive_RXNE>
 800340e:	e00f      	b.n	8003430 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	f003 0304 	and.w	r3, r3, #4
 8003416:	2b00      	cmp	r3, #0
 8003418:	f000 808b 	beq.w	8003532 <HAL_I2C_EV_IRQHandler+0x29a>
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 8085 	beq.w	8003532 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 fbed 	bl	8003c08 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800342e:	e080      	b.n	8003532 <HAL_I2C_EV_IRQHandler+0x29a>
 8003430:	e07f      	b.n	8003532 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003436:	2b00      	cmp	r3, #0
 8003438:	d004      	beq.n	8003444 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	61fb      	str	r3, [r7, #28]
 8003442:	e007      	b.n	8003454 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d011      	beq.n	8003482 <HAL_I2C_EV_IRQHandler+0x1ea>
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003464:	2b00      	cmp	r3, #0
 8003466:	d00c      	beq.n	8003482 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346c:	2b00      	cmp	r3, #0
 800346e:	d003      	beq.n	8003478 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003478:	69b9      	ldr	r1, [r7, #24]
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 ffba 	bl	80043f4 <I2C_Slave_ADDR>
 8003480:	e05a      	b.n	8003538 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	f003 0310 	and.w	r3, r3, #16
 8003488:	2b00      	cmp	r3, #0
 800348a:	d008      	beq.n	800349e <HAL_I2C_EV_IRQHandler+0x206>
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003492:	2b00      	cmp	r3, #0
 8003494:	d003      	beq.n	800349e <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 fff4 	bl	8004484 <I2C_Slave_STOPF>
 800349c:	e04c      	b.n	8003538 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800349e:	7bbb      	ldrb	r3, [r7, #14]
 80034a0:	2b21      	cmp	r3, #33	@ 0x21
 80034a2:	d002      	beq.n	80034aa <HAL_I2C_EV_IRQHandler+0x212>
 80034a4:	7bbb      	ldrb	r3, [r7, #14]
 80034a6:	2b29      	cmp	r3, #41	@ 0x29
 80034a8:	d120      	bne.n	80034ec <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00d      	beq.n	80034d0 <HAL_I2C_EV_IRQHandler+0x238>
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d008      	beq.n	80034d0 <HAL_I2C_EV_IRQHandler+0x238>
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	f003 0304 	and.w	r3, r3, #4
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d103      	bne.n	80034d0 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 fed7 	bl	800427c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034ce:	e032      	b.n	8003536 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	f003 0304 	and.w	r3, r3, #4
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d02d      	beq.n	8003536 <HAL_I2C_EV_IRQHandler+0x29e>
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d028      	beq.n	8003536 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 ff06 	bl	80042f6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034ea:	e024      	b.n	8003536 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00d      	beq.n	8003512 <HAL_I2C_EV_IRQHandler+0x27a>
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d008      	beq.n	8003512 <HAL_I2C_EV_IRQHandler+0x27a>
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	f003 0304 	and.w	r3, r3, #4
 8003506:	2b00      	cmp	r3, #0
 8003508:	d103      	bne.n	8003512 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 ff13 	bl	8004336 <I2C_SlaveReceive_RXNE>
 8003510:	e012      	b.n	8003538 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	f003 0304 	and.w	r3, r3, #4
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00d      	beq.n	8003538 <HAL_I2C_EV_IRQHandler+0x2a0>
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003522:	2b00      	cmp	r3, #0
 8003524:	d008      	beq.n	8003538 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 ff43 	bl	80043b2 <I2C_SlaveReceive_BTF>
 800352c:	e004      	b.n	8003538 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800352e:	bf00      	nop
 8003530:	e002      	b.n	8003538 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003532:	bf00      	nop
 8003534:	e000      	b.n	8003538 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003536:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003538:	3720      	adds	r7, #32
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b08a      	sub	sp, #40	@ 0x28
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003556:	2300      	movs	r3, #0
 8003558:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003560:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003562:	6a3b      	ldr	r3, [r7, #32]
 8003564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003568:	2b00      	cmp	r3, #0
 800356a:	d015      	beq.n	8003598 <HAL_I2C_ER_IRQHandler+0x5a>
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003572:	2b00      	cmp	r3, #0
 8003574:	d010      	beq.n	8003598 <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003578:	f043 0301 	orr.w	r3, r3, #1
 800357c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003586:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003596:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003598:	6a3b      	ldr	r3, [r7, #32]
 800359a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00d      	beq.n	80035be <HAL_I2C_ER_IRQHandler+0x80>
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d008      	beq.n	80035be <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80035ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ae:	f043 0302 	orr.w	r3, r3, #2
 80035b2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80035bc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80035be:	6a3b      	ldr	r3, [r7, #32]
 80035c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d03e      	beq.n	8003646 <HAL_I2C_ER_IRQHandler+0x108>
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d039      	beq.n	8003646 <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 80035d2:	7efb      	ldrb	r3, [r7, #27]
 80035d4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035da:	b29b      	uxth	r3, r3
 80035dc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035e4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ea:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80035ec:	7ebb      	ldrb	r3, [r7, #26]
 80035ee:	2b20      	cmp	r3, #32
 80035f0:	d112      	bne.n	8003618 <HAL_I2C_ER_IRQHandler+0xda>
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10f      	bne.n	8003618 <HAL_I2C_ER_IRQHandler+0xda>
 80035f8:	7cfb      	ldrb	r3, [r7, #19]
 80035fa:	2b21      	cmp	r3, #33	@ 0x21
 80035fc:	d008      	beq.n	8003610 <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80035fe:	7cfb      	ldrb	r3, [r7, #19]
 8003600:	2b29      	cmp	r3, #41	@ 0x29
 8003602:	d005      	beq.n	8003610 <HAL_I2C_ER_IRQHandler+0xd2>
 8003604:	7cfb      	ldrb	r3, [r7, #19]
 8003606:	2b28      	cmp	r3, #40	@ 0x28
 8003608:	d106      	bne.n	8003618 <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2b21      	cmp	r3, #33	@ 0x21
 800360e:	d103      	bne.n	8003618 <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f001 f867 	bl	80046e4 <I2C_Slave_AF>
 8003616:	e016      	b.n	8003646 <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003620:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003624:	f043 0304 	orr.w	r3, r3, #4
 8003628:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800362a:	7efb      	ldrb	r3, [r7, #27]
 800362c:	2b10      	cmp	r3, #16
 800362e:	d002      	beq.n	8003636 <HAL_I2C_ER_IRQHandler+0xf8>
 8003630:	7efb      	ldrb	r3, [r7, #27]
 8003632:	2b40      	cmp	r3, #64	@ 0x40
 8003634:	d107      	bne.n	8003646 <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003644:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003646:	6a3b      	ldr	r3, [r7, #32]
 8003648:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00d      	beq.n	800366c <HAL_I2C_ER_IRQHandler+0x12e>
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003656:	2b00      	cmp	r3, #0
 8003658:	d008      	beq.n	800366c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800365a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800365c:	f043 0308 	orr.w	r3, r3, #8
 8003660:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800366a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800366c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800366e:	2b00      	cmp	r3, #0
 8003670:	d008      	beq.n	8003684 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003678:	431a      	orrs	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f001 f8a4 	bl	80047cc <I2C_ITError>
  }
}
 8003684:	bf00      	nop
 8003686:	3728      	adds	r7, #40	@ 0x28
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	bc80      	pop	{r7}
 800369c:	4770      	bx	lr

0800369e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800369e:	b480      	push	{r7}
 80036a0:	b083      	sub	sp, #12
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80036a6:	bf00      	nop
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bc80      	pop	{r7}
 80036ae:	4770      	bx	lr

080036b0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	460b      	mov	r3, r1
 80036ba:	70fb      	strb	r3, [r7, #3]
 80036bc:	4613      	mov	r3, r2
 80036be:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bc80      	pop	{r7}
 80036c8:	4770      	bx	lr

080036ca <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036ca:	b480      	push	{r7}
 80036cc:	b083      	sub	sp, #12
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80036d2:	bf00      	nop
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bc80      	pop	{r7}
 80036da:	4770      	bx	lr

080036dc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bc80      	pop	{r7}
 80036ec:	4770      	bx	lr

080036ee <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bc80      	pop	{r7}
 80036fe:	4770      	bx	lr

08003700 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	bc80      	pop	{r7}
 8003710:	4770      	bx	lr

08003712 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003712:	b480      	push	{r7}
 8003714:	b083      	sub	sp, #12
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800371a:	bf00      	nop
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	bc80      	pop	{r7}
 8003722:	4770      	bx	lr

08003724 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003732:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800373a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003740:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003746:	2b00      	cmp	r3, #0
 8003748:	d150      	bne.n	80037ec <I2C_MasterTransmit_TXE+0xc8>
 800374a:	7bfb      	ldrb	r3, [r7, #15]
 800374c:	2b21      	cmp	r3, #33	@ 0x21
 800374e:	d14d      	bne.n	80037ec <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	2b08      	cmp	r3, #8
 8003754:	d01d      	beq.n	8003792 <I2C_MasterTransmit_TXE+0x6e>
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	2b20      	cmp	r3, #32
 800375a:	d01a      	beq.n	8003792 <I2C_MasterTransmit_TXE+0x6e>
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003762:	d016      	beq.n	8003792 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003772:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2211      	movs	r2, #17
 8003778:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2220      	movs	r2, #32
 8003786:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7fd fd6c 	bl	8001268 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003790:	e060      	b.n	8003854 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80037a0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037b0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2220      	movs	r2, #32
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b40      	cmp	r3, #64	@ 0x40
 80037ca:	d107      	bne.n	80037dc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f7ff ff81 	bl	80036dc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037da:	e03b      	b.n	8003854 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f7fd fd3f 	bl	8001268 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037ea:	e033      	b.n	8003854 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80037ec:	7bfb      	ldrb	r3, [r7, #15]
 80037ee:	2b21      	cmp	r3, #33	@ 0x21
 80037f0:	d005      	beq.n	80037fe <I2C_MasterTransmit_TXE+0xda>
 80037f2:	7bbb      	ldrb	r3, [r7, #14]
 80037f4:	2b40      	cmp	r3, #64	@ 0x40
 80037f6:	d12d      	bne.n	8003854 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80037f8:	7bfb      	ldrb	r3, [r7, #15]
 80037fa:	2b22      	cmp	r3, #34	@ 0x22
 80037fc:	d12a      	bne.n	8003854 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003802:	b29b      	uxth	r3, r3
 8003804:	2b00      	cmp	r3, #0
 8003806:	d108      	bne.n	800381a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685a      	ldr	r2, [r3, #4]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003816:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003818:	e01c      	b.n	8003854 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b40      	cmp	r3, #64	@ 0x40
 8003824:	d103      	bne.n	800382e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f88e 	bl	8003948 <I2C_MemoryTransmit_TXE_BTF>
}
 800382c:	e012      	b.n	8003854 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003832:	781a      	ldrb	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383e:	1c5a      	adds	r2, r3, #1
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003848:	b29b      	uxth	r3, r3
 800384a:	3b01      	subs	r3, #1
 800384c:	b29a      	uxth	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003852:	e7ff      	b.n	8003854 <I2C_MasterTransmit_TXE+0x130>
 8003854:	bf00      	nop
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003868:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b21      	cmp	r3, #33	@ 0x21
 8003874:	d164      	bne.n	8003940 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800387a:	b29b      	uxth	r3, r3
 800387c:	2b00      	cmp	r3, #0
 800387e:	d012      	beq.n	80038a6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003884:	781a      	ldrb	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003890:	1c5a      	adds	r2, r3, #1
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800389a:	b29b      	uxth	r3, r3
 800389c:	3b01      	subs	r3, #1
 800389e:	b29a      	uxth	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80038a4:	e04c      	b.n	8003940 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2b08      	cmp	r3, #8
 80038aa:	d01d      	beq.n	80038e8 <I2C_MasterTransmit_BTF+0x8c>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2b20      	cmp	r3, #32
 80038b0:	d01a      	beq.n	80038e8 <I2C_MasterTransmit_BTF+0x8c>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80038b8:	d016      	beq.n	80038e8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80038c8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2211      	movs	r2, #17
 80038ce:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2220      	movs	r2, #32
 80038dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f7fd fcc1 	bl	8001268 <HAL_I2C_MasterTxCpltCallback>
}
 80038e6:	e02b      	b.n	8003940 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	685a      	ldr	r2, [r3, #4]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80038f6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003906:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2220      	movs	r2, #32
 8003912:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b40      	cmp	r3, #64	@ 0x40
 8003920:	d107      	bne.n	8003932 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f7ff fed6 	bl	80036dc <HAL_I2C_MemTxCpltCallback>
}
 8003930:	e006      	b.n	8003940 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f7fd fc94 	bl	8001268 <HAL_I2C_MasterTxCpltCallback>
}
 8003940:	bf00      	nop
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003956:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800395c:	2b00      	cmp	r3, #0
 800395e:	d11d      	bne.n	800399c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003964:	2b01      	cmp	r3, #1
 8003966:	d10b      	bne.n	8003980 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800396c:	b2da      	uxtb	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003978:	1c9a      	adds	r2, r3, #2
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800397e:	e077      	b.n	8003a70 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003984:	b29b      	uxth	r3, r3
 8003986:	121b      	asrs	r3, r3, #8
 8003988:	b2da      	uxtb	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003994:	1c5a      	adds	r2, r3, #1
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800399a:	e069      	b.n	8003a70 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d10b      	bne.n	80039bc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039a8:	b2da      	uxtb	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039b4:	1c5a      	adds	r2, r3, #1
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80039ba:	e059      	b.n	8003a70 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d152      	bne.n	8003a6a <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80039c4:	7bfb      	ldrb	r3, [r7, #15]
 80039c6:	2b22      	cmp	r3, #34	@ 0x22
 80039c8:	d10d      	bne.n	80039e6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039d8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039de:	1c5a      	adds	r2, r3, #1
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80039e4:	e044      	b.n	8003a70 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d015      	beq.n	8003a1c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80039f0:	7bfb      	ldrb	r3, [r7, #15]
 80039f2:	2b21      	cmp	r3, #33	@ 0x21
 80039f4:	d112      	bne.n	8003a1c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fa:	781a      	ldrb	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a06:	1c5a      	adds	r2, r3, #1
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	3b01      	subs	r3, #1
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003a1a:	e029      	b.n	8003a70 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d124      	bne.n	8003a70 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003a26:	7bfb      	ldrb	r3, [r7, #15]
 8003a28:	2b21      	cmp	r3, #33	@ 0x21
 8003a2a:	d121      	bne.n	8003a70 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	685a      	ldr	r2, [r3, #4]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003a3a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a4a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2220      	movs	r2, #32
 8003a56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f7ff fe3a 	bl	80036dc <HAL_I2C_MemTxCpltCallback>
}
 8003a68:	e002      	b.n	8003a70 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7fe fe4e 	bl	800270c <I2C_Flush_DR>
}
 8003a70:	bf00      	nop
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b22      	cmp	r3, #34	@ 0x22
 8003a8a:	f040 80b9 	bne.w	8003c00 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a92:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	2b03      	cmp	r3, #3
 8003aa0:	d921      	bls.n	8003ae6 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	691a      	ldr	r2, [r3, #16]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aac:	b2d2      	uxtb	r2, r2
 8003aae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab4:	1c5a      	adds	r2, r3, #1
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	2b03      	cmp	r3, #3
 8003ad0:	f040 8096 	bne.w	8003c00 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ae2:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003ae4:	e08c      	b.n	8003c00 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d07f      	beq.n	8003bee <I2C_MasterReceive_RXNE+0x176>
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d002      	beq.n	8003afa <I2C_MasterReceive_RXNE+0x82>
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d179      	bne.n	8003bee <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f001 fc50 	bl	80053a0 <I2C_WaitOnSTOPRequestThroughIT>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d14c      	bne.n	8003ba0 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b14:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	685a      	ldr	r2, [r3, #4]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003b24:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	691a      	ldr	r2, [r3, #16]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b30:	b2d2      	uxtb	r2, r2
 8003b32:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b38:	1c5a      	adds	r2, r3, #1
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	3b01      	subs	r3, #1
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b40      	cmp	r3, #64	@ 0x40
 8003b5e:	d10a      	bne.n	8003b76 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7ff fdbd 	bl	80036ee <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003b74:	e044      	b.n	8003c00 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2b08      	cmp	r3, #8
 8003b82:	d002      	beq.n	8003b8a <I2C_MasterReceive_RXNE+0x112>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2b20      	cmp	r3, #32
 8003b88:	d103      	bne.n	8003b92 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b90:	e002      	b.n	8003b98 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2212      	movs	r2, #18
 8003b96:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f7fd fb79 	bl	8001290 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003b9e:	e02f      	b.n	8003c00 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003bae:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	691a      	ldr	r2, [r3, #16]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bba:	b2d2      	uxtb	r2, r2
 8003bbc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc2:	1c5a      	adds	r2, r3, #1
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2220      	movs	r2, #32
 8003bda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f7ff fd8a 	bl	8003700 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003bec:	e008      	b.n	8003c00 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bfc:	605a      	str	r2, [r3, #4]
}
 8003bfe:	e7ff      	b.n	8003c00 <I2C_MasterReceive_RXNE+0x188>
 8003c00:	bf00      	nop
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c14:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d11b      	bne.n	8003c58 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685a      	ldr	r2, [r3, #4]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c2e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	691a      	ldr	r2, [r3, #16]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3a:	b2d2      	uxtb	r2, r2
 8003c3c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c42:	1c5a      	adds	r2, r3, #1
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003c56:	e0c4      	b.n	8003de2 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	2b03      	cmp	r3, #3
 8003c60:	d129      	bne.n	8003cb6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c70:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2b04      	cmp	r3, #4
 8003c76:	d00a      	beq.n	8003c8e <I2C_MasterReceive_BTF+0x86>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d007      	beq.n	8003c8e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c8c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	691a      	ldr	r2, [r3, #16]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c98:	b2d2      	uxtb	r2, r2
 8003c9a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca0:	1c5a      	adds	r2, r3, #1
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	3b01      	subs	r3, #1
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003cb4:	e095      	b.n	8003de2 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d17d      	bne.n	8003dbc <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d002      	beq.n	8003ccc <I2C_MasterReceive_BTF+0xc4>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2b10      	cmp	r3, #16
 8003cca:	d108      	bne.n	8003cde <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	e016      	b.n	8003d0c <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2b04      	cmp	r3, #4
 8003ce2:	d002      	beq.n	8003cea <I2C_MasterReceive_BTF+0xe2>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d108      	bne.n	8003cfc <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003cf8:	601a      	str	r2, [r3, #0]
 8003cfa:	e007      	b.n	8003d0c <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d0a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	691a      	ldr	r2, [r3, #16]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d16:	b2d2      	uxtb	r2, r2
 8003d18:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d1e:	1c5a      	adds	r2, r3, #1
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	691a      	ldr	r2, [r3, #16]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3c:	b2d2      	uxtb	r2, r2
 8003d3e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d44:	1c5a      	adds	r2, r3, #1
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	3b01      	subs	r3, #1
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003d66:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b40      	cmp	r3, #64	@ 0x40
 8003d7a:	d10a      	bne.n	8003d92 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f7ff fcaf 	bl	80036ee <HAL_I2C_MemRxCpltCallback>
}
 8003d90:	e027      	b.n	8003de2 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2b08      	cmp	r3, #8
 8003d9e:	d002      	beq.n	8003da6 <I2C_MasterReceive_BTF+0x19e>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2b20      	cmp	r3, #32
 8003da4:	d103      	bne.n	8003dae <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	631a      	str	r2, [r3, #48]	@ 0x30
 8003dac:	e002      	b.n	8003db4 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2212      	movs	r2, #18
 8003db2:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f7fd fa6b 	bl	8001290 <HAL_I2C_MasterRxCpltCallback>
}
 8003dba:	e012      	b.n	8003de2 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	691a      	ldr	r2, [r3, #16]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc6:	b2d2      	uxtb	r2, r2
 8003dc8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dce:	1c5a      	adds	r2, r3, #1
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003de2:	bf00      	nop
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b083      	sub	sp, #12
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b40      	cmp	r3, #64	@ 0x40
 8003dfc:	d117      	bne.n	8003e2e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d109      	bne.n	8003e1a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e16:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003e18:	e067      	b.n	8003eea <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	f043 0301 	orr.w	r3, r3, #1
 8003e24:	b2da      	uxtb	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	611a      	str	r2, [r3, #16]
}
 8003e2c:	e05d      	b.n	8003eea <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e36:	d133      	bne.n	8003ea0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b21      	cmp	r3, #33	@ 0x21
 8003e42:	d109      	bne.n	8003e58 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e54:	611a      	str	r2, [r3, #16]
 8003e56:	e008      	b.n	8003e6a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	f043 0301 	orr.w	r3, r3, #1
 8003e62:	b2da      	uxtb	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d004      	beq.n	8003e7c <I2C_Master_SB+0x92>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d108      	bne.n	8003e8e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d032      	beq.n	8003eea <I2C_Master_SB+0x100>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d02d      	beq.n	8003eea <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	685a      	ldr	r2, [r3, #4]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e9c:	605a      	str	r2, [r3, #4]
}
 8003e9e:	e024      	b.n	8003eea <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d10e      	bne.n	8003ec6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	11db      	asrs	r3, r3, #7
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	f003 0306 	and.w	r3, r3, #6
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	f063 030f 	orn	r3, r3, #15
 8003ebc:	b2da      	uxtb	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	611a      	str	r2, [r3, #16]
}
 8003ec4:	e011      	b.n	8003eea <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d10d      	bne.n	8003eea <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	11db      	asrs	r3, r3, #7
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	f003 0306 	and.w	r3, r3, #6
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	f063 030e 	orn	r3, r3, #14
 8003ee2:	b2da      	uxtb	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	611a      	str	r2, [r3, #16]
}
 8003eea:	bf00      	nop
 8003eec:	370c      	adds	r7, #12
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bc80      	pop	{r7}
 8003ef2:	4770      	bx	lr

08003ef4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f00:	b2da      	uxtb	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d004      	beq.n	8003f1a <I2C_Master_ADD10+0x26>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d108      	bne.n	8003f2c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00c      	beq.n	8003f3c <I2C_Master_ADD10+0x48>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d007      	beq.n	8003f3c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	685a      	ldr	r2, [r3, #4]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f3a:	605a      	str	r2, [r3, #4]
  }
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bc80      	pop	{r7}
 8003f44:	4770      	bx	lr

08003f46 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003f46:	b480      	push	{r7}
 8003f48:	b091      	sub	sp, #68	@ 0x44
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f54:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f62:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b22      	cmp	r3, #34	@ 0x22
 8003f6e:	f040 8174 	bne.w	800425a <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10f      	bne.n	8003f9a <I2C_Master_ADDR+0x54>
 8003f7a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003f7e:	2b40      	cmp	r3, #64	@ 0x40
 8003f80:	d10b      	bne.n	8003f9a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f82:	2300      	movs	r3, #0
 8003f84:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f98:	e16b      	b.n	8004272 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d11d      	bne.n	8003fde <I2C_Master_ADDR+0x98>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003faa:	d118      	bne.n	8003fde <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fac:	2300      	movs	r3, #0
 8003fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fd0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fd6:	1c5a      	adds	r2, r3, #1
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	651a      	str	r2, [r3, #80]	@ 0x50
 8003fdc:	e149      	b.n	8004272 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d113      	bne.n	8004010 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fe8:	2300      	movs	r3, #0
 8003fea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800400c:	601a      	str	r2, [r3, #0]
 800400e:	e120      	b.n	8004252 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004014:	b29b      	uxth	r3, r3
 8004016:	2b01      	cmp	r3, #1
 8004018:	f040 808a 	bne.w	8004130 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800401c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800401e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004022:	d137      	bne.n	8004094 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004032:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800403e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004042:	d113      	bne.n	800406c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004052:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004054:	2300      	movs	r3, #0
 8004056:	627b      	str	r3, [r7, #36]	@ 0x24
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	627b      	str	r3, [r7, #36]	@ 0x24
 8004068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800406a:	e0f2      	b.n	8004252 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800406c:	2300      	movs	r3, #0
 800406e:	623b      	str	r3, [r7, #32]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	623b      	str	r3, [r7, #32]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	623b      	str	r3, [r7, #32]
 8004080:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004090:	601a      	str	r2, [r3, #0]
 8004092:	e0de      	b.n	8004252 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004096:	2b08      	cmp	r3, #8
 8004098:	d02e      	beq.n	80040f8 <I2C_Master_ADDR+0x1b2>
 800409a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800409c:	2b20      	cmp	r3, #32
 800409e:	d02b      	beq.n	80040f8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80040a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040a2:	2b12      	cmp	r3, #18
 80040a4:	d102      	bne.n	80040ac <I2C_Master_ADDR+0x166>
 80040a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d125      	bne.n	80040f8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80040ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ae:	2b04      	cmp	r3, #4
 80040b0:	d00e      	beq.n	80040d0 <I2C_Master_ADDR+0x18a>
 80040b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d00b      	beq.n	80040d0 <I2C_Master_ADDR+0x18a>
 80040b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ba:	2b10      	cmp	r3, #16
 80040bc:	d008      	beq.n	80040d0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040cc:	601a      	str	r2, [r3, #0]
 80040ce:	e007      	b.n	80040e0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80040de:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040e0:	2300      	movs	r3, #0
 80040e2:	61fb      	str	r3, [r7, #28]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	61fb      	str	r3, [r7, #28]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	61fb      	str	r3, [r7, #28]
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	e0ac      	b.n	8004252 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004106:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004108:	2300      	movs	r3, #0
 800410a:	61bb      	str	r3, [r7, #24]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	61bb      	str	r3, [r7, #24]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	61bb      	str	r3, [r7, #24]
 800411c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800412c:	601a      	str	r2, [r3, #0]
 800412e:	e090      	b.n	8004252 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004134:	b29b      	uxth	r3, r3
 8004136:	2b02      	cmp	r3, #2
 8004138:	d158      	bne.n	80041ec <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800413a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800413c:	2b04      	cmp	r3, #4
 800413e:	d021      	beq.n	8004184 <I2C_Master_ADDR+0x23e>
 8004140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004142:	2b02      	cmp	r3, #2
 8004144:	d01e      	beq.n	8004184 <I2C_Master_ADDR+0x23e>
 8004146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004148:	2b10      	cmp	r3, #16
 800414a:	d01b      	beq.n	8004184 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800415a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800415c:	2300      	movs	r3, #0
 800415e:	617b      	str	r3, [r7, #20]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	617b      	str	r3, [r7, #20]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	617b      	str	r3, [r7, #20]
 8004170:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004180:	601a      	str	r2, [r3, #0]
 8004182:	e012      	b.n	80041aa <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004192:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004194:	2300      	movs	r3, #0
 8004196:	613b      	str	r3, [r7, #16]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	613b      	str	r3, [r7, #16]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	613b      	str	r3, [r7, #16]
 80041a8:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041b8:	d14b      	bne.n	8004252 <I2C_Master_ADDR+0x30c>
 80041ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041bc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80041c0:	d00b      	beq.n	80041da <I2C_Master_ADDR+0x294>
 80041c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d008      	beq.n	80041da <I2C_Master_ADDR+0x294>
 80041c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ca:	2b08      	cmp	r3, #8
 80041cc:	d005      	beq.n	80041da <I2C_Master_ADDR+0x294>
 80041ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041d0:	2b10      	cmp	r3, #16
 80041d2:	d002      	beq.n	80041da <I2C_Master_ADDR+0x294>
 80041d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041d6:	2b20      	cmp	r3, #32
 80041d8:	d13b      	bne.n	8004252 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	685a      	ldr	r2, [r3, #4]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80041e8:	605a      	str	r2, [r3, #4]
 80041ea:	e032      	b.n	8004252 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80041fa:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004206:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800420a:	d117      	bne.n	800423c <I2C_Master_ADDR+0x2f6>
 800420c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800420e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004212:	d00b      	beq.n	800422c <I2C_Master_ADDR+0x2e6>
 8004214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004216:	2b01      	cmp	r3, #1
 8004218:	d008      	beq.n	800422c <I2C_Master_ADDR+0x2e6>
 800421a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800421c:	2b08      	cmp	r3, #8
 800421e:	d005      	beq.n	800422c <I2C_Master_ADDR+0x2e6>
 8004220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004222:	2b10      	cmp	r3, #16
 8004224:	d002      	beq.n	800422c <I2C_Master_ADDR+0x2e6>
 8004226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004228:	2b20      	cmp	r3, #32
 800422a:	d107      	bne.n	800423c <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	685a      	ldr	r2, [r3, #4]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800423a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800423c:	2300      	movs	r3, #0
 800423e:	60fb      	str	r3, [r7, #12]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	60fb      	str	r3, [r7, #12]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	60fb      	str	r3, [r7, #12]
 8004250:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004258:	e00b      	b.n	8004272 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800425a:	2300      	movs	r3, #0
 800425c:	60bb      	str	r3, [r7, #8]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	695b      	ldr	r3, [r3, #20]
 8004264:	60bb      	str	r3, [r7, #8]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	60bb      	str	r3, [r7, #8]
 800426e:	68bb      	ldr	r3, [r7, #8]
}
 8004270:	e7ff      	b.n	8004272 <I2C_Master_ADDR+0x32c>
 8004272:	bf00      	nop
 8004274:	3744      	adds	r7, #68	@ 0x44
 8004276:	46bd      	mov	sp, r7
 8004278:	bc80      	pop	{r7}
 800427a:	4770      	bx	lr

0800427c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800428a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004290:	b29b      	uxth	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d02b      	beq.n	80042ee <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429a:	781a      	ldrb	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a6:	1c5a      	adds	r2, r3, #1
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	3b01      	subs	r3, #1
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042be:	b29b      	uxth	r3, r3
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d114      	bne.n	80042ee <I2C_SlaveTransmit_TXE+0x72>
 80042c4:	7bfb      	ldrb	r3, [r7, #15]
 80042c6:	2b29      	cmp	r3, #41	@ 0x29
 80042c8:	d111      	bne.n	80042ee <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	685a      	ldr	r2, [r3, #4]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042d8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2221      	movs	r2, #33	@ 0x21
 80042de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2228      	movs	r2, #40	@ 0x28
 80042e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f7ff f9cf 	bl	800368c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80042ee:	bf00      	nop
 80042f0:	3710      	adds	r7, #16
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80042f6:	b480      	push	{r7}
 80042f8:	b083      	sub	sp, #12
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004302:	b29b      	uxth	r3, r3
 8004304:	2b00      	cmp	r3, #0
 8004306:	d011      	beq.n	800432c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430c:	781a      	ldrb	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004318:	1c5a      	adds	r2, r3, #1
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004322:	b29b      	uxth	r3, r3
 8004324:	3b01      	subs	r3, #1
 8004326:	b29a      	uxth	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800432c:	bf00      	nop
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	bc80      	pop	{r7}
 8004334:	4770      	bx	lr

08004336 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b084      	sub	sp, #16
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004344:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800434a:	b29b      	uxth	r3, r3
 800434c:	2b00      	cmp	r3, #0
 800434e:	d02c      	beq.n	80043aa <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	691a      	ldr	r2, [r3, #16]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435a:	b2d2      	uxtb	r2, r2
 800435c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004362:	1c5a      	adds	r2, r3, #1
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800436c:	b29b      	uxth	r3, r3
 800436e:	3b01      	subs	r3, #1
 8004370:	b29a      	uxth	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800437a:	b29b      	uxth	r3, r3
 800437c:	2b00      	cmp	r3, #0
 800437e:	d114      	bne.n	80043aa <I2C_SlaveReceive_RXNE+0x74>
 8004380:	7bfb      	ldrb	r3, [r7, #15]
 8004382:	2b2a      	cmp	r3, #42	@ 0x2a
 8004384:	d111      	bne.n	80043aa <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	685a      	ldr	r2, [r3, #4]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004394:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2222      	movs	r2, #34	@ 0x22
 800439a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2228      	movs	r2, #40	@ 0x28
 80043a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f7ff f97a 	bl	800369e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80043aa:	bf00      	nop
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80043b2:	b480      	push	{r7}
 80043b4:	b083      	sub	sp, #12
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043be:	b29b      	uxth	r3, r3
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d012      	beq.n	80043ea <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	691a      	ldr	r2, [r3, #16]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ce:	b2d2      	uxtb	r2, r2
 80043d0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d6:	1c5a      	adds	r2, r3, #1
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	3b01      	subs	r3, #1
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80043ea:	bf00      	nop
 80043ec:	370c      	adds	r7, #12
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bc80      	pop	{r7}
 80043f2:	4770      	bx	lr

080043f4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80043fe:	2300      	movs	r3, #0
 8004400:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004408:	b2db      	uxtb	r3, r3
 800440a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800440e:	2b28      	cmp	r3, #40	@ 0x28
 8004410:	d125      	bne.n	800445e <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004420:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	f003 0304 	and.w	r3, r3, #4
 8004428:	2b00      	cmp	r3, #0
 800442a:	d101      	bne.n	8004430 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800442c:	2301      	movs	r3, #1
 800442e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004436:	2b00      	cmp	r3, #0
 8004438:	d103      	bne.n	8004442 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	81bb      	strh	r3, [r7, #12]
 8004440:	e002      	b.n	8004448 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004450:	89ba      	ldrh	r2, [r7, #12]
 8004452:	7bfb      	ldrb	r3, [r7, #15]
 8004454:	4619      	mov	r1, r3
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f7ff f92a 	bl	80036b0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800445c:	e00e      	b.n	800447c <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800445e:	2300      	movs	r3, #0
 8004460:	60bb      	str	r3, [r7, #8]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	60bb      	str	r3, [r7, #8]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	60bb      	str	r3, [r7, #8]
 8004472:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800447c:	bf00      	nop
 800447e:	3710      	adds	r7, #16
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004492:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80044a2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80044a4:	2300      	movs	r3, #0
 80044a6:	60bb      	str	r3, [r7, #8]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	60bb      	str	r3, [r7, #8]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f042 0201 	orr.w	r2, r2, #1
 80044be:	601a      	str	r2, [r3, #0]
 80044c0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044d0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044e0:	d172      	bne.n	80045c8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80044e2:	7bfb      	ldrb	r3, [r7, #15]
 80044e4:	2b22      	cmp	r3, #34	@ 0x22
 80044e6:	d002      	beq.n	80044ee <I2C_Slave_STOPF+0x6a>
 80044e8:	7bfb      	ldrb	r3, [r7, #15]
 80044ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80044ec:	d135      	bne.n	800455a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004500:	b29b      	uxth	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d005      	beq.n	8004512 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450a:	f043 0204 	orr.w	r2, r3, #4
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	685a      	ldr	r2, [r3, #4]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004520:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004526:	4618      	mov	r0, r3
 8004528:	f7fd fdee 	bl	8002108 <HAL_DMA_GetState>
 800452c:	4603      	mov	r3, r0
 800452e:	2b01      	cmp	r3, #1
 8004530:	d049      	beq.n	80045c6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004536:	4a69      	ldr	r2, [pc, #420]	@ (80046dc <I2C_Slave_STOPF+0x258>)
 8004538:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800453e:	4618      	mov	r0, r3
 8004540:	f7fd fc64 	bl	8001e0c <HAL_DMA_Abort_IT>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d03d      	beq.n	80045c6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800454e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004554:	4610      	mov	r0, r2
 8004556:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004558:	e035      	b.n	80045c6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	b29a      	uxth	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800456c:	b29b      	uxth	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d005      	beq.n	800457e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004576:	f043 0204 	orr.w	r2, r3, #4
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800458c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004592:	4618      	mov	r0, r3
 8004594:	f7fd fdb8 	bl	8002108 <HAL_DMA_GetState>
 8004598:	4603      	mov	r3, r0
 800459a:	2b01      	cmp	r3, #1
 800459c:	d014      	beq.n	80045c8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045a2:	4a4e      	ldr	r2, [pc, #312]	@ (80046dc <I2C_Slave_STOPF+0x258>)
 80045a4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7fd fc2e 	bl	8001e0c <HAL_DMA_Abort_IT>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d008      	beq.n	80045c8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80045c0:	4610      	mov	r0, r2
 80045c2:	4798      	blx	r3
 80045c4:	e000      	b.n	80045c8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80045c6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d03e      	beq.n	8004650 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	f003 0304 	and.w	r3, r3, #4
 80045dc:	2b04      	cmp	r3, #4
 80045de:	d112      	bne.n	8004606 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	691a      	ldr	r2, [r3, #16]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ea:	b2d2      	uxtb	r2, r2
 80045ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f2:	1c5a      	adds	r2, r3, #1
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	3b01      	subs	r3, #1
 8004600:	b29a      	uxth	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	695b      	ldr	r3, [r3, #20]
 800460c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004610:	2b40      	cmp	r3, #64	@ 0x40
 8004612:	d112      	bne.n	800463a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	691a      	ldr	r2, [r3, #16]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461e:	b2d2      	uxtb	r2, r2
 8004620:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004626:	1c5a      	adds	r2, r3, #1
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004630:	b29b      	uxth	r3, r3
 8004632:	3b01      	subs	r3, #1
 8004634:	b29a      	uxth	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800463e:	b29b      	uxth	r3, r3
 8004640:	2b00      	cmp	r3, #0
 8004642:	d005      	beq.n	8004650 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004648:	f043 0204 	orr.w	r2, r3, #4
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004654:	2b00      	cmp	r3, #0
 8004656:	d003      	beq.n	8004660 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 f8b7 	bl	80047cc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800465e:	e039      	b.n	80046d4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004660:	7bfb      	ldrb	r3, [r7, #15]
 8004662:	2b2a      	cmp	r3, #42	@ 0x2a
 8004664:	d109      	bne.n	800467a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2228      	movs	r2, #40	@ 0x28
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f7ff f812 	bl	800369e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b28      	cmp	r3, #40	@ 0x28
 8004684:	d111      	bne.n	80046aa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a15      	ldr	r2, [pc, #84]	@ (80046e0 <I2C_Slave_STOPF+0x25c>)
 800468a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2220      	movs	r2, #32
 8004696:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f7ff f811 	bl	80036ca <HAL_I2C_ListenCpltCallback>
}
 80046a8:	e014      	b.n	80046d4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ae:	2b22      	cmp	r3, #34	@ 0x22
 80046b0:	d002      	beq.n	80046b8 <I2C_Slave_STOPF+0x234>
 80046b2:	7bfb      	ldrb	r3, [r7, #15]
 80046b4:	2b22      	cmp	r3, #34	@ 0x22
 80046b6:	d10d      	bne.n	80046d4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2220      	movs	r2, #32
 80046c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f7fe ffe5 	bl	800369e <HAL_I2C_SlaveRxCpltCallback>
}
 80046d4:	bf00      	nop
 80046d6:	3710      	adds	r7, #16
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	08004efd 	.word	0x08004efd
 80046e0:	ffff0000 	.word	0xffff0000

080046e4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046f2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046f8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	2b08      	cmp	r3, #8
 80046fe:	d002      	beq.n	8004706 <I2C_Slave_AF+0x22>
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	2b20      	cmp	r3, #32
 8004704:	d129      	bne.n	800475a <I2C_Slave_AF+0x76>
 8004706:	7bfb      	ldrb	r3, [r7, #15]
 8004708:	2b28      	cmp	r3, #40	@ 0x28
 800470a:	d126      	bne.n	800475a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a2e      	ldr	r2, [pc, #184]	@ (80047c8 <I2C_Slave_AF+0xe4>)
 8004710:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	685a      	ldr	r2, [r3, #4]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004720:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800472a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800473a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2220      	movs	r2, #32
 8004746:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7fe ffb9 	bl	80036ca <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004758:	e031      	b.n	80047be <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800475a:	7bfb      	ldrb	r3, [r7, #15]
 800475c:	2b21      	cmp	r3, #33	@ 0x21
 800475e:	d129      	bne.n	80047b4 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a19      	ldr	r2, [pc, #100]	@ (80047c8 <I2C_Slave_AF+0xe4>)
 8004764:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2221      	movs	r2, #33	@ 0x21
 800476a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2220      	movs	r2, #32
 8004770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	685a      	ldr	r2, [r3, #4]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800478a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004794:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047a4:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f7fd ffb0 	bl	800270c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f7fe ff6d 	bl	800368c <HAL_I2C_SlaveTxCpltCallback>
}
 80047b2:	e004      	b.n	80047be <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80047bc:	615a      	str	r2, [r3, #20]
}
 80047be:	bf00      	nop
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	ffff0000 	.word	0xffff0000

080047cc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047da:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047e2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80047e4:	7bbb      	ldrb	r3, [r7, #14]
 80047e6:	2b10      	cmp	r3, #16
 80047e8:	d002      	beq.n	80047f0 <I2C_ITError+0x24>
 80047ea:	7bbb      	ldrb	r3, [r7, #14]
 80047ec:	2b40      	cmp	r3, #64	@ 0x40
 80047ee:	d10a      	bne.n	8004806 <I2C_ITError+0x3a>
 80047f0:	7bfb      	ldrb	r3, [r7, #15]
 80047f2:	2b22      	cmp	r3, #34	@ 0x22
 80047f4:	d107      	bne.n	8004806 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004804:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004806:	7bfb      	ldrb	r3, [r7, #15]
 8004808:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800480c:	2b28      	cmp	r3, #40	@ 0x28
 800480e:	d107      	bne.n	8004820 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2228      	movs	r2, #40	@ 0x28
 800481a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800481e:	e015      	b.n	800484c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800482a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800482e:	d00a      	beq.n	8004846 <I2C_ITError+0x7a>
 8004830:	7bfb      	ldrb	r3, [r7, #15]
 8004832:	2b60      	cmp	r3, #96	@ 0x60
 8004834:	d007      	beq.n	8004846 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2220      	movs	r2, #32
 800483a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004856:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800485a:	d162      	bne.n	8004922 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685a      	ldr	r2, [r3, #4]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800486a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004870:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b01      	cmp	r3, #1
 8004878:	d020      	beq.n	80048bc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800487e:	4a6a      	ldr	r2, [pc, #424]	@ (8004a28 <I2C_ITError+0x25c>)
 8004880:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004886:	4618      	mov	r0, r3
 8004888:	f7fd fac0 	bl	8001e0c <HAL_DMA_Abort_IT>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	f000 8089 	beq.w	80049a6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f022 0201 	bic.w	r2, r2, #1
 80048a2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2220      	movs	r2, #32
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80048b6:	4610      	mov	r0, r2
 80048b8:	4798      	blx	r3
 80048ba:	e074      	b.n	80049a6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048c0:	4a59      	ldr	r2, [pc, #356]	@ (8004a28 <I2C_ITError+0x25c>)
 80048c2:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048c8:	4618      	mov	r0, r3
 80048ca:	f7fd fa9f 	bl	8001e0c <HAL_DMA_Abort_IT>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d068      	beq.n	80049a6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048de:	2b40      	cmp	r3, #64	@ 0x40
 80048e0:	d10b      	bne.n	80048fa <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	691a      	ldr	r2, [r3, #16]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ec:	b2d2      	uxtb	r2, r2
 80048ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f4:	1c5a      	adds	r2, r3, #1
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 0201 	bic.w	r2, r2, #1
 8004908:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2220      	movs	r2, #32
 800490e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004916:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800491c:	4610      	mov	r0, r2
 800491e:	4798      	blx	r3
 8004920:	e041      	b.n	80049a6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b60      	cmp	r3, #96	@ 0x60
 800492c:	d125      	bne.n	800497a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2220      	movs	r2, #32
 8004932:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004946:	2b40      	cmp	r3, #64	@ 0x40
 8004948:	d10b      	bne.n	8004962 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	691a      	ldr	r2, [r3, #16]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004954:	b2d2      	uxtb	r2, r2
 8004956:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800495c:	1c5a      	adds	r2, r3, #1
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f022 0201 	bic.w	r2, r2, #1
 8004970:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f7fe fecd 	bl	8003712 <HAL_I2C_AbortCpltCallback>
 8004978:	e015      	b.n	80049a6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004984:	2b40      	cmp	r3, #64	@ 0x40
 8004986:	d10b      	bne.n	80049a0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	691a      	ldr	r2, [r3, #16]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004992:	b2d2      	uxtb	r2, r2
 8004994:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800499a:	1c5a      	adds	r2, r3, #1
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f7fe fead 	bl	8003700 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049aa:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d10e      	bne.n	80049d4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d109      	bne.n	80049d4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d104      	bne.n	80049d4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d007      	beq.n	80049e4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	685a      	ldr	r2, [r3, #4]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80049e2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049ea:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f0:	f003 0304 	and.w	r3, r3, #4
 80049f4:	2b04      	cmp	r3, #4
 80049f6:	d113      	bne.n	8004a20 <I2C_ITError+0x254>
 80049f8:	7bfb      	ldrb	r3, [r7, #15]
 80049fa:	2b28      	cmp	r3, #40	@ 0x28
 80049fc:	d110      	bne.n	8004a20 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a0a      	ldr	r2, [pc, #40]	@ (8004a2c <I2C_ITError+0x260>)
 8004a02:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f7fe fe55 	bl	80036ca <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a20:	bf00      	nop
 8004a22:	3710      	adds	r7, #16
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	08004efd 	.word	0x08004efd
 8004a2c:	ffff0000 	.word	0xffff0000

08004a30 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b088      	sub	sp, #32
 8004a34:	af02      	add	r7, sp, #8
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	607a      	str	r2, [r7, #4]
 8004a3a:	603b      	str	r3, [r7, #0]
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a44:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	2b08      	cmp	r3, #8
 8004a4a:	d006      	beq.n	8004a5a <I2C_MasterRequestWrite+0x2a>
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d003      	beq.n	8004a5a <I2C_MasterRequestWrite+0x2a>
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004a58:	d108      	bne.n	8004a6c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a68:	601a      	str	r2, [r3, #0]
 8004a6a:	e00b      	b.n	8004a84 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a70:	2b12      	cmp	r3, #18
 8004a72:	d107      	bne.n	8004a84 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a82:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	9300      	str	r3, [sp, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f000 fadb 	bl	800504c <I2C_WaitOnFlagUntilTimeout>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00d      	beq.n	8004ab8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aa6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004aaa:	d103      	bne.n	8004ab4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ab2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e035      	b.n	8004b24 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ac0:	d108      	bne.n	8004ad4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ac2:	897b      	ldrh	r3, [r7, #10]
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004ad0:	611a      	str	r2, [r3, #16]
 8004ad2:	e01b      	b.n	8004b0c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004ad4:	897b      	ldrh	r3, [r7, #10]
 8004ad6:	11db      	asrs	r3, r3, #7
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	f003 0306 	and.w	r3, r3, #6
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	f063 030f 	orn	r3, r3, #15
 8004ae4:	b2da      	uxtb	r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	490e      	ldr	r1, [pc, #56]	@ (8004b2c <I2C_MasterRequestWrite+0xfc>)
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f000 fb24 	bl	8005140 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d001      	beq.n	8004b02 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e010      	b.n	8004b24 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004b02:	897b      	ldrh	r3, [r7, #10]
 8004b04:	b2da      	uxtb	r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	4907      	ldr	r1, [pc, #28]	@ (8004b30 <I2C_MasterRequestWrite+0x100>)
 8004b12:	68f8      	ldr	r0, [r7, #12]
 8004b14:	f000 fb14 	bl	8005140 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d001      	beq.n	8004b22 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e000      	b.n	8004b24 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3718      	adds	r7, #24
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	00010008 	.word	0x00010008
 8004b30:	00010002 	.word	0x00010002

08004b34 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b088      	sub	sp, #32
 8004b38:	af02      	add	r7, sp, #8
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	607a      	str	r2, [r7, #4]
 8004b3e:	603b      	str	r3, [r7, #0]
 8004b40:	460b      	mov	r3, r1
 8004b42:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b48:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b58:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	2b08      	cmp	r3, #8
 8004b5e:	d006      	beq.n	8004b6e <I2C_MasterRequestRead+0x3a>
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d003      	beq.n	8004b6e <I2C_MasterRequestRead+0x3a>
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004b6c:	d108      	bne.n	8004b80 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b7c:	601a      	str	r2, [r3, #0]
 8004b7e:	e00b      	b.n	8004b98 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b84:	2b11      	cmp	r3, #17
 8004b86:	d107      	bne.n	8004b98 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b96:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	9300      	str	r3, [sp, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f000 fa51 	bl	800504c <I2C_WaitOnFlagUntilTimeout>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00d      	beq.n	8004bcc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bbe:	d103      	bne.n	8004bc8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bc6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e079      	b.n	8004cc0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004bd4:	d108      	bne.n	8004be8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004bd6:	897b      	ldrh	r3, [r7, #10]
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	f043 0301 	orr.w	r3, r3, #1
 8004bde:	b2da      	uxtb	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	611a      	str	r2, [r3, #16]
 8004be6:	e05f      	b.n	8004ca8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004be8:	897b      	ldrh	r3, [r7, #10]
 8004bea:	11db      	asrs	r3, r3, #7
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	f003 0306 	and.w	r3, r3, #6
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	f063 030f 	orn	r3, r3, #15
 8004bf8:	b2da      	uxtb	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	4930      	ldr	r1, [pc, #192]	@ (8004cc8 <I2C_MasterRequestRead+0x194>)
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f000 fa9a 	bl	8005140 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e054      	b.n	8004cc0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004c16:	897b      	ldrh	r3, [r7, #10]
 8004c18:	b2da      	uxtb	r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	4929      	ldr	r1, [pc, #164]	@ (8004ccc <I2C_MasterRequestRead+0x198>)
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	f000 fa8a 	bl	8005140 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d001      	beq.n	8004c36 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e044      	b.n	8004cc0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c36:	2300      	movs	r3, #0
 8004c38:	613b      	str	r3, [r7, #16]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	613b      	str	r3, [r7, #16]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	613b      	str	r3, [r7, #16]
 8004c4a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c5a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	9300      	str	r3, [sp, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004c68:	68f8      	ldr	r0, [r7, #12]
 8004c6a:	f000 f9ef 	bl	800504c <I2C_WaitOnFlagUntilTimeout>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00d      	beq.n	8004c90 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c82:	d103      	bne.n	8004c8c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c8a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e017      	b.n	8004cc0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004c90:	897b      	ldrh	r3, [r7, #10]
 8004c92:	11db      	asrs	r3, r3, #7
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	f003 0306 	and.w	r3, r3, #6
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	f063 030e 	orn	r3, r3, #14
 8004ca0:	b2da      	uxtb	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	4907      	ldr	r1, [pc, #28]	@ (8004ccc <I2C_MasterRequestRead+0x198>)
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f000 fa46 	bl	8005140 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d001      	beq.n	8004cbe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e000      	b.n	8004cc0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3718      	adds	r7, #24
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	00010008 	.word	0x00010008
 8004ccc:	00010002 	.word	0x00010002

08004cd0 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b086      	sub	sp, #24
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cdc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ce4:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004cec:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf2:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	685a      	ldr	r2, [r3, #4]
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004d02:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d003      	beq.n	8004d14 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d10:	2200      	movs	r2, #0
 8004d12:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d003      	beq.n	8004d24 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d20:	2200      	movs	r2, #0
 8004d22:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004d24:	7cfb      	ldrb	r3, [r7, #19]
 8004d26:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8004d2a:	2b21      	cmp	r3, #33	@ 0x21
 8004d2c:	d007      	beq.n	8004d3e <I2C_DMAXferCplt+0x6e>
 8004d2e:	7cfb      	ldrb	r3, [r7, #19]
 8004d30:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8004d34:	2b22      	cmp	r3, #34	@ 0x22
 8004d36:	d131      	bne.n	8004d9c <I2C_DMAXferCplt+0xcc>
 8004d38:	7cbb      	ldrb	r3, [r7, #18]
 8004d3a:	2b20      	cmp	r3, #32
 8004d3c:	d12e      	bne.n	8004d9c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	685a      	ldr	r2, [r3, #4]
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d4c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	2200      	movs	r2, #0
 8004d52:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004d54:	7cfb      	ldrb	r3, [r7, #19]
 8004d56:	2b29      	cmp	r3, #41	@ 0x29
 8004d58:	d10a      	bne.n	8004d70 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	2221      	movs	r2, #33	@ 0x21
 8004d5e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	2228      	movs	r2, #40	@ 0x28
 8004d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004d68:	6978      	ldr	r0, [r7, #20]
 8004d6a:	f7fe fc8f 	bl	800368c <HAL_I2C_SlaveTxCpltCallback>
 8004d6e:	e00c      	b.n	8004d8a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004d70:	7cfb      	ldrb	r3, [r7, #19]
 8004d72:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d74:	d109      	bne.n	8004d8a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	2222      	movs	r2, #34	@ 0x22
 8004d7a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	2228      	movs	r2, #40	@ 0x28
 8004d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004d84:	6978      	ldr	r0, [r7, #20]
 8004d86:	f7fe fc8a 	bl	800369e <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	685a      	ldr	r2, [r3, #4]
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004d98:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004d9a:	e074      	b.n	8004e86 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d06e      	beq.n	8004e86 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d107      	bne.n	8004dc2 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dc0:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	685a      	ldr	r2, [r3, #4]
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004dd0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004dd8:	d009      	beq.n	8004dee <I2C_DMAXferCplt+0x11e>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2b08      	cmp	r3, #8
 8004dde:	d006      	beq.n	8004dee <I2C_DMAXferCplt+0x11e>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004de6:	d002      	beq.n	8004dee <I2C_DMAXferCplt+0x11e>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2b20      	cmp	r3, #32
 8004dec:	d107      	bne.n	8004dfe <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dfc:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004e0c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	685a      	ldr	r2, [r3, #4]
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e1c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	2200      	movs	r2, #0
 8004e22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d003      	beq.n	8004e34 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8004e2c:	6978      	ldr	r0, [r7, #20]
 8004e2e:	f7fe fc67 	bl	8003700 <HAL_I2C_ErrorCallback>
}
 8004e32:	e028      	b.n	8004e86 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	2220      	movs	r2, #32
 8004e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	2b40      	cmp	r3, #64	@ 0x40
 8004e46:	d10a      	bne.n	8004e5e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	2200      	movs	r2, #0
 8004e54:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004e56:	6978      	ldr	r0, [r7, #20]
 8004e58:	f7fe fc49 	bl	80036ee <HAL_I2C_MemRxCpltCallback>
}
 8004e5c:	e013      	b.n	8004e86 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2b08      	cmp	r3, #8
 8004e6a:	d002      	beq.n	8004e72 <I2C_DMAXferCplt+0x1a2>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2b20      	cmp	r3, #32
 8004e70:	d103      	bne.n	8004e7a <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	2200      	movs	r2, #0
 8004e76:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e78:	e002      	b.n	8004e80 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	2212      	movs	r2, #18
 8004e7e:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004e80:	6978      	ldr	r0, [r7, #20]
 8004e82:	f7fc fa05 	bl	8001290 <HAL_I2C_MasterRxCpltCallback>
}
 8004e86:	bf00      	nop
 8004e88:	3718      	adds	r7, #24
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b084      	sub	sp, #16
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e9a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d003      	beq.n	8004eac <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d003      	beq.n	8004ebc <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eb8:	2200      	movs	r2, #0
 8004eba:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004eca:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2220      	movs	r2, #32
 8004ed6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee6:	f043 0210 	orr.w	r2, r3, #16
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f7fe fc06 	bl	8003700 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004ef4:	bf00      	nop
 8004ef6:	3710      	adds	r7, #16
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b086      	sub	sp, #24
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f04:	2300      	movs	r3, #0
 8004f06:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f0c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f14:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004f16:	4b4b      	ldr	r3, [pc, #300]	@ (8005044 <I2C_DMAAbort+0x148>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	08db      	lsrs	r3, r3, #3
 8004f1c:	4a4a      	ldr	r2, [pc, #296]	@ (8005048 <I2C_DMAAbort+0x14c>)
 8004f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f22:	0a1a      	lsrs	r2, r3, #8
 8004f24:	4613      	mov	r3, r2
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	4413      	add	r3, r2
 8004f2a:	00da      	lsls	r2, r3, #3
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d106      	bne.n	8004f44 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f3a:	f043 0220 	orr.w	r2, r3, #32
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004f42:	e00a      	b.n	8004f5a <I2C_DMAAbort+0x5e>
    }
    count--;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	3b01      	subs	r3, #1
 8004f48:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f58:	d0ea      	beq.n	8004f30 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d003      	beq.n	8004f6a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f66:	2200      	movs	r2, #0
 8004f68:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d003      	beq.n	8004f7a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f76:	2200      	movs	r2, #0
 8004f78:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f88:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d003      	beq.n	8004fa0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d003      	beq.n	8004fb0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fac:	2200      	movs	r2, #0
 8004fae:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f022 0201 	bic.w	r2, r2, #1
 8004fbe:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	2b60      	cmp	r3, #96	@ 0x60
 8004fca:	d10e      	bne.n	8004fea <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	2220      	movs	r2, #32
 8004fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004fe2:	6978      	ldr	r0, [r7, #20]
 8004fe4:	f7fe fb95 	bl	8003712 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004fe8:	e027      	b.n	800503a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004fea:	7cfb      	ldrb	r3, [r7, #19]
 8004fec:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004ff0:	2b28      	cmp	r3, #40	@ 0x28
 8004ff2:	d117      	bne.n	8005024 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f042 0201 	orr.w	r2, r2, #1
 8005002:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005012:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	2200      	movs	r2, #0
 8005018:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	2228      	movs	r2, #40	@ 0x28
 800501e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005022:	e007      	b.n	8005034 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	2220      	movs	r2, #32
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005034:	6978      	ldr	r0, [r7, #20]
 8005036:	f7fe fb63 	bl	8003700 <HAL_I2C_ErrorCallback>
}
 800503a:	bf00      	nop
 800503c:	3718      	adds	r7, #24
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	20000004 	.word	0x20000004
 8005048:	14f8b589 	.word	0x14f8b589

0800504c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	603b      	str	r3, [r7, #0]
 8005058:	4613      	mov	r3, r2
 800505a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800505c:	e048      	b.n	80050f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005064:	d044      	beq.n	80050f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005066:	f7fc fcdb 	bl	8001a20 <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	683a      	ldr	r2, [r7, #0]
 8005072:	429a      	cmp	r2, r3
 8005074:	d302      	bcc.n	800507c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d139      	bne.n	80050f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	0c1b      	lsrs	r3, r3, #16
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b01      	cmp	r3, #1
 8005084:	d10d      	bne.n	80050a2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	695b      	ldr	r3, [r3, #20]
 800508c:	43da      	mvns	r2, r3
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	4013      	ands	r3, r2
 8005092:	b29b      	uxth	r3, r3
 8005094:	2b00      	cmp	r3, #0
 8005096:	bf0c      	ite	eq
 8005098:	2301      	moveq	r3, #1
 800509a:	2300      	movne	r3, #0
 800509c:	b2db      	uxtb	r3, r3
 800509e:	461a      	mov	r2, r3
 80050a0:	e00c      	b.n	80050bc <I2C_WaitOnFlagUntilTimeout+0x70>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	699b      	ldr	r3, [r3, #24]
 80050a8:	43da      	mvns	r2, r3
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	4013      	ands	r3, r2
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	bf0c      	ite	eq
 80050b4:	2301      	moveq	r3, #1
 80050b6:	2300      	movne	r3, #0
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	461a      	mov	r2, r3
 80050bc:	79fb      	ldrb	r3, [r7, #7]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d116      	bne.n	80050f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2220      	movs	r2, #32
 80050cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050dc:	f043 0220 	orr.w	r2, r3, #32
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e023      	b.n	8005138 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	0c1b      	lsrs	r3, r3, #16
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d10d      	bne.n	8005116 <I2C_WaitOnFlagUntilTimeout+0xca>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	695b      	ldr	r3, [r3, #20]
 8005100:	43da      	mvns	r2, r3
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	4013      	ands	r3, r2
 8005106:	b29b      	uxth	r3, r3
 8005108:	2b00      	cmp	r3, #0
 800510a:	bf0c      	ite	eq
 800510c:	2301      	moveq	r3, #1
 800510e:	2300      	movne	r3, #0
 8005110:	b2db      	uxtb	r3, r3
 8005112:	461a      	mov	r2, r3
 8005114:	e00c      	b.n	8005130 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	699b      	ldr	r3, [r3, #24]
 800511c:	43da      	mvns	r2, r3
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	4013      	ands	r3, r2
 8005122:	b29b      	uxth	r3, r3
 8005124:	2b00      	cmp	r3, #0
 8005126:	bf0c      	ite	eq
 8005128:	2301      	moveq	r3, #1
 800512a:	2300      	movne	r3, #0
 800512c:	b2db      	uxtb	r3, r3
 800512e:	461a      	mov	r2, r3
 8005130:	79fb      	ldrb	r3, [r7, #7]
 8005132:	429a      	cmp	r2, r3
 8005134:	d093      	beq.n	800505e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3710      	adds	r7, #16
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
 800514c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800514e:	e071      	b.n	8005234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800515a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800515e:	d123      	bne.n	80051a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800516e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005178:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2200      	movs	r2, #0
 800517e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2220      	movs	r2, #32
 8005184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005194:	f043 0204 	orr.w	r2, r3, #4
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e067      	b.n	8005278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ae:	d041      	beq.n	8005234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051b0:	f7fc fc36 	bl	8001a20 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d302      	bcc.n	80051c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d136      	bne.n	8005234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	0c1b      	lsrs	r3, r3, #16
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d10c      	bne.n	80051ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	43da      	mvns	r2, r3
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	4013      	ands	r3, r2
 80051dc:	b29b      	uxth	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	bf14      	ite	ne
 80051e2:	2301      	movne	r3, #1
 80051e4:	2300      	moveq	r3, #0
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	e00b      	b.n	8005202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	43da      	mvns	r2, r3
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	4013      	ands	r3, r2
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	bf14      	ite	ne
 80051fc:	2301      	movne	r3, #1
 80051fe:	2300      	moveq	r3, #0
 8005200:	b2db      	uxtb	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	d016      	beq.n	8005234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2220      	movs	r2, #32
 8005210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2200      	movs	r2, #0
 8005218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005220:	f043 0220 	orr.w	r2, r3, #32
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e021      	b.n	8005278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	0c1b      	lsrs	r3, r3, #16
 8005238:	b2db      	uxtb	r3, r3
 800523a:	2b01      	cmp	r3, #1
 800523c:	d10c      	bne.n	8005258 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	695b      	ldr	r3, [r3, #20]
 8005244:	43da      	mvns	r2, r3
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	4013      	ands	r3, r2
 800524a:	b29b      	uxth	r3, r3
 800524c:	2b00      	cmp	r3, #0
 800524e:	bf14      	ite	ne
 8005250:	2301      	movne	r3, #1
 8005252:	2300      	moveq	r3, #0
 8005254:	b2db      	uxtb	r3, r3
 8005256:	e00b      	b.n	8005270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	43da      	mvns	r2, r3
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	4013      	ands	r3, r2
 8005264:	b29b      	uxth	r3, r3
 8005266:	2b00      	cmp	r3, #0
 8005268:	bf14      	ite	ne
 800526a:	2301      	movne	r3, #1
 800526c:	2300      	moveq	r3, #0
 800526e:	b2db      	uxtb	r3, r3
 8005270:	2b00      	cmp	r3, #0
 8005272:	f47f af6d 	bne.w	8005150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	3710      	adds	r7, #16
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800528c:	e034      	b.n	80052f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800528e:	68f8      	ldr	r0, [r7, #12]
 8005290:	f000 f915 	bl	80054be <I2C_IsAcknowledgeFailed>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d001      	beq.n	800529e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e034      	b.n	8005308 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a4:	d028      	beq.n	80052f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052a6:	f7fc fbbb 	bl	8001a20 <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d302      	bcc.n	80052bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d11d      	bne.n	80052f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052c6:	2b80      	cmp	r3, #128	@ 0x80
 80052c8:	d016      	beq.n	80052f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2220      	movs	r2, #32
 80052d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2200      	movs	r2, #0
 80052dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e4:	f043 0220 	orr.w	r2, r3, #32
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e007      	b.n	8005308 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005302:	2b80      	cmp	r3, #128	@ 0x80
 8005304:	d1c3      	bne.n	800528e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800531c:	e034      	b.n	8005388 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f000 f8cd 	bl	80054be <I2C_IsAcknowledgeFailed>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e034      	b.n	8005398 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005334:	d028      	beq.n	8005388 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005336:	f7fc fb73 	bl	8001a20 <HAL_GetTick>
 800533a:	4602      	mov	r2, r0
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	68ba      	ldr	r2, [r7, #8]
 8005342:	429a      	cmp	r2, r3
 8005344:	d302      	bcc.n	800534c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d11d      	bne.n	8005388 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	f003 0304 	and.w	r3, r3, #4
 8005356:	2b04      	cmp	r3, #4
 8005358:	d016      	beq.n	8005388 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2220      	movs	r2, #32
 8005364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005374:	f043 0220 	orr.w	r2, r3, #32
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e007      	b.n	8005398 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	f003 0304 	and.w	r3, r3, #4
 8005392:	2b04      	cmp	r3, #4
 8005394:	d1c3      	bne.n	800531e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3710      	adds	r7, #16
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053a8:	2300      	movs	r3, #0
 80053aa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80053ac:	4b13      	ldr	r3, [pc, #76]	@ (80053fc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	08db      	lsrs	r3, r3, #3
 80053b2:	4a13      	ldr	r2, [pc, #76]	@ (8005400 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80053b4:	fba2 2303 	umull	r2, r3, r2, r3
 80053b8:	0a1a      	lsrs	r2, r3, #8
 80053ba:	4613      	mov	r3, r2
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	4413      	add	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	3b01      	subs	r3, #1
 80053c6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d107      	bne.n	80053de <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d2:	f043 0220 	orr.w	r2, r3, #32
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e008      	b.n	80053f0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053ec:	d0e9      	beq.n	80053c2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3714      	adds	r7, #20
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bc80      	pop	{r7}
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	20000004 	.word	0x20000004
 8005400:	14f8b589 	.word	0x14f8b589

08005404 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005410:	e049      	b.n	80054a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	f003 0310 	and.w	r3, r3, #16
 800541c:	2b10      	cmp	r3, #16
 800541e:	d119      	bne.n	8005454 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f06f 0210 	mvn.w	r2, #16
 8005428:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2220      	movs	r2, #32
 8005434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e030      	b.n	80054b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005454:	f7fc fae4 	bl	8001a20 <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	68ba      	ldr	r2, [r7, #8]
 8005460:	429a      	cmp	r2, r3
 8005462:	d302      	bcc.n	800546a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d11d      	bne.n	80054a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	695b      	ldr	r3, [r3, #20]
 8005470:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005474:	2b40      	cmp	r3, #64	@ 0x40
 8005476:	d016      	beq.n	80054a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2220      	movs	r2, #32
 8005482:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005492:	f043 0220 	orr.w	r2, r3, #32
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e007      	b.n	80054b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	695b      	ldr	r3, [r3, #20]
 80054ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054b0:	2b40      	cmp	r3, #64	@ 0x40
 80054b2:	d1ae      	bne.n	8005412 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3710      	adds	r7, #16
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80054be:	b480      	push	{r7}
 80054c0:	b083      	sub	sp, #12
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	695b      	ldr	r3, [r3, #20]
 80054cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054d4:	d11b      	bne.n	800550e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80054de:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2220      	movs	r2, #32
 80054ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054fa:	f043 0204 	orr.w	r2, r3, #4
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e000      	b.n	8005510 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	bc80      	pop	{r7}
 8005518:	4770      	bx	lr

0800551a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800551a:	b480      	push	{r7}
 800551c:	b083      	sub	sp, #12
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005526:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800552a:	d103      	bne.n	8005534 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005532:	e007      	b.n	8005544 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005538:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800553c:	d102      	bne.n	8005544 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2208      	movs	r2, #8
 8005542:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	bc80      	pop	{r7}
 800554c:	4770      	bx	lr
	...

08005550 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b086      	sub	sp, #24
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d101      	bne.n	8005562 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e272      	b.n	8005a48 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0301 	and.w	r3, r3, #1
 800556a:	2b00      	cmp	r3, #0
 800556c:	f000 8087 	beq.w	800567e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005570:	4b92      	ldr	r3, [pc, #584]	@ (80057bc <HAL_RCC_OscConfig+0x26c>)
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f003 030c 	and.w	r3, r3, #12
 8005578:	2b04      	cmp	r3, #4
 800557a:	d00c      	beq.n	8005596 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800557c:	4b8f      	ldr	r3, [pc, #572]	@ (80057bc <HAL_RCC_OscConfig+0x26c>)
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f003 030c 	and.w	r3, r3, #12
 8005584:	2b08      	cmp	r3, #8
 8005586:	d112      	bne.n	80055ae <HAL_RCC_OscConfig+0x5e>
 8005588:	4b8c      	ldr	r3, [pc, #560]	@ (80057bc <HAL_RCC_OscConfig+0x26c>)
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005590:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005594:	d10b      	bne.n	80055ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005596:	4b89      	ldr	r3, [pc, #548]	@ (80057bc <HAL_RCC_OscConfig+0x26c>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d06c      	beq.n	800567c <HAL_RCC_OscConfig+0x12c>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d168      	bne.n	800567c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e24c      	b.n	8005a48 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055b6:	d106      	bne.n	80055c6 <HAL_RCC_OscConfig+0x76>
 80055b8:	4b80      	ldr	r3, [pc, #512]	@ (80057bc <HAL_RCC_OscConfig+0x26c>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a7f      	ldr	r2, [pc, #508]	@ (80057bc <HAL_RCC_OscConfig+0x26c>)
 80055be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055c2:	6013      	str	r3, [r2, #0]
 80055c4:	e02e      	b.n	8005624 <HAL_RCC_OscConfig+0xd4>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d10c      	bne.n	80055e8 <HAL_RCC_OscConfig+0x98>
 80055ce:	4b7b      	ldr	r3, [pc, #492]	@ (80057bc <HAL_RCC_OscConfig+0x26c>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a7a      	ldr	r2, [pc, #488]	@ (80057bc <HAL_RCC_OscConfig+0x26c>)
 80055d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055d8:	6013      	str	r3, [r2, #0]
 80055da:	4b78      	ldr	r3, [pc, #480]	@ (80057bc <HAL_RCC_OscConfig+0x26c>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a77      	ldr	r2, [pc, #476]	@ (80057bc <HAL_RCC_OscConfig+0x26c>)
 80055e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80055e4:	6013      	str	r3, [r2, #0]
 80055e6:	e01d      	b.n	8005624 <HAL_RCC_OscConfig+0xd4>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80055f0:	d10c      	bne.n	800560c <HAL_RCC_OscConfig+0xbc>
 80055f2:	4b72      	ldr	r3, [pc, #456]	@ (80057bc <HAL_RCC_OscConfig+0x26c>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a71      	ldr	r2, [pc, #452]	@ (80057bc <HAL_RCC_OscConfig+0x26c>)
 80055f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80055fc:	6013      	str	r3, [r2, #0]
 80055fe:	4b6f      	ldr	r3, [pc, #444]	@ (80057bc <HAL_RCC_OscConfig+0x26c>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a6e      	ldr	r2, [pc, #440]	@ (80057bc <HAL_RCC_OscConfig+0x26c>)
 8005604:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005608:	6013      	str	r3, [r2, #0]
 800560a:	e00b      	b.n	8005624 <HAL_RCC_OscConfig+0xd4>
 800560c:	4b6b      	ldr	r3, [pc, #428]	@ (80057bc <HAL_RCC_OscConfig+0x26c>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a6a      	ldr	r2, [pc, #424]	@ (80057bc <HAL_RCC_OscConfig+0x26c>)
 8005612:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005616:	6013      	str	r3, [r2, #0]
 8005618:	4b68      	ldr	r3, [pc, #416]	@ (80057bc <HAL_RCC_OscConfig+0x26c>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a67      	ldr	r2, [pc, #412]	@ (80057bc <HAL_RCC_OscConfig+0x26c>)
 800561e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005622:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d013      	beq.n	8005654 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800562c:	f7fc f9f8 	bl	8001a20 <HAL_GetTick>
 8005630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005632:	e008      	b.n	8005646 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005634:	f7fc f9f4 	bl	8001a20 <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	2b64      	cmp	r3, #100	@ 0x64
 8005640:	d901      	bls.n	8005646 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e200      	b.n	8005a48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005646:	4b5d      	ldr	r3, [pc, #372]	@ (80057bc <HAL_RCC_OscConfig+0x26c>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d0f0      	beq.n	8005634 <HAL_RCC_OscConfig+0xe4>
 8005652:	e014      	b.n	800567e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005654:	f7fc f9e4 	bl	8001a20 <HAL_GetTick>
 8005658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800565a:	e008      	b.n	800566e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800565c:	f7fc f9e0 	bl	8001a20 <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b64      	cmp	r3, #100	@ 0x64
 8005668:	d901      	bls.n	800566e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e1ec      	b.n	8005a48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800566e:	4b53      	ldr	r3, [pc, #332]	@ (80057bc <HAL_RCC_OscConfig+0x26c>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1f0      	bne.n	800565c <HAL_RCC_OscConfig+0x10c>
 800567a:	e000      	b.n	800567e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800567c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 0302 	and.w	r3, r3, #2
 8005686:	2b00      	cmp	r3, #0
 8005688:	d063      	beq.n	8005752 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800568a:	4b4c      	ldr	r3, [pc, #304]	@ (80057bc <HAL_RCC_OscConfig+0x26c>)
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	f003 030c 	and.w	r3, r3, #12
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00b      	beq.n	80056ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005696:	4b49      	ldr	r3, [pc, #292]	@ (80057bc <HAL_RCC_OscConfig+0x26c>)
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f003 030c 	and.w	r3, r3, #12
 800569e:	2b08      	cmp	r3, #8
 80056a0:	d11c      	bne.n	80056dc <HAL_RCC_OscConfig+0x18c>
 80056a2:	4b46      	ldr	r3, [pc, #280]	@ (80057bc <HAL_RCC_OscConfig+0x26c>)
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d116      	bne.n	80056dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056ae:	4b43      	ldr	r3, [pc, #268]	@ (80057bc <HAL_RCC_OscConfig+0x26c>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0302 	and.w	r3, r3, #2
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d005      	beq.n	80056c6 <HAL_RCC_OscConfig+0x176>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d001      	beq.n	80056c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e1c0      	b.n	8005a48 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056c6:	4b3d      	ldr	r3, [pc, #244]	@ (80057bc <HAL_RCC_OscConfig+0x26c>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	695b      	ldr	r3, [r3, #20]
 80056d2:	00db      	lsls	r3, r3, #3
 80056d4:	4939      	ldr	r1, [pc, #228]	@ (80057bc <HAL_RCC_OscConfig+0x26c>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056da:	e03a      	b.n	8005752 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d020      	beq.n	8005726 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056e4:	4b36      	ldr	r3, [pc, #216]	@ (80057c0 <HAL_RCC_OscConfig+0x270>)
 80056e6:	2201      	movs	r2, #1
 80056e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ea:	f7fc f999 	bl	8001a20 <HAL_GetTick>
 80056ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056f0:	e008      	b.n	8005704 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056f2:	f7fc f995 	bl	8001a20 <HAL_GetTick>
 80056f6:	4602      	mov	r2, r0
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d901      	bls.n	8005704 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e1a1      	b.n	8005a48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005704:	4b2d      	ldr	r3, [pc, #180]	@ (80057bc <HAL_RCC_OscConfig+0x26c>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0302 	and.w	r3, r3, #2
 800570c:	2b00      	cmp	r3, #0
 800570e:	d0f0      	beq.n	80056f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005710:	4b2a      	ldr	r3, [pc, #168]	@ (80057bc <HAL_RCC_OscConfig+0x26c>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	00db      	lsls	r3, r3, #3
 800571e:	4927      	ldr	r1, [pc, #156]	@ (80057bc <HAL_RCC_OscConfig+0x26c>)
 8005720:	4313      	orrs	r3, r2
 8005722:	600b      	str	r3, [r1, #0]
 8005724:	e015      	b.n	8005752 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005726:	4b26      	ldr	r3, [pc, #152]	@ (80057c0 <HAL_RCC_OscConfig+0x270>)
 8005728:	2200      	movs	r2, #0
 800572a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800572c:	f7fc f978 	bl	8001a20 <HAL_GetTick>
 8005730:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005732:	e008      	b.n	8005746 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005734:	f7fc f974 	bl	8001a20 <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	2b02      	cmp	r3, #2
 8005740:	d901      	bls.n	8005746 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e180      	b.n	8005a48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005746:	4b1d      	ldr	r3, [pc, #116]	@ (80057bc <HAL_RCC_OscConfig+0x26c>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0302 	and.w	r3, r3, #2
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1f0      	bne.n	8005734 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 0308 	and.w	r3, r3, #8
 800575a:	2b00      	cmp	r3, #0
 800575c:	d03a      	beq.n	80057d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d019      	beq.n	800579a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005766:	4b17      	ldr	r3, [pc, #92]	@ (80057c4 <HAL_RCC_OscConfig+0x274>)
 8005768:	2201      	movs	r2, #1
 800576a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800576c:	f7fc f958 	bl	8001a20 <HAL_GetTick>
 8005770:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005772:	e008      	b.n	8005786 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005774:	f7fc f954 	bl	8001a20 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	2b02      	cmp	r3, #2
 8005780:	d901      	bls.n	8005786 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e160      	b.n	8005a48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005786:	4b0d      	ldr	r3, [pc, #52]	@ (80057bc <HAL_RCC_OscConfig+0x26c>)
 8005788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800578a:	f003 0302 	and.w	r3, r3, #2
 800578e:	2b00      	cmp	r3, #0
 8005790:	d0f0      	beq.n	8005774 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005792:	2001      	movs	r0, #1
 8005794:	f000 face 	bl	8005d34 <RCC_Delay>
 8005798:	e01c      	b.n	80057d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800579a:	4b0a      	ldr	r3, [pc, #40]	@ (80057c4 <HAL_RCC_OscConfig+0x274>)
 800579c:	2200      	movs	r2, #0
 800579e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057a0:	f7fc f93e 	bl	8001a20 <HAL_GetTick>
 80057a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057a6:	e00f      	b.n	80057c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057a8:	f7fc f93a 	bl	8001a20 <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d908      	bls.n	80057c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e146      	b.n	8005a48 <HAL_RCC_OscConfig+0x4f8>
 80057ba:	bf00      	nop
 80057bc:	40021000 	.word	0x40021000
 80057c0:	42420000 	.word	0x42420000
 80057c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057c8:	4b92      	ldr	r3, [pc, #584]	@ (8005a14 <HAL_RCC_OscConfig+0x4c4>)
 80057ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057cc:	f003 0302 	and.w	r3, r3, #2
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d1e9      	bne.n	80057a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0304 	and.w	r3, r3, #4
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f000 80a6 	beq.w	800592e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057e2:	2300      	movs	r3, #0
 80057e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057e6:	4b8b      	ldr	r3, [pc, #556]	@ (8005a14 <HAL_RCC_OscConfig+0x4c4>)
 80057e8:	69db      	ldr	r3, [r3, #28]
 80057ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d10d      	bne.n	800580e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057f2:	4b88      	ldr	r3, [pc, #544]	@ (8005a14 <HAL_RCC_OscConfig+0x4c4>)
 80057f4:	69db      	ldr	r3, [r3, #28]
 80057f6:	4a87      	ldr	r2, [pc, #540]	@ (8005a14 <HAL_RCC_OscConfig+0x4c4>)
 80057f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057fc:	61d3      	str	r3, [r2, #28]
 80057fe:	4b85      	ldr	r3, [pc, #532]	@ (8005a14 <HAL_RCC_OscConfig+0x4c4>)
 8005800:	69db      	ldr	r3, [r3, #28]
 8005802:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005806:	60bb      	str	r3, [r7, #8]
 8005808:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800580a:	2301      	movs	r3, #1
 800580c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800580e:	4b82      	ldr	r3, [pc, #520]	@ (8005a18 <HAL_RCC_OscConfig+0x4c8>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005816:	2b00      	cmp	r3, #0
 8005818:	d118      	bne.n	800584c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800581a:	4b7f      	ldr	r3, [pc, #508]	@ (8005a18 <HAL_RCC_OscConfig+0x4c8>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a7e      	ldr	r2, [pc, #504]	@ (8005a18 <HAL_RCC_OscConfig+0x4c8>)
 8005820:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005824:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005826:	f7fc f8fb 	bl	8001a20 <HAL_GetTick>
 800582a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800582c:	e008      	b.n	8005840 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800582e:	f7fc f8f7 	bl	8001a20 <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	2b64      	cmp	r3, #100	@ 0x64
 800583a:	d901      	bls.n	8005840 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e103      	b.n	8005a48 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005840:	4b75      	ldr	r3, [pc, #468]	@ (8005a18 <HAL_RCC_OscConfig+0x4c8>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005848:	2b00      	cmp	r3, #0
 800584a:	d0f0      	beq.n	800582e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	2b01      	cmp	r3, #1
 8005852:	d106      	bne.n	8005862 <HAL_RCC_OscConfig+0x312>
 8005854:	4b6f      	ldr	r3, [pc, #444]	@ (8005a14 <HAL_RCC_OscConfig+0x4c4>)
 8005856:	6a1b      	ldr	r3, [r3, #32]
 8005858:	4a6e      	ldr	r2, [pc, #440]	@ (8005a14 <HAL_RCC_OscConfig+0x4c4>)
 800585a:	f043 0301 	orr.w	r3, r3, #1
 800585e:	6213      	str	r3, [r2, #32]
 8005860:	e02d      	b.n	80058be <HAL_RCC_OscConfig+0x36e>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10c      	bne.n	8005884 <HAL_RCC_OscConfig+0x334>
 800586a:	4b6a      	ldr	r3, [pc, #424]	@ (8005a14 <HAL_RCC_OscConfig+0x4c4>)
 800586c:	6a1b      	ldr	r3, [r3, #32]
 800586e:	4a69      	ldr	r2, [pc, #420]	@ (8005a14 <HAL_RCC_OscConfig+0x4c4>)
 8005870:	f023 0301 	bic.w	r3, r3, #1
 8005874:	6213      	str	r3, [r2, #32]
 8005876:	4b67      	ldr	r3, [pc, #412]	@ (8005a14 <HAL_RCC_OscConfig+0x4c4>)
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	4a66      	ldr	r2, [pc, #408]	@ (8005a14 <HAL_RCC_OscConfig+0x4c4>)
 800587c:	f023 0304 	bic.w	r3, r3, #4
 8005880:	6213      	str	r3, [r2, #32]
 8005882:	e01c      	b.n	80058be <HAL_RCC_OscConfig+0x36e>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	2b05      	cmp	r3, #5
 800588a:	d10c      	bne.n	80058a6 <HAL_RCC_OscConfig+0x356>
 800588c:	4b61      	ldr	r3, [pc, #388]	@ (8005a14 <HAL_RCC_OscConfig+0x4c4>)
 800588e:	6a1b      	ldr	r3, [r3, #32]
 8005890:	4a60      	ldr	r2, [pc, #384]	@ (8005a14 <HAL_RCC_OscConfig+0x4c4>)
 8005892:	f043 0304 	orr.w	r3, r3, #4
 8005896:	6213      	str	r3, [r2, #32]
 8005898:	4b5e      	ldr	r3, [pc, #376]	@ (8005a14 <HAL_RCC_OscConfig+0x4c4>)
 800589a:	6a1b      	ldr	r3, [r3, #32]
 800589c:	4a5d      	ldr	r2, [pc, #372]	@ (8005a14 <HAL_RCC_OscConfig+0x4c4>)
 800589e:	f043 0301 	orr.w	r3, r3, #1
 80058a2:	6213      	str	r3, [r2, #32]
 80058a4:	e00b      	b.n	80058be <HAL_RCC_OscConfig+0x36e>
 80058a6:	4b5b      	ldr	r3, [pc, #364]	@ (8005a14 <HAL_RCC_OscConfig+0x4c4>)
 80058a8:	6a1b      	ldr	r3, [r3, #32]
 80058aa:	4a5a      	ldr	r2, [pc, #360]	@ (8005a14 <HAL_RCC_OscConfig+0x4c4>)
 80058ac:	f023 0301 	bic.w	r3, r3, #1
 80058b0:	6213      	str	r3, [r2, #32]
 80058b2:	4b58      	ldr	r3, [pc, #352]	@ (8005a14 <HAL_RCC_OscConfig+0x4c4>)
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	4a57      	ldr	r2, [pc, #348]	@ (8005a14 <HAL_RCC_OscConfig+0x4c4>)
 80058b8:	f023 0304 	bic.w	r3, r3, #4
 80058bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d015      	beq.n	80058f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058c6:	f7fc f8ab 	bl	8001a20 <HAL_GetTick>
 80058ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058cc:	e00a      	b.n	80058e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ce:	f7fc f8a7 	bl	8001a20 <HAL_GetTick>
 80058d2:	4602      	mov	r2, r0
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058dc:	4293      	cmp	r3, r2
 80058de:	d901      	bls.n	80058e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e0b1      	b.n	8005a48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058e4:	4b4b      	ldr	r3, [pc, #300]	@ (8005a14 <HAL_RCC_OscConfig+0x4c4>)
 80058e6:	6a1b      	ldr	r3, [r3, #32]
 80058e8:	f003 0302 	and.w	r3, r3, #2
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d0ee      	beq.n	80058ce <HAL_RCC_OscConfig+0x37e>
 80058f0:	e014      	b.n	800591c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058f2:	f7fc f895 	bl	8001a20 <HAL_GetTick>
 80058f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058f8:	e00a      	b.n	8005910 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058fa:	f7fc f891 	bl	8001a20 <HAL_GetTick>
 80058fe:	4602      	mov	r2, r0
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005908:	4293      	cmp	r3, r2
 800590a:	d901      	bls.n	8005910 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	e09b      	b.n	8005a48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005910:	4b40      	ldr	r3, [pc, #256]	@ (8005a14 <HAL_RCC_OscConfig+0x4c4>)
 8005912:	6a1b      	ldr	r3, [r3, #32]
 8005914:	f003 0302 	and.w	r3, r3, #2
 8005918:	2b00      	cmp	r3, #0
 800591a:	d1ee      	bne.n	80058fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800591c:	7dfb      	ldrb	r3, [r7, #23]
 800591e:	2b01      	cmp	r3, #1
 8005920:	d105      	bne.n	800592e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005922:	4b3c      	ldr	r3, [pc, #240]	@ (8005a14 <HAL_RCC_OscConfig+0x4c4>)
 8005924:	69db      	ldr	r3, [r3, #28]
 8005926:	4a3b      	ldr	r2, [pc, #236]	@ (8005a14 <HAL_RCC_OscConfig+0x4c4>)
 8005928:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800592c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	69db      	ldr	r3, [r3, #28]
 8005932:	2b00      	cmp	r3, #0
 8005934:	f000 8087 	beq.w	8005a46 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005938:	4b36      	ldr	r3, [pc, #216]	@ (8005a14 <HAL_RCC_OscConfig+0x4c4>)
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	f003 030c 	and.w	r3, r3, #12
 8005940:	2b08      	cmp	r3, #8
 8005942:	d061      	beq.n	8005a08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	69db      	ldr	r3, [r3, #28]
 8005948:	2b02      	cmp	r3, #2
 800594a:	d146      	bne.n	80059da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800594c:	4b33      	ldr	r3, [pc, #204]	@ (8005a1c <HAL_RCC_OscConfig+0x4cc>)
 800594e:	2200      	movs	r2, #0
 8005950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005952:	f7fc f865 	bl	8001a20 <HAL_GetTick>
 8005956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005958:	e008      	b.n	800596c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800595a:	f7fc f861 	bl	8001a20 <HAL_GetTick>
 800595e:	4602      	mov	r2, r0
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	2b02      	cmp	r3, #2
 8005966:	d901      	bls.n	800596c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	e06d      	b.n	8005a48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800596c:	4b29      	ldr	r3, [pc, #164]	@ (8005a14 <HAL_RCC_OscConfig+0x4c4>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d1f0      	bne.n	800595a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6a1b      	ldr	r3, [r3, #32]
 800597c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005980:	d108      	bne.n	8005994 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005982:	4b24      	ldr	r3, [pc, #144]	@ (8005a14 <HAL_RCC_OscConfig+0x4c4>)
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	4921      	ldr	r1, [pc, #132]	@ (8005a14 <HAL_RCC_OscConfig+0x4c4>)
 8005990:	4313      	orrs	r3, r2
 8005992:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005994:	4b1f      	ldr	r3, [pc, #124]	@ (8005a14 <HAL_RCC_OscConfig+0x4c4>)
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a19      	ldr	r1, [r3, #32]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a4:	430b      	orrs	r3, r1
 80059a6:	491b      	ldr	r1, [pc, #108]	@ (8005a14 <HAL_RCC_OscConfig+0x4c4>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059ac:	4b1b      	ldr	r3, [pc, #108]	@ (8005a1c <HAL_RCC_OscConfig+0x4cc>)
 80059ae:	2201      	movs	r2, #1
 80059b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059b2:	f7fc f835 	bl	8001a20 <HAL_GetTick>
 80059b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80059b8:	e008      	b.n	80059cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059ba:	f7fc f831 	bl	8001a20 <HAL_GetTick>
 80059be:	4602      	mov	r2, r0
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	d901      	bls.n	80059cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80059c8:	2303      	movs	r3, #3
 80059ca:	e03d      	b.n	8005a48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80059cc:	4b11      	ldr	r3, [pc, #68]	@ (8005a14 <HAL_RCC_OscConfig+0x4c4>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d0f0      	beq.n	80059ba <HAL_RCC_OscConfig+0x46a>
 80059d8:	e035      	b.n	8005a46 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059da:	4b10      	ldr	r3, [pc, #64]	@ (8005a1c <HAL_RCC_OscConfig+0x4cc>)
 80059dc:	2200      	movs	r2, #0
 80059de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059e0:	f7fc f81e 	bl	8001a20 <HAL_GetTick>
 80059e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059e6:	e008      	b.n	80059fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059e8:	f7fc f81a 	bl	8001a20 <HAL_GetTick>
 80059ec:	4602      	mov	r2, r0
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d901      	bls.n	80059fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e026      	b.n	8005a48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059fa:	4b06      	ldr	r3, [pc, #24]	@ (8005a14 <HAL_RCC_OscConfig+0x4c4>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1f0      	bne.n	80059e8 <HAL_RCC_OscConfig+0x498>
 8005a06:	e01e      	b.n	8005a46 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	69db      	ldr	r3, [r3, #28]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d107      	bne.n	8005a20 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e019      	b.n	8005a48 <HAL_RCC_OscConfig+0x4f8>
 8005a14:	40021000 	.word	0x40021000
 8005a18:	40007000 	.word	0x40007000
 8005a1c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005a20:	4b0b      	ldr	r3, [pc, #44]	@ (8005a50 <HAL_RCC_OscConfig+0x500>)
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a1b      	ldr	r3, [r3, #32]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d106      	bne.n	8005a42 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d001      	beq.n	8005a46 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e000      	b.n	8005a48 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3718      	adds	r7, #24
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	40021000 	.word	0x40021000

08005a54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d101      	bne.n	8005a68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e0d0      	b.n	8005c0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a68:	4b6a      	ldr	r3, [pc, #424]	@ (8005c14 <HAL_RCC_ClockConfig+0x1c0>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0307 	and.w	r3, r3, #7
 8005a70:	683a      	ldr	r2, [r7, #0]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d910      	bls.n	8005a98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a76:	4b67      	ldr	r3, [pc, #412]	@ (8005c14 <HAL_RCC_ClockConfig+0x1c0>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f023 0207 	bic.w	r2, r3, #7
 8005a7e:	4965      	ldr	r1, [pc, #404]	@ (8005c14 <HAL_RCC_ClockConfig+0x1c0>)
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a86:	4b63      	ldr	r3, [pc, #396]	@ (8005c14 <HAL_RCC_ClockConfig+0x1c0>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0307 	and.w	r3, r3, #7
 8005a8e:	683a      	ldr	r2, [r7, #0]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d001      	beq.n	8005a98 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e0b8      	b.n	8005c0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 0302 	and.w	r3, r3, #2
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d020      	beq.n	8005ae6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0304 	and.w	r3, r3, #4
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d005      	beq.n	8005abc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ab0:	4b59      	ldr	r3, [pc, #356]	@ (8005c18 <HAL_RCC_ClockConfig+0x1c4>)
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	4a58      	ldr	r2, [pc, #352]	@ (8005c18 <HAL_RCC_ClockConfig+0x1c4>)
 8005ab6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005aba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0308 	and.w	r3, r3, #8
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d005      	beq.n	8005ad4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ac8:	4b53      	ldr	r3, [pc, #332]	@ (8005c18 <HAL_RCC_ClockConfig+0x1c4>)
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	4a52      	ldr	r2, [pc, #328]	@ (8005c18 <HAL_RCC_ClockConfig+0x1c4>)
 8005ace:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005ad2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ad4:	4b50      	ldr	r3, [pc, #320]	@ (8005c18 <HAL_RCC_ClockConfig+0x1c4>)
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	494d      	ldr	r1, [pc, #308]	@ (8005c18 <HAL_RCC_ClockConfig+0x1c4>)
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0301 	and.w	r3, r3, #1
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d040      	beq.n	8005b74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d107      	bne.n	8005b0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005afa:	4b47      	ldr	r3, [pc, #284]	@ (8005c18 <HAL_RCC_ClockConfig+0x1c4>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d115      	bne.n	8005b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e07f      	b.n	8005c0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	d107      	bne.n	8005b22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b12:	4b41      	ldr	r3, [pc, #260]	@ (8005c18 <HAL_RCC_ClockConfig+0x1c4>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d109      	bne.n	8005b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e073      	b.n	8005c0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b22:	4b3d      	ldr	r3, [pc, #244]	@ (8005c18 <HAL_RCC_ClockConfig+0x1c4>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 0302 	and.w	r3, r3, #2
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d101      	bne.n	8005b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e06b      	b.n	8005c0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b32:	4b39      	ldr	r3, [pc, #228]	@ (8005c18 <HAL_RCC_ClockConfig+0x1c4>)
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f023 0203 	bic.w	r2, r3, #3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	4936      	ldr	r1, [pc, #216]	@ (8005c18 <HAL_RCC_ClockConfig+0x1c4>)
 8005b40:	4313      	orrs	r3, r2
 8005b42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b44:	f7fb ff6c 	bl	8001a20 <HAL_GetTick>
 8005b48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b4a:	e00a      	b.n	8005b62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b4c:	f7fb ff68 	bl	8001a20 <HAL_GetTick>
 8005b50:	4602      	mov	r2, r0
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d901      	bls.n	8005b62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e053      	b.n	8005c0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b62:	4b2d      	ldr	r3, [pc, #180]	@ (8005c18 <HAL_RCC_ClockConfig+0x1c4>)
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	f003 020c 	and.w	r2, r3, #12
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d1eb      	bne.n	8005b4c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b74:	4b27      	ldr	r3, [pc, #156]	@ (8005c14 <HAL_RCC_ClockConfig+0x1c0>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0307 	and.w	r3, r3, #7
 8005b7c:	683a      	ldr	r2, [r7, #0]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d210      	bcs.n	8005ba4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b82:	4b24      	ldr	r3, [pc, #144]	@ (8005c14 <HAL_RCC_ClockConfig+0x1c0>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f023 0207 	bic.w	r2, r3, #7
 8005b8a:	4922      	ldr	r1, [pc, #136]	@ (8005c14 <HAL_RCC_ClockConfig+0x1c0>)
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b92:	4b20      	ldr	r3, [pc, #128]	@ (8005c14 <HAL_RCC_ClockConfig+0x1c0>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 0307 	and.w	r3, r3, #7
 8005b9a:	683a      	ldr	r2, [r7, #0]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d001      	beq.n	8005ba4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e032      	b.n	8005c0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0304 	and.w	r3, r3, #4
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d008      	beq.n	8005bc2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bb0:	4b19      	ldr	r3, [pc, #100]	@ (8005c18 <HAL_RCC_ClockConfig+0x1c4>)
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	4916      	ldr	r1, [pc, #88]	@ (8005c18 <HAL_RCC_ClockConfig+0x1c4>)
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 0308 	and.w	r3, r3, #8
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d009      	beq.n	8005be2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005bce:	4b12      	ldr	r3, [pc, #72]	@ (8005c18 <HAL_RCC_ClockConfig+0x1c4>)
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	00db      	lsls	r3, r3, #3
 8005bdc:	490e      	ldr	r1, [pc, #56]	@ (8005c18 <HAL_RCC_ClockConfig+0x1c4>)
 8005bde:	4313      	orrs	r3, r2
 8005be0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005be2:	f000 f821 	bl	8005c28 <HAL_RCC_GetSysClockFreq>
 8005be6:	4602      	mov	r2, r0
 8005be8:	4b0b      	ldr	r3, [pc, #44]	@ (8005c18 <HAL_RCC_ClockConfig+0x1c4>)
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	091b      	lsrs	r3, r3, #4
 8005bee:	f003 030f 	and.w	r3, r3, #15
 8005bf2:	490a      	ldr	r1, [pc, #40]	@ (8005c1c <HAL_RCC_ClockConfig+0x1c8>)
 8005bf4:	5ccb      	ldrb	r3, [r1, r3]
 8005bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8005bfa:	4a09      	ldr	r2, [pc, #36]	@ (8005c20 <HAL_RCC_ClockConfig+0x1cc>)
 8005bfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005bfe:	4b09      	ldr	r3, [pc, #36]	@ (8005c24 <HAL_RCC_ClockConfig+0x1d0>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4618      	mov	r0, r3
 8005c04:	f7fb feca 	bl	800199c <HAL_InitTick>

  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	40022000 	.word	0x40022000
 8005c18:	40021000 	.word	0x40021000
 8005c1c:	0800a8b8 	.word	0x0800a8b8
 8005c20:	20000004 	.word	0x20000004
 8005c24:	20000008 	.word	0x20000008

08005c28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b087      	sub	sp, #28
 8005c2c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	60fb      	str	r3, [r7, #12]
 8005c32:	2300      	movs	r3, #0
 8005c34:	60bb      	str	r3, [r7, #8]
 8005c36:	2300      	movs	r3, #0
 8005c38:	617b      	str	r3, [r7, #20]
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005c42:	4b1e      	ldr	r3, [pc, #120]	@ (8005cbc <HAL_RCC_GetSysClockFreq+0x94>)
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f003 030c 	and.w	r3, r3, #12
 8005c4e:	2b04      	cmp	r3, #4
 8005c50:	d002      	beq.n	8005c58 <HAL_RCC_GetSysClockFreq+0x30>
 8005c52:	2b08      	cmp	r3, #8
 8005c54:	d003      	beq.n	8005c5e <HAL_RCC_GetSysClockFreq+0x36>
 8005c56:	e027      	b.n	8005ca8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005c58:	4b19      	ldr	r3, [pc, #100]	@ (8005cc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8005c5a:	613b      	str	r3, [r7, #16]
      break;
 8005c5c:	e027      	b.n	8005cae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	0c9b      	lsrs	r3, r3, #18
 8005c62:	f003 030f 	and.w	r3, r3, #15
 8005c66:	4a17      	ldr	r2, [pc, #92]	@ (8005cc4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005c68:	5cd3      	ldrb	r3, [r2, r3]
 8005c6a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d010      	beq.n	8005c98 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005c76:	4b11      	ldr	r3, [pc, #68]	@ (8005cbc <HAL_RCC_GetSysClockFreq+0x94>)
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	0c5b      	lsrs	r3, r3, #17
 8005c7c:	f003 0301 	and.w	r3, r3, #1
 8005c80:	4a11      	ldr	r2, [pc, #68]	@ (8005cc8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005c82:	5cd3      	ldrb	r3, [r2, r3]
 8005c84:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a0d      	ldr	r2, [pc, #52]	@ (8005cc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8005c8a:	fb03 f202 	mul.w	r2, r3, r2
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c94:	617b      	str	r3, [r7, #20]
 8005c96:	e004      	b.n	8005ca2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a0c      	ldr	r2, [pc, #48]	@ (8005ccc <HAL_RCC_GetSysClockFreq+0xa4>)
 8005c9c:	fb02 f303 	mul.w	r3, r2, r3
 8005ca0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	613b      	str	r3, [r7, #16]
      break;
 8005ca6:	e002      	b.n	8005cae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005ca8:	4b05      	ldr	r3, [pc, #20]	@ (8005cc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8005caa:	613b      	str	r3, [r7, #16]
      break;
 8005cac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005cae:	693b      	ldr	r3, [r7, #16]
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	371c      	adds	r7, #28
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bc80      	pop	{r7}
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	40021000 	.word	0x40021000
 8005cc0:	007a1200 	.word	0x007a1200
 8005cc4:	0800a8d0 	.word	0x0800a8d0
 8005cc8:	0800a8e0 	.word	0x0800a8e0
 8005ccc:	003d0900 	.word	0x003d0900

08005cd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cd4:	4b02      	ldr	r3, [pc, #8]	@ (8005ce0 <HAL_RCC_GetHCLKFreq+0x10>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bc80      	pop	{r7}
 8005cde:	4770      	bx	lr
 8005ce0:	20000004 	.word	0x20000004

08005ce4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ce8:	f7ff fff2 	bl	8005cd0 <HAL_RCC_GetHCLKFreq>
 8005cec:	4602      	mov	r2, r0
 8005cee:	4b05      	ldr	r3, [pc, #20]	@ (8005d04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	0a1b      	lsrs	r3, r3, #8
 8005cf4:	f003 0307 	and.w	r3, r3, #7
 8005cf8:	4903      	ldr	r1, [pc, #12]	@ (8005d08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cfa:	5ccb      	ldrb	r3, [r1, r3]
 8005cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	40021000 	.word	0x40021000
 8005d08:	0800a8c8 	.word	0x0800a8c8

08005d0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005d10:	f7ff ffde 	bl	8005cd0 <HAL_RCC_GetHCLKFreq>
 8005d14:	4602      	mov	r2, r0
 8005d16:	4b05      	ldr	r3, [pc, #20]	@ (8005d2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	0adb      	lsrs	r3, r3, #11
 8005d1c:	f003 0307 	and.w	r3, r3, #7
 8005d20:	4903      	ldr	r1, [pc, #12]	@ (8005d30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d22:	5ccb      	ldrb	r3, [r1, r3]
 8005d24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	40021000 	.word	0x40021000
 8005d30:	0800a8c8 	.word	0x0800a8c8

08005d34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8005d68 <RCC_Delay+0x34>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a0a      	ldr	r2, [pc, #40]	@ (8005d6c <RCC_Delay+0x38>)
 8005d42:	fba2 2303 	umull	r2, r3, r2, r3
 8005d46:	0a5b      	lsrs	r3, r3, #9
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	fb02 f303 	mul.w	r3, r2, r3
 8005d4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005d50:	bf00      	nop
  }
  while (Delay --);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	1e5a      	subs	r2, r3, #1
 8005d56:	60fa      	str	r2, [r7, #12]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d1f9      	bne.n	8005d50 <RCC_Delay+0x1c>
}
 8005d5c:	bf00      	nop
 8005d5e:	bf00      	nop
 8005d60:	3714      	adds	r7, #20
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bc80      	pop	{r7}
 8005d66:	4770      	bx	lr
 8005d68:	20000004 	.word	0x20000004
 8005d6c:	10624dd3 	.word	0x10624dd3

08005d70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d101      	bne.n	8005d82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e042      	b.n	8005e08 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d106      	bne.n	8005d9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f7fb fd7a 	bl	8001890 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2224      	movs	r2, #36	@ 0x24
 8005da0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68da      	ldr	r2, [r3, #12]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005db2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 f971 	bl	800609c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	691a      	ldr	r2, [r3, #16]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005dc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	695a      	ldr	r2, [r3, #20]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005dd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68da      	ldr	r2, [r3, #12]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005de8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2220      	movs	r2, #32
 8005df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2220      	movs	r2, #32
 8005dfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005e06:	2300      	movs	r3, #0
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3708      	adds	r7, #8
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b08a      	sub	sp, #40	@ 0x28
 8005e14:	af02      	add	r7, sp, #8
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	603b      	str	r3, [r7, #0]
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005e20:	2300      	movs	r3, #0
 8005e22:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	2b20      	cmp	r3, #32
 8005e2e:	d175      	bne.n	8005f1c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d002      	beq.n	8005e3c <HAL_UART_Transmit+0x2c>
 8005e36:	88fb      	ldrh	r3, [r7, #6]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d101      	bne.n	8005e40 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e06e      	b.n	8005f1e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2200      	movs	r2, #0
 8005e44:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2221      	movs	r2, #33	@ 0x21
 8005e4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e4e:	f7fb fde7 	bl	8001a20 <HAL_GetTick>
 8005e52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	88fa      	ldrh	r2, [r7, #6]
 8005e58:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	88fa      	ldrh	r2, [r7, #6]
 8005e5e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e68:	d108      	bne.n	8005e7c <HAL_UART_Transmit+0x6c>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d104      	bne.n	8005e7c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005e72:	2300      	movs	r3, #0
 8005e74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	61bb      	str	r3, [r7, #24]
 8005e7a:	e003      	b.n	8005e84 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e80:	2300      	movs	r3, #0
 8005e82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005e84:	e02e      	b.n	8005ee4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	9300      	str	r3, [sp, #0]
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	2180      	movs	r1, #128	@ 0x80
 8005e90:	68f8      	ldr	r0, [r7, #12]
 8005e92:	f000 f848 	bl	8005f26 <UART_WaitOnFlagUntilTimeout>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d005      	beq.n	8005ea8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2220      	movs	r2, #32
 8005ea0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	e03a      	b.n	8005f1e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10b      	bne.n	8005ec6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	881b      	ldrh	r3, [r3, #0]
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ebc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	3302      	adds	r3, #2
 8005ec2:	61bb      	str	r3, [r7, #24]
 8005ec4:	e007      	b.n	8005ed6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	781a      	ldrb	r2, [r3, #0]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	3b01      	subs	r3, #1
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1cb      	bne.n	8005e86 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	9300      	str	r3, [sp, #0]
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	2140      	movs	r1, #64	@ 0x40
 8005ef8:	68f8      	ldr	r0, [r7, #12]
 8005efa:	f000 f814 	bl	8005f26 <UART_WaitOnFlagUntilTimeout>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d005      	beq.n	8005f10 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2220      	movs	r2, #32
 8005f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	e006      	b.n	8005f1e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2220      	movs	r2, #32
 8005f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	e000      	b.n	8005f1e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005f1c:	2302      	movs	r3, #2
  }
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3720      	adds	r7, #32
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}

08005f26 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005f26:	b580      	push	{r7, lr}
 8005f28:	b086      	sub	sp, #24
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	60f8      	str	r0, [r7, #12]
 8005f2e:	60b9      	str	r1, [r7, #8]
 8005f30:	603b      	str	r3, [r7, #0]
 8005f32:	4613      	mov	r3, r2
 8005f34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f36:	e03b      	b.n	8005fb0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f38:	6a3b      	ldr	r3, [r7, #32]
 8005f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f3e:	d037      	beq.n	8005fb0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f40:	f7fb fd6e 	bl	8001a20 <HAL_GetTick>
 8005f44:	4602      	mov	r2, r0
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	1ad3      	subs	r3, r2, r3
 8005f4a:	6a3a      	ldr	r2, [r7, #32]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d302      	bcc.n	8005f56 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f50:	6a3b      	ldr	r3, [r7, #32]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d101      	bne.n	8005f5a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f56:	2303      	movs	r3, #3
 8005f58:	e03a      	b.n	8005fd0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	f003 0304 	and.w	r3, r3, #4
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d023      	beq.n	8005fb0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	2b80      	cmp	r3, #128	@ 0x80
 8005f6c:	d020      	beq.n	8005fb0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	2b40      	cmp	r3, #64	@ 0x40
 8005f72:	d01d      	beq.n	8005fb0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f003 0308 	and.w	r3, r3, #8
 8005f7e:	2b08      	cmp	r3, #8
 8005f80:	d116      	bne.n	8005fb0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005f82:	2300      	movs	r3, #0
 8005f84:	617b      	str	r3, [r7, #20]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	617b      	str	r3, [r7, #20]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	617b      	str	r3, [r7, #20]
 8005f96:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f98:	68f8      	ldr	r0, [r7, #12]
 8005f9a:	f000 f81d 	bl	8005fd8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2208      	movs	r2, #8
 8005fa2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e00f      	b.n	8005fd0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	4013      	ands	r3, r2
 8005fba:	68ba      	ldr	r2, [r7, #8]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	bf0c      	ite	eq
 8005fc0:	2301      	moveq	r3, #1
 8005fc2:	2300      	movne	r3, #0
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	79fb      	ldrb	r3, [r7, #7]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d0b4      	beq.n	8005f38 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3718      	adds	r7, #24
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b095      	sub	sp, #84	@ 0x54
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	330c      	adds	r3, #12
 8005fe6:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fea:	e853 3f00 	ldrex	r3, [r3]
 8005fee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ff2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ff6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	330c      	adds	r3, #12
 8005ffe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006000:	643a      	str	r2, [r7, #64]	@ 0x40
 8006002:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006004:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006006:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006008:	e841 2300 	strex	r3, r2, [r1]
 800600c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800600e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006010:	2b00      	cmp	r3, #0
 8006012:	d1e5      	bne.n	8005fe0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	3314      	adds	r3, #20
 800601a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601c:	6a3b      	ldr	r3, [r7, #32]
 800601e:	e853 3f00 	ldrex	r3, [r3]
 8006022:	61fb      	str	r3, [r7, #28]
   return(result);
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	f023 0301 	bic.w	r3, r3, #1
 800602a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	3314      	adds	r3, #20
 8006032:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006034:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006036:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006038:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800603a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800603c:	e841 2300 	strex	r3, r2, [r1]
 8006040:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1e5      	bne.n	8006014 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800604c:	2b01      	cmp	r3, #1
 800604e:	d119      	bne.n	8006084 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	330c      	adds	r3, #12
 8006056:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	e853 3f00 	ldrex	r3, [r3]
 800605e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	f023 0310 	bic.w	r3, r3, #16
 8006066:	647b      	str	r3, [r7, #68]	@ 0x44
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	330c      	adds	r3, #12
 800606e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006070:	61ba      	str	r2, [r7, #24]
 8006072:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006074:	6979      	ldr	r1, [r7, #20]
 8006076:	69ba      	ldr	r2, [r7, #24]
 8006078:	e841 2300 	strex	r3, r2, [r1]
 800607c:	613b      	str	r3, [r7, #16]
   return(result);
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d1e5      	bne.n	8006050 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2220      	movs	r2, #32
 8006088:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006092:	bf00      	nop
 8006094:	3754      	adds	r7, #84	@ 0x54
 8006096:	46bd      	mov	sp, r7
 8006098:	bc80      	pop	{r7}
 800609a:	4770      	bx	lr

0800609c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	68da      	ldr	r2, [r3, #12]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	430a      	orrs	r2, r1
 80060b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	689a      	ldr	r2, [r3, #8]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	431a      	orrs	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	695b      	ldr	r3, [r3, #20]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80060d6:	f023 030c 	bic.w	r3, r3, #12
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	6812      	ldr	r2, [r2, #0]
 80060de:	68b9      	ldr	r1, [r7, #8]
 80060e0:	430b      	orrs	r3, r1
 80060e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	699a      	ldr	r2, [r3, #24]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	430a      	orrs	r2, r1
 80060f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a2c      	ldr	r2, [pc, #176]	@ (80061b0 <UART_SetConfig+0x114>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d103      	bne.n	800610c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006104:	f7ff fe02 	bl	8005d0c <HAL_RCC_GetPCLK2Freq>
 8006108:	60f8      	str	r0, [r7, #12]
 800610a:	e002      	b.n	8006112 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800610c:	f7ff fdea 	bl	8005ce4 <HAL_RCC_GetPCLK1Freq>
 8006110:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	4613      	mov	r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	4413      	add	r3, r2
 800611a:	009a      	lsls	r2, r3, #2
 800611c:	441a      	add	r2, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	fbb2 f3f3 	udiv	r3, r2, r3
 8006128:	4a22      	ldr	r2, [pc, #136]	@ (80061b4 <UART_SetConfig+0x118>)
 800612a:	fba2 2303 	umull	r2, r3, r2, r3
 800612e:	095b      	lsrs	r3, r3, #5
 8006130:	0119      	lsls	r1, r3, #4
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	4613      	mov	r3, r2
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	4413      	add	r3, r2
 800613a:	009a      	lsls	r2, r3, #2
 800613c:	441a      	add	r2, r3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	fbb2 f2f3 	udiv	r2, r2, r3
 8006148:	4b1a      	ldr	r3, [pc, #104]	@ (80061b4 <UART_SetConfig+0x118>)
 800614a:	fba3 0302 	umull	r0, r3, r3, r2
 800614e:	095b      	lsrs	r3, r3, #5
 8006150:	2064      	movs	r0, #100	@ 0x64
 8006152:	fb00 f303 	mul.w	r3, r0, r3
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	011b      	lsls	r3, r3, #4
 800615a:	3332      	adds	r3, #50	@ 0x32
 800615c:	4a15      	ldr	r2, [pc, #84]	@ (80061b4 <UART_SetConfig+0x118>)
 800615e:	fba2 2303 	umull	r2, r3, r2, r3
 8006162:	095b      	lsrs	r3, r3, #5
 8006164:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006168:	4419      	add	r1, r3
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	4613      	mov	r3, r2
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	4413      	add	r3, r2
 8006172:	009a      	lsls	r2, r3, #2
 8006174:	441a      	add	r2, r3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006180:	4b0c      	ldr	r3, [pc, #48]	@ (80061b4 <UART_SetConfig+0x118>)
 8006182:	fba3 0302 	umull	r0, r3, r3, r2
 8006186:	095b      	lsrs	r3, r3, #5
 8006188:	2064      	movs	r0, #100	@ 0x64
 800618a:	fb00 f303 	mul.w	r3, r0, r3
 800618e:	1ad3      	subs	r3, r2, r3
 8006190:	011b      	lsls	r3, r3, #4
 8006192:	3332      	adds	r3, #50	@ 0x32
 8006194:	4a07      	ldr	r2, [pc, #28]	@ (80061b4 <UART_SetConfig+0x118>)
 8006196:	fba2 2303 	umull	r2, r3, r2, r3
 800619a:	095b      	lsrs	r3, r3, #5
 800619c:	f003 020f 	and.w	r2, r3, #15
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	440a      	add	r2, r1
 80061a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80061a8:	bf00      	nop
 80061aa:	3710      	adds	r7, #16
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	40013800 	.word	0x40013800
 80061b4:	51eb851f 	.word	0x51eb851f

080061b8 <__cvt>:
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061be:	461d      	mov	r5, r3
 80061c0:	bfbb      	ittet	lt
 80061c2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80061c6:	461d      	movlt	r5, r3
 80061c8:	2300      	movge	r3, #0
 80061ca:	232d      	movlt	r3, #45	@ 0x2d
 80061cc:	b088      	sub	sp, #32
 80061ce:	4614      	mov	r4, r2
 80061d0:	bfb8      	it	lt
 80061d2:	4614      	movlt	r4, r2
 80061d4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80061d6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80061d8:	7013      	strb	r3, [r2, #0]
 80061da:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80061dc:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80061e0:	f023 0820 	bic.w	r8, r3, #32
 80061e4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80061e8:	d005      	beq.n	80061f6 <__cvt+0x3e>
 80061ea:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80061ee:	d100      	bne.n	80061f2 <__cvt+0x3a>
 80061f0:	3601      	adds	r6, #1
 80061f2:	2302      	movs	r3, #2
 80061f4:	e000      	b.n	80061f8 <__cvt+0x40>
 80061f6:	2303      	movs	r3, #3
 80061f8:	aa07      	add	r2, sp, #28
 80061fa:	9204      	str	r2, [sp, #16]
 80061fc:	aa06      	add	r2, sp, #24
 80061fe:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006202:	e9cd 3600 	strd	r3, r6, [sp]
 8006206:	4622      	mov	r2, r4
 8006208:	462b      	mov	r3, r5
 800620a:	f001 f881 	bl	8007310 <_dtoa_r>
 800620e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006212:	4607      	mov	r7, r0
 8006214:	d119      	bne.n	800624a <__cvt+0x92>
 8006216:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006218:	07db      	lsls	r3, r3, #31
 800621a:	d50e      	bpl.n	800623a <__cvt+0x82>
 800621c:	eb00 0906 	add.w	r9, r0, r6
 8006220:	2200      	movs	r2, #0
 8006222:	2300      	movs	r3, #0
 8006224:	4620      	mov	r0, r4
 8006226:	4629      	mov	r1, r5
 8006228:	f7fa fbbe 	bl	80009a8 <__aeabi_dcmpeq>
 800622c:	b108      	cbz	r0, 8006232 <__cvt+0x7a>
 800622e:	f8cd 901c 	str.w	r9, [sp, #28]
 8006232:	2230      	movs	r2, #48	@ 0x30
 8006234:	9b07      	ldr	r3, [sp, #28]
 8006236:	454b      	cmp	r3, r9
 8006238:	d31e      	bcc.n	8006278 <__cvt+0xc0>
 800623a:	4638      	mov	r0, r7
 800623c:	9b07      	ldr	r3, [sp, #28]
 800623e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006240:	1bdb      	subs	r3, r3, r7
 8006242:	6013      	str	r3, [r2, #0]
 8006244:	b008      	add	sp, #32
 8006246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800624a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800624e:	eb00 0906 	add.w	r9, r0, r6
 8006252:	d1e5      	bne.n	8006220 <__cvt+0x68>
 8006254:	7803      	ldrb	r3, [r0, #0]
 8006256:	2b30      	cmp	r3, #48	@ 0x30
 8006258:	d10a      	bne.n	8006270 <__cvt+0xb8>
 800625a:	2200      	movs	r2, #0
 800625c:	2300      	movs	r3, #0
 800625e:	4620      	mov	r0, r4
 8006260:	4629      	mov	r1, r5
 8006262:	f7fa fba1 	bl	80009a8 <__aeabi_dcmpeq>
 8006266:	b918      	cbnz	r0, 8006270 <__cvt+0xb8>
 8006268:	f1c6 0601 	rsb	r6, r6, #1
 800626c:	f8ca 6000 	str.w	r6, [sl]
 8006270:	f8da 3000 	ldr.w	r3, [sl]
 8006274:	4499      	add	r9, r3
 8006276:	e7d3      	b.n	8006220 <__cvt+0x68>
 8006278:	1c59      	adds	r1, r3, #1
 800627a:	9107      	str	r1, [sp, #28]
 800627c:	701a      	strb	r2, [r3, #0]
 800627e:	e7d9      	b.n	8006234 <__cvt+0x7c>

08006280 <__exponent>:
 8006280:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006282:	2900      	cmp	r1, #0
 8006284:	bfb6      	itet	lt
 8006286:	232d      	movlt	r3, #45	@ 0x2d
 8006288:	232b      	movge	r3, #43	@ 0x2b
 800628a:	4249      	neglt	r1, r1
 800628c:	2909      	cmp	r1, #9
 800628e:	7002      	strb	r2, [r0, #0]
 8006290:	7043      	strb	r3, [r0, #1]
 8006292:	dd29      	ble.n	80062e8 <__exponent+0x68>
 8006294:	f10d 0307 	add.w	r3, sp, #7
 8006298:	461d      	mov	r5, r3
 800629a:	270a      	movs	r7, #10
 800629c:	fbb1 f6f7 	udiv	r6, r1, r7
 80062a0:	461a      	mov	r2, r3
 80062a2:	fb07 1416 	mls	r4, r7, r6, r1
 80062a6:	3430      	adds	r4, #48	@ 0x30
 80062a8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80062ac:	460c      	mov	r4, r1
 80062ae:	2c63      	cmp	r4, #99	@ 0x63
 80062b0:	4631      	mov	r1, r6
 80062b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80062b6:	dcf1      	bgt.n	800629c <__exponent+0x1c>
 80062b8:	3130      	adds	r1, #48	@ 0x30
 80062ba:	1e94      	subs	r4, r2, #2
 80062bc:	f803 1c01 	strb.w	r1, [r3, #-1]
 80062c0:	4623      	mov	r3, r4
 80062c2:	1c41      	adds	r1, r0, #1
 80062c4:	42ab      	cmp	r3, r5
 80062c6:	d30a      	bcc.n	80062de <__exponent+0x5e>
 80062c8:	f10d 0309 	add.w	r3, sp, #9
 80062cc:	1a9b      	subs	r3, r3, r2
 80062ce:	42ac      	cmp	r4, r5
 80062d0:	bf88      	it	hi
 80062d2:	2300      	movhi	r3, #0
 80062d4:	3302      	adds	r3, #2
 80062d6:	4403      	add	r3, r0
 80062d8:	1a18      	subs	r0, r3, r0
 80062da:	b003      	add	sp, #12
 80062dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062de:	f813 6b01 	ldrb.w	r6, [r3], #1
 80062e2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80062e6:	e7ed      	b.n	80062c4 <__exponent+0x44>
 80062e8:	2330      	movs	r3, #48	@ 0x30
 80062ea:	3130      	adds	r1, #48	@ 0x30
 80062ec:	7083      	strb	r3, [r0, #2]
 80062ee:	70c1      	strb	r1, [r0, #3]
 80062f0:	1d03      	adds	r3, r0, #4
 80062f2:	e7f1      	b.n	80062d8 <__exponent+0x58>

080062f4 <_printf_float>:
 80062f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062f8:	b091      	sub	sp, #68	@ 0x44
 80062fa:	460c      	mov	r4, r1
 80062fc:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006300:	4616      	mov	r6, r2
 8006302:	461f      	mov	r7, r3
 8006304:	4605      	mov	r5, r0
 8006306:	f000 fef1 	bl	80070ec <_localeconv_r>
 800630a:	6803      	ldr	r3, [r0, #0]
 800630c:	4618      	mov	r0, r3
 800630e:	9308      	str	r3, [sp, #32]
 8006310:	f7f9 ff1e 	bl	8000150 <strlen>
 8006314:	2300      	movs	r3, #0
 8006316:	930e      	str	r3, [sp, #56]	@ 0x38
 8006318:	f8d8 3000 	ldr.w	r3, [r8]
 800631c:	9009      	str	r0, [sp, #36]	@ 0x24
 800631e:	3307      	adds	r3, #7
 8006320:	f023 0307 	bic.w	r3, r3, #7
 8006324:	f103 0208 	add.w	r2, r3, #8
 8006328:	f894 a018 	ldrb.w	sl, [r4, #24]
 800632c:	f8d4 b000 	ldr.w	fp, [r4]
 8006330:	f8c8 2000 	str.w	r2, [r8]
 8006334:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006338:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800633c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800633e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006342:	f04f 32ff 	mov.w	r2, #4294967295
 8006346:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800634a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800634e:	4b9c      	ldr	r3, [pc, #624]	@ (80065c0 <_printf_float+0x2cc>)
 8006350:	f7fa fb5c 	bl	8000a0c <__aeabi_dcmpun>
 8006354:	bb70      	cbnz	r0, 80063b4 <_printf_float+0xc0>
 8006356:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800635a:	f04f 32ff 	mov.w	r2, #4294967295
 800635e:	4b98      	ldr	r3, [pc, #608]	@ (80065c0 <_printf_float+0x2cc>)
 8006360:	f7fa fb36 	bl	80009d0 <__aeabi_dcmple>
 8006364:	bb30      	cbnz	r0, 80063b4 <_printf_float+0xc0>
 8006366:	2200      	movs	r2, #0
 8006368:	2300      	movs	r3, #0
 800636a:	4640      	mov	r0, r8
 800636c:	4649      	mov	r1, r9
 800636e:	f7fa fb25 	bl	80009bc <__aeabi_dcmplt>
 8006372:	b110      	cbz	r0, 800637a <_printf_float+0x86>
 8006374:	232d      	movs	r3, #45	@ 0x2d
 8006376:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800637a:	4a92      	ldr	r2, [pc, #584]	@ (80065c4 <_printf_float+0x2d0>)
 800637c:	4b92      	ldr	r3, [pc, #584]	@ (80065c8 <_printf_float+0x2d4>)
 800637e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006382:	bf94      	ite	ls
 8006384:	4690      	movls	r8, r2
 8006386:	4698      	movhi	r8, r3
 8006388:	2303      	movs	r3, #3
 800638a:	f04f 0900 	mov.w	r9, #0
 800638e:	6123      	str	r3, [r4, #16]
 8006390:	f02b 0304 	bic.w	r3, fp, #4
 8006394:	6023      	str	r3, [r4, #0]
 8006396:	4633      	mov	r3, r6
 8006398:	4621      	mov	r1, r4
 800639a:	4628      	mov	r0, r5
 800639c:	9700      	str	r7, [sp, #0]
 800639e:	aa0f      	add	r2, sp, #60	@ 0x3c
 80063a0:	f000 f9d4 	bl	800674c <_printf_common>
 80063a4:	3001      	adds	r0, #1
 80063a6:	f040 8090 	bne.w	80064ca <_printf_float+0x1d6>
 80063aa:	f04f 30ff 	mov.w	r0, #4294967295
 80063ae:	b011      	add	sp, #68	@ 0x44
 80063b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063b4:	4642      	mov	r2, r8
 80063b6:	464b      	mov	r3, r9
 80063b8:	4640      	mov	r0, r8
 80063ba:	4649      	mov	r1, r9
 80063bc:	f7fa fb26 	bl	8000a0c <__aeabi_dcmpun>
 80063c0:	b148      	cbz	r0, 80063d6 <_printf_float+0xe2>
 80063c2:	464b      	mov	r3, r9
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	bfb8      	it	lt
 80063c8:	232d      	movlt	r3, #45	@ 0x2d
 80063ca:	4a80      	ldr	r2, [pc, #512]	@ (80065cc <_printf_float+0x2d8>)
 80063cc:	bfb8      	it	lt
 80063ce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80063d2:	4b7f      	ldr	r3, [pc, #508]	@ (80065d0 <_printf_float+0x2dc>)
 80063d4:	e7d3      	b.n	800637e <_printf_float+0x8a>
 80063d6:	6863      	ldr	r3, [r4, #4]
 80063d8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80063dc:	1c5a      	adds	r2, r3, #1
 80063de:	d13f      	bne.n	8006460 <_printf_float+0x16c>
 80063e0:	2306      	movs	r3, #6
 80063e2:	6063      	str	r3, [r4, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80063ea:	6023      	str	r3, [r4, #0]
 80063ec:	9206      	str	r2, [sp, #24]
 80063ee:	aa0e      	add	r2, sp, #56	@ 0x38
 80063f0:	e9cd a204 	strd	sl, r2, [sp, #16]
 80063f4:	aa0d      	add	r2, sp, #52	@ 0x34
 80063f6:	9203      	str	r2, [sp, #12]
 80063f8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80063fc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006400:	6863      	ldr	r3, [r4, #4]
 8006402:	4642      	mov	r2, r8
 8006404:	9300      	str	r3, [sp, #0]
 8006406:	4628      	mov	r0, r5
 8006408:	464b      	mov	r3, r9
 800640a:	910a      	str	r1, [sp, #40]	@ 0x28
 800640c:	f7ff fed4 	bl	80061b8 <__cvt>
 8006410:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006412:	4680      	mov	r8, r0
 8006414:	2947      	cmp	r1, #71	@ 0x47
 8006416:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006418:	d128      	bne.n	800646c <_printf_float+0x178>
 800641a:	1cc8      	adds	r0, r1, #3
 800641c:	db02      	blt.n	8006424 <_printf_float+0x130>
 800641e:	6863      	ldr	r3, [r4, #4]
 8006420:	4299      	cmp	r1, r3
 8006422:	dd40      	ble.n	80064a6 <_printf_float+0x1b2>
 8006424:	f1aa 0a02 	sub.w	sl, sl, #2
 8006428:	fa5f fa8a 	uxtb.w	sl, sl
 800642c:	4652      	mov	r2, sl
 800642e:	3901      	subs	r1, #1
 8006430:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006434:	910d      	str	r1, [sp, #52]	@ 0x34
 8006436:	f7ff ff23 	bl	8006280 <__exponent>
 800643a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800643c:	4681      	mov	r9, r0
 800643e:	1813      	adds	r3, r2, r0
 8006440:	2a01      	cmp	r2, #1
 8006442:	6123      	str	r3, [r4, #16]
 8006444:	dc02      	bgt.n	800644c <_printf_float+0x158>
 8006446:	6822      	ldr	r2, [r4, #0]
 8006448:	07d2      	lsls	r2, r2, #31
 800644a:	d501      	bpl.n	8006450 <_printf_float+0x15c>
 800644c:	3301      	adds	r3, #1
 800644e:	6123      	str	r3, [r4, #16]
 8006450:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006454:	2b00      	cmp	r3, #0
 8006456:	d09e      	beq.n	8006396 <_printf_float+0xa2>
 8006458:	232d      	movs	r3, #45	@ 0x2d
 800645a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800645e:	e79a      	b.n	8006396 <_printf_float+0xa2>
 8006460:	2947      	cmp	r1, #71	@ 0x47
 8006462:	d1bf      	bne.n	80063e4 <_printf_float+0xf0>
 8006464:	2b00      	cmp	r3, #0
 8006466:	d1bd      	bne.n	80063e4 <_printf_float+0xf0>
 8006468:	2301      	movs	r3, #1
 800646a:	e7ba      	b.n	80063e2 <_printf_float+0xee>
 800646c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006470:	d9dc      	bls.n	800642c <_printf_float+0x138>
 8006472:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006476:	d118      	bne.n	80064aa <_printf_float+0x1b6>
 8006478:	2900      	cmp	r1, #0
 800647a:	6863      	ldr	r3, [r4, #4]
 800647c:	dd0b      	ble.n	8006496 <_printf_float+0x1a2>
 800647e:	6121      	str	r1, [r4, #16]
 8006480:	b913      	cbnz	r3, 8006488 <_printf_float+0x194>
 8006482:	6822      	ldr	r2, [r4, #0]
 8006484:	07d0      	lsls	r0, r2, #31
 8006486:	d502      	bpl.n	800648e <_printf_float+0x19a>
 8006488:	3301      	adds	r3, #1
 800648a:	440b      	add	r3, r1
 800648c:	6123      	str	r3, [r4, #16]
 800648e:	f04f 0900 	mov.w	r9, #0
 8006492:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006494:	e7dc      	b.n	8006450 <_printf_float+0x15c>
 8006496:	b913      	cbnz	r3, 800649e <_printf_float+0x1aa>
 8006498:	6822      	ldr	r2, [r4, #0]
 800649a:	07d2      	lsls	r2, r2, #31
 800649c:	d501      	bpl.n	80064a2 <_printf_float+0x1ae>
 800649e:	3302      	adds	r3, #2
 80064a0:	e7f4      	b.n	800648c <_printf_float+0x198>
 80064a2:	2301      	movs	r3, #1
 80064a4:	e7f2      	b.n	800648c <_printf_float+0x198>
 80064a6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80064aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80064ac:	4299      	cmp	r1, r3
 80064ae:	db05      	blt.n	80064bc <_printf_float+0x1c8>
 80064b0:	6823      	ldr	r3, [r4, #0]
 80064b2:	6121      	str	r1, [r4, #16]
 80064b4:	07d8      	lsls	r0, r3, #31
 80064b6:	d5ea      	bpl.n	800648e <_printf_float+0x19a>
 80064b8:	1c4b      	adds	r3, r1, #1
 80064ba:	e7e7      	b.n	800648c <_printf_float+0x198>
 80064bc:	2900      	cmp	r1, #0
 80064be:	bfcc      	ite	gt
 80064c0:	2201      	movgt	r2, #1
 80064c2:	f1c1 0202 	rsble	r2, r1, #2
 80064c6:	4413      	add	r3, r2
 80064c8:	e7e0      	b.n	800648c <_printf_float+0x198>
 80064ca:	6823      	ldr	r3, [r4, #0]
 80064cc:	055a      	lsls	r2, r3, #21
 80064ce:	d407      	bmi.n	80064e0 <_printf_float+0x1ec>
 80064d0:	6923      	ldr	r3, [r4, #16]
 80064d2:	4642      	mov	r2, r8
 80064d4:	4631      	mov	r1, r6
 80064d6:	4628      	mov	r0, r5
 80064d8:	47b8      	blx	r7
 80064da:	3001      	adds	r0, #1
 80064dc:	d12b      	bne.n	8006536 <_printf_float+0x242>
 80064de:	e764      	b.n	80063aa <_printf_float+0xb6>
 80064e0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80064e4:	f240 80dc 	bls.w	80066a0 <_printf_float+0x3ac>
 80064e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80064ec:	2200      	movs	r2, #0
 80064ee:	2300      	movs	r3, #0
 80064f0:	f7fa fa5a 	bl	80009a8 <__aeabi_dcmpeq>
 80064f4:	2800      	cmp	r0, #0
 80064f6:	d033      	beq.n	8006560 <_printf_float+0x26c>
 80064f8:	2301      	movs	r3, #1
 80064fa:	4631      	mov	r1, r6
 80064fc:	4628      	mov	r0, r5
 80064fe:	4a35      	ldr	r2, [pc, #212]	@ (80065d4 <_printf_float+0x2e0>)
 8006500:	47b8      	blx	r7
 8006502:	3001      	adds	r0, #1
 8006504:	f43f af51 	beq.w	80063aa <_printf_float+0xb6>
 8006508:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800650c:	4543      	cmp	r3, r8
 800650e:	db02      	blt.n	8006516 <_printf_float+0x222>
 8006510:	6823      	ldr	r3, [r4, #0]
 8006512:	07d8      	lsls	r0, r3, #31
 8006514:	d50f      	bpl.n	8006536 <_printf_float+0x242>
 8006516:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800651a:	4631      	mov	r1, r6
 800651c:	4628      	mov	r0, r5
 800651e:	47b8      	blx	r7
 8006520:	3001      	adds	r0, #1
 8006522:	f43f af42 	beq.w	80063aa <_printf_float+0xb6>
 8006526:	f04f 0900 	mov.w	r9, #0
 800652a:	f108 38ff 	add.w	r8, r8, #4294967295
 800652e:	f104 0a1a 	add.w	sl, r4, #26
 8006532:	45c8      	cmp	r8, r9
 8006534:	dc09      	bgt.n	800654a <_printf_float+0x256>
 8006536:	6823      	ldr	r3, [r4, #0]
 8006538:	079b      	lsls	r3, r3, #30
 800653a:	f100 8102 	bmi.w	8006742 <_printf_float+0x44e>
 800653e:	68e0      	ldr	r0, [r4, #12]
 8006540:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006542:	4298      	cmp	r0, r3
 8006544:	bfb8      	it	lt
 8006546:	4618      	movlt	r0, r3
 8006548:	e731      	b.n	80063ae <_printf_float+0xba>
 800654a:	2301      	movs	r3, #1
 800654c:	4652      	mov	r2, sl
 800654e:	4631      	mov	r1, r6
 8006550:	4628      	mov	r0, r5
 8006552:	47b8      	blx	r7
 8006554:	3001      	adds	r0, #1
 8006556:	f43f af28 	beq.w	80063aa <_printf_float+0xb6>
 800655a:	f109 0901 	add.w	r9, r9, #1
 800655e:	e7e8      	b.n	8006532 <_printf_float+0x23e>
 8006560:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006562:	2b00      	cmp	r3, #0
 8006564:	dc38      	bgt.n	80065d8 <_printf_float+0x2e4>
 8006566:	2301      	movs	r3, #1
 8006568:	4631      	mov	r1, r6
 800656a:	4628      	mov	r0, r5
 800656c:	4a19      	ldr	r2, [pc, #100]	@ (80065d4 <_printf_float+0x2e0>)
 800656e:	47b8      	blx	r7
 8006570:	3001      	adds	r0, #1
 8006572:	f43f af1a 	beq.w	80063aa <_printf_float+0xb6>
 8006576:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800657a:	ea59 0303 	orrs.w	r3, r9, r3
 800657e:	d102      	bne.n	8006586 <_printf_float+0x292>
 8006580:	6823      	ldr	r3, [r4, #0]
 8006582:	07d9      	lsls	r1, r3, #31
 8006584:	d5d7      	bpl.n	8006536 <_printf_float+0x242>
 8006586:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800658a:	4631      	mov	r1, r6
 800658c:	4628      	mov	r0, r5
 800658e:	47b8      	blx	r7
 8006590:	3001      	adds	r0, #1
 8006592:	f43f af0a 	beq.w	80063aa <_printf_float+0xb6>
 8006596:	f04f 0a00 	mov.w	sl, #0
 800659a:	f104 0b1a 	add.w	fp, r4, #26
 800659e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80065a0:	425b      	negs	r3, r3
 80065a2:	4553      	cmp	r3, sl
 80065a4:	dc01      	bgt.n	80065aa <_printf_float+0x2b6>
 80065a6:	464b      	mov	r3, r9
 80065a8:	e793      	b.n	80064d2 <_printf_float+0x1de>
 80065aa:	2301      	movs	r3, #1
 80065ac:	465a      	mov	r2, fp
 80065ae:	4631      	mov	r1, r6
 80065b0:	4628      	mov	r0, r5
 80065b2:	47b8      	blx	r7
 80065b4:	3001      	adds	r0, #1
 80065b6:	f43f aef8 	beq.w	80063aa <_printf_float+0xb6>
 80065ba:	f10a 0a01 	add.w	sl, sl, #1
 80065be:	e7ee      	b.n	800659e <_printf_float+0x2aa>
 80065c0:	7fefffff 	.word	0x7fefffff
 80065c4:	0800a8e2 	.word	0x0800a8e2
 80065c8:	0800a8e6 	.word	0x0800a8e6
 80065cc:	0800a8ea 	.word	0x0800a8ea
 80065d0:	0800a8ee 	.word	0x0800a8ee
 80065d4:	0800a8f2 	.word	0x0800a8f2
 80065d8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80065da:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80065de:	4553      	cmp	r3, sl
 80065e0:	bfa8      	it	ge
 80065e2:	4653      	movge	r3, sl
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	4699      	mov	r9, r3
 80065e8:	dc36      	bgt.n	8006658 <_printf_float+0x364>
 80065ea:	f04f 0b00 	mov.w	fp, #0
 80065ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065f2:	f104 021a 	add.w	r2, r4, #26
 80065f6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80065f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80065fa:	eba3 0309 	sub.w	r3, r3, r9
 80065fe:	455b      	cmp	r3, fp
 8006600:	dc31      	bgt.n	8006666 <_printf_float+0x372>
 8006602:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006604:	459a      	cmp	sl, r3
 8006606:	dc3a      	bgt.n	800667e <_printf_float+0x38a>
 8006608:	6823      	ldr	r3, [r4, #0]
 800660a:	07da      	lsls	r2, r3, #31
 800660c:	d437      	bmi.n	800667e <_printf_float+0x38a>
 800660e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006610:	ebaa 0903 	sub.w	r9, sl, r3
 8006614:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006616:	ebaa 0303 	sub.w	r3, sl, r3
 800661a:	4599      	cmp	r9, r3
 800661c:	bfa8      	it	ge
 800661e:	4699      	movge	r9, r3
 8006620:	f1b9 0f00 	cmp.w	r9, #0
 8006624:	dc33      	bgt.n	800668e <_printf_float+0x39a>
 8006626:	f04f 0800 	mov.w	r8, #0
 800662a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800662e:	f104 0b1a 	add.w	fp, r4, #26
 8006632:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006634:	ebaa 0303 	sub.w	r3, sl, r3
 8006638:	eba3 0309 	sub.w	r3, r3, r9
 800663c:	4543      	cmp	r3, r8
 800663e:	f77f af7a 	ble.w	8006536 <_printf_float+0x242>
 8006642:	2301      	movs	r3, #1
 8006644:	465a      	mov	r2, fp
 8006646:	4631      	mov	r1, r6
 8006648:	4628      	mov	r0, r5
 800664a:	47b8      	blx	r7
 800664c:	3001      	adds	r0, #1
 800664e:	f43f aeac 	beq.w	80063aa <_printf_float+0xb6>
 8006652:	f108 0801 	add.w	r8, r8, #1
 8006656:	e7ec      	b.n	8006632 <_printf_float+0x33e>
 8006658:	4642      	mov	r2, r8
 800665a:	4631      	mov	r1, r6
 800665c:	4628      	mov	r0, r5
 800665e:	47b8      	blx	r7
 8006660:	3001      	adds	r0, #1
 8006662:	d1c2      	bne.n	80065ea <_printf_float+0x2f6>
 8006664:	e6a1      	b.n	80063aa <_printf_float+0xb6>
 8006666:	2301      	movs	r3, #1
 8006668:	4631      	mov	r1, r6
 800666a:	4628      	mov	r0, r5
 800666c:	920a      	str	r2, [sp, #40]	@ 0x28
 800666e:	47b8      	blx	r7
 8006670:	3001      	adds	r0, #1
 8006672:	f43f ae9a 	beq.w	80063aa <_printf_float+0xb6>
 8006676:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006678:	f10b 0b01 	add.w	fp, fp, #1
 800667c:	e7bb      	b.n	80065f6 <_printf_float+0x302>
 800667e:	4631      	mov	r1, r6
 8006680:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006684:	4628      	mov	r0, r5
 8006686:	47b8      	blx	r7
 8006688:	3001      	adds	r0, #1
 800668a:	d1c0      	bne.n	800660e <_printf_float+0x31a>
 800668c:	e68d      	b.n	80063aa <_printf_float+0xb6>
 800668e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006690:	464b      	mov	r3, r9
 8006692:	4631      	mov	r1, r6
 8006694:	4628      	mov	r0, r5
 8006696:	4442      	add	r2, r8
 8006698:	47b8      	blx	r7
 800669a:	3001      	adds	r0, #1
 800669c:	d1c3      	bne.n	8006626 <_printf_float+0x332>
 800669e:	e684      	b.n	80063aa <_printf_float+0xb6>
 80066a0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80066a4:	f1ba 0f01 	cmp.w	sl, #1
 80066a8:	dc01      	bgt.n	80066ae <_printf_float+0x3ba>
 80066aa:	07db      	lsls	r3, r3, #31
 80066ac:	d536      	bpl.n	800671c <_printf_float+0x428>
 80066ae:	2301      	movs	r3, #1
 80066b0:	4642      	mov	r2, r8
 80066b2:	4631      	mov	r1, r6
 80066b4:	4628      	mov	r0, r5
 80066b6:	47b8      	blx	r7
 80066b8:	3001      	adds	r0, #1
 80066ba:	f43f ae76 	beq.w	80063aa <_printf_float+0xb6>
 80066be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80066c2:	4631      	mov	r1, r6
 80066c4:	4628      	mov	r0, r5
 80066c6:	47b8      	blx	r7
 80066c8:	3001      	adds	r0, #1
 80066ca:	f43f ae6e 	beq.w	80063aa <_printf_float+0xb6>
 80066ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80066d2:	2200      	movs	r2, #0
 80066d4:	2300      	movs	r3, #0
 80066d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80066da:	f7fa f965 	bl	80009a8 <__aeabi_dcmpeq>
 80066de:	b9c0      	cbnz	r0, 8006712 <_printf_float+0x41e>
 80066e0:	4653      	mov	r3, sl
 80066e2:	f108 0201 	add.w	r2, r8, #1
 80066e6:	4631      	mov	r1, r6
 80066e8:	4628      	mov	r0, r5
 80066ea:	47b8      	blx	r7
 80066ec:	3001      	adds	r0, #1
 80066ee:	d10c      	bne.n	800670a <_printf_float+0x416>
 80066f0:	e65b      	b.n	80063aa <_printf_float+0xb6>
 80066f2:	2301      	movs	r3, #1
 80066f4:	465a      	mov	r2, fp
 80066f6:	4631      	mov	r1, r6
 80066f8:	4628      	mov	r0, r5
 80066fa:	47b8      	blx	r7
 80066fc:	3001      	adds	r0, #1
 80066fe:	f43f ae54 	beq.w	80063aa <_printf_float+0xb6>
 8006702:	f108 0801 	add.w	r8, r8, #1
 8006706:	45d0      	cmp	r8, sl
 8006708:	dbf3      	blt.n	80066f2 <_printf_float+0x3fe>
 800670a:	464b      	mov	r3, r9
 800670c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006710:	e6e0      	b.n	80064d4 <_printf_float+0x1e0>
 8006712:	f04f 0800 	mov.w	r8, #0
 8006716:	f104 0b1a 	add.w	fp, r4, #26
 800671a:	e7f4      	b.n	8006706 <_printf_float+0x412>
 800671c:	2301      	movs	r3, #1
 800671e:	4642      	mov	r2, r8
 8006720:	e7e1      	b.n	80066e6 <_printf_float+0x3f2>
 8006722:	2301      	movs	r3, #1
 8006724:	464a      	mov	r2, r9
 8006726:	4631      	mov	r1, r6
 8006728:	4628      	mov	r0, r5
 800672a:	47b8      	blx	r7
 800672c:	3001      	adds	r0, #1
 800672e:	f43f ae3c 	beq.w	80063aa <_printf_float+0xb6>
 8006732:	f108 0801 	add.w	r8, r8, #1
 8006736:	68e3      	ldr	r3, [r4, #12]
 8006738:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800673a:	1a5b      	subs	r3, r3, r1
 800673c:	4543      	cmp	r3, r8
 800673e:	dcf0      	bgt.n	8006722 <_printf_float+0x42e>
 8006740:	e6fd      	b.n	800653e <_printf_float+0x24a>
 8006742:	f04f 0800 	mov.w	r8, #0
 8006746:	f104 0919 	add.w	r9, r4, #25
 800674a:	e7f4      	b.n	8006736 <_printf_float+0x442>

0800674c <_printf_common>:
 800674c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006750:	4616      	mov	r6, r2
 8006752:	4698      	mov	r8, r3
 8006754:	688a      	ldr	r2, [r1, #8]
 8006756:	690b      	ldr	r3, [r1, #16]
 8006758:	4607      	mov	r7, r0
 800675a:	4293      	cmp	r3, r2
 800675c:	bfb8      	it	lt
 800675e:	4613      	movlt	r3, r2
 8006760:	6033      	str	r3, [r6, #0]
 8006762:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006766:	460c      	mov	r4, r1
 8006768:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800676c:	b10a      	cbz	r2, 8006772 <_printf_common+0x26>
 800676e:	3301      	adds	r3, #1
 8006770:	6033      	str	r3, [r6, #0]
 8006772:	6823      	ldr	r3, [r4, #0]
 8006774:	0699      	lsls	r1, r3, #26
 8006776:	bf42      	ittt	mi
 8006778:	6833      	ldrmi	r3, [r6, #0]
 800677a:	3302      	addmi	r3, #2
 800677c:	6033      	strmi	r3, [r6, #0]
 800677e:	6825      	ldr	r5, [r4, #0]
 8006780:	f015 0506 	ands.w	r5, r5, #6
 8006784:	d106      	bne.n	8006794 <_printf_common+0x48>
 8006786:	f104 0a19 	add.w	sl, r4, #25
 800678a:	68e3      	ldr	r3, [r4, #12]
 800678c:	6832      	ldr	r2, [r6, #0]
 800678e:	1a9b      	subs	r3, r3, r2
 8006790:	42ab      	cmp	r3, r5
 8006792:	dc2b      	bgt.n	80067ec <_printf_common+0xa0>
 8006794:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006798:	6822      	ldr	r2, [r4, #0]
 800679a:	3b00      	subs	r3, #0
 800679c:	bf18      	it	ne
 800679e:	2301      	movne	r3, #1
 80067a0:	0692      	lsls	r2, r2, #26
 80067a2:	d430      	bmi.n	8006806 <_printf_common+0xba>
 80067a4:	4641      	mov	r1, r8
 80067a6:	4638      	mov	r0, r7
 80067a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80067ac:	47c8      	blx	r9
 80067ae:	3001      	adds	r0, #1
 80067b0:	d023      	beq.n	80067fa <_printf_common+0xae>
 80067b2:	6823      	ldr	r3, [r4, #0]
 80067b4:	6922      	ldr	r2, [r4, #16]
 80067b6:	f003 0306 	and.w	r3, r3, #6
 80067ba:	2b04      	cmp	r3, #4
 80067bc:	bf14      	ite	ne
 80067be:	2500      	movne	r5, #0
 80067c0:	6833      	ldreq	r3, [r6, #0]
 80067c2:	f04f 0600 	mov.w	r6, #0
 80067c6:	bf08      	it	eq
 80067c8:	68e5      	ldreq	r5, [r4, #12]
 80067ca:	f104 041a 	add.w	r4, r4, #26
 80067ce:	bf08      	it	eq
 80067d0:	1aed      	subeq	r5, r5, r3
 80067d2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80067d6:	bf08      	it	eq
 80067d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067dc:	4293      	cmp	r3, r2
 80067de:	bfc4      	itt	gt
 80067e0:	1a9b      	subgt	r3, r3, r2
 80067e2:	18ed      	addgt	r5, r5, r3
 80067e4:	42b5      	cmp	r5, r6
 80067e6:	d11a      	bne.n	800681e <_printf_common+0xd2>
 80067e8:	2000      	movs	r0, #0
 80067ea:	e008      	b.n	80067fe <_printf_common+0xb2>
 80067ec:	2301      	movs	r3, #1
 80067ee:	4652      	mov	r2, sl
 80067f0:	4641      	mov	r1, r8
 80067f2:	4638      	mov	r0, r7
 80067f4:	47c8      	blx	r9
 80067f6:	3001      	adds	r0, #1
 80067f8:	d103      	bne.n	8006802 <_printf_common+0xb6>
 80067fa:	f04f 30ff 	mov.w	r0, #4294967295
 80067fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006802:	3501      	adds	r5, #1
 8006804:	e7c1      	b.n	800678a <_printf_common+0x3e>
 8006806:	2030      	movs	r0, #48	@ 0x30
 8006808:	18e1      	adds	r1, r4, r3
 800680a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800680e:	1c5a      	adds	r2, r3, #1
 8006810:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006814:	4422      	add	r2, r4
 8006816:	3302      	adds	r3, #2
 8006818:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800681c:	e7c2      	b.n	80067a4 <_printf_common+0x58>
 800681e:	2301      	movs	r3, #1
 8006820:	4622      	mov	r2, r4
 8006822:	4641      	mov	r1, r8
 8006824:	4638      	mov	r0, r7
 8006826:	47c8      	blx	r9
 8006828:	3001      	adds	r0, #1
 800682a:	d0e6      	beq.n	80067fa <_printf_common+0xae>
 800682c:	3601      	adds	r6, #1
 800682e:	e7d9      	b.n	80067e4 <_printf_common+0x98>

08006830 <_printf_i>:
 8006830:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006834:	7e0f      	ldrb	r7, [r1, #24]
 8006836:	4691      	mov	r9, r2
 8006838:	2f78      	cmp	r7, #120	@ 0x78
 800683a:	4680      	mov	r8, r0
 800683c:	460c      	mov	r4, r1
 800683e:	469a      	mov	sl, r3
 8006840:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006842:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006846:	d807      	bhi.n	8006858 <_printf_i+0x28>
 8006848:	2f62      	cmp	r7, #98	@ 0x62
 800684a:	d80a      	bhi.n	8006862 <_printf_i+0x32>
 800684c:	2f00      	cmp	r7, #0
 800684e:	f000 80d3 	beq.w	80069f8 <_printf_i+0x1c8>
 8006852:	2f58      	cmp	r7, #88	@ 0x58
 8006854:	f000 80ba 	beq.w	80069cc <_printf_i+0x19c>
 8006858:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800685c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006860:	e03a      	b.n	80068d8 <_printf_i+0xa8>
 8006862:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006866:	2b15      	cmp	r3, #21
 8006868:	d8f6      	bhi.n	8006858 <_printf_i+0x28>
 800686a:	a101      	add	r1, pc, #4	@ (adr r1, 8006870 <_printf_i+0x40>)
 800686c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006870:	080068c9 	.word	0x080068c9
 8006874:	080068dd 	.word	0x080068dd
 8006878:	08006859 	.word	0x08006859
 800687c:	08006859 	.word	0x08006859
 8006880:	08006859 	.word	0x08006859
 8006884:	08006859 	.word	0x08006859
 8006888:	080068dd 	.word	0x080068dd
 800688c:	08006859 	.word	0x08006859
 8006890:	08006859 	.word	0x08006859
 8006894:	08006859 	.word	0x08006859
 8006898:	08006859 	.word	0x08006859
 800689c:	080069df 	.word	0x080069df
 80068a0:	08006907 	.word	0x08006907
 80068a4:	08006999 	.word	0x08006999
 80068a8:	08006859 	.word	0x08006859
 80068ac:	08006859 	.word	0x08006859
 80068b0:	08006a01 	.word	0x08006a01
 80068b4:	08006859 	.word	0x08006859
 80068b8:	08006907 	.word	0x08006907
 80068bc:	08006859 	.word	0x08006859
 80068c0:	08006859 	.word	0x08006859
 80068c4:	080069a1 	.word	0x080069a1
 80068c8:	6833      	ldr	r3, [r6, #0]
 80068ca:	1d1a      	adds	r2, r3, #4
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	6032      	str	r2, [r6, #0]
 80068d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80068d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80068d8:	2301      	movs	r3, #1
 80068da:	e09e      	b.n	8006a1a <_printf_i+0x1ea>
 80068dc:	6833      	ldr	r3, [r6, #0]
 80068de:	6820      	ldr	r0, [r4, #0]
 80068e0:	1d19      	adds	r1, r3, #4
 80068e2:	6031      	str	r1, [r6, #0]
 80068e4:	0606      	lsls	r6, r0, #24
 80068e6:	d501      	bpl.n	80068ec <_printf_i+0xbc>
 80068e8:	681d      	ldr	r5, [r3, #0]
 80068ea:	e003      	b.n	80068f4 <_printf_i+0xc4>
 80068ec:	0645      	lsls	r5, r0, #25
 80068ee:	d5fb      	bpl.n	80068e8 <_printf_i+0xb8>
 80068f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80068f4:	2d00      	cmp	r5, #0
 80068f6:	da03      	bge.n	8006900 <_printf_i+0xd0>
 80068f8:	232d      	movs	r3, #45	@ 0x2d
 80068fa:	426d      	negs	r5, r5
 80068fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006900:	230a      	movs	r3, #10
 8006902:	4859      	ldr	r0, [pc, #356]	@ (8006a68 <_printf_i+0x238>)
 8006904:	e011      	b.n	800692a <_printf_i+0xfa>
 8006906:	6821      	ldr	r1, [r4, #0]
 8006908:	6833      	ldr	r3, [r6, #0]
 800690a:	0608      	lsls	r0, r1, #24
 800690c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006910:	d402      	bmi.n	8006918 <_printf_i+0xe8>
 8006912:	0649      	lsls	r1, r1, #25
 8006914:	bf48      	it	mi
 8006916:	b2ad      	uxthmi	r5, r5
 8006918:	2f6f      	cmp	r7, #111	@ 0x6f
 800691a:	6033      	str	r3, [r6, #0]
 800691c:	bf14      	ite	ne
 800691e:	230a      	movne	r3, #10
 8006920:	2308      	moveq	r3, #8
 8006922:	4851      	ldr	r0, [pc, #324]	@ (8006a68 <_printf_i+0x238>)
 8006924:	2100      	movs	r1, #0
 8006926:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800692a:	6866      	ldr	r6, [r4, #4]
 800692c:	2e00      	cmp	r6, #0
 800692e:	bfa8      	it	ge
 8006930:	6821      	ldrge	r1, [r4, #0]
 8006932:	60a6      	str	r6, [r4, #8]
 8006934:	bfa4      	itt	ge
 8006936:	f021 0104 	bicge.w	r1, r1, #4
 800693a:	6021      	strge	r1, [r4, #0]
 800693c:	b90d      	cbnz	r5, 8006942 <_printf_i+0x112>
 800693e:	2e00      	cmp	r6, #0
 8006940:	d04b      	beq.n	80069da <_printf_i+0x1aa>
 8006942:	4616      	mov	r6, r2
 8006944:	fbb5 f1f3 	udiv	r1, r5, r3
 8006948:	fb03 5711 	mls	r7, r3, r1, r5
 800694c:	5dc7      	ldrb	r7, [r0, r7]
 800694e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006952:	462f      	mov	r7, r5
 8006954:	42bb      	cmp	r3, r7
 8006956:	460d      	mov	r5, r1
 8006958:	d9f4      	bls.n	8006944 <_printf_i+0x114>
 800695a:	2b08      	cmp	r3, #8
 800695c:	d10b      	bne.n	8006976 <_printf_i+0x146>
 800695e:	6823      	ldr	r3, [r4, #0]
 8006960:	07df      	lsls	r7, r3, #31
 8006962:	d508      	bpl.n	8006976 <_printf_i+0x146>
 8006964:	6923      	ldr	r3, [r4, #16]
 8006966:	6861      	ldr	r1, [r4, #4]
 8006968:	4299      	cmp	r1, r3
 800696a:	bfde      	ittt	le
 800696c:	2330      	movle	r3, #48	@ 0x30
 800696e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006972:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006976:	1b92      	subs	r2, r2, r6
 8006978:	6122      	str	r2, [r4, #16]
 800697a:	464b      	mov	r3, r9
 800697c:	4621      	mov	r1, r4
 800697e:	4640      	mov	r0, r8
 8006980:	f8cd a000 	str.w	sl, [sp]
 8006984:	aa03      	add	r2, sp, #12
 8006986:	f7ff fee1 	bl	800674c <_printf_common>
 800698a:	3001      	adds	r0, #1
 800698c:	d14a      	bne.n	8006a24 <_printf_i+0x1f4>
 800698e:	f04f 30ff 	mov.w	r0, #4294967295
 8006992:	b004      	add	sp, #16
 8006994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006998:	6823      	ldr	r3, [r4, #0]
 800699a:	f043 0320 	orr.w	r3, r3, #32
 800699e:	6023      	str	r3, [r4, #0]
 80069a0:	2778      	movs	r7, #120	@ 0x78
 80069a2:	4832      	ldr	r0, [pc, #200]	@ (8006a6c <_printf_i+0x23c>)
 80069a4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80069a8:	6823      	ldr	r3, [r4, #0]
 80069aa:	6831      	ldr	r1, [r6, #0]
 80069ac:	061f      	lsls	r7, r3, #24
 80069ae:	f851 5b04 	ldr.w	r5, [r1], #4
 80069b2:	d402      	bmi.n	80069ba <_printf_i+0x18a>
 80069b4:	065f      	lsls	r7, r3, #25
 80069b6:	bf48      	it	mi
 80069b8:	b2ad      	uxthmi	r5, r5
 80069ba:	6031      	str	r1, [r6, #0]
 80069bc:	07d9      	lsls	r1, r3, #31
 80069be:	bf44      	itt	mi
 80069c0:	f043 0320 	orrmi.w	r3, r3, #32
 80069c4:	6023      	strmi	r3, [r4, #0]
 80069c6:	b11d      	cbz	r5, 80069d0 <_printf_i+0x1a0>
 80069c8:	2310      	movs	r3, #16
 80069ca:	e7ab      	b.n	8006924 <_printf_i+0xf4>
 80069cc:	4826      	ldr	r0, [pc, #152]	@ (8006a68 <_printf_i+0x238>)
 80069ce:	e7e9      	b.n	80069a4 <_printf_i+0x174>
 80069d0:	6823      	ldr	r3, [r4, #0]
 80069d2:	f023 0320 	bic.w	r3, r3, #32
 80069d6:	6023      	str	r3, [r4, #0]
 80069d8:	e7f6      	b.n	80069c8 <_printf_i+0x198>
 80069da:	4616      	mov	r6, r2
 80069dc:	e7bd      	b.n	800695a <_printf_i+0x12a>
 80069de:	6833      	ldr	r3, [r6, #0]
 80069e0:	6825      	ldr	r5, [r4, #0]
 80069e2:	1d18      	adds	r0, r3, #4
 80069e4:	6961      	ldr	r1, [r4, #20]
 80069e6:	6030      	str	r0, [r6, #0]
 80069e8:	062e      	lsls	r6, r5, #24
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	d501      	bpl.n	80069f2 <_printf_i+0x1c2>
 80069ee:	6019      	str	r1, [r3, #0]
 80069f0:	e002      	b.n	80069f8 <_printf_i+0x1c8>
 80069f2:	0668      	lsls	r0, r5, #25
 80069f4:	d5fb      	bpl.n	80069ee <_printf_i+0x1be>
 80069f6:	8019      	strh	r1, [r3, #0]
 80069f8:	2300      	movs	r3, #0
 80069fa:	4616      	mov	r6, r2
 80069fc:	6123      	str	r3, [r4, #16]
 80069fe:	e7bc      	b.n	800697a <_printf_i+0x14a>
 8006a00:	6833      	ldr	r3, [r6, #0]
 8006a02:	2100      	movs	r1, #0
 8006a04:	1d1a      	adds	r2, r3, #4
 8006a06:	6032      	str	r2, [r6, #0]
 8006a08:	681e      	ldr	r6, [r3, #0]
 8006a0a:	6862      	ldr	r2, [r4, #4]
 8006a0c:	4630      	mov	r0, r6
 8006a0e:	f000 fbe4 	bl	80071da <memchr>
 8006a12:	b108      	cbz	r0, 8006a18 <_printf_i+0x1e8>
 8006a14:	1b80      	subs	r0, r0, r6
 8006a16:	6060      	str	r0, [r4, #4]
 8006a18:	6863      	ldr	r3, [r4, #4]
 8006a1a:	6123      	str	r3, [r4, #16]
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a22:	e7aa      	b.n	800697a <_printf_i+0x14a>
 8006a24:	4632      	mov	r2, r6
 8006a26:	4649      	mov	r1, r9
 8006a28:	4640      	mov	r0, r8
 8006a2a:	6923      	ldr	r3, [r4, #16]
 8006a2c:	47d0      	blx	sl
 8006a2e:	3001      	adds	r0, #1
 8006a30:	d0ad      	beq.n	800698e <_printf_i+0x15e>
 8006a32:	6823      	ldr	r3, [r4, #0]
 8006a34:	079b      	lsls	r3, r3, #30
 8006a36:	d413      	bmi.n	8006a60 <_printf_i+0x230>
 8006a38:	68e0      	ldr	r0, [r4, #12]
 8006a3a:	9b03      	ldr	r3, [sp, #12]
 8006a3c:	4298      	cmp	r0, r3
 8006a3e:	bfb8      	it	lt
 8006a40:	4618      	movlt	r0, r3
 8006a42:	e7a6      	b.n	8006992 <_printf_i+0x162>
 8006a44:	2301      	movs	r3, #1
 8006a46:	4632      	mov	r2, r6
 8006a48:	4649      	mov	r1, r9
 8006a4a:	4640      	mov	r0, r8
 8006a4c:	47d0      	blx	sl
 8006a4e:	3001      	adds	r0, #1
 8006a50:	d09d      	beq.n	800698e <_printf_i+0x15e>
 8006a52:	3501      	adds	r5, #1
 8006a54:	68e3      	ldr	r3, [r4, #12]
 8006a56:	9903      	ldr	r1, [sp, #12]
 8006a58:	1a5b      	subs	r3, r3, r1
 8006a5a:	42ab      	cmp	r3, r5
 8006a5c:	dcf2      	bgt.n	8006a44 <_printf_i+0x214>
 8006a5e:	e7eb      	b.n	8006a38 <_printf_i+0x208>
 8006a60:	2500      	movs	r5, #0
 8006a62:	f104 0619 	add.w	r6, r4, #25
 8006a66:	e7f5      	b.n	8006a54 <_printf_i+0x224>
 8006a68:	0800a8f4 	.word	0x0800a8f4
 8006a6c:	0800a905 	.word	0x0800a905

08006a70 <_scanf_float>:
 8006a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a74:	b087      	sub	sp, #28
 8006a76:	9303      	str	r3, [sp, #12]
 8006a78:	688b      	ldr	r3, [r1, #8]
 8006a7a:	4617      	mov	r7, r2
 8006a7c:	1e5a      	subs	r2, r3, #1
 8006a7e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006a82:	bf82      	ittt	hi
 8006a84:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006a88:	eb03 0b05 	addhi.w	fp, r3, r5
 8006a8c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006a90:	460a      	mov	r2, r1
 8006a92:	f04f 0500 	mov.w	r5, #0
 8006a96:	bf88      	it	hi
 8006a98:	608b      	strhi	r3, [r1, #8]
 8006a9a:	680b      	ldr	r3, [r1, #0]
 8006a9c:	4680      	mov	r8, r0
 8006a9e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006aa2:	f842 3b1c 	str.w	r3, [r2], #28
 8006aa6:	460c      	mov	r4, r1
 8006aa8:	bf98      	it	ls
 8006aaa:	f04f 0b00 	movls.w	fp, #0
 8006aae:	4616      	mov	r6, r2
 8006ab0:	46aa      	mov	sl, r5
 8006ab2:	46a9      	mov	r9, r5
 8006ab4:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006ab8:	9201      	str	r2, [sp, #4]
 8006aba:	9502      	str	r5, [sp, #8]
 8006abc:	68a2      	ldr	r2, [r4, #8]
 8006abe:	b152      	cbz	r2, 8006ad6 <_scanf_float+0x66>
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	2b4e      	cmp	r3, #78	@ 0x4e
 8006ac6:	d865      	bhi.n	8006b94 <_scanf_float+0x124>
 8006ac8:	2b40      	cmp	r3, #64	@ 0x40
 8006aca:	d83d      	bhi.n	8006b48 <_scanf_float+0xd8>
 8006acc:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006ad0:	b2c8      	uxtb	r0, r1
 8006ad2:	280e      	cmp	r0, #14
 8006ad4:	d93b      	bls.n	8006b4e <_scanf_float+0xde>
 8006ad6:	f1b9 0f00 	cmp.w	r9, #0
 8006ada:	d003      	beq.n	8006ae4 <_scanf_float+0x74>
 8006adc:	6823      	ldr	r3, [r4, #0]
 8006ade:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ae2:	6023      	str	r3, [r4, #0]
 8006ae4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ae8:	f1ba 0f01 	cmp.w	sl, #1
 8006aec:	f200 8118 	bhi.w	8006d20 <_scanf_float+0x2b0>
 8006af0:	9b01      	ldr	r3, [sp, #4]
 8006af2:	429e      	cmp	r6, r3
 8006af4:	f200 8109 	bhi.w	8006d0a <_scanf_float+0x29a>
 8006af8:	2001      	movs	r0, #1
 8006afa:	b007      	add	sp, #28
 8006afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b00:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006b04:	2a0d      	cmp	r2, #13
 8006b06:	d8e6      	bhi.n	8006ad6 <_scanf_float+0x66>
 8006b08:	a101      	add	r1, pc, #4	@ (adr r1, 8006b10 <_scanf_float+0xa0>)
 8006b0a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006b0e:	bf00      	nop
 8006b10:	08006c57 	.word	0x08006c57
 8006b14:	08006ad7 	.word	0x08006ad7
 8006b18:	08006ad7 	.word	0x08006ad7
 8006b1c:	08006ad7 	.word	0x08006ad7
 8006b20:	08006cb7 	.word	0x08006cb7
 8006b24:	08006c8f 	.word	0x08006c8f
 8006b28:	08006ad7 	.word	0x08006ad7
 8006b2c:	08006ad7 	.word	0x08006ad7
 8006b30:	08006c65 	.word	0x08006c65
 8006b34:	08006ad7 	.word	0x08006ad7
 8006b38:	08006ad7 	.word	0x08006ad7
 8006b3c:	08006ad7 	.word	0x08006ad7
 8006b40:	08006ad7 	.word	0x08006ad7
 8006b44:	08006c1d 	.word	0x08006c1d
 8006b48:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006b4c:	e7da      	b.n	8006b04 <_scanf_float+0x94>
 8006b4e:	290e      	cmp	r1, #14
 8006b50:	d8c1      	bhi.n	8006ad6 <_scanf_float+0x66>
 8006b52:	a001      	add	r0, pc, #4	@ (adr r0, 8006b58 <_scanf_float+0xe8>)
 8006b54:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006b58:	08006c0d 	.word	0x08006c0d
 8006b5c:	08006ad7 	.word	0x08006ad7
 8006b60:	08006c0d 	.word	0x08006c0d
 8006b64:	08006ca3 	.word	0x08006ca3
 8006b68:	08006ad7 	.word	0x08006ad7
 8006b6c:	08006bb5 	.word	0x08006bb5
 8006b70:	08006bf3 	.word	0x08006bf3
 8006b74:	08006bf3 	.word	0x08006bf3
 8006b78:	08006bf3 	.word	0x08006bf3
 8006b7c:	08006bf3 	.word	0x08006bf3
 8006b80:	08006bf3 	.word	0x08006bf3
 8006b84:	08006bf3 	.word	0x08006bf3
 8006b88:	08006bf3 	.word	0x08006bf3
 8006b8c:	08006bf3 	.word	0x08006bf3
 8006b90:	08006bf3 	.word	0x08006bf3
 8006b94:	2b6e      	cmp	r3, #110	@ 0x6e
 8006b96:	d809      	bhi.n	8006bac <_scanf_float+0x13c>
 8006b98:	2b60      	cmp	r3, #96	@ 0x60
 8006b9a:	d8b1      	bhi.n	8006b00 <_scanf_float+0x90>
 8006b9c:	2b54      	cmp	r3, #84	@ 0x54
 8006b9e:	d07b      	beq.n	8006c98 <_scanf_float+0x228>
 8006ba0:	2b59      	cmp	r3, #89	@ 0x59
 8006ba2:	d198      	bne.n	8006ad6 <_scanf_float+0x66>
 8006ba4:	2d07      	cmp	r5, #7
 8006ba6:	d196      	bne.n	8006ad6 <_scanf_float+0x66>
 8006ba8:	2508      	movs	r5, #8
 8006baa:	e02c      	b.n	8006c06 <_scanf_float+0x196>
 8006bac:	2b74      	cmp	r3, #116	@ 0x74
 8006bae:	d073      	beq.n	8006c98 <_scanf_float+0x228>
 8006bb0:	2b79      	cmp	r3, #121	@ 0x79
 8006bb2:	e7f6      	b.n	8006ba2 <_scanf_float+0x132>
 8006bb4:	6821      	ldr	r1, [r4, #0]
 8006bb6:	05c8      	lsls	r0, r1, #23
 8006bb8:	d51b      	bpl.n	8006bf2 <_scanf_float+0x182>
 8006bba:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006bbe:	6021      	str	r1, [r4, #0]
 8006bc0:	f109 0901 	add.w	r9, r9, #1
 8006bc4:	f1bb 0f00 	cmp.w	fp, #0
 8006bc8:	d003      	beq.n	8006bd2 <_scanf_float+0x162>
 8006bca:	3201      	adds	r2, #1
 8006bcc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006bd0:	60a2      	str	r2, [r4, #8]
 8006bd2:	68a3      	ldr	r3, [r4, #8]
 8006bd4:	3b01      	subs	r3, #1
 8006bd6:	60a3      	str	r3, [r4, #8]
 8006bd8:	6923      	ldr	r3, [r4, #16]
 8006bda:	3301      	adds	r3, #1
 8006bdc:	6123      	str	r3, [r4, #16]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	3b01      	subs	r3, #1
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	607b      	str	r3, [r7, #4]
 8006be6:	f340 8087 	ble.w	8006cf8 <_scanf_float+0x288>
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	3301      	adds	r3, #1
 8006bee:	603b      	str	r3, [r7, #0]
 8006bf0:	e764      	b.n	8006abc <_scanf_float+0x4c>
 8006bf2:	eb1a 0105 	adds.w	r1, sl, r5
 8006bf6:	f47f af6e 	bne.w	8006ad6 <_scanf_float+0x66>
 8006bfa:	460d      	mov	r5, r1
 8006bfc:	468a      	mov	sl, r1
 8006bfe:	6822      	ldr	r2, [r4, #0]
 8006c00:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006c04:	6022      	str	r2, [r4, #0]
 8006c06:	f806 3b01 	strb.w	r3, [r6], #1
 8006c0a:	e7e2      	b.n	8006bd2 <_scanf_float+0x162>
 8006c0c:	6822      	ldr	r2, [r4, #0]
 8006c0e:	0610      	lsls	r0, r2, #24
 8006c10:	f57f af61 	bpl.w	8006ad6 <_scanf_float+0x66>
 8006c14:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006c18:	6022      	str	r2, [r4, #0]
 8006c1a:	e7f4      	b.n	8006c06 <_scanf_float+0x196>
 8006c1c:	f1ba 0f00 	cmp.w	sl, #0
 8006c20:	d10e      	bne.n	8006c40 <_scanf_float+0x1d0>
 8006c22:	f1b9 0f00 	cmp.w	r9, #0
 8006c26:	d10e      	bne.n	8006c46 <_scanf_float+0x1d6>
 8006c28:	6822      	ldr	r2, [r4, #0]
 8006c2a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006c2e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006c32:	d108      	bne.n	8006c46 <_scanf_float+0x1d6>
 8006c34:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006c38:	f04f 0a01 	mov.w	sl, #1
 8006c3c:	6022      	str	r2, [r4, #0]
 8006c3e:	e7e2      	b.n	8006c06 <_scanf_float+0x196>
 8006c40:	f1ba 0f02 	cmp.w	sl, #2
 8006c44:	d055      	beq.n	8006cf2 <_scanf_float+0x282>
 8006c46:	2d01      	cmp	r5, #1
 8006c48:	d002      	beq.n	8006c50 <_scanf_float+0x1e0>
 8006c4a:	2d04      	cmp	r5, #4
 8006c4c:	f47f af43 	bne.w	8006ad6 <_scanf_float+0x66>
 8006c50:	3501      	adds	r5, #1
 8006c52:	b2ed      	uxtb	r5, r5
 8006c54:	e7d7      	b.n	8006c06 <_scanf_float+0x196>
 8006c56:	f1ba 0f01 	cmp.w	sl, #1
 8006c5a:	f47f af3c 	bne.w	8006ad6 <_scanf_float+0x66>
 8006c5e:	f04f 0a02 	mov.w	sl, #2
 8006c62:	e7d0      	b.n	8006c06 <_scanf_float+0x196>
 8006c64:	b97d      	cbnz	r5, 8006c86 <_scanf_float+0x216>
 8006c66:	f1b9 0f00 	cmp.w	r9, #0
 8006c6a:	f47f af37 	bne.w	8006adc <_scanf_float+0x6c>
 8006c6e:	6822      	ldr	r2, [r4, #0]
 8006c70:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006c74:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006c78:	f040 8103 	bne.w	8006e82 <_scanf_float+0x412>
 8006c7c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006c80:	2501      	movs	r5, #1
 8006c82:	6022      	str	r2, [r4, #0]
 8006c84:	e7bf      	b.n	8006c06 <_scanf_float+0x196>
 8006c86:	2d03      	cmp	r5, #3
 8006c88:	d0e2      	beq.n	8006c50 <_scanf_float+0x1e0>
 8006c8a:	2d05      	cmp	r5, #5
 8006c8c:	e7de      	b.n	8006c4c <_scanf_float+0x1dc>
 8006c8e:	2d02      	cmp	r5, #2
 8006c90:	f47f af21 	bne.w	8006ad6 <_scanf_float+0x66>
 8006c94:	2503      	movs	r5, #3
 8006c96:	e7b6      	b.n	8006c06 <_scanf_float+0x196>
 8006c98:	2d06      	cmp	r5, #6
 8006c9a:	f47f af1c 	bne.w	8006ad6 <_scanf_float+0x66>
 8006c9e:	2507      	movs	r5, #7
 8006ca0:	e7b1      	b.n	8006c06 <_scanf_float+0x196>
 8006ca2:	6822      	ldr	r2, [r4, #0]
 8006ca4:	0591      	lsls	r1, r2, #22
 8006ca6:	f57f af16 	bpl.w	8006ad6 <_scanf_float+0x66>
 8006caa:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006cae:	6022      	str	r2, [r4, #0]
 8006cb0:	f8cd 9008 	str.w	r9, [sp, #8]
 8006cb4:	e7a7      	b.n	8006c06 <_scanf_float+0x196>
 8006cb6:	6822      	ldr	r2, [r4, #0]
 8006cb8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006cbc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006cc0:	d006      	beq.n	8006cd0 <_scanf_float+0x260>
 8006cc2:	0550      	lsls	r0, r2, #21
 8006cc4:	f57f af07 	bpl.w	8006ad6 <_scanf_float+0x66>
 8006cc8:	f1b9 0f00 	cmp.w	r9, #0
 8006ccc:	f000 80d9 	beq.w	8006e82 <_scanf_float+0x412>
 8006cd0:	0591      	lsls	r1, r2, #22
 8006cd2:	bf58      	it	pl
 8006cd4:	9902      	ldrpl	r1, [sp, #8]
 8006cd6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006cda:	bf58      	it	pl
 8006cdc:	eba9 0101 	subpl.w	r1, r9, r1
 8006ce0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006ce4:	f04f 0900 	mov.w	r9, #0
 8006ce8:	bf58      	it	pl
 8006cea:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006cee:	6022      	str	r2, [r4, #0]
 8006cf0:	e789      	b.n	8006c06 <_scanf_float+0x196>
 8006cf2:	f04f 0a03 	mov.w	sl, #3
 8006cf6:	e786      	b.n	8006c06 <_scanf_float+0x196>
 8006cf8:	4639      	mov	r1, r7
 8006cfa:	4640      	mov	r0, r8
 8006cfc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006d00:	4798      	blx	r3
 8006d02:	2800      	cmp	r0, #0
 8006d04:	f43f aeda 	beq.w	8006abc <_scanf_float+0x4c>
 8006d08:	e6e5      	b.n	8006ad6 <_scanf_float+0x66>
 8006d0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006d0e:	463a      	mov	r2, r7
 8006d10:	4640      	mov	r0, r8
 8006d12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006d16:	4798      	blx	r3
 8006d18:	6923      	ldr	r3, [r4, #16]
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	6123      	str	r3, [r4, #16]
 8006d1e:	e6e7      	b.n	8006af0 <_scanf_float+0x80>
 8006d20:	1e6b      	subs	r3, r5, #1
 8006d22:	2b06      	cmp	r3, #6
 8006d24:	d824      	bhi.n	8006d70 <_scanf_float+0x300>
 8006d26:	2d02      	cmp	r5, #2
 8006d28:	d836      	bhi.n	8006d98 <_scanf_float+0x328>
 8006d2a:	9b01      	ldr	r3, [sp, #4]
 8006d2c:	429e      	cmp	r6, r3
 8006d2e:	f67f aee3 	bls.w	8006af8 <_scanf_float+0x88>
 8006d32:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006d36:	463a      	mov	r2, r7
 8006d38:	4640      	mov	r0, r8
 8006d3a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006d3e:	4798      	blx	r3
 8006d40:	6923      	ldr	r3, [r4, #16]
 8006d42:	3b01      	subs	r3, #1
 8006d44:	6123      	str	r3, [r4, #16]
 8006d46:	e7f0      	b.n	8006d2a <_scanf_float+0x2ba>
 8006d48:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006d4c:	463a      	mov	r2, r7
 8006d4e:	4640      	mov	r0, r8
 8006d50:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006d54:	4798      	blx	r3
 8006d56:	6923      	ldr	r3, [r4, #16]
 8006d58:	3b01      	subs	r3, #1
 8006d5a:	6123      	str	r3, [r4, #16]
 8006d5c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d60:	fa5f fa8a 	uxtb.w	sl, sl
 8006d64:	f1ba 0f02 	cmp.w	sl, #2
 8006d68:	d1ee      	bne.n	8006d48 <_scanf_float+0x2d8>
 8006d6a:	3d03      	subs	r5, #3
 8006d6c:	b2ed      	uxtb	r5, r5
 8006d6e:	1b76      	subs	r6, r6, r5
 8006d70:	6823      	ldr	r3, [r4, #0]
 8006d72:	05da      	lsls	r2, r3, #23
 8006d74:	d530      	bpl.n	8006dd8 <_scanf_float+0x368>
 8006d76:	055b      	lsls	r3, r3, #21
 8006d78:	d511      	bpl.n	8006d9e <_scanf_float+0x32e>
 8006d7a:	9b01      	ldr	r3, [sp, #4]
 8006d7c:	429e      	cmp	r6, r3
 8006d7e:	f67f aebb 	bls.w	8006af8 <_scanf_float+0x88>
 8006d82:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006d86:	463a      	mov	r2, r7
 8006d88:	4640      	mov	r0, r8
 8006d8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006d8e:	4798      	blx	r3
 8006d90:	6923      	ldr	r3, [r4, #16]
 8006d92:	3b01      	subs	r3, #1
 8006d94:	6123      	str	r3, [r4, #16]
 8006d96:	e7f0      	b.n	8006d7a <_scanf_float+0x30a>
 8006d98:	46aa      	mov	sl, r5
 8006d9a:	46b3      	mov	fp, r6
 8006d9c:	e7de      	b.n	8006d5c <_scanf_float+0x2ec>
 8006d9e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006da2:	6923      	ldr	r3, [r4, #16]
 8006da4:	2965      	cmp	r1, #101	@ 0x65
 8006da6:	f103 33ff 	add.w	r3, r3, #4294967295
 8006daa:	f106 35ff 	add.w	r5, r6, #4294967295
 8006dae:	6123      	str	r3, [r4, #16]
 8006db0:	d00c      	beq.n	8006dcc <_scanf_float+0x35c>
 8006db2:	2945      	cmp	r1, #69	@ 0x45
 8006db4:	d00a      	beq.n	8006dcc <_scanf_float+0x35c>
 8006db6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006dba:	463a      	mov	r2, r7
 8006dbc:	4640      	mov	r0, r8
 8006dbe:	4798      	blx	r3
 8006dc0:	6923      	ldr	r3, [r4, #16]
 8006dc2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006dc6:	3b01      	subs	r3, #1
 8006dc8:	1eb5      	subs	r5, r6, #2
 8006dca:	6123      	str	r3, [r4, #16]
 8006dcc:	463a      	mov	r2, r7
 8006dce:	4640      	mov	r0, r8
 8006dd0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006dd4:	4798      	blx	r3
 8006dd6:	462e      	mov	r6, r5
 8006dd8:	6822      	ldr	r2, [r4, #0]
 8006dda:	f012 0210 	ands.w	r2, r2, #16
 8006dde:	d001      	beq.n	8006de4 <_scanf_float+0x374>
 8006de0:	2000      	movs	r0, #0
 8006de2:	e68a      	b.n	8006afa <_scanf_float+0x8a>
 8006de4:	7032      	strb	r2, [r6, #0]
 8006de6:	6823      	ldr	r3, [r4, #0]
 8006de8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006dec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006df0:	d11c      	bne.n	8006e2c <_scanf_float+0x3bc>
 8006df2:	9b02      	ldr	r3, [sp, #8]
 8006df4:	454b      	cmp	r3, r9
 8006df6:	eba3 0209 	sub.w	r2, r3, r9
 8006dfa:	d123      	bne.n	8006e44 <_scanf_float+0x3d4>
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	4640      	mov	r0, r8
 8006e00:	9901      	ldr	r1, [sp, #4]
 8006e02:	f002 fbed 	bl	80095e0 <_strtod_r>
 8006e06:	9b03      	ldr	r3, [sp, #12]
 8006e08:	6825      	ldr	r5, [r4, #0]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f015 0f02 	tst.w	r5, #2
 8006e10:	4606      	mov	r6, r0
 8006e12:	460f      	mov	r7, r1
 8006e14:	f103 0204 	add.w	r2, r3, #4
 8006e18:	d01f      	beq.n	8006e5a <_scanf_float+0x3ea>
 8006e1a:	9903      	ldr	r1, [sp, #12]
 8006e1c:	600a      	str	r2, [r1, #0]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	e9c3 6700 	strd	r6, r7, [r3]
 8006e24:	68e3      	ldr	r3, [r4, #12]
 8006e26:	3301      	adds	r3, #1
 8006e28:	60e3      	str	r3, [r4, #12]
 8006e2a:	e7d9      	b.n	8006de0 <_scanf_float+0x370>
 8006e2c:	9b04      	ldr	r3, [sp, #16]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d0e4      	beq.n	8006dfc <_scanf_float+0x38c>
 8006e32:	9905      	ldr	r1, [sp, #20]
 8006e34:	230a      	movs	r3, #10
 8006e36:	4640      	mov	r0, r8
 8006e38:	3101      	adds	r1, #1
 8006e3a:	f002 fc51 	bl	80096e0 <_strtol_r>
 8006e3e:	9b04      	ldr	r3, [sp, #16]
 8006e40:	9e05      	ldr	r6, [sp, #20]
 8006e42:	1ac2      	subs	r2, r0, r3
 8006e44:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006e48:	429e      	cmp	r6, r3
 8006e4a:	bf28      	it	cs
 8006e4c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006e50:	4630      	mov	r0, r6
 8006e52:	490d      	ldr	r1, [pc, #52]	@ (8006e88 <_scanf_float+0x418>)
 8006e54:	f000 f8de 	bl	8007014 <siprintf>
 8006e58:	e7d0      	b.n	8006dfc <_scanf_float+0x38c>
 8006e5a:	076d      	lsls	r5, r5, #29
 8006e5c:	d4dd      	bmi.n	8006e1a <_scanf_float+0x3aa>
 8006e5e:	9d03      	ldr	r5, [sp, #12]
 8006e60:	602a      	str	r2, [r5, #0]
 8006e62:	681d      	ldr	r5, [r3, #0]
 8006e64:	4602      	mov	r2, r0
 8006e66:	460b      	mov	r3, r1
 8006e68:	f7f9 fdd0 	bl	8000a0c <__aeabi_dcmpun>
 8006e6c:	b120      	cbz	r0, 8006e78 <_scanf_float+0x408>
 8006e6e:	4807      	ldr	r0, [pc, #28]	@ (8006e8c <_scanf_float+0x41c>)
 8006e70:	f000 f9c2 	bl	80071f8 <nanf>
 8006e74:	6028      	str	r0, [r5, #0]
 8006e76:	e7d5      	b.n	8006e24 <_scanf_float+0x3b4>
 8006e78:	4630      	mov	r0, r6
 8006e7a:	4639      	mov	r1, r7
 8006e7c:	f7f9 fe24 	bl	8000ac8 <__aeabi_d2f>
 8006e80:	e7f8      	b.n	8006e74 <_scanf_float+0x404>
 8006e82:	f04f 0900 	mov.w	r9, #0
 8006e86:	e62d      	b.n	8006ae4 <_scanf_float+0x74>
 8006e88:	0800a916 	.word	0x0800a916
 8006e8c:	0800acad 	.word	0x0800acad

08006e90 <std>:
 8006e90:	2300      	movs	r3, #0
 8006e92:	b510      	push	{r4, lr}
 8006e94:	4604      	mov	r4, r0
 8006e96:	e9c0 3300 	strd	r3, r3, [r0]
 8006e9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e9e:	6083      	str	r3, [r0, #8]
 8006ea0:	8181      	strh	r1, [r0, #12]
 8006ea2:	6643      	str	r3, [r0, #100]	@ 0x64
 8006ea4:	81c2      	strh	r2, [r0, #14]
 8006ea6:	6183      	str	r3, [r0, #24]
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	2208      	movs	r2, #8
 8006eac:	305c      	adds	r0, #92	@ 0x5c
 8006eae:	f000 f914 	bl	80070da <memset>
 8006eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ee8 <std+0x58>)
 8006eb4:	6224      	str	r4, [r4, #32]
 8006eb6:	6263      	str	r3, [r4, #36]	@ 0x24
 8006eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8006eec <std+0x5c>)
 8006eba:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8006ef0 <std+0x60>)
 8006ebe:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8006ef4 <std+0x64>)
 8006ec2:	6323      	str	r3, [r4, #48]	@ 0x30
 8006ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8006ef8 <std+0x68>)
 8006ec6:	429c      	cmp	r4, r3
 8006ec8:	d006      	beq.n	8006ed8 <std+0x48>
 8006eca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006ece:	4294      	cmp	r4, r2
 8006ed0:	d002      	beq.n	8006ed8 <std+0x48>
 8006ed2:	33d0      	adds	r3, #208	@ 0xd0
 8006ed4:	429c      	cmp	r4, r3
 8006ed6:	d105      	bne.n	8006ee4 <std+0x54>
 8006ed8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ee0:	f000 b978 	b.w	80071d4 <__retarget_lock_init_recursive>
 8006ee4:	bd10      	pop	{r4, pc}
 8006ee6:	bf00      	nop
 8006ee8:	08007055 	.word	0x08007055
 8006eec:	08007077 	.word	0x08007077
 8006ef0:	080070af 	.word	0x080070af
 8006ef4:	080070d3 	.word	0x080070d3
 8006ef8:	2000032c 	.word	0x2000032c

08006efc <stdio_exit_handler>:
 8006efc:	4a02      	ldr	r2, [pc, #8]	@ (8006f08 <stdio_exit_handler+0xc>)
 8006efe:	4903      	ldr	r1, [pc, #12]	@ (8006f0c <stdio_exit_handler+0x10>)
 8006f00:	4803      	ldr	r0, [pc, #12]	@ (8006f10 <stdio_exit_handler+0x14>)
 8006f02:	f000 b869 	b.w	8006fd8 <_fwalk_sglue>
 8006f06:	bf00      	nop
 8006f08:	20000010 	.word	0x20000010
 8006f0c:	08009a95 	.word	0x08009a95
 8006f10:	20000020 	.word	0x20000020

08006f14 <cleanup_stdio>:
 8006f14:	6841      	ldr	r1, [r0, #4]
 8006f16:	4b0c      	ldr	r3, [pc, #48]	@ (8006f48 <cleanup_stdio+0x34>)
 8006f18:	b510      	push	{r4, lr}
 8006f1a:	4299      	cmp	r1, r3
 8006f1c:	4604      	mov	r4, r0
 8006f1e:	d001      	beq.n	8006f24 <cleanup_stdio+0x10>
 8006f20:	f002 fdb8 	bl	8009a94 <_fflush_r>
 8006f24:	68a1      	ldr	r1, [r4, #8]
 8006f26:	4b09      	ldr	r3, [pc, #36]	@ (8006f4c <cleanup_stdio+0x38>)
 8006f28:	4299      	cmp	r1, r3
 8006f2a:	d002      	beq.n	8006f32 <cleanup_stdio+0x1e>
 8006f2c:	4620      	mov	r0, r4
 8006f2e:	f002 fdb1 	bl	8009a94 <_fflush_r>
 8006f32:	68e1      	ldr	r1, [r4, #12]
 8006f34:	4b06      	ldr	r3, [pc, #24]	@ (8006f50 <cleanup_stdio+0x3c>)
 8006f36:	4299      	cmp	r1, r3
 8006f38:	d004      	beq.n	8006f44 <cleanup_stdio+0x30>
 8006f3a:	4620      	mov	r0, r4
 8006f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f40:	f002 bda8 	b.w	8009a94 <_fflush_r>
 8006f44:	bd10      	pop	{r4, pc}
 8006f46:	bf00      	nop
 8006f48:	2000032c 	.word	0x2000032c
 8006f4c:	20000394 	.word	0x20000394
 8006f50:	200003fc 	.word	0x200003fc

08006f54 <global_stdio_init.part.0>:
 8006f54:	b510      	push	{r4, lr}
 8006f56:	4b0b      	ldr	r3, [pc, #44]	@ (8006f84 <global_stdio_init.part.0+0x30>)
 8006f58:	4c0b      	ldr	r4, [pc, #44]	@ (8006f88 <global_stdio_init.part.0+0x34>)
 8006f5a:	4a0c      	ldr	r2, [pc, #48]	@ (8006f8c <global_stdio_init.part.0+0x38>)
 8006f5c:	4620      	mov	r0, r4
 8006f5e:	601a      	str	r2, [r3, #0]
 8006f60:	2104      	movs	r1, #4
 8006f62:	2200      	movs	r2, #0
 8006f64:	f7ff ff94 	bl	8006e90 <std>
 8006f68:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	2109      	movs	r1, #9
 8006f70:	f7ff ff8e 	bl	8006e90 <std>
 8006f74:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006f78:	2202      	movs	r2, #2
 8006f7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f7e:	2112      	movs	r1, #18
 8006f80:	f7ff bf86 	b.w	8006e90 <std>
 8006f84:	20000464 	.word	0x20000464
 8006f88:	2000032c 	.word	0x2000032c
 8006f8c:	08006efd 	.word	0x08006efd

08006f90 <__sfp_lock_acquire>:
 8006f90:	4801      	ldr	r0, [pc, #4]	@ (8006f98 <__sfp_lock_acquire+0x8>)
 8006f92:	f000 b920 	b.w	80071d6 <__retarget_lock_acquire_recursive>
 8006f96:	bf00      	nop
 8006f98:	2000046d 	.word	0x2000046d

08006f9c <__sfp_lock_release>:
 8006f9c:	4801      	ldr	r0, [pc, #4]	@ (8006fa4 <__sfp_lock_release+0x8>)
 8006f9e:	f000 b91b 	b.w	80071d8 <__retarget_lock_release_recursive>
 8006fa2:	bf00      	nop
 8006fa4:	2000046d 	.word	0x2000046d

08006fa8 <__sinit>:
 8006fa8:	b510      	push	{r4, lr}
 8006faa:	4604      	mov	r4, r0
 8006fac:	f7ff fff0 	bl	8006f90 <__sfp_lock_acquire>
 8006fb0:	6a23      	ldr	r3, [r4, #32]
 8006fb2:	b11b      	cbz	r3, 8006fbc <__sinit+0x14>
 8006fb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fb8:	f7ff bff0 	b.w	8006f9c <__sfp_lock_release>
 8006fbc:	4b04      	ldr	r3, [pc, #16]	@ (8006fd0 <__sinit+0x28>)
 8006fbe:	6223      	str	r3, [r4, #32]
 8006fc0:	4b04      	ldr	r3, [pc, #16]	@ (8006fd4 <__sinit+0x2c>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d1f5      	bne.n	8006fb4 <__sinit+0xc>
 8006fc8:	f7ff ffc4 	bl	8006f54 <global_stdio_init.part.0>
 8006fcc:	e7f2      	b.n	8006fb4 <__sinit+0xc>
 8006fce:	bf00      	nop
 8006fd0:	08006f15 	.word	0x08006f15
 8006fd4:	20000464 	.word	0x20000464

08006fd8 <_fwalk_sglue>:
 8006fd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fdc:	4607      	mov	r7, r0
 8006fde:	4688      	mov	r8, r1
 8006fe0:	4614      	mov	r4, r2
 8006fe2:	2600      	movs	r6, #0
 8006fe4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006fe8:	f1b9 0901 	subs.w	r9, r9, #1
 8006fec:	d505      	bpl.n	8006ffa <_fwalk_sglue+0x22>
 8006fee:	6824      	ldr	r4, [r4, #0]
 8006ff0:	2c00      	cmp	r4, #0
 8006ff2:	d1f7      	bne.n	8006fe4 <_fwalk_sglue+0xc>
 8006ff4:	4630      	mov	r0, r6
 8006ff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ffa:	89ab      	ldrh	r3, [r5, #12]
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d907      	bls.n	8007010 <_fwalk_sglue+0x38>
 8007000:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007004:	3301      	adds	r3, #1
 8007006:	d003      	beq.n	8007010 <_fwalk_sglue+0x38>
 8007008:	4629      	mov	r1, r5
 800700a:	4638      	mov	r0, r7
 800700c:	47c0      	blx	r8
 800700e:	4306      	orrs	r6, r0
 8007010:	3568      	adds	r5, #104	@ 0x68
 8007012:	e7e9      	b.n	8006fe8 <_fwalk_sglue+0x10>

08007014 <siprintf>:
 8007014:	b40e      	push	{r1, r2, r3}
 8007016:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800701a:	b500      	push	{lr}
 800701c:	b09c      	sub	sp, #112	@ 0x70
 800701e:	ab1d      	add	r3, sp, #116	@ 0x74
 8007020:	9002      	str	r0, [sp, #8]
 8007022:	9006      	str	r0, [sp, #24]
 8007024:	9107      	str	r1, [sp, #28]
 8007026:	9104      	str	r1, [sp, #16]
 8007028:	4808      	ldr	r0, [pc, #32]	@ (800704c <siprintf+0x38>)
 800702a:	4909      	ldr	r1, [pc, #36]	@ (8007050 <siprintf+0x3c>)
 800702c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007030:	9105      	str	r1, [sp, #20]
 8007032:	6800      	ldr	r0, [r0, #0]
 8007034:	a902      	add	r1, sp, #8
 8007036:	9301      	str	r3, [sp, #4]
 8007038:	f002 fbb0 	bl	800979c <_svfiprintf_r>
 800703c:	2200      	movs	r2, #0
 800703e:	9b02      	ldr	r3, [sp, #8]
 8007040:	701a      	strb	r2, [r3, #0]
 8007042:	b01c      	add	sp, #112	@ 0x70
 8007044:	f85d eb04 	ldr.w	lr, [sp], #4
 8007048:	b003      	add	sp, #12
 800704a:	4770      	bx	lr
 800704c:	2000001c 	.word	0x2000001c
 8007050:	ffff0208 	.word	0xffff0208

08007054 <__sread>:
 8007054:	b510      	push	{r4, lr}
 8007056:	460c      	mov	r4, r1
 8007058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800705c:	f000 f86c 	bl	8007138 <_read_r>
 8007060:	2800      	cmp	r0, #0
 8007062:	bfab      	itete	ge
 8007064:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007066:	89a3      	ldrhlt	r3, [r4, #12]
 8007068:	181b      	addge	r3, r3, r0
 800706a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800706e:	bfac      	ite	ge
 8007070:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007072:	81a3      	strhlt	r3, [r4, #12]
 8007074:	bd10      	pop	{r4, pc}

08007076 <__swrite>:
 8007076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800707a:	461f      	mov	r7, r3
 800707c:	898b      	ldrh	r3, [r1, #12]
 800707e:	4605      	mov	r5, r0
 8007080:	05db      	lsls	r3, r3, #23
 8007082:	460c      	mov	r4, r1
 8007084:	4616      	mov	r6, r2
 8007086:	d505      	bpl.n	8007094 <__swrite+0x1e>
 8007088:	2302      	movs	r3, #2
 800708a:	2200      	movs	r2, #0
 800708c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007090:	f000 f840 	bl	8007114 <_lseek_r>
 8007094:	89a3      	ldrh	r3, [r4, #12]
 8007096:	4632      	mov	r2, r6
 8007098:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800709c:	81a3      	strh	r3, [r4, #12]
 800709e:	4628      	mov	r0, r5
 80070a0:	463b      	mov	r3, r7
 80070a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070aa:	f000 b857 	b.w	800715c <_write_r>

080070ae <__sseek>:
 80070ae:	b510      	push	{r4, lr}
 80070b0:	460c      	mov	r4, r1
 80070b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070b6:	f000 f82d 	bl	8007114 <_lseek_r>
 80070ba:	1c43      	adds	r3, r0, #1
 80070bc:	89a3      	ldrh	r3, [r4, #12]
 80070be:	bf15      	itete	ne
 80070c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80070c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80070c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80070ca:	81a3      	strheq	r3, [r4, #12]
 80070cc:	bf18      	it	ne
 80070ce:	81a3      	strhne	r3, [r4, #12]
 80070d0:	bd10      	pop	{r4, pc}

080070d2 <__sclose>:
 80070d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070d6:	f000 b80d 	b.w	80070f4 <_close_r>

080070da <memset>:
 80070da:	4603      	mov	r3, r0
 80070dc:	4402      	add	r2, r0
 80070de:	4293      	cmp	r3, r2
 80070e0:	d100      	bne.n	80070e4 <memset+0xa>
 80070e2:	4770      	bx	lr
 80070e4:	f803 1b01 	strb.w	r1, [r3], #1
 80070e8:	e7f9      	b.n	80070de <memset+0x4>
	...

080070ec <_localeconv_r>:
 80070ec:	4800      	ldr	r0, [pc, #0]	@ (80070f0 <_localeconv_r+0x4>)
 80070ee:	4770      	bx	lr
 80070f0:	2000015c 	.word	0x2000015c

080070f4 <_close_r>:
 80070f4:	b538      	push	{r3, r4, r5, lr}
 80070f6:	2300      	movs	r3, #0
 80070f8:	4d05      	ldr	r5, [pc, #20]	@ (8007110 <_close_r+0x1c>)
 80070fa:	4604      	mov	r4, r0
 80070fc:	4608      	mov	r0, r1
 80070fe:	602b      	str	r3, [r5, #0]
 8007100:	f7fa fb2f 	bl	8001762 <_close>
 8007104:	1c43      	adds	r3, r0, #1
 8007106:	d102      	bne.n	800710e <_close_r+0x1a>
 8007108:	682b      	ldr	r3, [r5, #0]
 800710a:	b103      	cbz	r3, 800710e <_close_r+0x1a>
 800710c:	6023      	str	r3, [r4, #0]
 800710e:	bd38      	pop	{r3, r4, r5, pc}
 8007110:	20000468 	.word	0x20000468

08007114 <_lseek_r>:
 8007114:	b538      	push	{r3, r4, r5, lr}
 8007116:	4604      	mov	r4, r0
 8007118:	4608      	mov	r0, r1
 800711a:	4611      	mov	r1, r2
 800711c:	2200      	movs	r2, #0
 800711e:	4d05      	ldr	r5, [pc, #20]	@ (8007134 <_lseek_r+0x20>)
 8007120:	602a      	str	r2, [r5, #0]
 8007122:	461a      	mov	r2, r3
 8007124:	f7fa fb41 	bl	80017aa <_lseek>
 8007128:	1c43      	adds	r3, r0, #1
 800712a:	d102      	bne.n	8007132 <_lseek_r+0x1e>
 800712c:	682b      	ldr	r3, [r5, #0]
 800712e:	b103      	cbz	r3, 8007132 <_lseek_r+0x1e>
 8007130:	6023      	str	r3, [r4, #0]
 8007132:	bd38      	pop	{r3, r4, r5, pc}
 8007134:	20000468 	.word	0x20000468

08007138 <_read_r>:
 8007138:	b538      	push	{r3, r4, r5, lr}
 800713a:	4604      	mov	r4, r0
 800713c:	4608      	mov	r0, r1
 800713e:	4611      	mov	r1, r2
 8007140:	2200      	movs	r2, #0
 8007142:	4d05      	ldr	r5, [pc, #20]	@ (8007158 <_read_r+0x20>)
 8007144:	602a      	str	r2, [r5, #0]
 8007146:	461a      	mov	r2, r3
 8007148:	f7fa fad2 	bl	80016f0 <_read>
 800714c:	1c43      	adds	r3, r0, #1
 800714e:	d102      	bne.n	8007156 <_read_r+0x1e>
 8007150:	682b      	ldr	r3, [r5, #0]
 8007152:	b103      	cbz	r3, 8007156 <_read_r+0x1e>
 8007154:	6023      	str	r3, [r4, #0]
 8007156:	bd38      	pop	{r3, r4, r5, pc}
 8007158:	20000468 	.word	0x20000468

0800715c <_write_r>:
 800715c:	b538      	push	{r3, r4, r5, lr}
 800715e:	4604      	mov	r4, r0
 8007160:	4608      	mov	r0, r1
 8007162:	4611      	mov	r1, r2
 8007164:	2200      	movs	r2, #0
 8007166:	4d05      	ldr	r5, [pc, #20]	@ (800717c <_write_r+0x20>)
 8007168:	602a      	str	r2, [r5, #0]
 800716a:	461a      	mov	r2, r3
 800716c:	f7fa fadd 	bl	800172a <_write>
 8007170:	1c43      	adds	r3, r0, #1
 8007172:	d102      	bne.n	800717a <_write_r+0x1e>
 8007174:	682b      	ldr	r3, [r5, #0]
 8007176:	b103      	cbz	r3, 800717a <_write_r+0x1e>
 8007178:	6023      	str	r3, [r4, #0]
 800717a:	bd38      	pop	{r3, r4, r5, pc}
 800717c:	20000468 	.word	0x20000468

08007180 <__errno>:
 8007180:	4b01      	ldr	r3, [pc, #4]	@ (8007188 <__errno+0x8>)
 8007182:	6818      	ldr	r0, [r3, #0]
 8007184:	4770      	bx	lr
 8007186:	bf00      	nop
 8007188:	2000001c 	.word	0x2000001c

0800718c <__libc_init_array>:
 800718c:	b570      	push	{r4, r5, r6, lr}
 800718e:	2600      	movs	r6, #0
 8007190:	4d0c      	ldr	r5, [pc, #48]	@ (80071c4 <__libc_init_array+0x38>)
 8007192:	4c0d      	ldr	r4, [pc, #52]	@ (80071c8 <__libc_init_array+0x3c>)
 8007194:	1b64      	subs	r4, r4, r5
 8007196:	10a4      	asrs	r4, r4, #2
 8007198:	42a6      	cmp	r6, r4
 800719a:	d109      	bne.n	80071b0 <__libc_init_array+0x24>
 800719c:	f003 fb66 	bl	800a86c <_init>
 80071a0:	2600      	movs	r6, #0
 80071a2:	4d0a      	ldr	r5, [pc, #40]	@ (80071cc <__libc_init_array+0x40>)
 80071a4:	4c0a      	ldr	r4, [pc, #40]	@ (80071d0 <__libc_init_array+0x44>)
 80071a6:	1b64      	subs	r4, r4, r5
 80071a8:	10a4      	asrs	r4, r4, #2
 80071aa:	42a6      	cmp	r6, r4
 80071ac:	d105      	bne.n	80071ba <__libc_init_array+0x2e>
 80071ae:	bd70      	pop	{r4, r5, r6, pc}
 80071b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80071b4:	4798      	blx	r3
 80071b6:	3601      	adds	r6, #1
 80071b8:	e7ee      	b.n	8007198 <__libc_init_array+0xc>
 80071ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80071be:	4798      	blx	r3
 80071c0:	3601      	adds	r6, #1
 80071c2:	e7f2      	b.n	80071aa <__libc_init_array+0x1e>
 80071c4:	0800ad18 	.word	0x0800ad18
 80071c8:	0800ad18 	.word	0x0800ad18
 80071cc:	0800ad18 	.word	0x0800ad18
 80071d0:	0800ad1c 	.word	0x0800ad1c

080071d4 <__retarget_lock_init_recursive>:
 80071d4:	4770      	bx	lr

080071d6 <__retarget_lock_acquire_recursive>:
 80071d6:	4770      	bx	lr

080071d8 <__retarget_lock_release_recursive>:
 80071d8:	4770      	bx	lr

080071da <memchr>:
 80071da:	4603      	mov	r3, r0
 80071dc:	b510      	push	{r4, lr}
 80071de:	b2c9      	uxtb	r1, r1
 80071e0:	4402      	add	r2, r0
 80071e2:	4293      	cmp	r3, r2
 80071e4:	4618      	mov	r0, r3
 80071e6:	d101      	bne.n	80071ec <memchr+0x12>
 80071e8:	2000      	movs	r0, #0
 80071ea:	e003      	b.n	80071f4 <memchr+0x1a>
 80071ec:	7804      	ldrb	r4, [r0, #0]
 80071ee:	3301      	adds	r3, #1
 80071f0:	428c      	cmp	r4, r1
 80071f2:	d1f6      	bne.n	80071e2 <memchr+0x8>
 80071f4:	bd10      	pop	{r4, pc}
	...

080071f8 <nanf>:
 80071f8:	4800      	ldr	r0, [pc, #0]	@ (80071fc <nanf+0x4>)
 80071fa:	4770      	bx	lr
 80071fc:	7fc00000 	.word	0x7fc00000

08007200 <quorem>:
 8007200:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007204:	6903      	ldr	r3, [r0, #16]
 8007206:	690c      	ldr	r4, [r1, #16]
 8007208:	4607      	mov	r7, r0
 800720a:	42a3      	cmp	r3, r4
 800720c:	db7e      	blt.n	800730c <quorem+0x10c>
 800720e:	3c01      	subs	r4, #1
 8007210:	00a3      	lsls	r3, r4, #2
 8007212:	f100 0514 	add.w	r5, r0, #20
 8007216:	f101 0814 	add.w	r8, r1, #20
 800721a:	9300      	str	r3, [sp, #0]
 800721c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007220:	9301      	str	r3, [sp, #4]
 8007222:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007226:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800722a:	3301      	adds	r3, #1
 800722c:	429a      	cmp	r2, r3
 800722e:	fbb2 f6f3 	udiv	r6, r2, r3
 8007232:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007236:	d32e      	bcc.n	8007296 <quorem+0x96>
 8007238:	f04f 0a00 	mov.w	sl, #0
 800723c:	46c4      	mov	ip, r8
 800723e:	46ae      	mov	lr, r5
 8007240:	46d3      	mov	fp, sl
 8007242:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007246:	b298      	uxth	r0, r3
 8007248:	fb06 a000 	mla	r0, r6, r0, sl
 800724c:	0c1b      	lsrs	r3, r3, #16
 800724e:	0c02      	lsrs	r2, r0, #16
 8007250:	fb06 2303 	mla	r3, r6, r3, r2
 8007254:	f8de 2000 	ldr.w	r2, [lr]
 8007258:	b280      	uxth	r0, r0
 800725a:	b292      	uxth	r2, r2
 800725c:	1a12      	subs	r2, r2, r0
 800725e:	445a      	add	r2, fp
 8007260:	f8de 0000 	ldr.w	r0, [lr]
 8007264:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007268:	b29b      	uxth	r3, r3
 800726a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800726e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007272:	b292      	uxth	r2, r2
 8007274:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007278:	45e1      	cmp	r9, ip
 800727a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800727e:	f84e 2b04 	str.w	r2, [lr], #4
 8007282:	d2de      	bcs.n	8007242 <quorem+0x42>
 8007284:	9b00      	ldr	r3, [sp, #0]
 8007286:	58eb      	ldr	r3, [r5, r3]
 8007288:	b92b      	cbnz	r3, 8007296 <quorem+0x96>
 800728a:	9b01      	ldr	r3, [sp, #4]
 800728c:	3b04      	subs	r3, #4
 800728e:	429d      	cmp	r5, r3
 8007290:	461a      	mov	r2, r3
 8007292:	d32f      	bcc.n	80072f4 <quorem+0xf4>
 8007294:	613c      	str	r4, [r7, #16]
 8007296:	4638      	mov	r0, r7
 8007298:	f001 f9c2 	bl	8008620 <__mcmp>
 800729c:	2800      	cmp	r0, #0
 800729e:	db25      	blt.n	80072ec <quorem+0xec>
 80072a0:	4629      	mov	r1, r5
 80072a2:	2000      	movs	r0, #0
 80072a4:	f858 2b04 	ldr.w	r2, [r8], #4
 80072a8:	f8d1 c000 	ldr.w	ip, [r1]
 80072ac:	fa1f fe82 	uxth.w	lr, r2
 80072b0:	fa1f f38c 	uxth.w	r3, ip
 80072b4:	eba3 030e 	sub.w	r3, r3, lr
 80072b8:	4403      	add	r3, r0
 80072ba:	0c12      	lsrs	r2, r2, #16
 80072bc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80072c0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072ca:	45c1      	cmp	r9, r8
 80072cc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80072d0:	f841 3b04 	str.w	r3, [r1], #4
 80072d4:	d2e6      	bcs.n	80072a4 <quorem+0xa4>
 80072d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80072da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072de:	b922      	cbnz	r2, 80072ea <quorem+0xea>
 80072e0:	3b04      	subs	r3, #4
 80072e2:	429d      	cmp	r5, r3
 80072e4:	461a      	mov	r2, r3
 80072e6:	d30b      	bcc.n	8007300 <quorem+0x100>
 80072e8:	613c      	str	r4, [r7, #16]
 80072ea:	3601      	adds	r6, #1
 80072ec:	4630      	mov	r0, r6
 80072ee:	b003      	add	sp, #12
 80072f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072f4:	6812      	ldr	r2, [r2, #0]
 80072f6:	3b04      	subs	r3, #4
 80072f8:	2a00      	cmp	r2, #0
 80072fa:	d1cb      	bne.n	8007294 <quorem+0x94>
 80072fc:	3c01      	subs	r4, #1
 80072fe:	e7c6      	b.n	800728e <quorem+0x8e>
 8007300:	6812      	ldr	r2, [r2, #0]
 8007302:	3b04      	subs	r3, #4
 8007304:	2a00      	cmp	r2, #0
 8007306:	d1ef      	bne.n	80072e8 <quorem+0xe8>
 8007308:	3c01      	subs	r4, #1
 800730a:	e7ea      	b.n	80072e2 <quorem+0xe2>
 800730c:	2000      	movs	r0, #0
 800730e:	e7ee      	b.n	80072ee <quorem+0xee>

08007310 <_dtoa_r>:
 8007310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007314:	4614      	mov	r4, r2
 8007316:	461d      	mov	r5, r3
 8007318:	69c7      	ldr	r7, [r0, #28]
 800731a:	b097      	sub	sp, #92	@ 0x5c
 800731c:	4683      	mov	fp, r0
 800731e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007322:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007324:	b97f      	cbnz	r7, 8007346 <_dtoa_r+0x36>
 8007326:	2010      	movs	r0, #16
 8007328:	f000 fe02 	bl	8007f30 <malloc>
 800732c:	4602      	mov	r2, r0
 800732e:	f8cb 001c 	str.w	r0, [fp, #28]
 8007332:	b920      	cbnz	r0, 800733e <_dtoa_r+0x2e>
 8007334:	21ef      	movs	r1, #239	@ 0xef
 8007336:	4ba8      	ldr	r3, [pc, #672]	@ (80075d8 <_dtoa_r+0x2c8>)
 8007338:	48a8      	ldr	r0, [pc, #672]	@ (80075dc <_dtoa_r+0x2cc>)
 800733a:	f002 fc23 	bl	8009b84 <__assert_func>
 800733e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007342:	6007      	str	r7, [r0, #0]
 8007344:	60c7      	str	r7, [r0, #12]
 8007346:	f8db 301c 	ldr.w	r3, [fp, #28]
 800734a:	6819      	ldr	r1, [r3, #0]
 800734c:	b159      	cbz	r1, 8007366 <_dtoa_r+0x56>
 800734e:	685a      	ldr	r2, [r3, #4]
 8007350:	2301      	movs	r3, #1
 8007352:	4093      	lsls	r3, r2
 8007354:	604a      	str	r2, [r1, #4]
 8007356:	608b      	str	r3, [r1, #8]
 8007358:	4658      	mov	r0, fp
 800735a:	f000 fedf 	bl	800811c <_Bfree>
 800735e:	2200      	movs	r2, #0
 8007360:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007364:	601a      	str	r2, [r3, #0]
 8007366:	1e2b      	subs	r3, r5, #0
 8007368:	bfaf      	iteee	ge
 800736a:	2300      	movge	r3, #0
 800736c:	2201      	movlt	r2, #1
 800736e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007372:	9303      	strlt	r3, [sp, #12]
 8007374:	bfa8      	it	ge
 8007376:	6033      	strge	r3, [r6, #0]
 8007378:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800737c:	4b98      	ldr	r3, [pc, #608]	@ (80075e0 <_dtoa_r+0x2d0>)
 800737e:	bfb8      	it	lt
 8007380:	6032      	strlt	r2, [r6, #0]
 8007382:	ea33 0308 	bics.w	r3, r3, r8
 8007386:	d112      	bne.n	80073ae <_dtoa_r+0x9e>
 8007388:	f242 730f 	movw	r3, #9999	@ 0x270f
 800738c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800738e:	6013      	str	r3, [r2, #0]
 8007390:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007394:	4323      	orrs	r3, r4
 8007396:	f000 8550 	beq.w	8007e3a <_dtoa_r+0xb2a>
 800739a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800739c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80075e4 <_dtoa_r+0x2d4>
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f000 8552 	beq.w	8007e4a <_dtoa_r+0xb3a>
 80073a6:	f10a 0303 	add.w	r3, sl, #3
 80073aa:	f000 bd4c 	b.w	8007e46 <_dtoa_r+0xb36>
 80073ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80073b2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80073b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073ba:	2200      	movs	r2, #0
 80073bc:	2300      	movs	r3, #0
 80073be:	f7f9 faf3 	bl	80009a8 <__aeabi_dcmpeq>
 80073c2:	4607      	mov	r7, r0
 80073c4:	b158      	cbz	r0, 80073de <_dtoa_r+0xce>
 80073c6:	2301      	movs	r3, #1
 80073c8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80073ca:	6013      	str	r3, [r2, #0]
 80073cc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80073ce:	b113      	cbz	r3, 80073d6 <_dtoa_r+0xc6>
 80073d0:	4b85      	ldr	r3, [pc, #532]	@ (80075e8 <_dtoa_r+0x2d8>)
 80073d2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80073d4:	6013      	str	r3, [r2, #0]
 80073d6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80075ec <_dtoa_r+0x2dc>
 80073da:	f000 bd36 	b.w	8007e4a <_dtoa_r+0xb3a>
 80073de:	ab14      	add	r3, sp, #80	@ 0x50
 80073e0:	9301      	str	r3, [sp, #4]
 80073e2:	ab15      	add	r3, sp, #84	@ 0x54
 80073e4:	9300      	str	r3, [sp, #0]
 80073e6:	4658      	mov	r0, fp
 80073e8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80073ec:	f001 fa30 	bl	8008850 <__d2b>
 80073f0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80073f4:	4681      	mov	r9, r0
 80073f6:	2e00      	cmp	r6, #0
 80073f8:	d077      	beq.n	80074ea <_dtoa_r+0x1da>
 80073fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007400:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007404:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007408:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800740c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007410:	9712      	str	r7, [sp, #72]	@ 0x48
 8007412:	4619      	mov	r1, r3
 8007414:	2200      	movs	r2, #0
 8007416:	4b76      	ldr	r3, [pc, #472]	@ (80075f0 <_dtoa_r+0x2e0>)
 8007418:	f7f8 fea6 	bl	8000168 <__aeabi_dsub>
 800741c:	a368      	add	r3, pc, #416	@ (adr r3, 80075c0 <_dtoa_r+0x2b0>)
 800741e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007422:	f7f9 f859 	bl	80004d8 <__aeabi_dmul>
 8007426:	a368      	add	r3, pc, #416	@ (adr r3, 80075c8 <_dtoa_r+0x2b8>)
 8007428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800742c:	f7f8 fe9e 	bl	800016c <__adddf3>
 8007430:	4604      	mov	r4, r0
 8007432:	4630      	mov	r0, r6
 8007434:	460d      	mov	r5, r1
 8007436:	f7f8 ffe5 	bl	8000404 <__aeabi_i2d>
 800743a:	a365      	add	r3, pc, #404	@ (adr r3, 80075d0 <_dtoa_r+0x2c0>)
 800743c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007440:	f7f9 f84a 	bl	80004d8 <__aeabi_dmul>
 8007444:	4602      	mov	r2, r0
 8007446:	460b      	mov	r3, r1
 8007448:	4620      	mov	r0, r4
 800744a:	4629      	mov	r1, r5
 800744c:	f7f8 fe8e 	bl	800016c <__adddf3>
 8007450:	4604      	mov	r4, r0
 8007452:	460d      	mov	r5, r1
 8007454:	f7f9 faf0 	bl	8000a38 <__aeabi_d2iz>
 8007458:	2200      	movs	r2, #0
 800745a:	4607      	mov	r7, r0
 800745c:	2300      	movs	r3, #0
 800745e:	4620      	mov	r0, r4
 8007460:	4629      	mov	r1, r5
 8007462:	f7f9 faab 	bl	80009bc <__aeabi_dcmplt>
 8007466:	b140      	cbz	r0, 800747a <_dtoa_r+0x16a>
 8007468:	4638      	mov	r0, r7
 800746a:	f7f8 ffcb 	bl	8000404 <__aeabi_i2d>
 800746e:	4622      	mov	r2, r4
 8007470:	462b      	mov	r3, r5
 8007472:	f7f9 fa99 	bl	80009a8 <__aeabi_dcmpeq>
 8007476:	b900      	cbnz	r0, 800747a <_dtoa_r+0x16a>
 8007478:	3f01      	subs	r7, #1
 800747a:	2f16      	cmp	r7, #22
 800747c:	d853      	bhi.n	8007526 <_dtoa_r+0x216>
 800747e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007482:	4b5c      	ldr	r3, [pc, #368]	@ (80075f4 <_dtoa_r+0x2e4>)
 8007484:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800748c:	f7f9 fa96 	bl	80009bc <__aeabi_dcmplt>
 8007490:	2800      	cmp	r0, #0
 8007492:	d04a      	beq.n	800752a <_dtoa_r+0x21a>
 8007494:	2300      	movs	r3, #0
 8007496:	3f01      	subs	r7, #1
 8007498:	930f      	str	r3, [sp, #60]	@ 0x3c
 800749a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800749c:	1b9b      	subs	r3, r3, r6
 800749e:	1e5a      	subs	r2, r3, #1
 80074a0:	bf46      	itte	mi
 80074a2:	f1c3 0801 	rsbmi	r8, r3, #1
 80074a6:	2300      	movmi	r3, #0
 80074a8:	f04f 0800 	movpl.w	r8, #0
 80074ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80074ae:	bf48      	it	mi
 80074b0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80074b2:	2f00      	cmp	r7, #0
 80074b4:	db3b      	blt.n	800752e <_dtoa_r+0x21e>
 80074b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074b8:	970e      	str	r7, [sp, #56]	@ 0x38
 80074ba:	443b      	add	r3, r7
 80074bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80074be:	2300      	movs	r3, #0
 80074c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80074c2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80074c4:	2b09      	cmp	r3, #9
 80074c6:	d866      	bhi.n	8007596 <_dtoa_r+0x286>
 80074c8:	2b05      	cmp	r3, #5
 80074ca:	bfc4      	itt	gt
 80074cc:	3b04      	subgt	r3, #4
 80074ce:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80074d0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80074d2:	bfc8      	it	gt
 80074d4:	2400      	movgt	r4, #0
 80074d6:	f1a3 0302 	sub.w	r3, r3, #2
 80074da:	bfd8      	it	le
 80074dc:	2401      	movle	r4, #1
 80074de:	2b03      	cmp	r3, #3
 80074e0:	d864      	bhi.n	80075ac <_dtoa_r+0x29c>
 80074e2:	e8df f003 	tbb	[pc, r3]
 80074e6:	382b      	.short	0x382b
 80074e8:	5636      	.short	0x5636
 80074ea:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80074ee:	441e      	add	r6, r3
 80074f0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80074f4:	2b20      	cmp	r3, #32
 80074f6:	bfc1      	itttt	gt
 80074f8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80074fc:	fa08 f803 	lslgt.w	r8, r8, r3
 8007500:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007504:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007508:	bfd6      	itet	le
 800750a:	f1c3 0320 	rsble	r3, r3, #32
 800750e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007512:	fa04 f003 	lslle.w	r0, r4, r3
 8007516:	f7f8 ff65 	bl	80003e4 <__aeabi_ui2d>
 800751a:	2201      	movs	r2, #1
 800751c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007520:	3e01      	subs	r6, #1
 8007522:	9212      	str	r2, [sp, #72]	@ 0x48
 8007524:	e775      	b.n	8007412 <_dtoa_r+0x102>
 8007526:	2301      	movs	r3, #1
 8007528:	e7b6      	b.n	8007498 <_dtoa_r+0x188>
 800752a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800752c:	e7b5      	b.n	800749a <_dtoa_r+0x18a>
 800752e:	427b      	negs	r3, r7
 8007530:	930a      	str	r3, [sp, #40]	@ 0x28
 8007532:	2300      	movs	r3, #0
 8007534:	eba8 0807 	sub.w	r8, r8, r7
 8007538:	930e      	str	r3, [sp, #56]	@ 0x38
 800753a:	e7c2      	b.n	80074c2 <_dtoa_r+0x1b2>
 800753c:	2300      	movs	r3, #0
 800753e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007540:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007542:	2b00      	cmp	r3, #0
 8007544:	dc35      	bgt.n	80075b2 <_dtoa_r+0x2a2>
 8007546:	2301      	movs	r3, #1
 8007548:	461a      	mov	r2, r3
 800754a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800754e:	9221      	str	r2, [sp, #132]	@ 0x84
 8007550:	e00b      	b.n	800756a <_dtoa_r+0x25a>
 8007552:	2301      	movs	r3, #1
 8007554:	e7f3      	b.n	800753e <_dtoa_r+0x22e>
 8007556:	2300      	movs	r3, #0
 8007558:	930b      	str	r3, [sp, #44]	@ 0x2c
 800755a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800755c:	18fb      	adds	r3, r7, r3
 800755e:	9308      	str	r3, [sp, #32]
 8007560:	3301      	adds	r3, #1
 8007562:	2b01      	cmp	r3, #1
 8007564:	9307      	str	r3, [sp, #28]
 8007566:	bfb8      	it	lt
 8007568:	2301      	movlt	r3, #1
 800756a:	2100      	movs	r1, #0
 800756c:	2204      	movs	r2, #4
 800756e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007572:	f102 0514 	add.w	r5, r2, #20
 8007576:	429d      	cmp	r5, r3
 8007578:	d91f      	bls.n	80075ba <_dtoa_r+0x2aa>
 800757a:	6041      	str	r1, [r0, #4]
 800757c:	4658      	mov	r0, fp
 800757e:	f000 fd8d 	bl	800809c <_Balloc>
 8007582:	4682      	mov	sl, r0
 8007584:	2800      	cmp	r0, #0
 8007586:	d139      	bne.n	80075fc <_dtoa_r+0x2ec>
 8007588:	4602      	mov	r2, r0
 800758a:	f240 11af 	movw	r1, #431	@ 0x1af
 800758e:	4b1a      	ldr	r3, [pc, #104]	@ (80075f8 <_dtoa_r+0x2e8>)
 8007590:	e6d2      	b.n	8007338 <_dtoa_r+0x28>
 8007592:	2301      	movs	r3, #1
 8007594:	e7e0      	b.n	8007558 <_dtoa_r+0x248>
 8007596:	2401      	movs	r4, #1
 8007598:	2300      	movs	r3, #0
 800759a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800759c:	9320      	str	r3, [sp, #128]	@ 0x80
 800759e:	f04f 33ff 	mov.w	r3, #4294967295
 80075a2:	2200      	movs	r2, #0
 80075a4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80075a8:	2312      	movs	r3, #18
 80075aa:	e7d0      	b.n	800754e <_dtoa_r+0x23e>
 80075ac:	2301      	movs	r3, #1
 80075ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80075b0:	e7f5      	b.n	800759e <_dtoa_r+0x28e>
 80075b2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80075b4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80075b8:	e7d7      	b.n	800756a <_dtoa_r+0x25a>
 80075ba:	3101      	adds	r1, #1
 80075bc:	0052      	lsls	r2, r2, #1
 80075be:	e7d8      	b.n	8007572 <_dtoa_r+0x262>
 80075c0:	636f4361 	.word	0x636f4361
 80075c4:	3fd287a7 	.word	0x3fd287a7
 80075c8:	8b60c8b3 	.word	0x8b60c8b3
 80075cc:	3fc68a28 	.word	0x3fc68a28
 80075d0:	509f79fb 	.word	0x509f79fb
 80075d4:	3fd34413 	.word	0x3fd34413
 80075d8:	0800a928 	.word	0x0800a928
 80075dc:	0800a93f 	.word	0x0800a93f
 80075e0:	7ff00000 	.word	0x7ff00000
 80075e4:	0800a924 	.word	0x0800a924
 80075e8:	0800a8f3 	.word	0x0800a8f3
 80075ec:	0800a8f2 	.word	0x0800a8f2
 80075f0:	3ff80000 	.word	0x3ff80000
 80075f4:	0800aa38 	.word	0x0800aa38
 80075f8:	0800a997 	.word	0x0800a997
 80075fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007600:	6018      	str	r0, [r3, #0]
 8007602:	9b07      	ldr	r3, [sp, #28]
 8007604:	2b0e      	cmp	r3, #14
 8007606:	f200 80a4 	bhi.w	8007752 <_dtoa_r+0x442>
 800760a:	2c00      	cmp	r4, #0
 800760c:	f000 80a1 	beq.w	8007752 <_dtoa_r+0x442>
 8007610:	2f00      	cmp	r7, #0
 8007612:	dd33      	ble.n	800767c <_dtoa_r+0x36c>
 8007614:	4b86      	ldr	r3, [pc, #536]	@ (8007830 <_dtoa_r+0x520>)
 8007616:	f007 020f 	and.w	r2, r7, #15
 800761a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800761e:	05f8      	lsls	r0, r7, #23
 8007620:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007624:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007628:	ea4f 1427 	mov.w	r4, r7, asr #4
 800762c:	d516      	bpl.n	800765c <_dtoa_r+0x34c>
 800762e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007632:	4b80      	ldr	r3, [pc, #512]	@ (8007834 <_dtoa_r+0x524>)
 8007634:	2603      	movs	r6, #3
 8007636:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800763a:	f7f9 f877 	bl	800072c <__aeabi_ddiv>
 800763e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007642:	f004 040f 	and.w	r4, r4, #15
 8007646:	4d7b      	ldr	r5, [pc, #492]	@ (8007834 <_dtoa_r+0x524>)
 8007648:	b954      	cbnz	r4, 8007660 <_dtoa_r+0x350>
 800764a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800764e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007652:	f7f9 f86b 	bl	800072c <__aeabi_ddiv>
 8007656:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800765a:	e028      	b.n	80076ae <_dtoa_r+0x39e>
 800765c:	2602      	movs	r6, #2
 800765e:	e7f2      	b.n	8007646 <_dtoa_r+0x336>
 8007660:	07e1      	lsls	r1, r4, #31
 8007662:	d508      	bpl.n	8007676 <_dtoa_r+0x366>
 8007664:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007668:	e9d5 2300 	ldrd	r2, r3, [r5]
 800766c:	f7f8 ff34 	bl	80004d8 <__aeabi_dmul>
 8007670:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007674:	3601      	adds	r6, #1
 8007676:	1064      	asrs	r4, r4, #1
 8007678:	3508      	adds	r5, #8
 800767a:	e7e5      	b.n	8007648 <_dtoa_r+0x338>
 800767c:	f000 80d2 	beq.w	8007824 <_dtoa_r+0x514>
 8007680:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007684:	427c      	negs	r4, r7
 8007686:	4b6a      	ldr	r3, [pc, #424]	@ (8007830 <_dtoa_r+0x520>)
 8007688:	f004 020f 	and.w	r2, r4, #15
 800768c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007694:	f7f8 ff20 	bl	80004d8 <__aeabi_dmul>
 8007698:	2602      	movs	r6, #2
 800769a:	2300      	movs	r3, #0
 800769c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076a0:	4d64      	ldr	r5, [pc, #400]	@ (8007834 <_dtoa_r+0x524>)
 80076a2:	1124      	asrs	r4, r4, #4
 80076a4:	2c00      	cmp	r4, #0
 80076a6:	f040 80b2 	bne.w	800780e <_dtoa_r+0x4fe>
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d1d3      	bne.n	8007656 <_dtoa_r+0x346>
 80076ae:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80076b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	f000 80b7 	beq.w	8007828 <_dtoa_r+0x518>
 80076ba:	2200      	movs	r2, #0
 80076bc:	4620      	mov	r0, r4
 80076be:	4629      	mov	r1, r5
 80076c0:	4b5d      	ldr	r3, [pc, #372]	@ (8007838 <_dtoa_r+0x528>)
 80076c2:	f7f9 f97b 	bl	80009bc <__aeabi_dcmplt>
 80076c6:	2800      	cmp	r0, #0
 80076c8:	f000 80ae 	beq.w	8007828 <_dtoa_r+0x518>
 80076cc:	9b07      	ldr	r3, [sp, #28]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f000 80aa 	beq.w	8007828 <_dtoa_r+0x518>
 80076d4:	9b08      	ldr	r3, [sp, #32]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	dd37      	ble.n	800774a <_dtoa_r+0x43a>
 80076da:	1e7b      	subs	r3, r7, #1
 80076dc:	4620      	mov	r0, r4
 80076de:	9304      	str	r3, [sp, #16]
 80076e0:	2200      	movs	r2, #0
 80076e2:	4629      	mov	r1, r5
 80076e4:	4b55      	ldr	r3, [pc, #340]	@ (800783c <_dtoa_r+0x52c>)
 80076e6:	f7f8 fef7 	bl	80004d8 <__aeabi_dmul>
 80076ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076ee:	9c08      	ldr	r4, [sp, #32]
 80076f0:	3601      	adds	r6, #1
 80076f2:	4630      	mov	r0, r6
 80076f4:	f7f8 fe86 	bl	8000404 <__aeabi_i2d>
 80076f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80076fc:	f7f8 feec 	bl	80004d8 <__aeabi_dmul>
 8007700:	2200      	movs	r2, #0
 8007702:	4b4f      	ldr	r3, [pc, #316]	@ (8007840 <_dtoa_r+0x530>)
 8007704:	f7f8 fd32 	bl	800016c <__adddf3>
 8007708:	4605      	mov	r5, r0
 800770a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800770e:	2c00      	cmp	r4, #0
 8007710:	f040 809a 	bne.w	8007848 <_dtoa_r+0x538>
 8007714:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007718:	2200      	movs	r2, #0
 800771a:	4b4a      	ldr	r3, [pc, #296]	@ (8007844 <_dtoa_r+0x534>)
 800771c:	f7f8 fd24 	bl	8000168 <__aeabi_dsub>
 8007720:	4602      	mov	r2, r0
 8007722:	460b      	mov	r3, r1
 8007724:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007728:	462a      	mov	r2, r5
 800772a:	4633      	mov	r3, r6
 800772c:	f7f9 f964 	bl	80009f8 <__aeabi_dcmpgt>
 8007730:	2800      	cmp	r0, #0
 8007732:	f040 828e 	bne.w	8007c52 <_dtoa_r+0x942>
 8007736:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800773a:	462a      	mov	r2, r5
 800773c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007740:	f7f9 f93c 	bl	80009bc <__aeabi_dcmplt>
 8007744:	2800      	cmp	r0, #0
 8007746:	f040 8127 	bne.w	8007998 <_dtoa_r+0x688>
 800774a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800774e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007752:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007754:	2b00      	cmp	r3, #0
 8007756:	f2c0 8163 	blt.w	8007a20 <_dtoa_r+0x710>
 800775a:	2f0e      	cmp	r7, #14
 800775c:	f300 8160 	bgt.w	8007a20 <_dtoa_r+0x710>
 8007760:	4b33      	ldr	r3, [pc, #204]	@ (8007830 <_dtoa_r+0x520>)
 8007762:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007766:	e9d3 3400 	ldrd	r3, r4, [r3]
 800776a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800776e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007770:	2b00      	cmp	r3, #0
 8007772:	da03      	bge.n	800777c <_dtoa_r+0x46c>
 8007774:	9b07      	ldr	r3, [sp, #28]
 8007776:	2b00      	cmp	r3, #0
 8007778:	f340 8100 	ble.w	800797c <_dtoa_r+0x66c>
 800777c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007780:	4656      	mov	r6, sl
 8007782:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007786:	4620      	mov	r0, r4
 8007788:	4629      	mov	r1, r5
 800778a:	f7f8 ffcf 	bl	800072c <__aeabi_ddiv>
 800778e:	f7f9 f953 	bl	8000a38 <__aeabi_d2iz>
 8007792:	4680      	mov	r8, r0
 8007794:	f7f8 fe36 	bl	8000404 <__aeabi_i2d>
 8007798:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800779c:	f7f8 fe9c 	bl	80004d8 <__aeabi_dmul>
 80077a0:	4602      	mov	r2, r0
 80077a2:	460b      	mov	r3, r1
 80077a4:	4620      	mov	r0, r4
 80077a6:	4629      	mov	r1, r5
 80077a8:	f7f8 fcde 	bl	8000168 <__aeabi_dsub>
 80077ac:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80077b0:	9d07      	ldr	r5, [sp, #28]
 80077b2:	f806 4b01 	strb.w	r4, [r6], #1
 80077b6:	eba6 040a 	sub.w	r4, r6, sl
 80077ba:	42a5      	cmp	r5, r4
 80077bc:	4602      	mov	r2, r0
 80077be:	460b      	mov	r3, r1
 80077c0:	f040 8116 	bne.w	80079f0 <_dtoa_r+0x6e0>
 80077c4:	f7f8 fcd2 	bl	800016c <__adddf3>
 80077c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077cc:	4604      	mov	r4, r0
 80077ce:	460d      	mov	r5, r1
 80077d0:	f7f9 f912 	bl	80009f8 <__aeabi_dcmpgt>
 80077d4:	2800      	cmp	r0, #0
 80077d6:	f040 80f8 	bne.w	80079ca <_dtoa_r+0x6ba>
 80077da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077de:	4620      	mov	r0, r4
 80077e0:	4629      	mov	r1, r5
 80077e2:	f7f9 f8e1 	bl	80009a8 <__aeabi_dcmpeq>
 80077e6:	b118      	cbz	r0, 80077f0 <_dtoa_r+0x4e0>
 80077e8:	f018 0f01 	tst.w	r8, #1
 80077ec:	f040 80ed 	bne.w	80079ca <_dtoa_r+0x6ba>
 80077f0:	4649      	mov	r1, r9
 80077f2:	4658      	mov	r0, fp
 80077f4:	f000 fc92 	bl	800811c <_Bfree>
 80077f8:	2300      	movs	r3, #0
 80077fa:	7033      	strb	r3, [r6, #0]
 80077fc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80077fe:	3701      	adds	r7, #1
 8007800:	601f      	str	r7, [r3, #0]
 8007802:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007804:	2b00      	cmp	r3, #0
 8007806:	f000 8320 	beq.w	8007e4a <_dtoa_r+0xb3a>
 800780a:	601e      	str	r6, [r3, #0]
 800780c:	e31d      	b.n	8007e4a <_dtoa_r+0xb3a>
 800780e:	07e2      	lsls	r2, r4, #31
 8007810:	d505      	bpl.n	800781e <_dtoa_r+0x50e>
 8007812:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007816:	f7f8 fe5f 	bl	80004d8 <__aeabi_dmul>
 800781a:	2301      	movs	r3, #1
 800781c:	3601      	adds	r6, #1
 800781e:	1064      	asrs	r4, r4, #1
 8007820:	3508      	adds	r5, #8
 8007822:	e73f      	b.n	80076a4 <_dtoa_r+0x394>
 8007824:	2602      	movs	r6, #2
 8007826:	e742      	b.n	80076ae <_dtoa_r+0x39e>
 8007828:	9c07      	ldr	r4, [sp, #28]
 800782a:	9704      	str	r7, [sp, #16]
 800782c:	e761      	b.n	80076f2 <_dtoa_r+0x3e2>
 800782e:	bf00      	nop
 8007830:	0800aa38 	.word	0x0800aa38
 8007834:	0800aa10 	.word	0x0800aa10
 8007838:	3ff00000 	.word	0x3ff00000
 800783c:	40240000 	.word	0x40240000
 8007840:	401c0000 	.word	0x401c0000
 8007844:	40140000 	.word	0x40140000
 8007848:	4b70      	ldr	r3, [pc, #448]	@ (8007a0c <_dtoa_r+0x6fc>)
 800784a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800784c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007850:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007854:	4454      	add	r4, sl
 8007856:	2900      	cmp	r1, #0
 8007858:	d045      	beq.n	80078e6 <_dtoa_r+0x5d6>
 800785a:	2000      	movs	r0, #0
 800785c:	496c      	ldr	r1, [pc, #432]	@ (8007a10 <_dtoa_r+0x700>)
 800785e:	f7f8 ff65 	bl	800072c <__aeabi_ddiv>
 8007862:	4633      	mov	r3, r6
 8007864:	462a      	mov	r2, r5
 8007866:	f7f8 fc7f 	bl	8000168 <__aeabi_dsub>
 800786a:	4656      	mov	r6, sl
 800786c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007870:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007874:	f7f9 f8e0 	bl	8000a38 <__aeabi_d2iz>
 8007878:	4605      	mov	r5, r0
 800787a:	f7f8 fdc3 	bl	8000404 <__aeabi_i2d>
 800787e:	4602      	mov	r2, r0
 8007880:	460b      	mov	r3, r1
 8007882:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007886:	f7f8 fc6f 	bl	8000168 <__aeabi_dsub>
 800788a:	4602      	mov	r2, r0
 800788c:	460b      	mov	r3, r1
 800788e:	3530      	adds	r5, #48	@ 0x30
 8007890:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007894:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007898:	f806 5b01 	strb.w	r5, [r6], #1
 800789c:	f7f9 f88e 	bl	80009bc <__aeabi_dcmplt>
 80078a0:	2800      	cmp	r0, #0
 80078a2:	d163      	bne.n	800796c <_dtoa_r+0x65c>
 80078a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078a8:	2000      	movs	r0, #0
 80078aa:	495a      	ldr	r1, [pc, #360]	@ (8007a14 <_dtoa_r+0x704>)
 80078ac:	f7f8 fc5c 	bl	8000168 <__aeabi_dsub>
 80078b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80078b4:	f7f9 f882 	bl	80009bc <__aeabi_dcmplt>
 80078b8:	2800      	cmp	r0, #0
 80078ba:	f040 8087 	bne.w	80079cc <_dtoa_r+0x6bc>
 80078be:	42a6      	cmp	r6, r4
 80078c0:	f43f af43 	beq.w	800774a <_dtoa_r+0x43a>
 80078c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80078c8:	2200      	movs	r2, #0
 80078ca:	4b53      	ldr	r3, [pc, #332]	@ (8007a18 <_dtoa_r+0x708>)
 80078cc:	f7f8 fe04 	bl	80004d8 <__aeabi_dmul>
 80078d0:	2200      	movs	r2, #0
 80078d2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80078d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078da:	4b4f      	ldr	r3, [pc, #316]	@ (8007a18 <_dtoa_r+0x708>)
 80078dc:	f7f8 fdfc 	bl	80004d8 <__aeabi_dmul>
 80078e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078e4:	e7c4      	b.n	8007870 <_dtoa_r+0x560>
 80078e6:	4631      	mov	r1, r6
 80078e8:	4628      	mov	r0, r5
 80078ea:	f7f8 fdf5 	bl	80004d8 <__aeabi_dmul>
 80078ee:	4656      	mov	r6, sl
 80078f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80078f4:	9413      	str	r4, [sp, #76]	@ 0x4c
 80078f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078fa:	f7f9 f89d 	bl	8000a38 <__aeabi_d2iz>
 80078fe:	4605      	mov	r5, r0
 8007900:	f7f8 fd80 	bl	8000404 <__aeabi_i2d>
 8007904:	4602      	mov	r2, r0
 8007906:	460b      	mov	r3, r1
 8007908:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800790c:	f7f8 fc2c 	bl	8000168 <__aeabi_dsub>
 8007910:	4602      	mov	r2, r0
 8007912:	460b      	mov	r3, r1
 8007914:	3530      	adds	r5, #48	@ 0x30
 8007916:	f806 5b01 	strb.w	r5, [r6], #1
 800791a:	42a6      	cmp	r6, r4
 800791c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007920:	f04f 0200 	mov.w	r2, #0
 8007924:	d124      	bne.n	8007970 <_dtoa_r+0x660>
 8007926:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800792a:	4b39      	ldr	r3, [pc, #228]	@ (8007a10 <_dtoa_r+0x700>)
 800792c:	f7f8 fc1e 	bl	800016c <__adddf3>
 8007930:	4602      	mov	r2, r0
 8007932:	460b      	mov	r3, r1
 8007934:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007938:	f7f9 f85e 	bl	80009f8 <__aeabi_dcmpgt>
 800793c:	2800      	cmp	r0, #0
 800793e:	d145      	bne.n	80079cc <_dtoa_r+0x6bc>
 8007940:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007944:	2000      	movs	r0, #0
 8007946:	4932      	ldr	r1, [pc, #200]	@ (8007a10 <_dtoa_r+0x700>)
 8007948:	f7f8 fc0e 	bl	8000168 <__aeabi_dsub>
 800794c:	4602      	mov	r2, r0
 800794e:	460b      	mov	r3, r1
 8007950:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007954:	f7f9 f832 	bl	80009bc <__aeabi_dcmplt>
 8007958:	2800      	cmp	r0, #0
 800795a:	f43f aef6 	beq.w	800774a <_dtoa_r+0x43a>
 800795e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007960:	1e73      	subs	r3, r6, #1
 8007962:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007964:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007968:	2b30      	cmp	r3, #48	@ 0x30
 800796a:	d0f8      	beq.n	800795e <_dtoa_r+0x64e>
 800796c:	9f04      	ldr	r7, [sp, #16]
 800796e:	e73f      	b.n	80077f0 <_dtoa_r+0x4e0>
 8007970:	4b29      	ldr	r3, [pc, #164]	@ (8007a18 <_dtoa_r+0x708>)
 8007972:	f7f8 fdb1 	bl	80004d8 <__aeabi_dmul>
 8007976:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800797a:	e7bc      	b.n	80078f6 <_dtoa_r+0x5e6>
 800797c:	d10c      	bne.n	8007998 <_dtoa_r+0x688>
 800797e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007982:	2200      	movs	r2, #0
 8007984:	4b25      	ldr	r3, [pc, #148]	@ (8007a1c <_dtoa_r+0x70c>)
 8007986:	f7f8 fda7 	bl	80004d8 <__aeabi_dmul>
 800798a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800798e:	f7f9 f829 	bl	80009e4 <__aeabi_dcmpge>
 8007992:	2800      	cmp	r0, #0
 8007994:	f000 815b 	beq.w	8007c4e <_dtoa_r+0x93e>
 8007998:	2400      	movs	r4, #0
 800799a:	4625      	mov	r5, r4
 800799c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800799e:	4656      	mov	r6, sl
 80079a0:	43db      	mvns	r3, r3
 80079a2:	9304      	str	r3, [sp, #16]
 80079a4:	2700      	movs	r7, #0
 80079a6:	4621      	mov	r1, r4
 80079a8:	4658      	mov	r0, fp
 80079aa:	f000 fbb7 	bl	800811c <_Bfree>
 80079ae:	2d00      	cmp	r5, #0
 80079b0:	d0dc      	beq.n	800796c <_dtoa_r+0x65c>
 80079b2:	b12f      	cbz	r7, 80079c0 <_dtoa_r+0x6b0>
 80079b4:	42af      	cmp	r7, r5
 80079b6:	d003      	beq.n	80079c0 <_dtoa_r+0x6b0>
 80079b8:	4639      	mov	r1, r7
 80079ba:	4658      	mov	r0, fp
 80079bc:	f000 fbae 	bl	800811c <_Bfree>
 80079c0:	4629      	mov	r1, r5
 80079c2:	4658      	mov	r0, fp
 80079c4:	f000 fbaa 	bl	800811c <_Bfree>
 80079c8:	e7d0      	b.n	800796c <_dtoa_r+0x65c>
 80079ca:	9704      	str	r7, [sp, #16]
 80079cc:	4633      	mov	r3, r6
 80079ce:	461e      	mov	r6, r3
 80079d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079d4:	2a39      	cmp	r2, #57	@ 0x39
 80079d6:	d107      	bne.n	80079e8 <_dtoa_r+0x6d8>
 80079d8:	459a      	cmp	sl, r3
 80079da:	d1f8      	bne.n	80079ce <_dtoa_r+0x6be>
 80079dc:	9a04      	ldr	r2, [sp, #16]
 80079de:	3201      	adds	r2, #1
 80079e0:	9204      	str	r2, [sp, #16]
 80079e2:	2230      	movs	r2, #48	@ 0x30
 80079e4:	f88a 2000 	strb.w	r2, [sl]
 80079e8:	781a      	ldrb	r2, [r3, #0]
 80079ea:	3201      	adds	r2, #1
 80079ec:	701a      	strb	r2, [r3, #0]
 80079ee:	e7bd      	b.n	800796c <_dtoa_r+0x65c>
 80079f0:	2200      	movs	r2, #0
 80079f2:	4b09      	ldr	r3, [pc, #36]	@ (8007a18 <_dtoa_r+0x708>)
 80079f4:	f7f8 fd70 	bl	80004d8 <__aeabi_dmul>
 80079f8:	2200      	movs	r2, #0
 80079fa:	2300      	movs	r3, #0
 80079fc:	4604      	mov	r4, r0
 80079fe:	460d      	mov	r5, r1
 8007a00:	f7f8 ffd2 	bl	80009a8 <__aeabi_dcmpeq>
 8007a04:	2800      	cmp	r0, #0
 8007a06:	f43f aebc 	beq.w	8007782 <_dtoa_r+0x472>
 8007a0a:	e6f1      	b.n	80077f0 <_dtoa_r+0x4e0>
 8007a0c:	0800aa38 	.word	0x0800aa38
 8007a10:	3fe00000 	.word	0x3fe00000
 8007a14:	3ff00000 	.word	0x3ff00000
 8007a18:	40240000 	.word	0x40240000
 8007a1c:	40140000 	.word	0x40140000
 8007a20:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007a22:	2a00      	cmp	r2, #0
 8007a24:	f000 80db 	beq.w	8007bde <_dtoa_r+0x8ce>
 8007a28:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007a2a:	2a01      	cmp	r2, #1
 8007a2c:	f300 80bf 	bgt.w	8007bae <_dtoa_r+0x89e>
 8007a30:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007a32:	2a00      	cmp	r2, #0
 8007a34:	f000 80b7 	beq.w	8007ba6 <_dtoa_r+0x896>
 8007a38:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007a3c:	4646      	mov	r6, r8
 8007a3e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007a40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a42:	2101      	movs	r1, #1
 8007a44:	441a      	add	r2, r3
 8007a46:	4658      	mov	r0, fp
 8007a48:	4498      	add	r8, r3
 8007a4a:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a4c:	f000 fc64 	bl	8008318 <__i2b>
 8007a50:	4605      	mov	r5, r0
 8007a52:	b15e      	cbz	r6, 8007a6c <_dtoa_r+0x75c>
 8007a54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	dd08      	ble.n	8007a6c <_dtoa_r+0x75c>
 8007a5a:	42b3      	cmp	r3, r6
 8007a5c:	bfa8      	it	ge
 8007a5e:	4633      	movge	r3, r6
 8007a60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a62:	eba8 0803 	sub.w	r8, r8, r3
 8007a66:	1af6      	subs	r6, r6, r3
 8007a68:	1ad3      	subs	r3, r2, r3
 8007a6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a6e:	b1f3      	cbz	r3, 8007aae <_dtoa_r+0x79e>
 8007a70:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	f000 80b7 	beq.w	8007be6 <_dtoa_r+0x8d6>
 8007a78:	b18c      	cbz	r4, 8007a9e <_dtoa_r+0x78e>
 8007a7a:	4629      	mov	r1, r5
 8007a7c:	4622      	mov	r2, r4
 8007a7e:	4658      	mov	r0, fp
 8007a80:	f000 fd08 	bl	8008494 <__pow5mult>
 8007a84:	464a      	mov	r2, r9
 8007a86:	4601      	mov	r1, r0
 8007a88:	4605      	mov	r5, r0
 8007a8a:	4658      	mov	r0, fp
 8007a8c:	f000 fc5a 	bl	8008344 <__multiply>
 8007a90:	4649      	mov	r1, r9
 8007a92:	9004      	str	r0, [sp, #16]
 8007a94:	4658      	mov	r0, fp
 8007a96:	f000 fb41 	bl	800811c <_Bfree>
 8007a9a:	9b04      	ldr	r3, [sp, #16]
 8007a9c:	4699      	mov	r9, r3
 8007a9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007aa0:	1b1a      	subs	r2, r3, r4
 8007aa2:	d004      	beq.n	8007aae <_dtoa_r+0x79e>
 8007aa4:	4649      	mov	r1, r9
 8007aa6:	4658      	mov	r0, fp
 8007aa8:	f000 fcf4 	bl	8008494 <__pow5mult>
 8007aac:	4681      	mov	r9, r0
 8007aae:	2101      	movs	r1, #1
 8007ab0:	4658      	mov	r0, fp
 8007ab2:	f000 fc31 	bl	8008318 <__i2b>
 8007ab6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ab8:	4604      	mov	r4, r0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	f000 81c9 	beq.w	8007e52 <_dtoa_r+0xb42>
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	4601      	mov	r1, r0
 8007ac4:	4658      	mov	r0, fp
 8007ac6:	f000 fce5 	bl	8008494 <__pow5mult>
 8007aca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007acc:	4604      	mov	r4, r0
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	f300 808f 	bgt.w	8007bf2 <_dtoa_r+0x8e2>
 8007ad4:	9b02      	ldr	r3, [sp, #8]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	f040 8087 	bne.w	8007bea <_dtoa_r+0x8da>
 8007adc:	9b03      	ldr	r3, [sp, #12]
 8007ade:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	f040 8083 	bne.w	8007bee <_dtoa_r+0x8de>
 8007ae8:	9b03      	ldr	r3, [sp, #12]
 8007aea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007aee:	0d1b      	lsrs	r3, r3, #20
 8007af0:	051b      	lsls	r3, r3, #20
 8007af2:	b12b      	cbz	r3, 8007b00 <_dtoa_r+0x7f0>
 8007af4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007af6:	f108 0801 	add.w	r8, r8, #1
 8007afa:	3301      	adds	r3, #1
 8007afc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007afe:	2301      	movs	r3, #1
 8007b00:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	f000 81aa 	beq.w	8007e5e <_dtoa_r+0xb4e>
 8007b0a:	6923      	ldr	r3, [r4, #16]
 8007b0c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007b10:	6918      	ldr	r0, [r3, #16]
 8007b12:	f000 fbb5 	bl	8008280 <__hi0bits>
 8007b16:	f1c0 0020 	rsb	r0, r0, #32
 8007b1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b1c:	4418      	add	r0, r3
 8007b1e:	f010 001f 	ands.w	r0, r0, #31
 8007b22:	d071      	beq.n	8007c08 <_dtoa_r+0x8f8>
 8007b24:	f1c0 0320 	rsb	r3, r0, #32
 8007b28:	2b04      	cmp	r3, #4
 8007b2a:	dd65      	ble.n	8007bf8 <_dtoa_r+0x8e8>
 8007b2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b2e:	f1c0 001c 	rsb	r0, r0, #28
 8007b32:	4403      	add	r3, r0
 8007b34:	4480      	add	r8, r0
 8007b36:	4406      	add	r6, r0
 8007b38:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b3a:	f1b8 0f00 	cmp.w	r8, #0
 8007b3e:	dd05      	ble.n	8007b4c <_dtoa_r+0x83c>
 8007b40:	4649      	mov	r1, r9
 8007b42:	4642      	mov	r2, r8
 8007b44:	4658      	mov	r0, fp
 8007b46:	f000 fcff 	bl	8008548 <__lshift>
 8007b4a:	4681      	mov	r9, r0
 8007b4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	dd05      	ble.n	8007b5e <_dtoa_r+0x84e>
 8007b52:	4621      	mov	r1, r4
 8007b54:	461a      	mov	r2, r3
 8007b56:	4658      	mov	r0, fp
 8007b58:	f000 fcf6 	bl	8008548 <__lshift>
 8007b5c:	4604      	mov	r4, r0
 8007b5e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d053      	beq.n	8007c0c <_dtoa_r+0x8fc>
 8007b64:	4621      	mov	r1, r4
 8007b66:	4648      	mov	r0, r9
 8007b68:	f000 fd5a 	bl	8008620 <__mcmp>
 8007b6c:	2800      	cmp	r0, #0
 8007b6e:	da4d      	bge.n	8007c0c <_dtoa_r+0x8fc>
 8007b70:	1e7b      	subs	r3, r7, #1
 8007b72:	4649      	mov	r1, r9
 8007b74:	9304      	str	r3, [sp, #16]
 8007b76:	220a      	movs	r2, #10
 8007b78:	2300      	movs	r3, #0
 8007b7a:	4658      	mov	r0, fp
 8007b7c:	f000 faf0 	bl	8008160 <__multadd>
 8007b80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b82:	4681      	mov	r9, r0
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	f000 816c 	beq.w	8007e62 <_dtoa_r+0xb52>
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	4629      	mov	r1, r5
 8007b8e:	220a      	movs	r2, #10
 8007b90:	4658      	mov	r0, fp
 8007b92:	f000 fae5 	bl	8008160 <__multadd>
 8007b96:	9b08      	ldr	r3, [sp, #32]
 8007b98:	4605      	mov	r5, r0
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	dc61      	bgt.n	8007c62 <_dtoa_r+0x952>
 8007b9e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007ba0:	2b02      	cmp	r3, #2
 8007ba2:	dc3b      	bgt.n	8007c1c <_dtoa_r+0x90c>
 8007ba4:	e05d      	b.n	8007c62 <_dtoa_r+0x952>
 8007ba6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007ba8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007bac:	e746      	b.n	8007a3c <_dtoa_r+0x72c>
 8007bae:	9b07      	ldr	r3, [sp, #28]
 8007bb0:	1e5c      	subs	r4, r3, #1
 8007bb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bb4:	42a3      	cmp	r3, r4
 8007bb6:	bfbf      	itttt	lt
 8007bb8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007bba:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8007bbc:	1ae3      	sublt	r3, r4, r3
 8007bbe:	18d2      	addlt	r2, r2, r3
 8007bc0:	bfa8      	it	ge
 8007bc2:	1b1c      	subge	r4, r3, r4
 8007bc4:	9b07      	ldr	r3, [sp, #28]
 8007bc6:	bfbe      	ittt	lt
 8007bc8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007bca:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8007bcc:	2400      	movlt	r4, #0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	bfb5      	itete	lt
 8007bd2:	eba8 0603 	sublt.w	r6, r8, r3
 8007bd6:	4646      	movge	r6, r8
 8007bd8:	2300      	movlt	r3, #0
 8007bda:	9b07      	ldrge	r3, [sp, #28]
 8007bdc:	e730      	b.n	8007a40 <_dtoa_r+0x730>
 8007bde:	4646      	mov	r6, r8
 8007be0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007be2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007be4:	e735      	b.n	8007a52 <_dtoa_r+0x742>
 8007be6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007be8:	e75c      	b.n	8007aa4 <_dtoa_r+0x794>
 8007bea:	2300      	movs	r3, #0
 8007bec:	e788      	b.n	8007b00 <_dtoa_r+0x7f0>
 8007bee:	9b02      	ldr	r3, [sp, #8]
 8007bf0:	e786      	b.n	8007b00 <_dtoa_r+0x7f0>
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	930a      	str	r3, [sp, #40]	@ 0x28
 8007bf6:	e788      	b.n	8007b0a <_dtoa_r+0x7fa>
 8007bf8:	d09f      	beq.n	8007b3a <_dtoa_r+0x82a>
 8007bfa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007bfc:	331c      	adds	r3, #28
 8007bfe:	441a      	add	r2, r3
 8007c00:	4498      	add	r8, r3
 8007c02:	441e      	add	r6, r3
 8007c04:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c06:	e798      	b.n	8007b3a <_dtoa_r+0x82a>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	e7f6      	b.n	8007bfa <_dtoa_r+0x8ea>
 8007c0c:	9b07      	ldr	r3, [sp, #28]
 8007c0e:	9704      	str	r7, [sp, #16]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	dc20      	bgt.n	8007c56 <_dtoa_r+0x946>
 8007c14:	9308      	str	r3, [sp, #32]
 8007c16:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007c18:	2b02      	cmp	r3, #2
 8007c1a:	dd1e      	ble.n	8007c5a <_dtoa_r+0x94a>
 8007c1c:	9b08      	ldr	r3, [sp, #32]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	f47f aebc 	bne.w	800799c <_dtoa_r+0x68c>
 8007c24:	4621      	mov	r1, r4
 8007c26:	2205      	movs	r2, #5
 8007c28:	4658      	mov	r0, fp
 8007c2a:	f000 fa99 	bl	8008160 <__multadd>
 8007c2e:	4601      	mov	r1, r0
 8007c30:	4604      	mov	r4, r0
 8007c32:	4648      	mov	r0, r9
 8007c34:	f000 fcf4 	bl	8008620 <__mcmp>
 8007c38:	2800      	cmp	r0, #0
 8007c3a:	f77f aeaf 	ble.w	800799c <_dtoa_r+0x68c>
 8007c3e:	2331      	movs	r3, #49	@ 0x31
 8007c40:	4656      	mov	r6, sl
 8007c42:	f806 3b01 	strb.w	r3, [r6], #1
 8007c46:	9b04      	ldr	r3, [sp, #16]
 8007c48:	3301      	adds	r3, #1
 8007c4a:	9304      	str	r3, [sp, #16]
 8007c4c:	e6aa      	b.n	80079a4 <_dtoa_r+0x694>
 8007c4e:	9c07      	ldr	r4, [sp, #28]
 8007c50:	9704      	str	r7, [sp, #16]
 8007c52:	4625      	mov	r5, r4
 8007c54:	e7f3      	b.n	8007c3e <_dtoa_r+0x92e>
 8007c56:	9b07      	ldr	r3, [sp, #28]
 8007c58:	9308      	str	r3, [sp, #32]
 8007c5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	f000 8104 	beq.w	8007e6a <_dtoa_r+0xb5a>
 8007c62:	2e00      	cmp	r6, #0
 8007c64:	dd05      	ble.n	8007c72 <_dtoa_r+0x962>
 8007c66:	4629      	mov	r1, r5
 8007c68:	4632      	mov	r2, r6
 8007c6a:	4658      	mov	r0, fp
 8007c6c:	f000 fc6c 	bl	8008548 <__lshift>
 8007c70:	4605      	mov	r5, r0
 8007c72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d05a      	beq.n	8007d2e <_dtoa_r+0xa1e>
 8007c78:	4658      	mov	r0, fp
 8007c7a:	6869      	ldr	r1, [r5, #4]
 8007c7c:	f000 fa0e 	bl	800809c <_Balloc>
 8007c80:	4606      	mov	r6, r0
 8007c82:	b928      	cbnz	r0, 8007c90 <_dtoa_r+0x980>
 8007c84:	4602      	mov	r2, r0
 8007c86:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007c8a:	4b83      	ldr	r3, [pc, #524]	@ (8007e98 <_dtoa_r+0xb88>)
 8007c8c:	f7ff bb54 	b.w	8007338 <_dtoa_r+0x28>
 8007c90:	692a      	ldr	r2, [r5, #16]
 8007c92:	f105 010c 	add.w	r1, r5, #12
 8007c96:	3202      	adds	r2, #2
 8007c98:	0092      	lsls	r2, r2, #2
 8007c9a:	300c      	adds	r0, #12
 8007c9c:	f001 ff5e 	bl	8009b5c <memcpy>
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	4631      	mov	r1, r6
 8007ca4:	4658      	mov	r0, fp
 8007ca6:	f000 fc4f 	bl	8008548 <__lshift>
 8007caa:	462f      	mov	r7, r5
 8007cac:	4605      	mov	r5, r0
 8007cae:	f10a 0301 	add.w	r3, sl, #1
 8007cb2:	9307      	str	r3, [sp, #28]
 8007cb4:	9b08      	ldr	r3, [sp, #32]
 8007cb6:	4453      	add	r3, sl
 8007cb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007cba:	9b02      	ldr	r3, [sp, #8]
 8007cbc:	f003 0301 	and.w	r3, r3, #1
 8007cc0:	930a      	str	r3, [sp, #40]	@ 0x28
 8007cc2:	9b07      	ldr	r3, [sp, #28]
 8007cc4:	4621      	mov	r1, r4
 8007cc6:	3b01      	subs	r3, #1
 8007cc8:	4648      	mov	r0, r9
 8007cca:	9302      	str	r3, [sp, #8]
 8007ccc:	f7ff fa98 	bl	8007200 <quorem>
 8007cd0:	4639      	mov	r1, r7
 8007cd2:	9008      	str	r0, [sp, #32]
 8007cd4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007cd8:	4648      	mov	r0, r9
 8007cda:	f000 fca1 	bl	8008620 <__mcmp>
 8007cde:	462a      	mov	r2, r5
 8007ce0:	9009      	str	r0, [sp, #36]	@ 0x24
 8007ce2:	4621      	mov	r1, r4
 8007ce4:	4658      	mov	r0, fp
 8007ce6:	f000 fcb7 	bl	8008658 <__mdiff>
 8007cea:	68c2      	ldr	r2, [r0, #12]
 8007cec:	4606      	mov	r6, r0
 8007cee:	bb02      	cbnz	r2, 8007d32 <_dtoa_r+0xa22>
 8007cf0:	4601      	mov	r1, r0
 8007cf2:	4648      	mov	r0, r9
 8007cf4:	f000 fc94 	bl	8008620 <__mcmp>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	4631      	mov	r1, r6
 8007cfc:	4658      	mov	r0, fp
 8007cfe:	920c      	str	r2, [sp, #48]	@ 0x30
 8007d00:	f000 fa0c 	bl	800811c <_Bfree>
 8007d04:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007d06:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007d08:	9e07      	ldr	r6, [sp, #28]
 8007d0a:	ea43 0102 	orr.w	r1, r3, r2
 8007d0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d10:	4319      	orrs	r1, r3
 8007d12:	d110      	bne.n	8007d36 <_dtoa_r+0xa26>
 8007d14:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007d18:	d029      	beq.n	8007d6e <_dtoa_r+0xa5e>
 8007d1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	dd02      	ble.n	8007d26 <_dtoa_r+0xa16>
 8007d20:	9b08      	ldr	r3, [sp, #32]
 8007d22:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007d26:	9b02      	ldr	r3, [sp, #8]
 8007d28:	f883 8000 	strb.w	r8, [r3]
 8007d2c:	e63b      	b.n	80079a6 <_dtoa_r+0x696>
 8007d2e:	4628      	mov	r0, r5
 8007d30:	e7bb      	b.n	8007caa <_dtoa_r+0x99a>
 8007d32:	2201      	movs	r2, #1
 8007d34:	e7e1      	b.n	8007cfa <_dtoa_r+0x9ea>
 8007d36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	db04      	blt.n	8007d46 <_dtoa_r+0xa36>
 8007d3c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8007d3e:	430b      	orrs	r3, r1
 8007d40:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007d42:	430b      	orrs	r3, r1
 8007d44:	d120      	bne.n	8007d88 <_dtoa_r+0xa78>
 8007d46:	2a00      	cmp	r2, #0
 8007d48:	dded      	ble.n	8007d26 <_dtoa_r+0xa16>
 8007d4a:	4649      	mov	r1, r9
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	4658      	mov	r0, fp
 8007d50:	f000 fbfa 	bl	8008548 <__lshift>
 8007d54:	4621      	mov	r1, r4
 8007d56:	4681      	mov	r9, r0
 8007d58:	f000 fc62 	bl	8008620 <__mcmp>
 8007d5c:	2800      	cmp	r0, #0
 8007d5e:	dc03      	bgt.n	8007d68 <_dtoa_r+0xa58>
 8007d60:	d1e1      	bne.n	8007d26 <_dtoa_r+0xa16>
 8007d62:	f018 0f01 	tst.w	r8, #1
 8007d66:	d0de      	beq.n	8007d26 <_dtoa_r+0xa16>
 8007d68:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007d6c:	d1d8      	bne.n	8007d20 <_dtoa_r+0xa10>
 8007d6e:	2339      	movs	r3, #57	@ 0x39
 8007d70:	9a02      	ldr	r2, [sp, #8]
 8007d72:	7013      	strb	r3, [r2, #0]
 8007d74:	4633      	mov	r3, r6
 8007d76:	461e      	mov	r6, r3
 8007d78:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	2a39      	cmp	r2, #57	@ 0x39
 8007d80:	d052      	beq.n	8007e28 <_dtoa_r+0xb18>
 8007d82:	3201      	adds	r2, #1
 8007d84:	701a      	strb	r2, [r3, #0]
 8007d86:	e60e      	b.n	80079a6 <_dtoa_r+0x696>
 8007d88:	2a00      	cmp	r2, #0
 8007d8a:	dd07      	ble.n	8007d9c <_dtoa_r+0xa8c>
 8007d8c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007d90:	d0ed      	beq.n	8007d6e <_dtoa_r+0xa5e>
 8007d92:	9a02      	ldr	r2, [sp, #8]
 8007d94:	f108 0301 	add.w	r3, r8, #1
 8007d98:	7013      	strb	r3, [r2, #0]
 8007d9a:	e604      	b.n	80079a6 <_dtoa_r+0x696>
 8007d9c:	9b07      	ldr	r3, [sp, #28]
 8007d9e:	9a07      	ldr	r2, [sp, #28]
 8007da0:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007da4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d028      	beq.n	8007dfc <_dtoa_r+0xaec>
 8007daa:	4649      	mov	r1, r9
 8007dac:	2300      	movs	r3, #0
 8007dae:	220a      	movs	r2, #10
 8007db0:	4658      	mov	r0, fp
 8007db2:	f000 f9d5 	bl	8008160 <__multadd>
 8007db6:	42af      	cmp	r7, r5
 8007db8:	4681      	mov	r9, r0
 8007dba:	f04f 0300 	mov.w	r3, #0
 8007dbe:	f04f 020a 	mov.w	r2, #10
 8007dc2:	4639      	mov	r1, r7
 8007dc4:	4658      	mov	r0, fp
 8007dc6:	d107      	bne.n	8007dd8 <_dtoa_r+0xac8>
 8007dc8:	f000 f9ca 	bl	8008160 <__multadd>
 8007dcc:	4607      	mov	r7, r0
 8007dce:	4605      	mov	r5, r0
 8007dd0:	9b07      	ldr	r3, [sp, #28]
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	9307      	str	r3, [sp, #28]
 8007dd6:	e774      	b.n	8007cc2 <_dtoa_r+0x9b2>
 8007dd8:	f000 f9c2 	bl	8008160 <__multadd>
 8007ddc:	4629      	mov	r1, r5
 8007dde:	4607      	mov	r7, r0
 8007de0:	2300      	movs	r3, #0
 8007de2:	220a      	movs	r2, #10
 8007de4:	4658      	mov	r0, fp
 8007de6:	f000 f9bb 	bl	8008160 <__multadd>
 8007dea:	4605      	mov	r5, r0
 8007dec:	e7f0      	b.n	8007dd0 <_dtoa_r+0xac0>
 8007dee:	9b08      	ldr	r3, [sp, #32]
 8007df0:	2700      	movs	r7, #0
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	bfcc      	ite	gt
 8007df6:	461e      	movgt	r6, r3
 8007df8:	2601      	movle	r6, #1
 8007dfa:	4456      	add	r6, sl
 8007dfc:	4649      	mov	r1, r9
 8007dfe:	2201      	movs	r2, #1
 8007e00:	4658      	mov	r0, fp
 8007e02:	f000 fba1 	bl	8008548 <__lshift>
 8007e06:	4621      	mov	r1, r4
 8007e08:	4681      	mov	r9, r0
 8007e0a:	f000 fc09 	bl	8008620 <__mcmp>
 8007e0e:	2800      	cmp	r0, #0
 8007e10:	dcb0      	bgt.n	8007d74 <_dtoa_r+0xa64>
 8007e12:	d102      	bne.n	8007e1a <_dtoa_r+0xb0a>
 8007e14:	f018 0f01 	tst.w	r8, #1
 8007e18:	d1ac      	bne.n	8007d74 <_dtoa_r+0xa64>
 8007e1a:	4633      	mov	r3, r6
 8007e1c:	461e      	mov	r6, r3
 8007e1e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e22:	2a30      	cmp	r2, #48	@ 0x30
 8007e24:	d0fa      	beq.n	8007e1c <_dtoa_r+0xb0c>
 8007e26:	e5be      	b.n	80079a6 <_dtoa_r+0x696>
 8007e28:	459a      	cmp	sl, r3
 8007e2a:	d1a4      	bne.n	8007d76 <_dtoa_r+0xa66>
 8007e2c:	9b04      	ldr	r3, [sp, #16]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	9304      	str	r3, [sp, #16]
 8007e32:	2331      	movs	r3, #49	@ 0x31
 8007e34:	f88a 3000 	strb.w	r3, [sl]
 8007e38:	e5b5      	b.n	80079a6 <_dtoa_r+0x696>
 8007e3a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007e3c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007e9c <_dtoa_r+0xb8c>
 8007e40:	b11b      	cbz	r3, 8007e4a <_dtoa_r+0xb3a>
 8007e42:	f10a 0308 	add.w	r3, sl, #8
 8007e46:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007e48:	6013      	str	r3, [r2, #0]
 8007e4a:	4650      	mov	r0, sl
 8007e4c:	b017      	add	sp, #92	@ 0x5c
 8007e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e52:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	f77f ae3d 	ble.w	8007ad4 <_dtoa_r+0x7c4>
 8007e5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e5c:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e5e:	2001      	movs	r0, #1
 8007e60:	e65b      	b.n	8007b1a <_dtoa_r+0x80a>
 8007e62:	9b08      	ldr	r3, [sp, #32]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	f77f aed6 	ble.w	8007c16 <_dtoa_r+0x906>
 8007e6a:	4656      	mov	r6, sl
 8007e6c:	4621      	mov	r1, r4
 8007e6e:	4648      	mov	r0, r9
 8007e70:	f7ff f9c6 	bl	8007200 <quorem>
 8007e74:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007e78:	9b08      	ldr	r3, [sp, #32]
 8007e7a:	f806 8b01 	strb.w	r8, [r6], #1
 8007e7e:	eba6 020a 	sub.w	r2, r6, sl
 8007e82:	4293      	cmp	r3, r2
 8007e84:	ddb3      	ble.n	8007dee <_dtoa_r+0xade>
 8007e86:	4649      	mov	r1, r9
 8007e88:	2300      	movs	r3, #0
 8007e8a:	220a      	movs	r2, #10
 8007e8c:	4658      	mov	r0, fp
 8007e8e:	f000 f967 	bl	8008160 <__multadd>
 8007e92:	4681      	mov	r9, r0
 8007e94:	e7ea      	b.n	8007e6c <_dtoa_r+0xb5c>
 8007e96:	bf00      	nop
 8007e98:	0800a997 	.word	0x0800a997
 8007e9c:	0800a91b 	.word	0x0800a91b

08007ea0 <_free_r>:
 8007ea0:	b538      	push	{r3, r4, r5, lr}
 8007ea2:	4605      	mov	r5, r0
 8007ea4:	2900      	cmp	r1, #0
 8007ea6:	d040      	beq.n	8007f2a <_free_r+0x8a>
 8007ea8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007eac:	1f0c      	subs	r4, r1, #4
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	bfb8      	it	lt
 8007eb2:	18e4      	addlt	r4, r4, r3
 8007eb4:	f000 f8e6 	bl	8008084 <__malloc_lock>
 8007eb8:	4a1c      	ldr	r2, [pc, #112]	@ (8007f2c <_free_r+0x8c>)
 8007eba:	6813      	ldr	r3, [r2, #0]
 8007ebc:	b933      	cbnz	r3, 8007ecc <_free_r+0x2c>
 8007ebe:	6063      	str	r3, [r4, #4]
 8007ec0:	6014      	str	r4, [r2, #0]
 8007ec2:	4628      	mov	r0, r5
 8007ec4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ec8:	f000 b8e2 	b.w	8008090 <__malloc_unlock>
 8007ecc:	42a3      	cmp	r3, r4
 8007ece:	d908      	bls.n	8007ee2 <_free_r+0x42>
 8007ed0:	6820      	ldr	r0, [r4, #0]
 8007ed2:	1821      	adds	r1, r4, r0
 8007ed4:	428b      	cmp	r3, r1
 8007ed6:	bf01      	itttt	eq
 8007ed8:	6819      	ldreq	r1, [r3, #0]
 8007eda:	685b      	ldreq	r3, [r3, #4]
 8007edc:	1809      	addeq	r1, r1, r0
 8007ede:	6021      	streq	r1, [r4, #0]
 8007ee0:	e7ed      	b.n	8007ebe <_free_r+0x1e>
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	b10b      	cbz	r3, 8007eec <_free_r+0x4c>
 8007ee8:	42a3      	cmp	r3, r4
 8007eea:	d9fa      	bls.n	8007ee2 <_free_r+0x42>
 8007eec:	6811      	ldr	r1, [r2, #0]
 8007eee:	1850      	adds	r0, r2, r1
 8007ef0:	42a0      	cmp	r0, r4
 8007ef2:	d10b      	bne.n	8007f0c <_free_r+0x6c>
 8007ef4:	6820      	ldr	r0, [r4, #0]
 8007ef6:	4401      	add	r1, r0
 8007ef8:	1850      	adds	r0, r2, r1
 8007efa:	4283      	cmp	r3, r0
 8007efc:	6011      	str	r1, [r2, #0]
 8007efe:	d1e0      	bne.n	8007ec2 <_free_r+0x22>
 8007f00:	6818      	ldr	r0, [r3, #0]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	4408      	add	r0, r1
 8007f06:	6010      	str	r0, [r2, #0]
 8007f08:	6053      	str	r3, [r2, #4]
 8007f0a:	e7da      	b.n	8007ec2 <_free_r+0x22>
 8007f0c:	d902      	bls.n	8007f14 <_free_r+0x74>
 8007f0e:	230c      	movs	r3, #12
 8007f10:	602b      	str	r3, [r5, #0]
 8007f12:	e7d6      	b.n	8007ec2 <_free_r+0x22>
 8007f14:	6820      	ldr	r0, [r4, #0]
 8007f16:	1821      	adds	r1, r4, r0
 8007f18:	428b      	cmp	r3, r1
 8007f1a:	bf01      	itttt	eq
 8007f1c:	6819      	ldreq	r1, [r3, #0]
 8007f1e:	685b      	ldreq	r3, [r3, #4]
 8007f20:	1809      	addeq	r1, r1, r0
 8007f22:	6021      	streq	r1, [r4, #0]
 8007f24:	6063      	str	r3, [r4, #4]
 8007f26:	6054      	str	r4, [r2, #4]
 8007f28:	e7cb      	b.n	8007ec2 <_free_r+0x22>
 8007f2a:	bd38      	pop	{r3, r4, r5, pc}
 8007f2c:	20000474 	.word	0x20000474

08007f30 <malloc>:
 8007f30:	4b02      	ldr	r3, [pc, #8]	@ (8007f3c <malloc+0xc>)
 8007f32:	4601      	mov	r1, r0
 8007f34:	6818      	ldr	r0, [r3, #0]
 8007f36:	f000 b825 	b.w	8007f84 <_malloc_r>
 8007f3a:	bf00      	nop
 8007f3c:	2000001c 	.word	0x2000001c

08007f40 <sbrk_aligned>:
 8007f40:	b570      	push	{r4, r5, r6, lr}
 8007f42:	4e0f      	ldr	r6, [pc, #60]	@ (8007f80 <sbrk_aligned+0x40>)
 8007f44:	460c      	mov	r4, r1
 8007f46:	6831      	ldr	r1, [r6, #0]
 8007f48:	4605      	mov	r5, r0
 8007f4a:	b911      	cbnz	r1, 8007f52 <sbrk_aligned+0x12>
 8007f4c:	f001 fdf6 	bl	8009b3c <_sbrk_r>
 8007f50:	6030      	str	r0, [r6, #0]
 8007f52:	4621      	mov	r1, r4
 8007f54:	4628      	mov	r0, r5
 8007f56:	f001 fdf1 	bl	8009b3c <_sbrk_r>
 8007f5a:	1c43      	adds	r3, r0, #1
 8007f5c:	d103      	bne.n	8007f66 <sbrk_aligned+0x26>
 8007f5e:	f04f 34ff 	mov.w	r4, #4294967295
 8007f62:	4620      	mov	r0, r4
 8007f64:	bd70      	pop	{r4, r5, r6, pc}
 8007f66:	1cc4      	adds	r4, r0, #3
 8007f68:	f024 0403 	bic.w	r4, r4, #3
 8007f6c:	42a0      	cmp	r0, r4
 8007f6e:	d0f8      	beq.n	8007f62 <sbrk_aligned+0x22>
 8007f70:	1a21      	subs	r1, r4, r0
 8007f72:	4628      	mov	r0, r5
 8007f74:	f001 fde2 	bl	8009b3c <_sbrk_r>
 8007f78:	3001      	adds	r0, #1
 8007f7a:	d1f2      	bne.n	8007f62 <sbrk_aligned+0x22>
 8007f7c:	e7ef      	b.n	8007f5e <sbrk_aligned+0x1e>
 8007f7e:	bf00      	nop
 8007f80:	20000470 	.word	0x20000470

08007f84 <_malloc_r>:
 8007f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f88:	1ccd      	adds	r5, r1, #3
 8007f8a:	f025 0503 	bic.w	r5, r5, #3
 8007f8e:	3508      	adds	r5, #8
 8007f90:	2d0c      	cmp	r5, #12
 8007f92:	bf38      	it	cc
 8007f94:	250c      	movcc	r5, #12
 8007f96:	2d00      	cmp	r5, #0
 8007f98:	4606      	mov	r6, r0
 8007f9a:	db01      	blt.n	8007fa0 <_malloc_r+0x1c>
 8007f9c:	42a9      	cmp	r1, r5
 8007f9e:	d904      	bls.n	8007faa <_malloc_r+0x26>
 8007fa0:	230c      	movs	r3, #12
 8007fa2:	6033      	str	r3, [r6, #0]
 8007fa4:	2000      	movs	r0, #0
 8007fa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007faa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008080 <_malloc_r+0xfc>
 8007fae:	f000 f869 	bl	8008084 <__malloc_lock>
 8007fb2:	f8d8 3000 	ldr.w	r3, [r8]
 8007fb6:	461c      	mov	r4, r3
 8007fb8:	bb44      	cbnz	r4, 800800c <_malloc_r+0x88>
 8007fba:	4629      	mov	r1, r5
 8007fbc:	4630      	mov	r0, r6
 8007fbe:	f7ff ffbf 	bl	8007f40 <sbrk_aligned>
 8007fc2:	1c43      	adds	r3, r0, #1
 8007fc4:	4604      	mov	r4, r0
 8007fc6:	d158      	bne.n	800807a <_malloc_r+0xf6>
 8007fc8:	f8d8 4000 	ldr.w	r4, [r8]
 8007fcc:	4627      	mov	r7, r4
 8007fce:	2f00      	cmp	r7, #0
 8007fd0:	d143      	bne.n	800805a <_malloc_r+0xd6>
 8007fd2:	2c00      	cmp	r4, #0
 8007fd4:	d04b      	beq.n	800806e <_malloc_r+0xea>
 8007fd6:	6823      	ldr	r3, [r4, #0]
 8007fd8:	4639      	mov	r1, r7
 8007fda:	4630      	mov	r0, r6
 8007fdc:	eb04 0903 	add.w	r9, r4, r3
 8007fe0:	f001 fdac 	bl	8009b3c <_sbrk_r>
 8007fe4:	4581      	cmp	r9, r0
 8007fe6:	d142      	bne.n	800806e <_malloc_r+0xea>
 8007fe8:	6821      	ldr	r1, [r4, #0]
 8007fea:	4630      	mov	r0, r6
 8007fec:	1a6d      	subs	r5, r5, r1
 8007fee:	4629      	mov	r1, r5
 8007ff0:	f7ff ffa6 	bl	8007f40 <sbrk_aligned>
 8007ff4:	3001      	adds	r0, #1
 8007ff6:	d03a      	beq.n	800806e <_malloc_r+0xea>
 8007ff8:	6823      	ldr	r3, [r4, #0]
 8007ffa:	442b      	add	r3, r5
 8007ffc:	6023      	str	r3, [r4, #0]
 8007ffe:	f8d8 3000 	ldr.w	r3, [r8]
 8008002:	685a      	ldr	r2, [r3, #4]
 8008004:	bb62      	cbnz	r2, 8008060 <_malloc_r+0xdc>
 8008006:	f8c8 7000 	str.w	r7, [r8]
 800800a:	e00f      	b.n	800802c <_malloc_r+0xa8>
 800800c:	6822      	ldr	r2, [r4, #0]
 800800e:	1b52      	subs	r2, r2, r5
 8008010:	d420      	bmi.n	8008054 <_malloc_r+0xd0>
 8008012:	2a0b      	cmp	r2, #11
 8008014:	d917      	bls.n	8008046 <_malloc_r+0xc2>
 8008016:	1961      	adds	r1, r4, r5
 8008018:	42a3      	cmp	r3, r4
 800801a:	6025      	str	r5, [r4, #0]
 800801c:	bf18      	it	ne
 800801e:	6059      	strne	r1, [r3, #4]
 8008020:	6863      	ldr	r3, [r4, #4]
 8008022:	bf08      	it	eq
 8008024:	f8c8 1000 	streq.w	r1, [r8]
 8008028:	5162      	str	r2, [r4, r5]
 800802a:	604b      	str	r3, [r1, #4]
 800802c:	4630      	mov	r0, r6
 800802e:	f000 f82f 	bl	8008090 <__malloc_unlock>
 8008032:	f104 000b 	add.w	r0, r4, #11
 8008036:	1d23      	adds	r3, r4, #4
 8008038:	f020 0007 	bic.w	r0, r0, #7
 800803c:	1ac2      	subs	r2, r0, r3
 800803e:	bf1c      	itt	ne
 8008040:	1a1b      	subne	r3, r3, r0
 8008042:	50a3      	strne	r3, [r4, r2]
 8008044:	e7af      	b.n	8007fa6 <_malloc_r+0x22>
 8008046:	6862      	ldr	r2, [r4, #4]
 8008048:	42a3      	cmp	r3, r4
 800804a:	bf0c      	ite	eq
 800804c:	f8c8 2000 	streq.w	r2, [r8]
 8008050:	605a      	strne	r2, [r3, #4]
 8008052:	e7eb      	b.n	800802c <_malloc_r+0xa8>
 8008054:	4623      	mov	r3, r4
 8008056:	6864      	ldr	r4, [r4, #4]
 8008058:	e7ae      	b.n	8007fb8 <_malloc_r+0x34>
 800805a:	463c      	mov	r4, r7
 800805c:	687f      	ldr	r7, [r7, #4]
 800805e:	e7b6      	b.n	8007fce <_malloc_r+0x4a>
 8008060:	461a      	mov	r2, r3
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	42a3      	cmp	r3, r4
 8008066:	d1fb      	bne.n	8008060 <_malloc_r+0xdc>
 8008068:	2300      	movs	r3, #0
 800806a:	6053      	str	r3, [r2, #4]
 800806c:	e7de      	b.n	800802c <_malloc_r+0xa8>
 800806e:	230c      	movs	r3, #12
 8008070:	4630      	mov	r0, r6
 8008072:	6033      	str	r3, [r6, #0]
 8008074:	f000 f80c 	bl	8008090 <__malloc_unlock>
 8008078:	e794      	b.n	8007fa4 <_malloc_r+0x20>
 800807a:	6005      	str	r5, [r0, #0]
 800807c:	e7d6      	b.n	800802c <_malloc_r+0xa8>
 800807e:	bf00      	nop
 8008080:	20000474 	.word	0x20000474

08008084 <__malloc_lock>:
 8008084:	4801      	ldr	r0, [pc, #4]	@ (800808c <__malloc_lock+0x8>)
 8008086:	f7ff b8a6 	b.w	80071d6 <__retarget_lock_acquire_recursive>
 800808a:	bf00      	nop
 800808c:	2000046c 	.word	0x2000046c

08008090 <__malloc_unlock>:
 8008090:	4801      	ldr	r0, [pc, #4]	@ (8008098 <__malloc_unlock+0x8>)
 8008092:	f7ff b8a1 	b.w	80071d8 <__retarget_lock_release_recursive>
 8008096:	bf00      	nop
 8008098:	2000046c 	.word	0x2000046c

0800809c <_Balloc>:
 800809c:	b570      	push	{r4, r5, r6, lr}
 800809e:	69c6      	ldr	r6, [r0, #28]
 80080a0:	4604      	mov	r4, r0
 80080a2:	460d      	mov	r5, r1
 80080a4:	b976      	cbnz	r6, 80080c4 <_Balloc+0x28>
 80080a6:	2010      	movs	r0, #16
 80080a8:	f7ff ff42 	bl	8007f30 <malloc>
 80080ac:	4602      	mov	r2, r0
 80080ae:	61e0      	str	r0, [r4, #28]
 80080b0:	b920      	cbnz	r0, 80080bc <_Balloc+0x20>
 80080b2:	216b      	movs	r1, #107	@ 0x6b
 80080b4:	4b17      	ldr	r3, [pc, #92]	@ (8008114 <_Balloc+0x78>)
 80080b6:	4818      	ldr	r0, [pc, #96]	@ (8008118 <_Balloc+0x7c>)
 80080b8:	f001 fd64 	bl	8009b84 <__assert_func>
 80080bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080c0:	6006      	str	r6, [r0, #0]
 80080c2:	60c6      	str	r6, [r0, #12]
 80080c4:	69e6      	ldr	r6, [r4, #28]
 80080c6:	68f3      	ldr	r3, [r6, #12]
 80080c8:	b183      	cbz	r3, 80080ec <_Balloc+0x50>
 80080ca:	69e3      	ldr	r3, [r4, #28]
 80080cc:	68db      	ldr	r3, [r3, #12]
 80080ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80080d2:	b9b8      	cbnz	r0, 8008104 <_Balloc+0x68>
 80080d4:	2101      	movs	r1, #1
 80080d6:	fa01 f605 	lsl.w	r6, r1, r5
 80080da:	1d72      	adds	r2, r6, #5
 80080dc:	4620      	mov	r0, r4
 80080de:	0092      	lsls	r2, r2, #2
 80080e0:	f001 fd6e 	bl	8009bc0 <_calloc_r>
 80080e4:	b160      	cbz	r0, 8008100 <_Balloc+0x64>
 80080e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80080ea:	e00e      	b.n	800810a <_Balloc+0x6e>
 80080ec:	2221      	movs	r2, #33	@ 0x21
 80080ee:	2104      	movs	r1, #4
 80080f0:	4620      	mov	r0, r4
 80080f2:	f001 fd65 	bl	8009bc0 <_calloc_r>
 80080f6:	69e3      	ldr	r3, [r4, #28]
 80080f8:	60f0      	str	r0, [r6, #12]
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d1e4      	bne.n	80080ca <_Balloc+0x2e>
 8008100:	2000      	movs	r0, #0
 8008102:	bd70      	pop	{r4, r5, r6, pc}
 8008104:	6802      	ldr	r2, [r0, #0]
 8008106:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800810a:	2300      	movs	r3, #0
 800810c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008110:	e7f7      	b.n	8008102 <_Balloc+0x66>
 8008112:	bf00      	nop
 8008114:	0800a928 	.word	0x0800a928
 8008118:	0800a9a8 	.word	0x0800a9a8

0800811c <_Bfree>:
 800811c:	b570      	push	{r4, r5, r6, lr}
 800811e:	69c6      	ldr	r6, [r0, #28]
 8008120:	4605      	mov	r5, r0
 8008122:	460c      	mov	r4, r1
 8008124:	b976      	cbnz	r6, 8008144 <_Bfree+0x28>
 8008126:	2010      	movs	r0, #16
 8008128:	f7ff ff02 	bl	8007f30 <malloc>
 800812c:	4602      	mov	r2, r0
 800812e:	61e8      	str	r0, [r5, #28]
 8008130:	b920      	cbnz	r0, 800813c <_Bfree+0x20>
 8008132:	218f      	movs	r1, #143	@ 0x8f
 8008134:	4b08      	ldr	r3, [pc, #32]	@ (8008158 <_Bfree+0x3c>)
 8008136:	4809      	ldr	r0, [pc, #36]	@ (800815c <_Bfree+0x40>)
 8008138:	f001 fd24 	bl	8009b84 <__assert_func>
 800813c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008140:	6006      	str	r6, [r0, #0]
 8008142:	60c6      	str	r6, [r0, #12]
 8008144:	b13c      	cbz	r4, 8008156 <_Bfree+0x3a>
 8008146:	69eb      	ldr	r3, [r5, #28]
 8008148:	6862      	ldr	r2, [r4, #4]
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008150:	6021      	str	r1, [r4, #0]
 8008152:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008156:	bd70      	pop	{r4, r5, r6, pc}
 8008158:	0800a928 	.word	0x0800a928
 800815c:	0800a9a8 	.word	0x0800a9a8

08008160 <__multadd>:
 8008160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008164:	4607      	mov	r7, r0
 8008166:	460c      	mov	r4, r1
 8008168:	461e      	mov	r6, r3
 800816a:	2000      	movs	r0, #0
 800816c:	690d      	ldr	r5, [r1, #16]
 800816e:	f101 0c14 	add.w	ip, r1, #20
 8008172:	f8dc 3000 	ldr.w	r3, [ip]
 8008176:	3001      	adds	r0, #1
 8008178:	b299      	uxth	r1, r3
 800817a:	fb02 6101 	mla	r1, r2, r1, r6
 800817e:	0c1e      	lsrs	r6, r3, #16
 8008180:	0c0b      	lsrs	r3, r1, #16
 8008182:	fb02 3306 	mla	r3, r2, r6, r3
 8008186:	b289      	uxth	r1, r1
 8008188:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800818c:	4285      	cmp	r5, r0
 800818e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008192:	f84c 1b04 	str.w	r1, [ip], #4
 8008196:	dcec      	bgt.n	8008172 <__multadd+0x12>
 8008198:	b30e      	cbz	r6, 80081de <__multadd+0x7e>
 800819a:	68a3      	ldr	r3, [r4, #8]
 800819c:	42ab      	cmp	r3, r5
 800819e:	dc19      	bgt.n	80081d4 <__multadd+0x74>
 80081a0:	6861      	ldr	r1, [r4, #4]
 80081a2:	4638      	mov	r0, r7
 80081a4:	3101      	adds	r1, #1
 80081a6:	f7ff ff79 	bl	800809c <_Balloc>
 80081aa:	4680      	mov	r8, r0
 80081ac:	b928      	cbnz	r0, 80081ba <__multadd+0x5a>
 80081ae:	4602      	mov	r2, r0
 80081b0:	21ba      	movs	r1, #186	@ 0xba
 80081b2:	4b0c      	ldr	r3, [pc, #48]	@ (80081e4 <__multadd+0x84>)
 80081b4:	480c      	ldr	r0, [pc, #48]	@ (80081e8 <__multadd+0x88>)
 80081b6:	f001 fce5 	bl	8009b84 <__assert_func>
 80081ba:	6922      	ldr	r2, [r4, #16]
 80081bc:	f104 010c 	add.w	r1, r4, #12
 80081c0:	3202      	adds	r2, #2
 80081c2:	0092      	lsls	r2, r2, #2
 80081c4:	300c      	adds	r0, #12
 80081c6:	f001 fcc9 	bl	8009b5c <memcpy>
 80081ca:	4621      	mov	r1, r4
 80081cc:	4638      	mov	r0, r7
 80081ce:	f7ff ffa5 	bl	800811c <_Bfree>
 80081d2:	4644      	mov	r4, r8
 80081d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80081d8:	3501      	adds	r5, #1
 80081da:	615e      	str	r6, [r3, #20]
 80081dc:	6125      	str	r5, [r4, #16]
 80081de:	4620      	mov	r0, r4
 80081e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081e4:	0800a997 	.word	0x0800a997
 80081e8:	0800a9a8 	.word	0x0800a9a8

080081ec <__s2b>:
 80081ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081f0:	4615      	mov	r5, r2
 80081f2:	2209      	movs	r2, #9
 80081f4:	461f      	mov	r7, r3
 80081f6:	3308      	adds	r3, #8
 80081f8:	460c      	mov	r4, r1
 80081fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80081fe:	4606      	mov	r6, r0
 8008200:	2201      	movs	r2, #1
 8008202:	2100      	movs	r1, #0
 8008204:	429a      	cmp	r2, r3
 8008206:	db09      	blt.n	800821c <__s2b+0x30>
 8008208:	4630      	mov	r0, r6
 800820a:	f7ff ff47 	bl	800809c <_Balloc>
 800820e:	b940      	cbnz	r0, 8008222 <__s2b+0x36>
 8008210:	4602      	mov	r2, r0
 8008212:	21d3      	movs	r1, #211	@ 0xd3
 8008214:	4b18      	ldr	r3, [pc, #96]	@ (8008278 <__s2b+0x8c>)
 8008216:	4819      	ldr	r0, [pc, #100]	@ (800827c <__s2b+0x90>)
 8008218:	f001 fcb4 	bl	8009b84 <__assert_func>
 800821c:	0052      	lsls	r2, r2, #1
 800821e:	3101      	adds	r1, #1
 8008220:	e7f0      	b.n	8008204 <__s2b+0x18>
 8008222:	9b08      	ldr	r3, [sp, #32]
 8008224:	2d09      	cmp	r5, #9
 8008226:	6143      	str	r3, [r0, #20]
 8008228:	f04f 0301 	mov.w	r3, #1
 800822c:	6103      	str	r3, [r0, #16]
 800822e:	dd16      	ble.n	800825e <__s2b+0x72>
 8008230:	f104 0909 	add.w	r9, r4, #9
 8008234:	46c8      	mov	r8, r9
 8008236:	442c      	add	r4, r5
 8008238:	f818 3b01 	ldrb.w	r3, [r8], #1
 800823c:	4601      	mov	r1, r0
 800823e:	220a      	movs	r2, #10
 8008240:	4630      	mov	r0, r6
 8008242:	3b30      	subs	r3, #48	@ 0x30
 8008244:	f7ff ff8c 	bl	8008160 <__multadd>
 8008248:	45a0      	cmp	r8, r4
 800824a:	d1f5      	bne.n	8008238 <__s2b+0x4c>
 800824c:	f1a5 0408 	sub.w	r4, r5, #8
 8008250:	444c      	add	r4, r9
 8008252:	1b2d      	subs	r5, r5, r4
 8008254:	1963      	adds	r3, r4, r5
 8008256:	42bb      	cmp	r3, r7
 8008258:	db04      	blt.n	8008264 <__s2b+0x78>
 800825a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800825e:	2509      	movs	r5, #9
 8008260:	340a      	adds	r4, #10
 8008262:	e7f6      	b.n	8008252 <__s2b+0x66>
 8008264:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008268:	4601      	mov	r1, r0
 800826a:	220a      	movs	r2, #10
 800826c:	4630      	mov	r0, r6
 800826e:	3b30      	subs	r3, #48	@ 0x30
 8008270:	f7ff ff76 	bl	8008160 <__multadd>
 8008274:	e7ee      	b.n	8008254 <__s2b+0x68>
 8008276:	bf00      	nop
 8008278:	0800a997 	.word	0x0800a997
 800827c:	0800a9a8 	.word	0x0800a9a8

08008280 <__hi0bits>:
 8008280:	4603      	mov	r3, r0
 8008282:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008286:	bf3a      	itte	cc
 8008288:	0403      	lslcc	r3, r0, #16
 800828a:	2010      	movcc	r0, #16
 800828c:	2000      	movcs	r0, #0
 800828e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008292:	bf3c      	itt	cc
 8008294:	021b      	lslcc	r3, r3, #8
 8008296:	3008      	addcc	r0, #8
 8008298:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800829c:	bf3c      	itt	cc
 800829e:	011b      	lslcc	r3, r3, #4
 80082a0:	3004      	addcc	r0, #4
 80082a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082a6:	bf3c      	itt	cc
 80082a8:	009b      	lslcc	r3, r3, #2
 80082aa:	3002      	addcc	r0, #2
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	db05      	blt.n	80082bc <__hi0bits+0x3c>
 80082b0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80082b4:	f100 0001 	add.w	r0, r0, #1
 80082b8:	bf08      	it	eq
 80082ba:	2020      	moveq	r0, #32
 80082bc:	4770      	bx	lr

080082be <__lo0bits>:
 80082be:	6803      	ldr	r3, [r0, #0]
 80082c0:	4602      	mov	r2, r0
 80082c2:	f013 0007 	ands.w	r0, r3, #7
 80082c6:	d00b      	beq.n	80082e0 <__lo0bits+0x22>
 80082c8:	07d9      	lsls	r1, r3, #31
 80082ca:	d421      	bmi.n	8008310 <__lo0bits+0x52>
 80082cc:	0798      	lsls	r0, r3, #30
 80082ce:	bf49      	itett	mi
 80082d0:	085b      	lsrmi	r3, r3, #1
 80082d2:	089b      	lsrpl	r3, r3, #2
 80082d4:	2001      	movmi	r0, #1
 80082d6:	6013      	strmi	r3, [r2, #0]
 80082d8:	bf5c      	itt	pl
 80082da:	2002      	movpl	r0, #2
 80082dc:	6013      	strpl	r3, [r2, #0]
 80082de:	4770      	bx	lr
 80082e0:	b299      	uxth	r1, r3
 80082e2:	b909      	cbnz	r1, 80082e8 <__lo0bits+0x2a>
 80082e4:	2010      	movs	r0, #16
 80082e6:	0c1b      	lsrs	r3, r3, #16
 80082e8:	b2d9      	uxtb	r1, r3
 80082ea:	b909      	cbnz	r1, 80082f0 <__lo0bits+0x32>
 80082ec:	3008      	adds	r0, #8
 80082ee:	0a1b      	lsrs	r3, r3, #8
 80082f0:	0719      	lsls	r1, r3, #28
 80082f2:	bf04      	itt	eq
 80082f4:	091b      	lsreq	r3, r3, #4
 80082f6:	3004      	addeq	r0, #4
 80082f8:	0799      	lsls	r1, r3, #30
 80082fa:	bf04      	itt	eq
 80082fc:	089b      	lsreq	r3, r3, #2
 80082fe:	3002      	addeq	r0, #2
 8008300:	07d9      	lsls	r1, r3, #31
 8008302:	d403      	bmi.n	800830c <__lo0bits+0x4e>
 8008304:	085b      	lsrs	r3, r3, #1
 8008306:	f100 0001 	add.w	r0, r0, #1
 800830a:	d003      	beq.n	8008314 <__lo0bits+0x56>
 800830c:	6013      	str	r3, [r2, #0]
 800830e:	4770      	bx	lr
 8008310:	2000      	movs	r0, #0
 8008312:	4770      	bx	lr
 8008314:	2020      	movs	r0, #32
 8008316:	4770      	bx	lr

08008318 <__i2b>:
 8008318:	b510      	push	{r4, lr}
 800831a:	460c      	mov	r4, r1
 800831c:	2101      	movs	r1, #1
 800831e:	f7ff febd 	bl	800809c <_Balloc>
 8008322:	4602      	mov	r2, r0
 8008324:	b928      	cbnz	r0, 8008332 <__i2b+0x1a>
 8008326:	f240 1145 	movw	r1, #325	@ 0x145
 800832a:	4b04      	ldr	r3, [pc, #16]	@ (800833c <__i2b+0x24>)
 800832c:	4804      	ldr	r0, [pc, #16]	@ (8008340 <__i2b+0x28>)
 800832e:	f001 fc29 	bl	8009b84 <__assert_func>
 8008332:	2301      	movs	r3, #1
 8008334:	6144      	str	r4, [r0, #20]
 8008336:	6103      	str	r3, [r0, #16]
 8008338:	bd10      	pop	{r4, pc}
 800833a:	bf00      	nop
 800833c:	0800a997 	.word	0x0800a997
 8008340:	0800a9a8 	.word	0x0800a9a8

08008344 <__multiply>:
 8008344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008348:	4614      	mov	r4, r2
 800834a:	690a      	ldr	r2, [r1, #16]
 800834c:	6923      	ldr	r3, [r4, #16]
 800834e:	460f      	mov	r7, r1
 8008350:	429a      	cmp	r2, r3
 8008352:	bfa2      	ittt	ge
 8008354:	4623      	movge	r3, r4
 8008356:	460c      	movge	r4, r1
 8008358:	461f      	movge	r7, r3
 800835a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800835e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008362:	68a3      	ldr	r3, [r4, #8]
 8008364:	6861      	ldr	r1, [r4, #4]
 8008366:	eb0a 0609 	add.w	r6, sl, r9
 800836a:	42b3      	cmp	r3, r6
 800836c:	b085      	sub	sp, #20
 800836e:	bfb8      	it	lt
 8008370:	3101      	addlt	r1, #1
 8008372:	f7ff fe93 	bl	800809c <_Balloc>
 8008376:	b930      	cbnz	r0, 8008386 <__multiply+0x42>
 8008378:	4602      	mov	r2, r0
 800837a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800837e:	4b43      	ldr	r3, [pc, #268]	@ (800848c <__multiply+0x148>)
 8008380:	4843      	ldr	r0, [pc, #268]	@ (8008490 <__multiply+0x14c>)
 8008382:	f001 fbff 	bl	8009b84 <__assert_func>
 8008386:	f100 0514 	add.w	r5, r0, #20
 800838a:	462b      	mov	r3, r5
 800838c:	2200      	movs	r2, #0
 800838e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008392:	4543      	cmp	r3, r8
 8008394:	d321      	bcc.n	80083da <__multiply+0x96>
 8008396:	f107 0114 	add.w	r1, r7, #20
 800839a:	f104 0214 	add.w	r2, r4, #20
 800839e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80083a2:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80083a6:	9302      	str	r3, [sp, #8]
 80083a8:	1b13      	subs	r3, r2, r4
 80083aa:	3b15      	subs	r3, #21
 80083ac:	f023 0303 	bic.w	r3, r3, #3
 80083b0:	3304      	adds	r3, #4
 80083b2:	f104 0715 	add.w	r7, r4, #21
 80083b6:	42ba      	cmp	r2, r7
 80083b8:	bf38      	it	cc
 80083ba:	2304      	movcc	r3, #4
 80083bc:	9301      	str	r3, [sp, #4]
 80083be:	9b02      	ldr	r3, [sp, #8]
 80083c0:	9103      	str	r1, [sp, #12]
 80083c2:	428b      	cmp	r3, r1
 80083c4:	d80c      	bhi.n	80083e0 <__multiply+0x9c>
 80083c6:	2e00      	cmp	r6, #0
 80083c8:	dd03      	ble.n	80083d2 <__multiply+0x8e>
 80083ca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d05a      	beq.n	8008488 <__multiply+0x144>
 80083d2:	6106      	str	r6, [r0, #16]
 80083d4:	b005      	add	sp, #20
 80083d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083da:	f843 2b04 	str.w	r2, [r3], #4
 80083de:	e7d8      	b.n	8008392 <__multiply+0x4e>
 80083e0:	f8b1 a000 	ldrh.w	sl, [r1]
 80083e4:	f1ba 0f00 	cmp.w	sl, #0
 80083e8:	d023      	beq.n	8008432 <__multiply+0xee>
 80083ea:	46a9      	mov	r9, r5
 80083ec:	f04f 0c00 	mov.w	ip, #0
 80083f0:	f104 0e14 	add.w	lr, r4, #20
 80083f4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80083f8:	f8d9 3000 	ldr.w	r3, [r9]
 80083fc:	fa1f fb87 	uxth.w	fp, r7
 8008400:	b29b      	uxth	r3, r3
 8008402:	fb0a 330b 	mla	r3, sl, fp, r3
 8008406:	4463      	add	r3, ip
 8008408:	f8d9 c000 	ldr.w	ip, [r9]
 800840c:	0c3f      	lsrs	r7, r7, #16
 800840e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008412:	fb0a c707 	mla	r7, sl, r7, ip
 8008416:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800841a:	b29b      	uxth	r3, r3
 800841c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008420:	4572      	cmp	r2, lr
 8008422:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008426:	f849 3b04 	str.w	r3, [r9], #4
 800842a:	d8e3      	bhi.n	80083f4 <__multiply+0xb0>
 800842c:	9b01      	ldr	r3, [sp, #4]
 800842e:	f845 c003 	str.w	ip, [r5, r3]
 8008432:	9b03      	ldr	r3, [sp, #12]
 8008434:	3104      	adds	r1, #4
 8008436:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800843a:	f1b9 0f00 	cmp.w	r9, #0
 800843e:	d021      	beq.n	8008484 <__multiply+0x140>
 8008440:	46ae      	mov	lr, r5
 8008442:	f04f 0a00 	mov.w	sl, #0
 8008446:	682b      	ldr	r3, [r5, #0]
 8008448:	f104 0c14 	add.w	ip, r4, #20
 800844c:	f8bc b000 	ldrh.w	fp, [ip]
 8008450:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008454:	b29b      	uxth	r3, r3
 8008456:	fb09 770b 	mla	r7, r9, fp, r7
 800845a:	4457      	add	r7, sl
 800845c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008460:	f84e 3b04 	str.w	r3, [lr], #4
 8008464:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008468:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800846c:	f8be 3000 	ldrh.w	r3, [lr]
 8008470:	4562      	cmp	r2, ip
 8008472:	fb09 330a 	mla	r3, r9, sl, r3
 8008476:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800847a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800847e:	d8e5      	bhi.n	800844c <__multiply+0x108>
 8008480:	9f01      	ldr	r7, [sp, #4]
 8008482:	51eb      	str	r3, [r5, r7]
 8008484:	3504      	adds	r5, #4
 8008486:	e79a      	b.n	80083be <__multiply+0x7a>
 8008488:	3e01      	subs	r6, #1
 800848a:	e79c      	b.n	80083c6 <__multiply+0x82>
 800848c:	0800a997 	.word	0x0800a997
 8008490:	0800a9a8 	.word	0x0800a9a8

08008494 <__pow5mult>:
 8008494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008498:	4615      	mov	r5, r2
 800849a:	f012 0203 	ands.w	r2, r2, #3
 800849e:	4607      	mov	r7, r0
 80084a0:	460e      	mov	r6, r1
 80084a2:	d007      	beq.n	80084b4 <__pow5mult+0x20>
 80084a4:	4c25      	ldr	r4, [pc, #148]	@ (800853c <__pow5mult+0xa8>)
 80084a6:	3a01      	subs	r2, #1
 80084a8:	2300      	movs	r3, #0
 80084aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80084ae:	f7ff fe57 	bl	8008160 <__multadd>
 80084b2:	4606      	mov	r6, r0
 80084b4:	10ad      	asrs	r5, r5, #2
 80084b6:	d03d      	beq.n	8008534 <__pow5mult+0xa0>
 80084b8:	69fc      	ldr	r4, [r7, #28]
 80084ba:	b97c      	cbnz	r4, 80084dc <__pow5mult+0x48>
 80084bc:	2010      	movs	r0, #16
 80084be:	f7ff fd37 	bl	8007f30 <malloc>
 80084c2:	4602      	mov	r2, r0
 80084c4:	61f8      	str	r0, [r7, #28]
 80084c6:	b928      	cbnz	r0, 80084d4 <__pow5mult+0x40>
 80084c8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80084cc:	4b1c      	ldr	r3, [pc, #112]	@ (8008540 <__pow5mult+0xac>)
 80084ce:	481d      	ldr	r0, [pc, #116]	@ (8008544 <__pow5mult+0xb0>)
 80084d0:	f001 fb58 	bl	8009b84 <__assert_func>
 80084d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80084d8:	6004      	str	r4, [r0, #0]
 80084da:	60c4      	str	r4, [r0, #12]
 80084dc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80084e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80084e4:	b94c      	cbnz	r4, 80084fa <__pow5mult+0x66>
 80084e6:	f240 2171 	movw	r1, #625	@ 0x271
 80084ea:	4638      	mov	r0, r7
 80084ec:	f7ff ff14 	bl	8008318 <__i2b>
 80084f0:	2300      	movs	r3, #0
 80084f2:	4604      	mov	r4, r0
 80084f4:	f8c8 0008 	str.w	r0, [r8, #8]
 80084f8:	6003      	str	r3, [r0, #0]
 80084fa:	f04f 0900 	mov.w	r9, #0
 80084fe:	07eb      	lsls	r3, r5, #31
 8008500:	d50a      	bpl.n	8008518 <__pow5mult+0x84>
 8008502:	4631      	mov	r1, r6
 8008504:	4622      	mov	r2, r4
 8008506:	4638      	mov	r0, r7
 8008508:	f7ff ff1c 	bl	8008344 <__multiply>
 800850c:	4680      	mov	r8, r0
 800850e:	4631      	mov	r1, r6
 8008510:	4638      	mov	r0, r7
 8008512:	f7ff fe03 	bl	800811c <_Bfree>
 8008516:	4646      	mov	r6, r8
 8008518:	106d      	asrs	r5, r5, #1
 800851a:	d00b      	beq.n	8008534 <__pow5mult+0xa0>
 800851c:	6820      	ldr	r0, [r4, #0]
 800851e:	b938      	cbnz	r0, 8008530 <__pow5mult+0x9c>
 8008520:	4622      	mov	r2, r4
 8008522:	4621      	mov	r1, r4
 8008524:	4638      	mov	r0, r7
 8008526:	f7ff ff0d 	bl	8008344 <__multiply>
 800852a:	6020      	str	r0, [r4, #0]
 800852c:	f8c0 9000 	str.w	r9, [r0]
 8008530:	4604      	mov	r4, r0
 8008532:	e7e4      	b.n	80084fe <__pow5mult+0x6a>
 8008534:	4630      	mov	r0, r6
 8008536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800853a:	bf00      	nop
 800853c:	0800aa04 	.word	0x0800aa04
 8008540:	0800a928 	.word	0x0800a928
 8008544:	0800a9a8 	.word	0x0800a9a8

08008548 <__lshift>:
 8008548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800854c:	460c      	mov	r4, r1
 800854e:	4607      	mov	r7, r0
 8008550:	4691      	mov	r9, r2
 8008552:	6923      	ldr	r3, [r4, #16]
 8008554:	6849      	ldr	r1, [r1, #4]
 8008556:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800855a:	68a3      	ldr	r3, [r4, #8]
 800855c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008560:	f108 0601 	add.w	r6, r8, #1
 8008564:	42b3      	cmp	r3, r6
 8008566:	db0b      	blt.n	8008580 <__lshift+0x38>
 8008568:	4638      	mov	r0, r7
 800856a:	f7ff fd97 	bl	800809c <_Balloc>
 800856e:	4605      	mov	r5, r0
 8008570:	b948      	cbnz	r0, 8008586 <__lshift+0x3e>
 8008572:	4602      	mov	r2, r0
 8008574:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008578:	4b27      	ldr	r3, [pc, #156]	@ (8008618 <__lshift+0xd0>)
 800857a:	4828      	ldr	r0, [pc, #160]	@ (800861c <__lshift+0xd4>)
 800857c:	f001 fb02 	bl	8009b84 <__assert_func>
 8008580:	3101      	adds	r1, #1
 8008582:	005b      	lsls	r3, r3, #1
 8008584:	e7ee      	b.n	8008564 <__lshift+0x1c>
 8008586:	2300      	movs	r3, #0
 8008588:	f100 0114 	add.w	r1, r0, #20
 800858c:	f100 0210 	add.w	r2, r0, #16
 8008590:	4618      	mov	r0, r3
 8008592:	4553      	cmp	r3, sl
 8008594:	db33      	blt.n	80085fe <__lshift+0xb6>
 8008596:	6920      	ldr	r0, [r4, #16]
 8008598:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800859c:	f104 0314 	add.w	r3, r4, #20
 80085a0:	f019 091f 	ands.w	r9, r9, #31
 80085a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80085a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80085ac:	d02b      	beq.n	8008606 <__lshift+0xbe>
 80085ae:	468a      	mov	sl, r1
 80085b0:	2200      	movs	r2, #0
 80085b2:	f1c9 0e20 	rsb	lr, r9, #32
 80085b6:	6818      	ldr	r0, [r3, #0]
 80085b8:	fa00 f009 	lsl.w	r0, r0, r9
 80085bc:	4310      	orrs	r0, r2
 80085be:	f84a 0b04 	str.w	r0, [sl], #4
 80085c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80085c6:	459c      	cmp	ip, r3
 80085c8:	fa22 f20e 	lsr.w	r2, r2, lr
 80085cc:	d8f3      	bhi.n	80085b6 <__lshift+0x6e>
 80085ce:	ebac 0304 	sub.w	r3, ip, r4
 80085d2:	3b15      	subs	r3, #21
 80085d4:	f023 0303 	bic.w	r3, r3, #3
 80085d8:	3304      	adds	r3, #4
 80085da:	f104 0015 	add.w	r0, r4, #21
 80085de:	4584      	cmp	ip, r0
 80085e0:	bf38      	it	cc
 80085e2:	2304      	movcc	r3, #4
 80085e4:	50ca      	str	r2, [r1, r3]
 80085e6:	b10a      	cbz	r2, 80085ec <__lshift+0xa4>
 80085e8:	f108 0602 	add.w	r6, r8, #2
 80085ec:	3e01      	subs	r6, #1
 80085ee:	4638      	mov	r0, r7
 80085f0:	4621      	mov	r1, r4
 80085f2:	612e      	str	r6, [r5, #16]
 80085f4:	f7ff fd92 	bl	800811c <_Bfree>
 80085f8:	4628      	mov	r0, r5
 80085fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8008602:	3301      	adds	r3, #1
 8008604:	e7c5      	b.n	8008592 <__lshift+0x4a>
 8008606:	3904      	subs	r1, #4
 8008608:	f853 2b04 	ldr.w	r2, [r3], #4
 800860c:	459c      	cmp	ip, r3
 800860e:	f841 2f04 	str.w	r2, [r1, #4]!
 8008612:	d8f9      	bhi.n	8008608 <__lshift+0xc0>
 8008614:	e7ea      	b.n	80085ec <__lshift+0xa4>
 8008616:	bf00      	nop
 8008618:	0800a997 	.word	0x0800a997
 800861c:	0800a9a8 	.word	0x0800a9a8

08008620 <__mcmp>:
 8008620:	4603      	mov	r3, r0
 8008622:	690a      	ldr	r2, [r1, #16]
 8008624:	6900      	ldr	r0, [r0, #16]
 8008626:	b530      	push	{r4, r5, lr}
 8008628:	1a80      	subs	r0, r0, r2
 800862a:	d10e      	bne.n	800864a <__mcmp+0x2a>
 800862c:	3314      	adds	r3, #20
 800862e:	3114      	adds	r1, #20
 8008630:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008634:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008638:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800863c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008640:	4295      	cmp	r5, r2
 8008642:	d003      	beq.n	800864c <__mcmp+0x2c>
 8008644:	d205      	bcs.n	8008652 <__mcmp+0x32>
 8008646:	f04f 30ff 	mov.w	r0, #4294967295
 800864a:	bd30      	pop	{r4, r5, pc}
 800864c:	42a3      	cmp	r3, r4
 800864e:	d3f3      	bcc.n	8008638 <__mcmp+0x18>
 8008650:	e7fb      	b.n	800864a <__mcmp+0x2a>
 8008652:	2001      	movs	r0, #1
 8008654:	e7f9      	b.n	800864a <__mcmp+0x2a>
	...

08008658 <__mdiff>:
 8008658:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800865c:	4689      	mov	r9, r1
 800865e:	4606      	mov	r6, r0
 8008660:	4611      	mov	r1, r2
 8008662:	4648      	mov	r0, r9
 8008664:	4614      	mov	r4, r2
 8008666:	f7ff ffdb 	bl	8008620 <__mcmp>
 800866a:	1e05      	subs	r5, r0, #0
 800866c:	d112      	bne.n	8008694 <__mdiff+0x3c>
 800866e:	4629      	mov	r1, r5
 8008670:	4630      	mov	r0, r6
 8008672:	f7ff fd13 	bl	800809c <_Balloc>
 8008676:	4602      	mov	r2, r0
 8008678:	b928      	cbnz	r0, 8008686 <__mdiff+0x2e>
 800867a:	f240 2137 	movw	r1, #567	@ 0x237
 800867e:	4b3e      	ldr	r3, [pc, #248]	@ (8008778 <__mdiff+0x120>)
 8008680:	483e      	ldr	r0, [pc, #248]	@ (800877c <__mdiff+0x124>)
 8008682:	f001 fa7f 	bl	8009b84 <__assert_func>
 8008686:	2301      	movs	r3, #1
 8008688:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800868c:	4610      	mov	r0, r2
 800868e:	b003      	add	sp, #12
 8008690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008694:	bfbc      	itt	lt
 8008696:	464b      	movlt	r3, r9
 8008698:	46a1      	movlt	r9, r4
 800869a:	4630      	mov	r0, r6
 800869c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80086a0:	bfba      	itte	lt
 80086a2:	461c      	movlt	r4, r3
 80086a4:	2501      	movlt	r5, #1
 80086a6:	2500      	movge	r5, #0
 80086a8:	f7ff fcf8 	bl	800809c <_Balloc>
 80086ac:	4602      	mov	r2, r0
 80086ae:	b918      	cbnz	r0, 80086b8 <__mdiff+0x60>
 80086b0:	f240 2145 	movw	r1, #581	@ 0x245
 80086b4:	4b30      	ldr	r3, [pc, #192]	@ (8008778 <__mdiff+0x120>)
 80086b6:	e7e3      	b.n	8008680 <__mdiff+0x28>
 80086b8:	f100 0b14 	add.w	fp, r0, #20
 80086bc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80086c0:	f109 0310 	add.w	r3, r9, #16
 80086c4:	60c5      	str	r5, [r0, #12]
 80086c6:	f04f 0c00 	mov.w	ip, #0
 80086ca:	f109 0514 	add.w	r5, r9, #20
 80086ce:	46d9      	mov	r9, fp
 80086d0:	6926      	ldr	r6, [r4, #16]
 80086d2:	f104 0e14 	add.w	lr, r4, #20
 80086d6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80086da:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80086de:	9301      	str	r3, [sp, #4]
 80086e0:	9b01      	ldr	r3, [sp, #4]
 80086e2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80086e6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80086ea:	b281      	uxth	r1, r0
 80086ec:	9301      	str	r3, [sp, #4]
 80086ee:	fa1f f38a 	uxth.w	r3, sl
 80086f2:	1a5b      	subs	r3, r3, r1
 80086f4:	0c00      	lsrs	r0, r0, #16
 80086f6:	4463      	add	r3, ip
 80086f8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80086fc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008700:	b29b      	uxth	r3, r3
 8008702:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008706:	4576      	cmp	r6, lr
 8008708:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800870c:	f849 3b04 	str.w	r3, [r9], #4
 8008710:	d8e6      	bhi.n	80086e0 <__mdiff+0x88>
 8008712:	1b33      	subs	r3, r6, r4
 8008714:	3b15      	subs	r3, #21
 8008716:	f023 0303 	bic.w	r3, r3, #3
 800871a:	3415      	adds	r4, #21
 800871c:	3304      	adds	r3, #4
 800871e:	42a6      	cmp	r6, r4
 8008720:	bf38      	it	cc
 8008722:	2304      	movcc	r3, #4
 8008724:	441d      	add	r5, r3
 8008726:	445b      	add	r3, fp
 8008728:	461e      	mov	r6, r3
 800872a:	462c      	mov	r4, r5
 800872c:	4544      	cmp	r4, r8
 800872e:	d30e      	bcc.n	800874e <__mdiff+0xf6>
 8008730:	f108 0103 	add.w	r1, r8, #3
 8008734:	1b49      	subs	r1, r1, r5
 8008736:	f021 0103 	bic.w	r1, r1, #3
 800873a:	3d03      	subs	r5, #3
 800873c:	45a8      	cmp	r8, r5
 800873e:	bf38      	it	cc
 8008740:	2100      	movcc	r1, #0
 8008742:	440b      	add	r3, r1
 8008744:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008748:	b199      	cbz	r1, 8008772 <__mdiff+0x11a>
 800874a:	6117      	str	r7, [r2, #16]
 800874c:	e79e      	b.n	800868c <__mdiff+0x34>
 800874e:	46e6      	mov	lr, ip
 8008750:	f854 1b04 	ldr.w	r1, [r4], #4
 8008754:	fa1f fc81 	uxth.w	ip, r1
 8008758:	44f4      	add	ip, lr
 800875a:	0c08      	lsrs	r0, r1, #16
 800875c:	4471      	add	r1, lr
 800875e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008762:	b289      	uxth	r1, r1
 8008764:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008768:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800876c:	f846 1b04 	str.w	r1, [r6], #4
 8008770:	e7dc      	b.n	800872c <__mdiff+0xd4>
 8008772:	3f01      	subs	r7, #1
 8008774:	e7e6      	b.n	8008744 <__mdiff+0xec>
 8008776:	bf00      	nop
 8008778:	0800a997 	.word	0x0800a997
 800877c:	0800a9a8 	.word	0x0800a9a8

08008780 <__ulp>:
 8008780:	4b0e      	ldr	r3, [pc, #56]	@ (80087bc <__ulp+0x3c>)
 8008782:	400b      	ands	r3, r1
 8008784:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008788:	2b00      	cmp	r3, #0
 800878a:	dc08      	bgt.n	800879e <__ulp+0x1e>
 800878c:	425b      	negs	r3, r3
 800878e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008792:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008796:	da04      	bge.n	80087a2 <__ulp+0x22>
 8008798:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800879c:	4113      	asrs	r3, r2
 800879e:	2200      	movs	r2, #0
 80087a0:	e008      	b.n	80087b4 <__ulp+0x34>
 80087a2:	f1a2 0314 	sub.w	r3, r2, #20
 80087a6:	2b1e      	cmp	r3, #30
 80087a8:	bfd6      	itet	le
 80087aa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80087ae:	2201      	movgt	r2, #1
 80087b0:	40da      	lsrle	r2, r3
 80087b2:	2300      	movs	r3, #0
 80087b4:	4619      	mov	r1, r3
 80087b6:	4610      	mov	r0, r2
 80087b8:	4770      	bx	lr
 80087ba:	bf00      	nop
 80087bc:	7ff00000 	.word	0x7ff00000

080087c0 <__b2d>:
 80087c0:	6902      	ldr	r2, [r0, #16]
 80087c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087c4:	f100 0614 	add.w	r6, r0, #20
 80087c8:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 80087cc:	f852 4c04 	ldr.w	r4, [r2, #-4]
 80087d0:	4f1e      	ldr	r7, [pc, #120]	@ (800884c <__b2d+0x8c>)
 80087d2:	4620      	mov	r0, r4
 80087d4:	f7ff fd54 	bl	8008280 <__hi0bits>
 80087d8:	4603      	mov	r3, r0
 80087da:	f1c0 0020 	rsb	r0, r0, #32
 80087de:	2b0a      	cmp	r3, #10
 80087e0:	f1a2 0504 	sub.w	r5, r2, #4
 80087e4:	6008      	str	r0, [r1, #0]
 80087e6:	dc12      	bgt.n	800880e <__b2d+0x4e>
 80087e8:	42ae      	cmp	r6, r5
 80087ea:	bf2c      	ite	cs
 80087ec:	2200      	movcs	r2, #0
 80087ee:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80087f2:	f1c3 0c0b 	rsb	ip, r3, #11
 80087f6:	3315      	adds	r3, #21
 80087f8:	fa24 fe0c 	lsr.w	lr, r4, ip
 80087fc:	fa04 f303 	lsl.w	r3, r4, r3
 8008800:	fa22 f20c 	lsr.w	r2, r2, ip
 8008804:	ea4e 0107 	orr.w	r1, lr, r7
 8008808:	431a      	orrs	r2, r3
 800880a:	4610      	mov	r0, r2
 800880c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800880e:	42ae      	cmp	r6, r5
 8008810:	bf36      	itet	cc
 8008812:	f1a2 0508 	subcc.w	r5, r2, #8
 8008816:	2200      	movcs	r2, #0
 8008818:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800881c:	3b0b      	subs	r3, #11
 800881e:	d012      	beq.n	8008846 <__b2d+0x86>
 8008820:	f1c3 0720 	rsb	r7, r3, #32
 8008824:	fa22 f107 	lsr.w	r1, r2, r7
 8008828:	409c      	lsls	r4, r3
 800882a:	430c      	orrs	r4, r1
 800882c:	42b5      	cmp	r5, r6
 800882e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8008832:	bf94      	ite	ls
 8008834:	2400      	movls	r4, #0
 8008836:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800883a:	409a      	lsls	r2, r3
 800883c:	40fc      	lsrs	r4, r7
 800883e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8008842:	4322      	orrs	r2, r4
 8008844:	e7e1      	b.n	800880a <__b2d+0x4a>
 8008846:	ea44 0107 	orr.w	r1, r4, r7
 800884a:	e7de      	b.n	800880a <__b2d+0x4a>
 800884c:	3ff00000 	.word	0x3ff00000

08008850 <__d2b>:
 8008850:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008854:	2101      	movs	r1, #1
 8008856:	4690      	mov	r8, r2
 8008858:	4699      	mov	r9, r3
 800885a:	9e08      	ldr	r6, [sp, #32]
 800885c:	f7ff fc1e 	bl	800809c <_Balloc>
 8008860:	4604      	mov	r4, r0
 8008862:	b930      	cbnz	r0, 8008872 <__d2b+0x22>
 8008864:	4602      	mov	r2, r0
 8008866:	f240 310f 	movw	r1, #783	@ 0x30f
 800886a:	4b23      	ldr	r3, [pc, #140]	@ (80088f8 <__d2b+0xa8>)
 800886c:	4823      	ldr	r0, [pc, #140]	@ (80088fc <__d2b+0xac>)
 800886e:	f001 f989 	bl	8009b84 <__assert_func>
 8008872:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008876:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800887a:	b10d      	cbz	r5, 8008880 <__d2b+0x30>
 800887c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008880:	9301      	str	r3, [sp, #4]
 8008882:	f1b8 0300 	subs.w	r3, r8, #0
 8008886:	d024      	beq.n	80088d2 <__d2b+0x82>
 8008888:	4668      	mov	r0, sp
 800888a:	9300      	str	r3, [sp, #0]
 800888c:	f7ff fd17 	bl	80082be <__lo0bits>
 8008890:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008894:	b1d8      	cbz	r0, 80088ce <__d2b+0x7e>
 8008896:	f1c0 0320 	rsb	r3, r0, #32
 800889a:	fa02 f303 	lsl.w	r3, r2, r3
 800889e:	430b      	orrs	r3, r1
 80088a0:	40c2      	lsrs	r2, r0
 80088a2:	6163      	str	r3, [r4, #20]
 80088a4:	9201      	str	r2, [sp, #4]
 80088a6:	9b01      	ldr	r3, [sp, #4]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	bf0c      	ite	eq
 80088ac:	2201      	moveq	r2, #1
 80088ae:	2202      	movne	r2, #2
 80088b0:	61a3      	str	r3, [r4, #24]
 80088b2:	6122      	str	r2, [r4, #16]
 80088b4:	b1ad      	cbz	r5, 80088e2 <__d2b+0x92>
 80088b6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80088ba:	4405      	add	r5, r0
 80088bc:	6035      	str	r5, [r6, #0]
 80088be:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80088c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088c4:	6018      	str	r0, [r3, #0]
 80088c6:	4620      	mov	r0, r4
 80088c8:	b002      	add	sp, #8
 80088ca:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80088ce:	6161      	str	r1, [r4, #20]
 80088d0:	e7e9      	b.n	80088a6 <__d2b+0x56>
 80088d2:	a801      	add	r0, sp, #4
 80088d4:	f7ff fcf3 	bl	80082be <__lo0bits>
 80088d8:	9b01      	ldr	r3, [sp, #4]
 80088da:	2201      	movs	r2, #1
 80088dc:	6163      	str	r3, [r4, #20]
 80088de:	3020      	adds	r0, #32
 80088e0:	e7e7      	b.n	80088b2 <__d2b+0x62>
 80088e2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80088e6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80088ea:	6030      	str	r0, [r6, #0]
 80088ec:	6918      	ldr	r0, [r3, #16]
 80088ee:	f7ff fcc7 	bl	8008280 <__hi0bits>
 80088f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80088f6:	e7e4      	b.n	80088c2 <__d2b+0x72>
 80088f8:	0800a997 	.word	0x0800a997
 80088fc:	0800a9a8 	.word	0x0800a9a8

08008900 <__ratio>:
 8008900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008904:	b085      	sub	sp, #20
 8008906:	e9cd 1000 	strd	r1, r0, [sp]
 800890a:	a902      	add	r1, sp, #8
 800890c:	f7ff ff58 	bl	80087c0 <__b2d>
 8008910:	468b      	mov	fp, r1
 8008912:	4606      	mov	r6, r0
 8008914:	460f      	mov	r7, r1
 8008916:	9800      	ldr	r0, [sp, #0]
 8008918:	a903      	add	r1, sp, #12
 800891a:	f7ff ff51 	bl	80087c0 <__b2d>
 800891e:	460d      	mov	r5, r1
 8008920:	9b01      	ldr	r3, [sp, #4]
 8008922:	4689      	mov	r9, r1
 8008924:	6919      	ldr	r1, [r3, #16]
 8008926:	9b00      	ldr	r3, [sp, #0]
 8008928:	4604      	mov	r4, r0
 800892a:	691b      	ldr	r3, [r3, #16]
 800892c:	4630      	mov	r0, r6
 800892e:	1ac9      	subs	r1, r1, r3
 8008930:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008934:	1a9b      	subs	r3, r3, r2
 8008936:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800893a:	2b00      	cmp	r3, #0
 800893c:	bfcd      	iteet	gt
 800893e:	463a      	movgt	r2, r7
 8008940:	462a      	movle	r2, r5
 8008942:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008946:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800894a:	bfd8      	it	le
 800894c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008950:	464b      	mov	r3, r9
 8008952:	4622      	mov	r2, r4
 8008954:	4659      	mov	r1, fp
 8008956:	f7f7 fee9 	bl	800072c <__aeabi_ddiv>
 800895a:	b005      	add	sp, #20
 800895c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008960 <__copybits>:
 8008960:	3901      	subs	r1, #1
 8008962:	b570      	push	{r4, r5, r6, lr}
 8008964:	1149      	asrs	r1, r1, #5
 8008966:	6914      	ldr	r4, [r2, #16]
 8008968:	3101      	adds	r1, #1
 800896a:	f102 0314 	add.w	r3, r2, #20
 800896e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008972:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008976:	1f05      	subs	r5, r0, #4
 8008978:	42a3      	cmp	r3, r4
 800897a:	d30c      	bcc.n	8008996 <__copybits+0x36>
 800897c:	1aa3      	subs	r3, r4, r2
 800897e:	3b11      	subs	r3, #17
 8008980:	f023 0303 	bic.w	r3, r3, #3
 8008984:	3211      	adds	r2, #17
 8008986:	42a2      	cmp	r2, r4
 8008988:	bf88      	it	hi
 800898a:	2300      	movhi	r3, #0
 800898c:	4418      	add	r0, r3
 800898e:	2300      	movs	r3, #0
 8008990:	4288      	cmp	r0, r1
 8008992:	d305      	bcc.n	80089a0 <__copybits+0x40>
 8008994:	bd70      	pop	{r4, r5, r6, pc}
 8008996:	f853 6b04 	ldr.w	r6, [r3], #4
 800899a:	f845 6f04 	str.w	r6, [r5, #4]!
 800899e:	e7eb      	b.n	8008978 <__copybits+0x18>
 80089a0:	f840 3b04 	str.w	r3, [r0], #4
 80089a4:	e7f4      	b.n	8008990 <__copybits+0x30>

080089a6 <__any_on>:
 80089a6:	f100 0214 	add.w	r2, r0, #20
 80089aa:	6900      	ldr	r0, [r0, #16]
 80089ac:	114b      	asrs	r3, r1, #5
 80089ae:	4298      	cmp	r0, r3
 80089b0:	b510      	push	{r4, lr}
 80089b2:	db11      	blt.n	80089d8 <__any_on+0x32>
 80089b4:	dd0a      	ble.n	80089cc <__any_on+0x26>
 80089b6:	f011 011f 	ands.w	r1, r1, #31
 80089ba:	d007      	beq.n	80089cc <__any_on+0x26>
 80089bc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80089c0:	fa24 f001 	lsr.w	r0, r4, r1
 80089c4:	fa00 f101 	lsl.w	r1, r0, r1
 80089c8:	428c      	cmp	r4, r1
 80089ca:	d10b      	bne.n	80089e4 <__any_on+0x3e>
 80089cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d803      	bhi.n	80089dc <__any_on+0x36>
 80089d4:	2000      	movs	r0, #0
 80089d6:	bd10      	pop	{r4, pc}
 80089d8:	4603      	mov	r3, r0
 80089da:	e7f7      	b.n	80089cc <__any_on+0x26>
 80089dc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80089e0:	2900      	cmp	r1, #0
 80089e2:	d0f5      	beq.n	80089d0 <__any_on+0x2a>
 80089e4:	2001      	movs	r0, #1
 80089e6:	e7f6      	b.n	80089d6 <__any_on+0x30>

080089e8 <sulp>:
 80089e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089ec:	460f      	mov	r7, r1
 80089ee:	4690      	mov	r8, r2
 80089f0:	f7ff fec6 	bl	8008780 <__ulp>
 80089f4:	4604      	mov	r4, r0
 80089f6:	460d      	mov	r5, r1
 80089f8:	f1b8 0f00 	cmp.w	r8, #0
 80089fc:	d011      	beq.n	8008a22 <sulp+0x3a>
 80089fe:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008a02:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	dd0b      	ble.n	8008a22 <sulp+0x3a>
 8008a0a:	2400      	movs	r4, #0
 8008a0c:	051b      	lsls	r3, r3, #20
 8008a0e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008a12:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008a16:	4622      	mov	r2, r4
 8008a18:	462b      	mov	r3, r5
 8008a1a:	f7f7 fd5d 	bl	80004d8 <__aeabi_dmul>
 8008a1e:	4604      	mov	r4, r0
 8008a20:	460d      	mov	r5, r1
 8008a22:	4620      	mov	r0, r4
 8008a24:	4629      	mov	r1, r5
 8008a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a2a:	0000      	movs	r0, r0
 8008a2c:	0000      	movs	r0, r0
	...

08008a30 <_strtod_l>:
 8008a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a34:	b09f      	sub	sp, #124	@ 0x7c
 8008a36:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008a38:	2200      	movs	r2, #0
 8008a3a:	460c      	mov	r4, r1
 8008a3c:	921a      	str	r2, [sp, #104]	@ 0x68
 8008a3e:	f04f 0a00 	mov.w	sl, #0
 8008a42:	f04f 0b00 	mov.w	fp, #0
 8008a46:	460a      	mov	r2, r1
 8008a48:	9005      	str	r0, [sp, #20]
 8008a4a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008a4c:	7811      	ldrb	r1, [r2, #0]
 8008a4e:	292b      	cmp	r1, #43	@ 0x2b
 8008a50:	d048      	beq.n	8008ae4 <_strtod_l+0xb4>
 8008a52:	d836      	bhi.n	8008ac2 <_strtod_l+0x92>
 8008a54:	290d      	cmp	r1, #13
 8008a56:	d830      	bhi.n	8008aba <_strtod_l+0x8a>
 8008a58:	2908      	cmp	r1, #8
 8008a5a:	d830      	bhi.n	8008abe <_strtod_l+0x8e>
 8008a5c:	2900      	cmp	r1, #0
 8008a5e:	d039      	beq.n	8008ad4 <_strtod_l+0xa4>
 8008a60:	2200      	movs	r2, #0
 8008a62:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008a64:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008a66:	782a      	ldrb	r2, [r5, #0]
 8008a68:	2a30      	cmp	r2, #48	@ 0x30
 8008a6a:	f040 80b1 	bne.w	8008bd0 <_strtod_l+0x1a0>
 8008a6e:	786a      	ldrb	r2, [r5, #1]
 8008a70:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008a74:	2a58      	cmp	r2, #88	@ 0x58
 8008a76:	d16c      	bne.n	8008b52 <_strtod_l+0x122>
 8008a78:	9302      	str	r3, [sp, #8]
 8008a7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a7c:	4a8e      	ldr	r2, [pc, #568]	@ (8008cb8 <_strtod_l+0x288>)
 8008a7e:	9301      	str	r3, [sp, #4]
 8008a80:	ab1a      	add	r3, sp, #104	@ 0x68
 8008a82:	9300      	str	r3, [sp, #0]
 8008a84:	9805      	ldr	r0, [sp, #20]
 8008a86:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008a88:	a919      	add	r1, sp, #100	@ 0x64
 8008a8a:	f001 f915 	bl	8009cb8 <__gethex>
 8008a8e:	f010 060f 	ands.w	r6, r0, #15
 8008a92:	4604      	mov	r4, r0
 8008a94:	d005      	beq.n	8008aa2 <_strtod_l+0x72>
 8008a96:	2e06      	cmp	r6, #6
 8008a98:	d126      	bne.n	8008ae8 <_strtod_l+0xb8>
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	3501      	adds	r5, #1
 8008a9e:	9519      	str	r5, [sp, #100]	@ 0x64
 8008aa0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008aa2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	f040 8584 	bne.w	80095b2 <_strtod_l+0xb82>
 8008aaa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008aac:	b1bb      	cbz	r3, 8008ade <_strtod_l+0xae>
 8008aae:	4650      	mov	r0, sl
 8008ab0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8008ab4:	b01f      	add	sp, #124	@ 0x7c
 8008ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aba:	2920      	cmp	r1, #32
 8008abc:	d1d0      	bne.n	8008a60 <_strtod_l+0x30>
 8008abe:	3201      	adds	r2, #1
 8008ac0:	e7c3      	b.n	8008a4a <_strtod_l+0x1a>
 8008ac2:	292d      	cmp	r1, #45	@ 0x2d
 8008ac4:	d1cc      	bne.n	8008a60 <_strtod_l+0x30>
 8008ac6:	2101      	movs	r1, #1
 8008ac8:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008aca:	1c51      	adds	r1, r2, #1
 8008acc:	9119      	str	r1, [sp, #100]	@ 0x64
 8008ace:	7852      	ldrb	r2, [r2, #1]
 8008ad0:	2a00      	cmp	r2, #0
 8008ad2:	d1c7      	bne.n	8008a64 <_strtod_l+0x34>
 8008ad4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008ad6:	9419      	str	r4, [sp, #100]	@ 0x64
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	f040 8568 	bne.w	80095ae <_strtod_l+0xb7e>
 8008ade:	4650      	mov	r0, sl
 8008ae0:	4659      	mov	r1, fp
 8008ae2:	e7e7      	b.n	8008ab4 <_strtod_l+0x84>
 8008ae4:	2100      	movs	r1, #0
 8008ae6:	e7ef      	b.n	8008ac8 <_strtod_l+0x98>
 8008ae8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008aea:	b13a      	cbz	r2, 8008afc <_strtod_l+0xcc>
 8008aec:	2135      	movs	r1, #53	@ 0x35
 8008aee:	a81c      	add	r0, sp, #112	@ 0x70
 8008af0:	f7ff ff36 	bl	8008960 <__copybits>
 8008af4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008af6:	9805      	ldr	r0, [sp, #20]
 8008af8:	f7ff fb10 	bl	800811c <_Bfree>
 8008afc:	3e01      	subs	r6, #1
 8008afe:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008b00:	2e04      	cmp	r6, #4
 8008b02:	d806      	bhi.n	8008b12 <_strtod_l+0xe2>
 8008b04:	e8df f006 	tbb	[pc, r6]
 8008b08:	201d0314 	.word	0x201d0314
 8008b0c:	14          	.byte	0x14
 8008b0d:	00          	.byte	0x00
 8008b0e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008b12:	05e1      	lsls	r1, r4, #23
 8008b14:	bf48      	it	mi
 8008b16:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008b1a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008b1e:	0d1b      	lsrs	r3, r3, #20
 8008b20:	051b      	lsls	r3, r3, #20
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d1bd      	bne.n	8008aa2 <_strtod_l+0x72>
 8008b26:	f7fe fb2b 	bl	8007180 <__errno>
 8008b2a:	2322      	movs	r3, #34	@ 0x22
 8008b2c:	6003      	str	r3, [r0, #0]
 8008b2e:	e7b8      	b.n	8008aa2 <_strtod_l+0x72>
 8008b30:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008b34:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008b38:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008b3c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008b40:	e7e7      	b.n	8008b12 <_strtod_l+0xe2>
 8008b42:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8008cbc <_strtod_l+0x28c>
 8008b46:	e7e4      	b.n	8008b12 <_strtod_l+0xe2>
 8008b48:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008b4c:	f04f 3aff 	mov.w	sl, #4294967295
 8008b50:	e7df      	b.n	8008b12 <_strtod_l+0xe2>
 8008b52:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b54:	1c5a      	adds	r2, r3, #1
 8008b56:	9219      	str	r2, [sp, #100]	@ 0x64
 8008b58:	785b      	ldrb	r3, [r3, #1]
 8008b5a:	2b30      	cmp	r3, #48	@ 0x30
 8008b5c:	d0f9      	beq.n	8008b52 <_strtod_l+0x122>
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d09f      	beq.n	8008aa2 <_strtod_l+0x72>
 8008b62:	2301      	movs	r3, #1
 8008b64:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b66:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b68:	220a      	movs	r2, #10
 8008b6a:	930c      	str	r3, [sp, #48]	@ 0x30
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	461f      	mov	r7, r3
 8008b70:	9308      	str	r3, [sp, #32]
 8008b72:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b74:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008b76:	7805      	ldrb	r5, [r0, #0]
 8008b78:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008b7c:	b2d9      	uxtb	r1, r3
 8008b7e:	2909      	cmp	r1, #9
 8008b80:	d928      	bls.n	8008bd4 <_strtod_l+0x1a4>
 8008b82:	2201      	movs	r2, #1
 8008b84:	494e      	ldr	r1, [pc, #312]	@ (8008cc0 <_strtod_l+0x290>)
 8008b86:	f000 ffc7 	bl	8009b18 <strncmp>
 8008b8a:	2800      	cmp	r0, #0
 8008b8c:	d032      	beq.n	8008bf4 <_strtod_l+0x1c4>
 8008b8e:	2000      	movs	r0, #0
 8008b90:	462a      	mov	r2, r5
 8008b92:	4681      	mov	r9, r0
 8008b94:	463d      	mov	r5, r7
 8008b96:	4603      	mov	r3, r0
 8008b98:	2a65      	cmp	r2, #101	@ 0x65
 8008b9a:	d001      	beq.n	8008ba0 <_strtod_l+0x170>
 8008b9c:	2a45      	cmp	r2, #69	@ 0x45
 8008b9e:	d114      	bne.n	8008bca <_strtod_l+0x19a>
 8008ba0:	b91d      	cbnz	r5, 8008baa <_strtod_l+0x17a>
 8008ba2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ba4:	4302      	orrs	r2, r0
 8008ba6:	d095      	beq.n	8008ad4 <_strtod_l+0xa4>
 8008ba8:	2500      	movs	r5, #0
 8008baa:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008bac:	1c62      	adds	r2, r4, #1
 8008bae:	9219      	str	r2, [sp, #100]	@ 0x64
 8008bb0:	7862      	ldrb	r2, [r4, #1]
 8008bb2:	2a2b      	cmp	r2, #43	@ 0x2b
 8008bb4:	d077      	beq.n	8008ca6 <_strtod_l+0x276>
 8008bb6:	2a2d      	cmp	r2, #45	@ 0x2d
 8008bb8:	d07b      	beq.n	8008cb2 <_strtod_l+0x282>
 8008bba:	f04f 0c00 	mov.w	ip, #0
 8008bbe:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008bc2:	2909      	cmp	r1, #9
 8008bc4:	f240 8082 	bls.w	8008ccc <_strtod_l+0x29c>
 8008bc8:	9419      	str	r4, [sp, #100]	@ 0x64
 8008bca:	f04f 0800 	mov.w	r8, #0
 8008bce:	e0a2      	b.n	8008d16 <_strtod_l+0x2e6>
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	e7c7      	b.n	8008b64 <_strtod_l+0x134>
 8008bd4:	2f08      	cmp	r7, #8
 8008bd6:	bfd5      	itete	le
 8008bd8:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008bda:	9908      	ldrgt	r1, [sp, #32]
 8008bdc:	fb02 3301 	mlale	r3, r2, r1, r3
 8008be0:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008be4:	f100 0001 	add.w	r0, r0, #1
 8008be8:	bfd4      	ite	le
 8008bea:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008bec:	9308      	strgt	r3, [sp, #32]
 8008bee:	3701      	adds	r7, #1
 8008bf0:	9019      	str	r0, [sp, #100]	@ 0x64
 8008bf2:	e7bf      	b.n	8008b74 <_strtod_l+0x144>
 8008bf4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008bf6:	1c5a      	adds	r2, r3, #1
 8008bf8:	9219      	str	r2, [sp, #100]	@ 0x64
 8008bfa:	785a      	ldrb	r2, [r3, #1]
 8008bfc:	b37f      	cbz	r7, 8008c5e <_strtod_l+0x22e>
 8008bfe:	4681      	mov	r9, r0
 8008c00:	463d      	mov	r5, r7
 8008c02:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008c06:	2b09      	cmp	r3, #9
 8008c08:	d912      	bls.n	8008c30 <_strtod_l+0x200>
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e7c4      	b.n	8008b98 <_strtod_l+0x168>
 8008c0e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c10:	3001      	adds	r0, #1
 8008c12:	1c5a      	adds	r2, r3, #1
 8008c14:	9219      	str	r2, [sp, #100]	@ 0x64
 8008c16:	785a      	ldrb	r2, [r3, #1]
 8008c18:	2a30      	cmp	r2, #48	@ 0x30
 8008c1a:	d0f8      	beq.n	8008c0e <_strtod_l+0x1de>
 8008c1c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008c20:	2b08      	cmp	r3, #8
 8008c22:	f200 84cb 	bhi.w	80095bc <_strtod_l+0xb8c>
 8008c26:	4681      	mov	r9, r0
 8008c28:	2000      	movs	r0, #0
 8008c2a:	4605      	mov	r5, r0
 8008c2c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c2e:	930c      	str	r3, [sp, #48]	@ 0x30
 8008c30:	3a30      	subs	r2, #48	@ 0x30
 8008c32:	f100 0301 	add.w	r3, r0, #1
 8008c36:	d02a      	beq.n	8008c8e <_strtod_l+0x25e>
 8008c38:	4499      	add	r9, r3
 8008c3a:	210a      	movs	r1, #10
 8008c3c:	462b      	mov	r3, r5
 8008c3e:	eb00 0c05 	add.w	ip, r0, r5
 8008c42:	4563      	cmp	r3, ip
 8008c44:	d10d      	bne.n	8008c62 <_strtod_l+0x232>
 8008c46:	1c69      	adds	r1, r5, #1
 8008c48:	4401      	add	r1, r0
 8008c4a:	4428      	add	r0, r5
 8008c4c:	2808      	cmp	r0, #8
 8008c4e:	dc16      	bgt.n	8008c7e <_strtod_l+0x24e>
 8008c50:	230a      	movs	r3, #10
 8008c52:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008c54:	fb03 2300 	mla	r3, r3, r0, r2
 8008c58:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	e018      	b.n	8008c90 <_strtod_l+0x260>
 8008c5e:	4638      	mov	r0, r7
 8008c60:	e7da      	b.n	8008c18 <_strtod_l+0x1e8>
 8008c62:	2b08      	cmp	r3, #8
 8008c64:	f103 0301 	add.w	r3, r3, #1
 8008c68:	dc03      	bgt.n	8008c72 <_strtod_l+0x242>
 8008c6a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008c6c:	434e      	muls	r6, r1
 8008c6e:	960a      	str	r6, [sp, #40]	@ 0x28
 8008c70:	e7e7      	b.n	8008c42 <_strtod_l+0x212>
 8008c72:	2b10      	cmp	r3, #16
 8008c74:	bfde      	ittt	le
 8008c76:	9e08      	ldrle	r6, [sp, #32]
 8008c78:	434e      	mulle	r6, r1
 8008c7a:	9608      	strle	r6, [sp, #32]
 8008c7c:	e7e1      	b.n	8008c42 <_strtod_l+0x212>
 8008c7e:	280f      	cmp	r0, #15
 8008c80:	dceb      	bgt.n	8008c5a <_strtod_l+0x22a>
 8008c82:	230a      	movs	r3, #10
 8008c84:	9808      	ldr	r0, [sp, #32]
 8008c86:	fb03 2300 	mla	r3, r3, r0, r2
 8008c8a:	9308      	str	r3, [sp, #32]
 8008c8c:	e7e5      	b.n	8008c5a <_strtod_l+0x22a>
 8008c8e:	4629      	mov	r1, r5
 8008c90:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008c92:	460d      	mov	r5, r1
 8008c94:	1c50      	adds	r0, r2, #1
 8008c96:	9019      	str	r0, [sp, #100]	@ 0x64
 8008c98:	7852      	ldrb	r2, [r2, #1]
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	e7b1      	b.n	8008c02 <_strtod_l+0x1d2>
 8008c9e:	f04f 0900 	mov.w	r9, #0
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	e77d      	b.n	8008ba2 <_strtod_l+0x172>
 8008ca6:	f04f 0c00 	mov.w	ip, #0
 8008caa:	1ca2      	adds	r2, r4, #2
 8008cac:	9219      	str	r2, [sp, #100]	@ 0x64
 8008cae:	78a2      	ldrb	r2, [r4, #2]
 8008cb0:	e785      	b.n	8008bbe <_strtod_l+0x18e>
 8008cb2:	f04f 0c01 	mov.w	ip, #1
 8008cb6:	e7f8      	b.n	8008caa <_strtod_l+0x27a>
 8008cb8:	0800ab18 	.word	0x0800ab18
 8008cbc:	7ff00000 	.word	0x7ff00000
 8008cc0:	0800ab00 	.word	0x0800ab00
 8008cc4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008cc6:	1c51      	adds	r1, r2, #1
 8008cc8:	9119      	str	r1, [sp, #100]	@ 0x64
 8008cca:	7852      	ldrb	r2, [r2, #1]
 8008ccc:	2a30      	cmp	r2, #48	@ 0x30
 8008cce:	d0f9      	beq.n	8008cc4 <_strtod_l+0x294>
 8008cd0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008cd4:	2908      	cmp	r1, #8
 8008cd6:	f63f af78 	bhi.w	8008bca <_strtod_l+0x19a>
 8008cda:	f04f 080a 	mov.w	r8, #10
 8008cde:	3a30      	subs	r2, #48	@ 0x30
 8008ce0:	920e      	str	r2, [sp, #56]	@ 0x38
 8008ce2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008ce4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008ce6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008ce8:	1c56      	adds	r6, r2, #1
 8008cea:	9619      	str	r6, [sp, #100]	@ 0x64
 8008cec:	7852      	ldrb	r2, [r2, #1]
 8008cee:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008cf2:	f1be 0f09 	cmp.w	lr, #9
 8008cf6:	d939      	bls.n	8008d6c <_strtod_l+0x33c>
 8008cf8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008cfa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008cfe:	1a76      	subs	r6, r6, r1
 8008d00:	2e08      	cmp	r6, #8
 8008d02:	dc03      	bgt.n	8008d0c <_strtod_l+0x2dc>
 8008d04:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008d06:	4588      	cmp	r8, r1
 8008d08:	bfa8      	it	ge
 8008d0a:	4688      	movge	r8, r1
 8008d0c:	f1bc 0f00 	cmp.w	ip, #0
 8008d10:	d001      	beq.n	8008d16 <_strtod_l+0x2e6>
 8008d12:	f1c8 0800 	rsb	r8, r8, #0
 8008d16:	2d00      	cmp	r5, #0
 8008d18:	d14e      	bne.n	8008db8 <_strtod_l+0x388>
 8008d1a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008d1c:	4308      	orrs	r0, r1
 8008d1e:	f47f aec0 	bne.w	8008aa2 <_strtod_l+0x72>
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	f47f aed6 	bne.w	8008ad4 <_strtod_l+0xa4>
 8008d28:	2a69      	cmp	r2, #105	@ 0x69
 8008d2a:	d028      	beq.n	8008d7e <_strtod_l+0x34e>
 8008d2c:	dc25      	bgt.n	8008d7a <_strtod_l+0x34a>
 8008d2e:	2a49      	cmp	r2, #73	@ 0x49
 8008d30:	d025      	beq.n	8008d7e <_strtod_l+0x34e>
 8008d32:	2a4e      	cmp	r2, #78	@ 0x4e
 8008d34:	f47f aece 	bne.w	8008ad4 <_strtod_l+0xa4>
 8008d38:	499a      	ldr	r1, [pc, #616]	@ (8008fa4 <_strtod_l+0x574>)
 8008d3a:	a819      	add	r0, sp, #100	@ 0x64
 8008d3c:	f001 f9de 	bl	800a0fc <__match>
 8008d40:	2800      	cmp	r0, #0
 8008d42:	f43f aec7 	beq.w	8008ad4 <_strtod_l+0xa4>
 8008d46:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d48:	781b      	ldrb	r3, [r3, #0]
 8008d4a:	2b28      	cmp	r3, #40	@ 0x28
 8008d4c:	d12e      	bne.n	8008dac <_strtod_l+0x37c>
 8008d4e:	4996      	ldr	r1, [pc, #600]	@ (8008fa8 <_strtod_l+0x578>)
 8008d50:	aa1c      	add	r2, sp, #112	@ 0x70
 8008d52:	a819      	add	r0, sp, #100	@ 0x64
 8008d54:	f001 f9e6 	bl	800a124 <__hexnan>
 8008d58:	2805      	cmp	r0, #5
 8008d5a:	d127      	bne.n	8008dac <_strtod_l+0x37c>
 8008d5c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008d5e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008d62:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008d66:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008d6a:	e69a      	b.n	8008aa2 <_strtod_l+0x72>
 8008d6c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008d6e:	fb08 2101 	mla	r1, r8, r1, r2
 8008d72:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008d76:	920e      	str	r2, [sp, #56]	@ 0x38
 8008d78:	e7b5      	b.n	8008ce6 <_strtod_l+0x2b6>
 8008d7a:	2a6e      	cmp	r2, #110	@ 0x6e
 8008d7c:	e7da      	b.n	8008d34 <_strtod_l+0x304>
 8008d7e:	498b      	ldr	r1, [pc, #556]	@ (8008fac <_strtod_l+0x57c>)
 8008d80:	a819      	add	r0, sp, #100	@ 0x64
 8008d82:	f001 f9bb 	bl	800a0fc <__match>
 8008d86:	2800      	cmp	r0, #0
 8008d88:	f43f aea4 	beq.w	8008ad4 <_strtod_l+0xa4>
 8008d8c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d8e:	4988      	ldr	r1, [pc, #544]	@ (8008fb0 <_strtod_l+0x580>)
 8008d90:	3b01      	subs	r3, #1
 8008d92:	a819      	add	r0, sp, #100	@ 0x64
 8008d94:	9319      	str	r3, [sp, #100]	@ 0x64
 8008d96:	f001 f9b1 	bl	800a0fc <__match>
 8008d9a:	b910      	cbnz	r0, 8008da2 <_strtod_l+0x372>
 8008d9c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d9e:	3301      	adds	r3, #1
 8008da0:	9319      	str	r3, [sp, #100]	@ 0x64
 8008da2:	f04f 0a00 	mov.w	sl, #0
 8008da6:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8008fb4 <_strtod_l+0x584>
 8008daa:	e67a      	b.n	8008aa2 <_strtod_l+0x72>
 8008dac:	4882      	ldr	r0, [pc, #520]	@ (8008fb8 <_strtod_l+0x588>)
 8008dae:	f000 fee3 	bl	8009b78 <nan>
 8008db2:	4682      	mov	sl, r0
 8008db4:	468b      	mov	fp, r1
 8008db6:	e674      	b.n	8008aa2 <_strtod_l+0x72>
 8008db8:	eba8 0309 	sub.w	r3, r8, r9
 8008dbc:	2f00      	cmp	r7, #0
 8008dbe:	bf08      	it	eq
 8008dc0:	462f      	moveq	r7, r5
 8008dc2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008dc4:	2d10      	cmp	r5, #16
 8008dc6:	462c      	mov	r4, r5
 8008dc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008dca:	bfa8      	it	ge
 8008dcc:	2410      	movge	r4, #16
 8008dce:	f7f7 fb09 	bl	80003e4 <__aeabi_ui2d>
 8008dd2:	2d09      	cmp	r5, #9
 8008dd4:	4682      	mov	sl, r0
 8008dd6:	468b      	mov	fp, r1
 8008dd8:	dc11      	bgt.n	8008dfe <_strtod_l+0x3ce>
 8008dda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	f43f ae60 	beq.w	8008aa2 <_strtod_l+0x72>
 8008de2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008de4:	dd76      	ble.n	8008ed4 <_strtod_l+0x4a4>
 8008de6:	2b16      	cmp	r3, #22
 8008de8:	dc5d      	bgt.n	8008ea6 <_strtod_l+0x476>
 8008dea:	4974      	ldr	r1, [pc, #464]	@ (8008fbc <_strtod_l+0x58c>)
 8008dec:	4652      	mov	r2, sl
 8008dee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008df2:	465b      	mov	r3, fp
 8008df4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008df8:	f7f7 fb6e 	bl	80004d8 <__aeabi_dmul>
 8008dfc:	e7d9      	b.n	8008db2 <_strtod_l+0x382>
 8008dfe:	4b6f      	ldr	r3, [pc, #444]	@ (8008fbc <_strtod_l+0x58c>)
 8008e00:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008e04:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008e08:	f7f7 fb66 	bl	80004d8 <__aeabi_dmul>
 8008e0c:	4682      	mov	sl, r0
 8008e0e:	9808      	ldr	r0, [sp, #32]
 8008e10:	468b      	mov	fp, r1
 8008e12:	f7f7 fae7 	bl	80003e4 <__aeabi_ui2d>
 8008e16:	4602      	mov	r2, r0
 8008e18:	460b      	mov	r3, r1
 8008e1a:	4650      	mov	r0, sl
 8008e1c:	4659      	mov	r1, fp
 8008e1e:	f7f7 f9a5 	bl	800016c <__adddf3>
 8008e22:	2d0f      	cmp	r5, #15
 8008e24:	4682      	mov	sl, r0
 8008e26:	468b      	mov	fp, r1
 8008e28:	ddd7      	ble.n	8008dda <_strtod_l+0x3aa>
 8008e2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e2c:	1b2c      	subs	r4, r5, r4
 8008e2e:	441c      	add	r4, r3
 8008e30:	2c00      	cmp	r4, #0
 8008e32:	f340 8096 	ble.w	8008f62 <_strtod_l+0x532>
 8008e36:	f014 030f 	ands.w	r3, r4, #15
 8008e3a:	d00a      	beq.n	8008e52 <_strtod_l+0x422>
 8008e3c:	495f      	ldr	r1, [pc, #380]	@ (8008fbc <_strtod_l+0x58c>)
 8008e3e:	4652      	mov	r2, sl
 8008e40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008e44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e48:	465b      	mov	r3, fp
 8008e4a:	f7f7 fb45 	bl	80004d8 <__aeabi_dmul>
 8008e4e:	4682      	mov	sl, r0
 8008e50:	468b      	mov	fp, r1
 8008e52:	f034 040f 	bics.w	r4, r4, #15
 8008e56:	d073      	beq.n	8008f40 <_strtod_l+0x510>
 8008e58:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008e5c:	dd48      	ble.n	8008ef0 <_strtod_l+0x4c0>
 8008e5e:	2400      	movs	r4, #0
 8008e60:	46a0      	mov	r8, r4
 8008e62:	46a1      	mov	r9, r4
 8008e64:	940a      	str	r4, [sp, #40]	@ 0x28
 8008e66:	2322      	movs	r3, #34	@ 0x22
 8008e68:	f04f 0a00 	mov.w	sl, #0
 8008e6c:	9a05      	ldr	r2, [sp, #20]
 8008e6e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8008fb4 <_strtod_l+0x584>
 8008e72:	6013      	str	r3, [r2, #0]
 8008e74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	f43f ae13 	beq.w	8008aa2 <_strtod_l+0x72>
 8008e7c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008e7e:	9805      	ldr	r0, [sp, #20]
 8008e80:	f7ff f94c 	bl	800811c <_Bfree>
 8008e84:	4649      	mov	r1, r9
 8008e86:	9805      	ldr	r0, [sp, #20]
 8008e88:	f7ff f948 	bl	800811c <_Bfree>
 8008e8c:	4641      	mov	r1, r8
 8008e8e:	9805      	ldr	r0, [sp, #20]
 8008e90:	f7ff f944 	bl	800811c <_Bfree>
 8008e94:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008e96:	9805      	ldr	r0, [sp, #20]
 8008e98:	f7ff f940 	bl	800811c <_Bfree>
 8008e9c:	4621      	mov	r1, r4
 8008e9e:	9805      	ldr	r0, [sp, #20]
 8008ea0:	f7ff f93c 	bl	800811c <_Bfree>
 8008ea4:	e5fd      	b.n	8008aa2 <_strtod_l+0x72>
 8008ea6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ea8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008eac:	4293      	cmp	r3, r2
 8008eae:	dbbc      	blt.n	8008e2a <_strtod_l+0x3fa>
 8008eb0:	4c42      	ldr	r4, [pc, #264]	@ (8008fbc <_strtod_l+0x58c>)
 8008eb2:	f1c5 050f 	rsb	r5, r5, #15
 8008eb6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008eba:	4652      	mov	r2, sl
 8008ebc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ec0:	465b      	mov	r3, fp
 8008ec2:	f7f7 fb09 	bl	80004d8 <__aeabi_dmul>
 8008ec6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ec8:	1b5d      	subs	r5, r3, r5
 8008eca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008ece:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008ed2:	e791      	b.n	8008df8 <_strtod_l+0x3c8>
 8008ed4:	3316      	adds	r3, #22
 8008ed6:	dba8      	blt.n	8008e2a <_strtod_l+0x3fa>
 8008ed8:	4b38      	ldr	r3, [pc, #224]	@ (8008fbc <_strtod_l+0x58c>)
 8008eda:	eba9 0808 	sub.w	r8, r9, r8
 8008ede:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008ee2:	4650      	mov	r0, sl
 8008ee4:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008ee8:	4659      	mov	r1, fp
 8008eea:	f7f7 fc1f 	bl	800072c <__aeabi_ddiv>
 8008eee:	e760      	b.n	8008db2 <_strtod_l+0x382>
 8008ef0:	4b33      	ldr	r3, [pc, #204]	@ (8008fc0 <_strtod_l+0x590>)
 8008ef2:	4650      	mov	r0, sl
 8008ef4:	9308      	str	r3, [sp, #32]
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	4659      	mov	r1, fp
 8008efa:	461e      	mov	r6, r3
 8008efc:	1124      	asrs	r4, r4, #4
 8008efe:	2c01      	cmp	r4, #1
 8008f00:	dc21      	bgt.n	8008f46 <_strtod_l+0x516>
 8008f02:	b10b      	cbz	r3, 8008f08 <_strtod_l+0x4d8>
 8008f04:	4682      	mov	sl, r0
 8008f06:	468b      	mov	fp, r1
 8008f08:	492d      	ldr	r1, [pc, #180]	@ (8008fc0 <_strtod_l+0x590>)
 8008f0a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008f0e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008f12:	4652      	mov	r2, sl
 8008f14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f18:	465b      	mov	r3, fp
 8008f1a:	f7f7 fadd 	bl	80004d8 <__aeabi_dmul>
 8008f1e:	4b25      	ldr	r3, [pc, #148]	@ (8008fb4 <_strtod_l+0x584>)
 8008f20:	460a      	mov	r2, r1
 8008f22:	400b      	ands	r3, r1
 8008f24:	4927      	ldr	r1, [pc, #156]	@ (8008fc4 <_strtod_l+0x594>)
 8008f26:	4682      	mov	sl, r0
 8008f28:	428b      	cmp	r3, r1
 8008f2a:	d898      	bhi.n	8008e5e <_strtod_l+0x42e>
 8008f2c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008f30:	428b      	cmp	r3, r1
 8008f32:	bf86      	itte	hi
 8008f34:	f04f 3aff 	movhi.w	sl, #4294967295
 8008f38:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8008fc8 <_strtod_l+0x598>
 8008f3c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008f40:	2300      	movs	r3, #0
 8008f42:	9308      	str	r3, [sp, #32]
 8008f44:	e07a      	b.n	800903c <_strtod_l+0x60c>
 8008f46:	07e2      	lsls	r2, r4, #31
 8008f48:	d505      	bpl.n	8008f56 <_strtod_l+0x526>
 8008f4a:	9b08      	ldr	r3, [sp, #32]
 8008f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f50:	f7f7 fac2 	bl	80004d8 <__aeabi_dmul>
 8008f54:	2301      	movs	r3, #1
 8008f56:	9a08      	ldr	r2, [sp, #32]
 8008f58:	3601      	adds	r6, #1
 8008f5a:	3208      	adds	r2, #8
 8008f5c:	1064      	asrs	r4, r4, #1
 8008f5e:	9208      	str	r2, [sp, #32]
 8008f60:	e7cd      	b.n	8008efe <_strtod_l+0x4ce>
 8008f62:	d0ed      	beq.n	8008f40 <_strtod_l+0x510>
 8008f64:	4264      	negs	r4, r4
 8008f66:	f014 020f 	ands.w	r2, r4, #15
 8008f6a:	d00a      	beq.n	8008f82 <_strtod_l+0x552>
 8008f6c:	4b13      	ldr	r3, [pc, #76]	@ (8008fbc <_strtod_l+0x58c>)
 8008f6e:	4650      	mov	r0, sl
 8008f70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f74:	4659      	mov	r1, fp
 8008f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f7a:	f7f7 fbd7 	bl	800072c <__aeabi_ddiv>
 8008f7e:	4682      	mov	sl, r0
 8008f80:	468b      	mov	fp, r1
 8008f82:	1124      	asrs	r4, r4, #4
 8008f84:	d0dc      	beq.n	8008f40 <_strtod_l+0x510>
 8008f86:	2c1f      	cmp	r4, #31
 8008f88:	dd20      	ble.n	8008fcc <_strtod_l+0x59c>
 8008f8a:	2400      	movs	r4, #0
 8008f8c:	46a0      	mov	r8, r4
 8008f8e:	46a1      	mov	r9, r4
 8008f90:	940a      	str	r4, [sp, #40]	@ 0x28
 8008f92:	2322      	movs	r3, #34	@ 0x22
 8008f94:	9a05      	ldr	r2, [sp, #20]
 8008f96:	f04f 0a00 	mov.w	sl, #0
 8008f9a:	f04f 0b00 	mov.w	fp, #0
 8008f9e:	6013      	str	r3, [r2, #0]
 8008fa0:	e768      	b.n	8008e74 <_strtod_l+0x444>
 8008fa2:	bf00      	nop
 8008fa4:	0800a8ef 	.word	0x0800a8ef
 8008fa8:	0800ab04 	.word	0x0800ab04
 8008fac:	0800a8e7 	.word	0x0800a8e7
 8008fb0:	0800a91e 	.word	0x0800a91e
 8008fb4:	7ff00000 	.word	0x7ff00000
 8008fb8:	0800acad 	.word	0x0800acad
 8008fbc:	0800aa38 	.word	0x0800aa38
 8008fc0:	0800aa10 	.word	0x0800aa10
 8008fc4:	7ca00000 	.word	0x7ca00000
 8008fc8:	7fefffff 	.word	0x7fefffff
 8008fcc:	f014 0310 	ands.w	r3, r4, #16
 8008fd0:	bf18      	it	ne
 8008fd2:	236a      	movne	r3, #106	@ 0x6a
 8008fd4:	4650      	mov	r0, sl
 8008fd6:	9308      	str	r3, [sp, #32]
 8008fd8:	4659      	mov	r1, fp
 8008fda:	2300      	movs	r3, #0
 8008fdc:	4ea9      	ldr	r6, [pc, #676]	@ (8009284 <_strtod_l+0x854>)
 8008fde:	07e2      	lsls	r2, r4, #31
 8008fe0:	d504      	bpl.n	8008fec <_strtod_l+0x5bc>
 8008fe2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008fe6:	f7f7 fa77 	bl	80004d8 <__aeabi_dmul>
 8008fea:	2301      	movs	r3, #1
 8008fec:	1064      	asrs	r4, r4, #1
 8008fee:	f106 0608 	add.w	r6, r6, #8
 8008ff2:	d1f4      	bne.n	8008fde <_strtod_l+0x5ae>
 8008ff4:	b10b      	cbz	r3, 8008ffa <_strtod_l+0x5ca>
 8008ff6:	4682      	mov	sl, r0
 8008ff8:	468b      	mov	fp, r1
 8008ffa:	9b08      	ldr	r3, [sp, #32]
 8008ffc:	b1b3      	cbz	r3, 800902c <_strtod_l+0x5fc>
 8008ffe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009002:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009006:	2b00      	cmp	r3, #0
 8009008:	4659      	mov	r1, fp
 800900a:	dd0f      	ble.n	800902c <_strtod_l+0x5fc>
 800900c:	2b1f      	cmp	r3, #31
 800900e:	dd57      	ble.n	80090c0 <_strtod_l+0x690>
 8009010:	2b34      	cmp	r3, #52	@ 0x34
 8009012:	bfd8      	it	le
 8009014:	f04f 33ff 	movle.w	r3, #4294967295
 8009018:	f04f 0a00 	mov.w	sl, #0
 800901c:	bfcf      	iteee	gt
 800901e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009022:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009026:	4093      	lslle	r3, r2
 8009028:	ea03 0b01 	andle.w	fp, r3, r1
 800902c:	2200      	movs	r2, #0
 800902e:	2300      	movs	r3, #0
 8009030:	4650      	mov	r0, sl
 8009032:	4659      	mov	r1, fp
 8009034:	f7f7 fcb8 	bl	80009a8 <__aeabi_dcmpeq>
 8009038:	2800      	cmp	r0, #0
 800903a:	d1a6      	bne.n	8008f8a <_strtod_l+0x55a>
 800903c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800903e:	463a      	mov	r2, r7
 8009040:	9300      	str	r3, [sp, #0]
 8009042:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009044:	462b      	mov	r3, r5
 8009046:	9805      	ldr	r0, [sp, #20]
 8009048:	f7ff f8d0 	bl	80081ec <__s2b>
 800904c:	900a      	str	r0, [sp, #40]	@ 0x28
 800904e:	2800      	cmp	r0, #0
 8009050:	f43f af05 	beq.w	8008e5e <_strtod_l+0x42e>
 8009054:	2400      	movs	r4, #0
 8009056:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009058:	eba9 0308 	sub.w	r3, r9, r8
 800905c:	2a00      	cmp	r2, #0
 800905e:	bfa8      	it	ge
 8009060:	2300      	movge	r3, #0
 8009062:	46a0      	mov	r8, r4
 8009064:	9312      	str	r3, [sp, #72]	@ 0x48
 8009066:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800906a:	9316      	str	r3, [sp, #88]	@ 0x58
 800906c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800906e:	9805      	ldr	r0, [sp, #20]
 8009070:	6859      	ldr	r1, [r3, #4]
 8009072:	f7ff f813 	bl	800809c <_Balloc>
 8009076:	4681      	mov	r9, r0
 8009078:	2800      	cmp	r0, #0
 800907a:	f43f aef4 	beq.w	8008e66 <_strtod_l+0x436>
 800907e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009080:	300c      	adds	r0, #12
 8009082:	691a      	ldr	r2, [r3, #16]
 8009084:	f103 010c 	add.w	r1, r3, #12
 8009088:	3202      	adds	r2, #2
 800908a:	0092      	lsls	r2, r2, #2
 800908c:	f000 fd66 	bl	8009b5c <memcpy>
 8009090:	ab1c      	add	r3, sp, #112	@ 0x70
 8009092:	9301      	str	r3, [sp, #4]
 8009094:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009096:	9300      	str	r3, [sp, #0]
 8009098:	4652      	mov	r2, sl
 800909a:	465b      	mov	r3, fp
 800909c:	9805      	ldr	r0, [sp, #20]
 800909e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80090a2:	f7ff fbd5 	bl	8008850 <__d2b>
 80090a6:	901a      	str	r0, [sp, #104]	@ 0x68
 80090a8:	2800      	cmp	r0, #0
 80090aa:	f43f aedc 	beq.w	8008e66 <_strtod_l+0x436>
 80090ae:	2101      	movs	r1, #1
 80090b0:	9805      	ldr	r0, [sp, #20]
 80090b2:	f7ff f931 	bl	8008318 <__i2b>
 80090b6:	4680      	mov	r8, r0
 80090b8:	b948      	cbnz	r0, 80090ce <_strtod_l+0x69e>
 80090ba:	f04f 0800 	mov.w	r8, #0
 80090be:	e6d2      	b.n	8008e66 <_strtod_l+0x436>
 80090c0:	f04f 32ff 	mov.w	r2, #4294967295
 80090c4:	fa02 f303 	lsl.w	r3, r2, r3
 80090c8:	ea03 0a0a 	and.w	sl, r3, sl
 80090cc:	e7ae      	b.n	800902c <_strtod_l+0x5fc>
 80090ce:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80090d0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80090d2:	2d00      	cmp	r5, #0
 80090d4:	bfab      	itete	ge
 80090d6:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80090d8:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80090da:	18ef      	addge	r7, r5, r3
 80090dc:	1b5e      	sublt	r6, r3, r5
 80090de:	9b08      	ldr	r3, [sp, #32]
 80090e0:	bfa8      	it	ge
 80090e2:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80090e4:	eba5 0503 	sub.w	r5, r5, r3
 80090e8:	4415      	add	r5, r2
 80090ea:	4b67      	ldr	r3, [pc, #412]	@ (8009288 <_strtod_l+0x858>)
 80090ec:	f105 35ff 	add.w	r5, r5, #4294967295
 80090f0:	bfb8      	it	lt
 80090f2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80090f4:	429d      	cmp	r5, r3
 80090f6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80090fa:	da50      	bge.n	800919e <_strtod_l+0x76e>
 80090fc:	1b5b      	subs	r3, r3, r5
 80090fe:	2b1f      	cmp	r3, #31
 8009100:	f04f 0101 	mov.w	r1, #1
 8009104:	eba2 0203 	sub.w	r2, r2, r3
 8009108:	dc3d      	bgt.n	8009186 <_strtod_l+0x756>
 800910a:	fa01 f303 	lsl.w	r3, r1, r3
 800910e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009110:	2300      	movs	r3, #0
 8009112:	9310      	str	r3, [sp, #64]	@ 0x40
 8009114:	18bd      	adds	r5, r7, r2
 8009116:	9b08      	ldr	r3, [sp, #32]
 8009118:	42af      	cmp	r7, r5
 800911a:	4416      	add	r6, r2
 800911c:	441e      	add	r6, r3
 800911e:	463b      	mov	r3, r7
 8009120:	bfa8      	it	ge
 8009122:	462b      	movge	r3, r5
 8009124:	42b3      	cmp	r3, r6
 8009126:	bfa8      	it	ge
 8009128:	4633      	movge	r3, r6
 800912a:	2b00      	cmp	r3, #0
 800912c:	bfc2      	ittt	gt
 800912e:	1aed      	subgt	r5, r5, r3
 8009130:	1af6      	subgt	r6, r6, r3
 8009132:	1aff      	subgt	r7, r7, r3
 8009134:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009136:	2b00      	cmp	r3, #0
 8009138:	dd16      	ble.n	8009168 <_strtod_l+0x738>
 800913a:	4641      	mov	r1, r8
 800913c:	461a      	mov	r2, r3
 800913e:	9805      	ldr	r0, [sp, #20]
 8009140:	f7ff f9a8 	bl	8008494 <__pow5mult>
 8009144:	4680      	mov	r8, r0
 8009146:	2800      	cmp	r0, #0
 8009148:	d0b7      	beq.n	80090ba <_strtod_l+0x68a>
 800914a:	4601      	mov	r1, r0
 800914c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800914e:	9805      	ldr	r0, [sp, #20]
 8009150:	f7ff f8f8 	bl	8008344 <__multiply>
 8009154:	900e      	str	r0, [sp, #56]	@ 0x38
 8009156:	2800      	cmp	r0, #0
 8009158:	f43f ae85 	beq.w	8008e66 <_strtod_l+0x436>
 800915c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800915e:	9805      	ldr	r0, [sp, #20]
 8009160:	f7fe ffdc 	bl	800811c <_Bfree>
 8009164:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009166:	931a      	str	r3, [sp, #104]	@ 0x68
 8009168:	2d00      	cmp	r5, #0
 800916a:	dc1d      	bgt.n	80091a8 <_strtod_l+0x778>
 800916c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800916e:	2b00      	cmp	r3, #0
 8009170:	dd23      	ble.n	80091ba <_strtod_l+0x78a>
 8009172:	4649      	mov	r1, r9
 8009174:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009176:	9805      	ldr	r0, [sp, #20]
 8009178:	f7ff f98c 	bl	8008494 <__pow5mult>
 800917c:	4681      	mov	r9, r0
 800917e:	b9e0      	cbnz	r0, 80091ba <_strtod_l+0x78a>
 8009180:	f04f 0900 	mov.w	r9, #0
 8009184:	e66f      	b.n	8008e66 <_strtod_l+0x436>
 8009186:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800918a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800918e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009192:	35e2      	adds	r5, #226	@ 0xe2
 8009194:	fa01 f305 	lsl.w	r3, r1, r5
 8009198:	9310      	str	r3, [sp, #64]	@ 0x40
 800919a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800919c:	e7ba      	b.n	8009114 <_strtod_l+0x6e4>
 800919e:	2300      	movs	r3, #0
 80091a0:	9310      	str	r3, [sp, #64]	@ 0x40
 80091a2:	2301      	movs	r3, #1
 80091a4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80091a6:	e7b5      	b.n	8009114 <_strtod_l+0x6e4>
 80091a8:	462a      	mov	r2, r5
 80091aa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80091ac:	9805      	ldr	r0, [sp, #20]
 80091ae:	f7ff f9cb 	bl	8008548 <__lshift>
 80091b2:	901a      	str	r0, [sp, #104]	@ 0x68
 80091b4:	2800      	cmp	r0, #0
 80091b6:	d1d9      	bne.n	800916c <_strtod_l+0x73c>
 80091b8:	e655      	b.n	8008e66 <_strtod_l+0x436>
 80091ba:	2e00      	cmp	r6, #0
 80091bc:	dd07      	ble.n	80091ce <_strtod_l+0x79e>
 80091be:	4649      	mov	r1, r9
 80091c0:	4632      	mov	r2, r6
 80091c2:	9805      	ldr	r0, [sp, #20]
 80091c4:	f7ff f9c0 	bl	8008548 <__lshift>
 80091c8:	4681      	mov	r9, r0
 80091ca:	2800      	cmp	r0, #0
 80091cc:	d0d8      	beq.n	8009180 <_strtod_l+0x750>
 80091ce:	2f00      	cmp	r7, #0
 80091d0:	dd08      	ble.n	80091e4 <_strtod_l+0x7b4>
 80091d2:	4641      	mov	r1, r8
 80091d4:	463a      	mov	r2, r7
 80091d6:	9805      	ldr	r0, [sp, #20]
 80091d8:	f7ff f9b6 	bl	8008548 <__lshift>
 80091dc:	4680      	mov	r8, r0
 80091de:	2800      	cmp	r0, #0
 80091e0:	f43f ae41 	beq.w	8008e66 <_strtod_l+0x436>
 80091e4:	464a      	mov	r2, r9
 80091e6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80091e8:	9805      	ldr	r0, [sp, #20]
 80091ea:	f7ff fa35 	bl	8008658 <__mdiff>
 80091ee:	4604      	mov	r4, r0
 80091f0:	2800      	cmp	r0, #0
 80091f2:	f43f ae38 	beq.w	8008e66 <_strtod_l+0x436>
 80091f6:	68c3      	ldr	r3, [r0, #12]
 80091f8:	4641      	mov	r1, r8
 80091fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80091fc:	2300      	movs	r3, #0
 80091fe:	60c3      	str	r3, [r0, #12]
 8009200:	f7ff fa0e 	bl	8008620 <__mcmp>
 8009204:	2800      	cmp	r0, #0
 8009206:	da45      	bge.n	8009294 <_strtod_l+0x864>
 8009208:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800920a:	ea53 030a 	orrs.w	r3, r3, sl
 800920e:	d16b      	bne.n	80092e8 <_strtod_l+0x8b8>
 8009210:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009214:	2b00      	cmp	r3, #0
 8009216:	d167      	bne.n	80092e8 <_strtod_l+0x8b8>
 8009218:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800921c:	0d1b      	lsrs	r3, r3, #20
 800921e:	051b      	lsls	r3, r3, #20
 8009220:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009224:	d960      	bls.n	80092e8 <_strtod_l+0x8b8>
 8009226:	6963      	ldr	r3, [r4, #20]
 8009228:	b913      	cbnz	r3, 8009230 <_strtod_l+0x800>
 800922a:	6923      	ldr	r3, [r4, #16]
 800922c:	2b01      	cmp	r3, #1
 800922e:	dd5b      	ble.n	80092e8 <_strtod_l+0x8b8>
 8009230:	4621      	mov	r1, r4
 8009232:	2201      	movs	r2, #1
 8009234:	9805      	ldr	r0, [sp, #20]
 8009236:	f7ff f987 	bl	8008548 <__lshift>
 800923a:	4641      	mov	r1, r8
 800923c:	4604      	mov	r4, r0
 800923e:	f7ff f9ef 	bl	8008620 <__mcmp>
 8009242:	2800      	cmp	r0, #0
 8009244:	dd50      	ble.n	80092e8 <_strtod_l+0x8b8>
 8009246:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800924a:	9a08      	ldr	r2, [sp, #32]
 800924c:	0d1b      	lsrs	r3, r3, #20
 800924e:	051b      	lsls	r3, r3, #20
 8009250:	2a00      	cmp	r2, #0
 8009252:	d06a      	beq.n	800932a <_strtod_l+0x8fa>
 8009254:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009258:	d867      	bhi.n	800932a <_strtod_l+0x8fa>
 800925a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800925e:	f67f ae98 	bls.w	8008f92 <_strtod_l+0x562>
 8009262:	4650      	mov	r0, sl
 8009264:	4659      	mov	r1, fp
 8009266:	4b09      	ldr	r3, [pc, #36]	@ (800928c <_strtod_l+0x85c>)
 8009268:	2200      	movs	r2, #0
 800926a:	f7f7 f935 	bl	80004d8 <__aeabi_dmul>
 800926e:	4b08      	ldr	r3, [pc, #32]	@ (8009290 <_strtod_l+0x860>)
 8009270:	4682      	mov	sl, r0
 8009272:	400b      	ands	r3, r1
 8009274:	468b      	mov	fp, r1
 8009276:	2b00      	cmp	r3, #0
 8009278:	f47f ae00 	bne.w	8008e7c <_strtod_l+0x44c>
 800927c:	2322      	movs	r3, #34	@ 0x22
 800927e:	9a05      	ldr	r2, [sp, #20]
 8009280:	6013      	str	r3, [r2, #0]
 8009282:	e5fb      	b.n	8008e7c <_strtod_l+0x44c>
 8009284:	0800ab30 	.word	0x0800ab30
 8009288:	fffffc02 	.word	0xfffffc02
 800928c:	39500000 	.word	0x39500000
 8009290:	7ff00000 	.word	0x7ff00000
 8009294:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009298:	d165      	bne.n	8009366 <_strtod_l+0x936>
 800929a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800929c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80092a0:	b35a      	cbz	r2, 80092fa <_strtod_l+0x8ca>
 80092a2:	4a99      	ldr	r2, [pc, #612]	@ (8009508 <_strtod_l+0xad8>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d12b      	bne.n	8009300 <_strtod_l+0x8d0>
 80092a8:	9b08      	ldr	r3, [sp, #32]
 80092aa:	4651      	mov	r1, sl
 80092ac:	b303      	cbz	r3, 80092f0 <_strtod_l+0x8c0>
 80092ae:	465a      	mov	r2, fp
 80092b0:	4b96      	ldr	r3, [pc, #600]	@ (800950c <_strtod_l+0xadc>)
 80092b2:	4013      	ands	r3, r2
 80092b4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80092b8:	f04f 32ff 	mov.w	r2, #4294967295
 80092bc:	d81b      	bhi.n	80092f6 <_strtod_l+0x8c6>
 80092be:	0d1b      	lsrs	r3, r3, #20
 80092c0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80092c4:	fa02 f303 	lsl.w	r3, r2, r3
 80092c8:	4299      	cmp	r1, r3
 80092ca:	d119      	bne.n	8009300 <_strtod_l+0x8d0>
 80092cc:	4b90      	ldr	r3, [pc, #576]	@ (8009510 <_strtod_l+0xae0>)
 80092ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d102      	bne.n	80092da <_strtod_l+0x8aa>
 80092d4:	3101      	adds	r1, #1
 80092d6:	f43f adc6 	beq.w	8008e66 <_strtod_l+0x436>
 80092da:	f04f 0a00 	mov.w	sl, #0
 80092de:	4b8b      	ldr	r3, [pc, #556]	@ (800950c <_strtod_l+0xadc>)
 80092e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80092e2:	401a      	ands	r2, r3
 80092e4:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80092e8:	9b08      	ldr	r3, [sp, #32]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d1b9      	bne.n	8009262 <_strtod_l+0x832>
 80092ee:	e5c5      	b.n	8008e7c <_strtod_l+0x44c>
 80092f0:	f04f 33ff 	mov.w	r3, #4294967295
 80092f4:	e7e8      	b.n	80092c8 <_strtod_l+0x898>
 80092f6:	4613      	mov	r3, r2
 80092f8:	e7e6      	b.n	80092c8 <_strtod_l+0x898>
 80092fa:	ea53 030a 	orrs.w	r3, r3, sl
 80092fe:	d0a2      	beq.n	8009246 <_strtod_l+0x816>
 8009300:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009302:	b1db      	cbz	r3, 800933c <_strtod_l+0x90c>
 8009304:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009306:	4213      	tst	r3, r2
 8009308:	d0ee      	beq.n	80092e8 <_strtod_l+0x8b8>
 800930a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800930c:	4650      	mov	r0, sl
 800930e:	4659      	mov	r1, fp
 8009310:	9a08      	ldr	r2, [sp, #32]
 8009312:	b1bb      	cbz	r3, 8009344 <_strtod_l+0x914>
 8009314:	f7ff fb68 	bl	80089e8 <sulp>
 8009318:	4602      	mov	r2, r0
 800931a:	460b      	mov	r3, r1
 800931c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009320:	f7f6 ff24 	bl	800016c <__adddf3>
 8009324:	4682      	mov	sl, r0
 8009326:	468b      	mov	fp, r1
 8009328:	e7de      	b.n	80092e8 <_strtod_l+0x8b8>
 800932a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800932e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009332:	f04f 3aff 	mov.w	sl, #4294967295
 8009336:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800933a:	e7d5      	b.n	80092e8 <_strtod_l+0x8b8>
 800933c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800933e:	ea13 0f0a 	tst.w	r3, sl
 8009342:	e7e1      	b.n	8009308 <_strtod_l+0x8d8>
 8009344:	f7ff fb50 	bl	80089e8 <sulp>
 8009348:	4602      	mov	r2, r0
 800934a:	460b      	mov	r3, r1
 800934c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009350:	f7f6 ff0a 	bl	8000168 <__aeabi_dsub>
 8009354:	2200      	movs	r2, #0
 8009356:	2300      	movs	r3, #0
 8009358:	4682      	mov	sl, r0
 800935a:	468b      	mov	fp, r1
 800935c:	f7f7 fb24 	bl	80009a8 <__aeabi_dcmpeq>
 8009360:	2800      	cmp	r0, #0
 8009362:	d0c1      	beq.n	80092e8 <_strtod_l+0x8b8>
 8009364:	e615      	b.n	8008f92 <_strtod_l+0x562>
 8009366:	4641      	mov	r1, r8
 8009368:	4620      	mov	r0, r4
 800936a:	f7ff fac9 	bl	8008900 <__ratio>
 800936e:	2200      	movs	r2, #0
 8009370:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009374:	4606      	mov	r6, r0
 8009376:	460f      	mov	r7, r1
 8009378:	f7f7 fb2a 	bl	80009d0 <__aeabi_dcmple>
 800937c:	2800      	cmp	r0, #0
 800937e:	d06d      	beq.n	800945c <_strtod_l+0xa2c>
 8009380:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009382:	2b00      	cmp	r3, #0
 8009384:	d178      	bne.n	8009478 <_strtod_l+0xa48>
 8009386:	f1ba 0f00 	cmp.w	sl, #0
 800938a:	d156      	bne.n	800943a <_strtod_l+0xa0a>
 800938c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800938e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009392:	2b00      	cmp	r3, #0
 8009394:	d158      	bne.n	8009448 <_strtod_l+0xa18>
 8009396:	2200      	movs	r2, #0
 8009398:	4630      	mov	r0, r6
 800939a:	4639      	mov	r1, r7
 800939c:	4b5d      	ldr	r3, [pc, #372]	@ (8009514 <_strtod_l+0xae4>)
 800939e:	f7f7 fb0d 	bl	80009bc <__aeabi_dcmplt>
 80093a2:	2800      	cmp	r0, #0
 80093a4:	d157      	bne.n	8009456 <_strtod_l+0xa26>
 80093a6:	4630      	mov	r0, r6
 80093a8:	4639      	mov	r1, r7
 80093aa:	2200      	movs	r2, #0
 80093ac:	4b5a      	ldr	r3, [pc, #360]	@ (8009518 <_strtod_l+0xae8>)
 80093ae:	f7f7 f893 	bl	80004d8 <__aeabi_dmul>
 80093b2:	4606      	mov	r6, r0
 80093b4:	460f      	mov	r7, r1
 80093b6:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80093ba:	9606      	str	r6, [sp, #24]
 80093bc:	9307      	str	r3, [sp, #28]
 80093be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80093c2:	4d52      	ldr	r5, [pc, #328]	@ (800950c <_strtod_l+0xadc>)
 80093c4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80093c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80093ca:	401d      	ands	r5, r3
 80093cc:	4b53      	ldr	r3, [pc, #332]	@ (800951c <_strtod_l+0xaec>)
 80093ce:	429d      	cmp	r5, r3
 80093d0:	f040 80aa 	bne.w	8009528 <_strtod_l+0xaf8>
 80093d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80093d6:	4650      	mov	r0, sl
 80093d8:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80093dc:	4659      	mov	r1, fp
 80093de:	f7ff f9cf 	bl	8008780 <__ulp>
 80093e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80093e6:	f7f7 f877 	bl	80004d8 <__aeabi_dmul>
 80093ea:	4652      	mov	r2, sl
 80093ec:	465b      	mov	r3, fp
 80093ee:	f7f6 febd 	bl	800016c <__adddf3>
 80093f2:	460b      	mov	r3, r1
 80093f4:	4945      	ldr	r1, [pc, #276]	@ (800950c <_strtod_l+0xadc>)
 80093f6:	4a4a      	ldr	r2, [pc, #296]	@ (8009520 <_strtod_l+0xaf0>)
 80093f8:	4019      	ands	r1, r3
 80093fa:	4291      	cmp	r1, r2
 80093fc:	4682      	mov	sl, r0
 80093fe:	d942      	bls.n	8009486 <_strtod_l+0xa56>
 8009400:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009402:	4b43      	ldr	r3, [pc, #268]	@ (8009510 <_strtod_l+0xae0>)
 8009404:	429a      	cmp	r2, r3
 8009406:	d103      	bne.n	8009410 <_strtod_l+0x9e0>
 8009408:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800940a:	3301      	adds	r3, #1
 800940c:	f43f ad2b 	beq.w	8008e66 <_strtod_l+0x436>
 8009410:	f04f 3aff 	mov.w	sl, #4294967295
 8009414:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8009510 <_strtod_l+0xae0>
 8009418:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800941a:	9805      	ldr	r0, [sp, #20]
 800941c:	f7fe fe7e 	bl	800811c <_Bfree>
 8009420:	4649      	mov	r1, r9
 8009422:	9805      	ldr	r0, [sp, #20]
 8009424:	f7fe fe7a 	bl	800811c <_Bfree>
 8009428:	4641      	mov	r1, r8
 800942a:	9805      	ldr	r0, [sp, #20]
 800942c:	f7fe fe76 	bl	800811c <_Bfree>
 8009430:	4621      	mov	r1, r4
 8009432:	9805      	ldr	r0, [sp, #20]
 8009434:	f7fe fe72 	bl	800811c <_Bfree>
 8009438:	e618      	b.n	800906c <_strtod_l+0x63c>
 800943a:	f1ba 0f01 	cmp.w	sl, #1
 800943e:	d103      	bne.n	8009448 <_strtod_l+0xa18>
 8009440:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009442:	2b00      	cmp	r3, #0
 8009444:	f43f ada5 	beq.w	8008f92 <_strtod_l+0x562>
 8009448:	2200      	movs	r2, #0
 800944a:	4b36      	ldr	r3, [pc, #216]	@ (8009524 <_strtod_l+0xaf4>)
 800944c:	2600      	movs	r6, #0
 800944e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009452:	4f30      	ldr	r7, [pc, #192]	@ (8009514 <_strtod_l+0xae4>)
 8009454:	e7b3      	b.n	80093be <_strtod_l+0x98e>
 8009456:	2600      	movs	r6, #0
 8009458:	4f2f      	ldr	r7, [pc, #188]	@ (8009518 <_strtod_l+0xae8>)
 800945a:	e7ac      	b.n	80093b6 <_strtod_l+0x986>
 800945c:	4630      	mov	r0, r6
 800945e:	4639      	mov	r1, r7
 8009460:	4b2d      	ldr	r3, [pc, #180]	@ (8009518 <_strtod_l+0xae8>)
 8009462:	2200      	movs	r2, #0
 8009464:	f7f7 f838 	bl	80004d8 <__aeabi_dmul>
 8009468:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800946a:	4606      	mov	r6, r0
 800946c:	460f      	mov	r7, r1
 800946e:	2b00      	cmp	r3, #0
 8009470:	d0a1      	beq.n	80093b6 <_strtod_l+0x986>
 8009472:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009476:	e7a2      	b.n	80093be <_strtod_l+0x98e>
 8009478:	2200      	movs	r2, #0
 800947a:	4b26      	ldr	r3, [pc, #152]	@ (8009514 <_strtod_l+0xae4>)
 800947c:	4616      	mov	r6, r2
 800947e:	461f      	mov	r7, r3
 8009480:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009484:	e79b      	b.n	80093be <_strtod_l+0x98e>
 8009486:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800948a:	9b08      	ldr	r3, [sp, #32]
 800948c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009490:	2b00      	cmp	r3, #0
 8009492:	d1c1      	bne.n	8009418 <_strtod_l+0x9e8>
 8009494:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009498:	0d1b      	lsrs	r3, r3, #20
 800949a:	051b      	lsls	r3, r3, #20
 800949c:	429d      	cmp	r5, r3
 800949e:	d1bb      	bne.n	8009418 <_strtod_l+0x9e8>
 80094a0:	4630      	mov	r0, r6
 80094a2:	4639      	mov	r1, r7
 80094a4:	f7f7 fdbe 	bl	8001024 <__aeabi_d2lz>
 80094a8:	f7f6 ffe8 	bl	800047c <__aeabi_l2d>
 80094ac:	4602      	mov	r2, r0
 80094ae:	460b      	mov	r3, r1
 80094b0:	4630      	mov	r0, r6
 80094b2:	4639      	mov	r1, r7
 80094b4:	f7f6 fe58 	bl	8000168 <__aeabi_dsub>
 80094b8:	460b      	mov	r3, r1
 80094ba:	4602      	mov	r2, r0
 80094bc:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80094c0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80094c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094c6:	ea46 060a 	orr.w	r6, r6, sl
 80094ca:	431e      	orrs	r6, r3
 80094cc:	d069      	beq.n	80095a2 <_strtod_l+0xb72>
 80094ce:	a30a      	add	r3, pc, #40	@ (adr r3, 80094f8 <_strtod_l+0xac8>)
 80094d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d4:	f7f7 fa72 	bl	80009bc <__aeabi_dcmplt>
 80094d8:	2800      	cmp	r0, #0
 80094da:	f47f accf 	bne.w	8008e7c <_strtod_l+0x44c>
 80094de:	a308      	add	r3, pc, #32	@ (adr r3, 8009500 <_strtod_l+0xad0>)
 80094e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80094e8:	f7f7 fa86 	bl	80009f8 <__aeabi_dcmpgt>
 80094ec:	2800      	cmp	r0, #0
 80094ee:	d093      	beq.n	8009418 <_strtod_l+0x9e8>
 80094f0:	e4c4      	b.n	8008e7c <_strtod_l+0x44c>
 80094f2:	bf00      	nop
 80094f4:	f3af 8000 	nop.w
 80094f8:	94a03595 	.word	0x94a03595
 80094fc:	3fdfffff 	.word	0x3fdfffff
 8009500:	35afe535 	.word	0x35afe535
 8009504:	3fe00000 	.word	0x3fe00000
 8009508:	000fffff 	.word	0x000fffff
 800950c:	7ff00000 	.word	0x7ff00000
 8009510:	7fefffff 	.word	0x7fefffff
 8009514:	3ff00000 	.word	0x3ff00000
 8009518:	3fe00000 	.word	0x3fe00000
 800951c:	7fe00000 	.word	0x7fe00000
 8009520:	7c9fffff 	.word	0x7c9fffff
 8009524:	bff00000 	.word	0xbff00000
 8009528:	9b08      	ldr	r3, [sp, #32]
 800952a:	b323      	cbz	r3, 8009576 <_strtod_l+0xb46>
 800952c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009530:	d821      	bhi.n	8009576 <_strtod_l+0xb46>
 8009532:	a327      	add	r3, pc, #156	@ (adr r3, 80095d0 <_strtod_l+0xba0>)
 8009534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009538:	4630      	mov	r0, r6
 800953a:	4639      	mov	r1, r7
 800953c:	f7f7 fa48 	bl	80009d0 <__aeabi_dcmple>
 8009540:	b1a0      	cbz	r0, 800956c <_strtod_l+0xb3c>
 8009542:	4639      	mov	r1, r7
 8009544:	4630      	mov	r0, r6
 8009546:	f7f7 fa9f 	bl	8000a88 <__aeabi_d2uiz>
 800954a:	2801      	cmp	r0, #1
 800954c:	bf38      	it	cc
 800954e:	2001      	movcc	r0, #1
 8009550:	f7f6 ff48 	bl	80003e4 <__aeabi_ui2d>
 8009554:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009556:	4606      	mov	r6, r0
 8009558:	460f      	mov	r7, r1
 800955a:	b9fb      	cbnz	r3, 800959c <_strtod_l+0xb6c>
 800955c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009560:	9014      	str	r0, [sp, #80]	@ 0x50
 8009562:	9315      	str	r3, [sp, #84]	@ 0x54
 8009564:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009568:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800956c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800956e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009572:	1b5b      	subs	r3, r3, r5
 8009574:	9311      	str	r3, [sp, #68]	@ 0x44
 8009576:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800957a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800957e:	f7ff f8ff 	bl	8008780 <__ulp>
 8009582:	4602      	mov	r2, r0
 8009584:	460b      	mov	r3, r1
 8009586:	4650      	mov	r0, sl
 8009588:	4659      	mov	r1, fp
 800958a:	f7f6 ffa5 	bl	80004d8 <__aeabi_dmul>
 800958e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009592:	f7f6 fdeb 	bl	800016c <__adddf3>
 8009596:	4682      	mov	sl, r0
 8009598:	468b      	mov	fp, r1
 800959a:	e776      	b.n	800948a <_strtod_l+0xa5a>
 800959c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80095a0:	e7e0      	b.n	8009564 <_strtod_l+0xb34>
 80095a2:	a30d      	add	r3, pc, #52	@ (adr r3, 80095d8 <_strtod_l+0xba8>)
 80095a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a8:	f7f7 fa08 	bl	80009bc <__aeabi_dcmplt>
 80095ac:	e79e      	b.n	80094ec <_strtod_l+0xabc>
 80095ae:	2300      	movs	r3, #0
 80095b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80095b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80095b4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80095b6:	6013      	str	r3, [r2, #0]
 80095b8:	f7ff ba77 	b.w	8008aaa <_strtod_l+0x7a>
 80095bc:	2a65      	cmp	r2, #101	@ 0x65
 80095be:	f43f ab6e 	beq.w	8008c9e <_strtod_l+0x26e>
 80095c2:	2a45      	cmp	r2, #69	@ 0x45
 80095c4:	f43f ab6b 	beq.w	8008c9e <_strtod_l+0x26e>
 80095c8:	2301      	movs	r3, #1
 80095ca:	f7ff bba6 	b.w	8008d1a <_strtod_l+0x2ea>
 80095ce:	bf00      	nop
 80095d0:	ffc00000 	.word	0xffc00000
 80095d4:	41dfffff 	.word	0x41dfffff
 80095d8:	94a03595 	.word	0x94a03595
 80095dc:	3fcfffff 	.word	0x3fcfffff

080095e0 <_strtod_r>:
 80095e0:	4b01      	ldr	r3, [pc, #4]	@ (80095e8 <_strtod_r+0x8>)
 80095e2:	f7ff ba25 	b.w	8008a30 <_strtod_l>
 80095e6:	bf00      	nop
 80095e8:	2000006c 	.word	0x2000006c

080095ec <_strtol_l.constprop.0>:
 80095ec:	2b24      	cmp	r3, #36	@ 0x24
 80095ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095f2:	4686      	mov	lr, r0
 80095f4:	4690      	mov	r8, r2
 80095f6:	d801      	bhi.n	80095fc <_strtol_l.constprop.0+0x10>
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	d106      	bne.n	800960a <_strtol_l.constprop.0+0x1e>
 80095fc:	f7fd fdc0 	bl	8007180 <__errno>
 8009600:	2316      	movs	r3, #22
 8009602:	6003      	str	r3, [r0, #0]
 8009604:	2000      	movs	r0, #0
 8009606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800960a:	460d      	mov	r5, r1
 800960c:	4833      	ldr	r0, [pc, #204]	@ (80096dc <_strtol_l.constprop.0+0xf0>)
 800960e:	462a      	mov	r2, r5
 8009610:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009614:	5d06      	ldrb	r6, [r0, r4]
 8009616:	f016 0608 	ands.w	r6, r6, #8
 800961a:	d1f8      	bne.n	800960e <_strtol_l.constprop.0+0x22>
 800961c:	2c2d      	cmp	r4, #45	@ 0x2d
 800961e:	d12d      	bne.n	800967c <_strtol_l.constprop.0+0x90>
 8009620:	2601      	movs	r6, #1
 8009622:	782c      	ldrb	r4, [r5, #0]
 8009624:	1c95      	adds	r5, r2, #2
 8009626:	f033 0210 	bics.w	r2, r3, #16
 800962a:	d109      	bne.n	8009640 <_strtol_l.constprop.0+0x54>
 800962c:	2c30      	cmp	r4, #48	@ 0x30
 800962e:	d12a      	bne.n	8009686 <_strtol_l.constprop.0+0x9a>
 8009630:	782a      	ldrb	r2, [r5, #0]
 8009632:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009636:	2a58      	cmp	r2, #88	@ 0x58
 8009638:	d125      	bne.n	8009686 <_strtol_l.constprop.0+0x9a>
 800963a:	2310      	movs	r3, #16
 800963c:	786c      	ldrb	r4, [r5, #1]
 800963e:	3502      	adds	r5, #2
 8009640:	2200      	movs	r2, #0
 8009642:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009646:	f10c 3cff 	add.w	ip, ip, #4294967295
 800964a:	fbbc f9f3 	udiv	r9, ip, r3
 800964e:	4610      	mov	r0, r2
 8009650:	fb03 ca19 	mls	sl, r3, r9, ip
 8009654:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009658:	2f09      	cmp	r7, #9
 800965a:	d81b      	bhi.n	8009694 <_strtol_l.constprop.0+0xa8>
 800965c:	463c      	mov	r4, r7
 800965e:	42a3      	cmp	r3, r4
 8009660:	dd27      	ble.n	80096b2 <_strtol_l.constprop.0+0xc6>
 8009662:	1c57      	adds	r7, r2, #1
 8009664:	d007      	beq.n	8009676 <_strtol_l.constprop.0+0x8a>
 8009666:	4581      	cmp	r9, r0
 8009668:	d320      	bcc.n	80096ac <_strtol_l.constprop.0+0xc0>
 800966a:	d101      	bne.n	8009670 <_strtol_l.constprop.0+0x84>
 800966c:	45a2      	cmp	sl, r4
 800966e:	db1d      	blt.n	80096ac <_strtol_l.constprop.0+0xc0>
 8009670:	2201      	movs	r2, #1
 8009672:	fb00 4003 	mla	r0, r0, r3, r4
 8009676:	f815 4b01 	ldrb.w	r4, [r5], #1
 800967a:	e7eb      	b.n	8009654 <_strtol_l.constprop.0+0x68>
 800967c:	2c2b      	cmp	r4, #43	@ 0x2b
 800967e:	bf04      	itt	eq
 8009680:	782c      	ldrbeq	r4, [r5, #0]
 8009682:	1c95      	addeq	r5, r2, #2
 8009684:	e7cf      	b.n	8009626 <_strtol_l.constprop.0+0x3a>
 8009686:	2b00      	cmp	r3, #0
 8009688:	d1da      	bne.n	8009640 <_strtol_l.constprop.0+0x54>
 800968a:	2c30      	cmp	r4, #48	@ 0x30
 800968c:	bf0c      	ite	eq
 800968e:	2308      	moveq	r3, #8
 8009690:	230a      	movne	r3, #10
 8009692:	e7d5      	b.n	8009640 <_strtol_l.constprop.0+0x54>
 8009694:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009698:	2f19      	cmp	r7, #25
 800969a:	d801      	bhi.n	80096a0 <_strtol_l.constprop.0+0xb4>
 800969c:	3c37      	subs	r4, #55	@ 0x37
 800969e:	e7de      	b.n	800965e <_strtol_l.constprop.0+0x72>
 80096a0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80096a4:	2f19      	cmp	r7, #25
 80096a6:	d804      	bhi.n	80096b2 <_strtol_l.constprop.0+0xc6>
 80096a8:	3c57      	subs	r4, #87	@ 0x57
 80096aa:	e7d8      	b.n	800965e <_strtol_l.constprop.0+0x72>
 80096ac:	f04f 32ff 	mov.w	r2, #4294967295
 80096b0:	e7e1      	b.n	8009676 <_strtol_l.constprop.0+0x8a>
 80096b2:	1c53      	adds	r3, r2, #1
 80096b4:	d108      	bne.n	80096c8 <_strtol_l.constprop.0+0xdc>
 80096b6:	2322      	movs	r3, #34	@ 0x22
 80096b8:	4660      	mov	r0, ip
 80096ba:	f8ce 3000 	str.w	r3, [lr]
 80096be:	f1b8 0f00 	cmp.w	r8, #0
 80096c2:	d0a0      	beq.n	8009606 <_strtol_l.constprop.0+0x1a>
 80096c4:	1e69      	subs	r1, r5, #1
 80096c6:	e006      	b.n	80096d6 <_strtol_l.constprop.0+0xea>
 80096c8:	b106      	cbz	r6, 80096cc <_strtol_l.constprop.0+0xe0>
 80096ca:	4240      	negs	r0, r0
 80096cc:	f1b8 0f00 	cmp.w	r8, #0
 80096d0:	d099      	beq.n	8009606 <_strtol_l.constprop.0+0x1a>
 80096d2:	2a00      	cmp	r2, #0
 80096d4:	d1f6      	bne.n	80096c4 <_strtol_l.constprop.0+0xd8>
 80096d6:	f8c8 1000 	str.w	r1, [r8]
 80096da:	e794      	b.n	8009606 <_strtol_l.constprop.0+0x1a>
 80096dc:	0800ab59 	.word	0x0800ab59

080096e0 <_strtol_r>:
 80096e0:	f7ff bf84 	b.w	80095ec <_strtol_l.constprop.0>

080096e4 <__ssputs_r>:
 80096e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096e8:	461f      	mov	r7, r3
 80096ea:	688e      	ldr	r6, [r1, #8]
 80096ec:	4682      	mov	sl, r0
 80096ee:	42be      	cmp	r6, r7
 80096f0:	460c      	mov	r4, r1
 80096f2:	4690      	mov	r8, r2
 80096f4:	680b      	ldr	r3, [r1, #0]
 80096f6:	d82d      	bhi.n	8009754 <__ssputs_r+0x70>
 80096f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80096fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009700:	d026      	beq.n	8009750 <__ssputs_r+0x6c>
 8009702:	6965      	ldr	r5, [r4, #20]
 8009704:	6909      	ldr	r1, [r1, #16]
 8009706:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800970a:	eba3 0901 	sub.w	r9, r3, r1
 800970e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009712:	1c7b      	adds	r3, r7, #1
 8009714:	444b      	add	r3, r9
 8009716:	106d      	asrs	r5, r5, #1
 8009718:	429d      	cmp	r5, r3
 800971a:	bf38      	it	cc
 800971c:	461d      	movcc	r5, r3
 800971e:	0553      	lsls	r3, r2, #21
 8009720:	d527      	bpl.n	8009772 <__ssputs_r+0x8e>
 8009722:	4629      	mov	r1, r5
 8009724:	f7fe fc2e 	bl	8007f84 <_malloc_r>
 8009728:	4606      	mov	r6, r0
 800972a:	b360      	cbz	r0, 8009786 <__ssputs_r+0xa2>
 800972c:	464a      	mov	r2, r9
 800972e:	6921      	ldr	r1, [r4, #16]
 8009730:	f000 fa14 	bl	8009b5c <memcpy>
 8009734:	89a3      	ldrh	r3, [r4, #12]
 8009736:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800973a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800973e:	81a3      	strh	r3, [r4, #12]
 8009740:	6126      	str	r6, [r4, #16]
 8009742:	444e      	add	r6, r9
 8009744:	6026      	str	r6, [r4, #0]
 8009746:	463e      	mov	r6, r7
 8009748:	6165      	str	r5, [r4, #20]
 800974a:	eba5 0509 	sub.w	r5, r5, r9
 800974e:	60a5      	str	r5, [r4, #8]
 8009750:	42be      	cmp	r6, r7
 8009752:	d900      	bls.n	8009756 <__ssputs_r+0x72>
 8009754:	463e      	mov	r6, r7
 8009756:	4632      	mov	r2, r6
 8009758:	4641      	mov	r1, r8
 800975a:	6820      	ldr	r0, [r4, #0]
 800975c:	f000 f9c2 	bl	8009ae4 <memmove>
 8009760:	2000      	movs	r0, #0
 8009762:	68a3      	ldr	r3, [r4, #8]
 8009764:	1b9b      	subs	r3, r3, r6
 8009766:	60a3      	str	r3, [r4, #8]
 8009768:	6823      	ldr	r3, [r4, #0]
 800976a:	4433      	add	r3, r6
 800976c:	6023      	str	r3, [r4, #0]
 800976e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009772:	462a      	mov	r2, r5
 8009774:	f000 fd83 	bl	800a27e <_realloc_r>
 8009778:	4606      	mov	r6, r0
 800977a:	2800      	cmp	r0, #0
 800977c:	d1e0      	bne.n	8009740 <__ssputs_r+0x5c>
 800977e:	4650      	mov	r0, sl
 8009780:	6921      	ldr	r1, [r4, #16]
 8009782:	f7fe fb8d 	bl	8007ea0 <_free_r>
 8009786:	230c      	movs	r3, #12
 8009788:	f8ca 3000 	str.w	r3, [sl]
 800978c:	89a3      	ldrh	r3, [r4, #12]
 800978e:	f04f 30ff 	mov.w	r0, #4294967295
 8009792:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009796:	81a3      	strh	r3, [r4, #12]
 8009798:	e7e9      	b.n	800976e <__ssputs_r+0x8a>
	...

0800979c <_svfiprintf_r>:
 800979c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097a0:	4698      	mov	r8, r3
 80097a2:	898b      	ldrh	r3, [r1, #12]
 80097a4:	4607      	mov	r7, r0
 80097a6:	061b      	lsls	r3, r3, #24
 80097a8:	460d      	mov	r5, r1
 80097aa:	4614      	mov	r4, r2
 80097ac:	b09d      	sub	sp, #116	@ 0x74
 80097ae:	d510      	bpl.n	80097d2 <_svfiprintf_r+0x36>
 80097b0:	690b      	ldr	r3, [r1, #16]
 80097b2:	b973      	cbnz	r3, 80097d2 <_svfiprintf_r+0x36>
 80097b4:	2140      	movs	r1, #64	@ 0x40
 80097b6:	f7fe fbe5 	bl	8007f84 <_malloc_r>
 80097ba:	6028      	str	r0, [r5, #0]
 80097bc:	6128      	str	r0, [r5, #16]
 80097be:	b930      	cbnz	r0, 80097ce <_svfiprintf_r+0x32>
 80097c0:	230c      	movs	r3, #12
 80097c2:	603b      	str	r3, [r7, #0]
 80097c4:	f04f 30ff 	mov.w	r0, #4294967295
 80097c8:	b01d      	add	sp, #116	@ 0x74
 80097ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ce:	2340      	movs	r3, #64	@ 0x40
 80097d0:	616b      	str	r3, [r5, #20]
 80097d2:	2300      	movs	r3, #0
 80097d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80097d6:	2320      	movs	r3, #32
 80097d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80097dc:	2330      	movs	r3, #48	@ 0x30
 80097de:	f04f 0901 	mov.w	r9, #1
 80097e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80097e6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009980 <_svfiprintf_r+0x1e4>
 80097ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80097ee:	4623      	mov	r3, r4
 80097f0:	469a      	mov	sl, r3
 80097f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097f6:	b10a      	cbz	r2, 80097fc <_svfiprintf_r+0x60>
 80097f8:	2a25      	cmp	r2, #37	@ 0x25
 80097fa:	d1f9      	bne.n	80097f0 <_svfiprintf_r+0x54>
 80097fc:	ebba 0b04 	subs.w	fp, sl, r4
 8009800:	d00b      	beq.n	800981a <_svfiprintf_r+0x7e>
 8009802:	465b      	mov	r3, fp
 8009804:	4622      	mov	r2, r4
 8009806:	4629      	mov	r1, r5
 8009808:	4638      	mov	r0, r7
 800980a:	f7ff ff6b 	bl	80096e4 <__ssputs_r>
 800980e:	3001      	adds	r0, #1
 8009810:	f000 80a7 	beq.w	8009962 <_svfiprintf_r+0x1c6>
 8009814:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009816:	445a      	add	r2, fp
 8009818:	9209      	str	r2, [sp, #36]	@ 0x24
 800981a:	f89a 3000 	ldrb.w	r3, [sl]
 800981e:	2b00      	cmp	r3, #0
 8009820:	f000 809f 	beq.w	8009962 <_svfiprintf_r+0x1c6>
 8009824:	2300      	movs	r3, #0
 8009826:	f04f 32ff 	mov.w	r2, #4294967295
 800982a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800982e:	f10a 0a01 	add.w	sl, sl, #1
 8009832:	9304      	str	r3, [sp, #16]
 8009834:	9307      	str	r3, [sp, #28]
 8009836:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800983a:	931a      	str	r3, [sp, #104]	@ 0x68
 800983c:	4654      	mov	r4, sl
 800983e:	2205      	movs	r2, #5
 8009840:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009844:	484e      	ldr	r0, [pc, #312]	@ (8009980 <_svfiprintf_r+0x1e4>)
 8009846:	f7fd fcc8 	bl	80071da <memchr>
 800984a:	9a04      	ldr	r2, [sp, #16]
 800984c:	b9d8      	cbnz	r0, 8009886 <_svfiprintf_r+0xea>
 800984e:	06d0      	lsls	r0, r2, #27
 8009850:	bf44      	itt	mi
 8009852:	2320      	movmi	r3, #32
 8009854:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009858:	0711      	lsls	r1, r2, #28
 800985a:	bf44      	itt	mi
 800985c:	232b      	movmi	r3, #43	@ 0x2b
 800985e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009862:	f89a 3000 	ldrb.w	r3, [sl]
 8009866:	2b2a      	cmp	r3, #42	@ 0x2a
 8009868:	d015      	beq.n	8009896 <_svfiprintf_r+0xfa>
 800986a:	4654      	mov	r4, sl
 800986c:	2000      	movs	r0, #0
 800986e:	f04f 0c0a 	mov.w	ip, #10
 8009872:	9a07      	ldr	r2, [sp, #28]
 8009874:	4621      	mov	r1, r4
 8009876:	f811 3b01 	ldrb.w	r3, [r1], #1
 800987a:	3b30      	subs	r3, #48	@ 0x30
 800987c:	2b09      	cmp	r3, #9
 800987e:	d94b      	bls.n	8009918 <_svfiprintf_r+0x17c>
 8009880:	b1b0      	cbz	r0, 80098b0 <_svfiprintf_r+0x114>
 8009882:	9207      	str	r2, [sp, #28]
 8009884:	e014      	b.n	80098b0 <_svfiprintf_r+0x114>
 8009886:	eba0 0308 	sub.w	r3, r0, r8
 800988a:	fa09 f303 	lsl.w	r3, r9, r3
 800988e:	4313      	orrs	r3, r2
 8009890:	46a2      	mov	sl, r4
 8009892:	9304      	str	r3, [sp, #16]
 8009894:	e7d2      	b.n	800983c <_svfiprintf_r+0xa0>
 8009896:	9b03      	ldr	r3, [sp, #12]
 8009898:	1d19      	adds	r1, r3, #4
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	9103      	str	r1, [sp, #12]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	bfbb      	ittet	lt
 80098a2:	425b      	neglt	r3, r3
 80098a4:	f042 0202 	orrlt.w	r2, r2, #2
 80098a8:	9307      	strge	r3, [sp, #28]
 80098aa:	9307      	strlt	r3, [sp, #28]
 80098ac:	bfb8      	it	lt
 80098ae:	9204      	strlt	r2, [sp, #16]
 80098b0:	7823      	ldrb	r3, [r4, #0]
 80098b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80098b4:	d10a      	bne.n	80098cc <_svfiprintf_r+0x130>
 80098b6:	7863      	ldrb	r3, [r4, #1]
 80098b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80098ba:	d132      	bne.n	8009922 <_svfiprintf_r+0x186>
 80098bc:	9b03      	ldr	r3, [sp, #12]
 80098be:	3402      	adds	r4, #2
 80098c0:	1d1a      	adds	r2, r3, #4
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	9203      	str	r2, [sp, #12]
 80098c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80098ca:	9305      	str	r3, [sp, #20]
 80098cc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009984 <_svfiprintf_r+0x1e8>
 80098d0:	2203      	movs	r2, #3
 80098d2:	4650      	mov	r0, sl
 80098d4:	7821      	ldrb	r1, [r4, #0]
 80098d6:	f7fd fc80 	bl	80071da <memchr>
 80098da:	b138      	cbz	r0, 80098ec <_svfiprintf_r+0x150>
 80098dc:	2240      	movs	r2, #64	@ 0x40
 80098de:	9b04      	ldr	r3, [sp, #16]
 80098e0:	eba0 000a 	sub.w	r0, r0, sl
 80098e4:	4082      	lsls	r2, r0
 80098e6:	4313      	orrs	r3, r2
 80098e8:	3401      	adds	r4, #1
 80098ea:	9304      	str	r3, [sp, #16]
 80098ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098f0:	2206      	movs	r2, #6
 80098f2:	4825      	ldr	r0, [pc, #148]	@ (8009988 <_svfiprintf_r+0x1ec>)
 80098f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80098f8:	f7fd fc6f 	bl	80071da <memchr>
 80098fc:	2800      	cmp	r0, #0
 80098fe:	d036      	beq.n	800996e <_svfiprintf_r+0x1d2>
 8009900:	4b22      	ldr	r3, [pc, #136]	@ (800998c <_svfiprintf_r+0x1f0>)
 8009902:	bb1b      	cbnz	r3, 800994c <_svfiprintf_r+0x1b0>
 8009904:	9b03      	ldr	r3, [sp, #12]
 8009906:	3307      	adds	r3, #7
 8009908:	f023 0307 	bic.w	r3, r3, #7
 800990c:	3308      	adds	r3, #8
 800990e:	9303      	str	r3, [sp, #12]
 8009910:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009912:	4433      	add	r3, r6
 8009914:	9309      	str	r3, [sp, #36]	@ 0x24
 8009916:	e76a      	b.n	80097ee <_svfiprintf_r+0x52>
 8009918:	460c      	mov	r4, r1
 800991a:	2001      	movs	r0, #1
 800991c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009920:	e7a8      	b.n	8009874 <_svfiprintf_r+0xd8>
 8009922:	2300      	movs	r3, #0
 8009924:	f04f 0c0a 	mov.w	ip, #10
 8009928:	4619      	mov	r1, r3
 800992a:	3401      	adds	r4, #1
 800992c:	9305      	str	r3, [sp, #20]
 800992e:	4620      	mov	r0, r4
 8009930:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009934:	3a30      	subs	r2, #48	@ 0x30
 8009936:	2a09      	cmp	r2, #9
 8009938:	d903      	bls.n	8009942 <_svfiprintf_r+0x1a6>
 800993a:	2b00      	cmp	r3, #0
 800993c:	d0c6      	beq.n	80098cc <_svfiprintf_r+0x130>
 800993e:	9105      	str	r1, [sp, #20]
 8009940:	e7c4      	b.n	80098cc <_svfiprintf_r+0x130>
 8009942:	4604      	mov	r4, r0
 8009944:	2301      	movs	r3, #1
 8009946:	fb0c 2101 	mla	r1, ip, r1, r2
 800994a:	e7f0      	b.n	800992e <_svfiprintf_r+0x192>
 800994c:	ab03      	add	r3, sp, #12
 800994e:	9300      	str	r3, [sp, #0]
 8009950:	462a      	mov	r2, r5
 8009952:	4638      	mov	r0, r7
 8009954:	4b0e      	ldr	r3, [pc, #56]	@ (8009990 <_svfiprintf_r+0x1f4>)
 8009956:	a904      	add	r1, sp, #16
 8009958:	f7fc fccc 	bl	80062f4 <_printf_float>
 800995c:	1c42      	adds	r2, r0, #1
 800995e:	4606      	mov	r6, r0
 8009960:	d1d6      	bne.n	8009910 <_svfiprintf_r+0x174>
 8009962:	89ab      	ldrh	r3, [r5, #12]
 8009964:	065b      	lsls	r3, r3, #25
 8009966:	f53f af2d 	bmi.w	80097c4 <_svfiprintf_r+0x28>
 800996a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800996c:	e72c      	b.n	80097c8 <_svfiprintf_r+0x2c>
 800996e:	ab03      	add	r3, sp, #12
 8009970:	9300      	str	r3, [sp, #0]
 8009972:	462a      	mov	r2, r5
 8009974:	4638      	mov	r0, r7
 8009976:	4b06      	ldr	r3, [pc, #24]	@ (8009990 <_svfiprintf_r+0x1f4>)
 8009978:	a904      	add	r1, sp, #16
 800997a:	f7fc ff59 	bl	8006830 <_printf_i>
 800997e:	e7ed      	b.n	800995c <_svfiprintf_r+0x1c0>
 8009980:	0800ac59 	.word	0x0800ac59
 8009984:	0800ac5f 	.word	0x0800ac5f
 8009988:	0800ac63 	.word	0x0800ac63
 800998c:	080062f5 	.word	0x080062f5
 8009990:	080096e5 	.word	0x080096e5

08009994 <__sflush_r>:
 8009994:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800999a:	0716      	lsls	r6, r2, #28
 800999c:	4605      	mov	r5, r0
 800999e:	460c      	mov	r4, r1
 80099a0:	d454      	bmi.n	8009a4c <__sflush_r+0xb8>
 80099a2:	684b      	ldr	r3, [r1, #4]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	dc02      	bgt.n	80099ae <__sflush_r+0x1a>
 80099a8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	dd48      	ble.n	8009a40 <__sflush_r+0xac>
 80099ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80099b0:	2e00      	cmp	r6, #0
 80099b2:	d045      	beq.n	8009a40 <__sflush_r+0xac>
 80099b4:	2300      	movs	r3, #0
 80099b6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80099ba:	682f      	ldr	r7, [r5, #0]
 80099bc:	6a21      	ldr	r1, [r4, #32]
 80099be:	602b      	str	r3, [r5, #0]
 80099c0:	d030      	beq.n	8009a24 <__sflush_r+0x90>
 80099c2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80099c4:	89a3      	ldrh	r3, [r4, #12]
 80099c6:	0759      	lsls	r1, r3, #29
 80099c8:	d505      	bpl.n	80099d6 <__sflush_r+0x42>
 80099ca:	6863      	ldr	r3, [r4, #4]
 80099cc:	1ad2      	subs	r2, r2, r3
 80099ce:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80099d0:	b10b      	cbz	r3, 80099d6 <__sflush_r+0x42>
 80099d2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80099d4:	1ad2      	subs	r2, r2, r3
 80099d6:	2300      	movs	r3, #0
 80099d8:	4628      	mov	r0, r5
 80099da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80099dc:	6a21      	ldr	r1, [r4, #32]
 80099de:	47b0      	blx	r6
 80099e0:	1c43      	adds	r3, r0, #1
 80099e2:	89a3      	ldrh	r3, [r4, #12]
 80099e4:	d106      	bne.n	80099f4 <__sflush_r+0x60>
 80099e6:	6829      	ldr	r1, [r5, #0]
 80099e8:	291d      	cmp	r1, #29
 80099ea:	d82b      	bhi.n	8009a44 <__sflush_r+0xb0>
 80099ec:	4a28      	ldr	r2, [pc, #160]	@ (8009a90 <__sflush_r+0xfc>)
 80099ee:	410a      	asrs	r2, r1
 80099f0:	07d6      	lsls	r6, r2, #31
 80099f2:	d427      	bmi.n	8009a44 <__sflush_r+0xb0>
 80099f4:	2200      	movs	r2, #0
 80099f6:	6062      	str	r2, [r4, #4]
 80099f8:	6922      	ldr	r2, [r4, #16]
 80099fa:	04d9      	lsls	r1, r3, #19
 80099fc:	6022      	str	r2, [r4, #0]
 80099fe:	d504      	bpl.n	8009a0a <__sflush_r+0x76>
 8009a00:	1c42      	adds	r2, r0, #1
 8009a02:	d101      	bne.n	8009a08 <__sflush_r+0x74>
 8009a04:	682b      	ldr	r3, [r5, #0]
 8009a06:	b903      	cbnz	r3, 8009a0a <__sflush_r+0x76>
 8009a08:	6560      	str	r0, [r4, #84]	@ 0x54
 8009a0a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009a0c:	602f      	str	r7, [r5, #0]
 8009a0e:	b1b9      	cbz	r1, 8009a40 <__sflush_r+0xac>
 8009a10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009a14:	4299      	cmp	r1, r3
 8009a16:	d002      	beq.n	8009a1e <__sflush_r+0x8a>
 8009a18:	4628      	mov	r0, r5
 8009a1a:	f7fe fa41 	bl	8007ea0 <_free_r>
 8009a1e:	2300      	movs	r3, #0
 8009a20:	6363      	str	r3, [r4, #52]	@ 0x34
 8009a22:	e00d      	b.n	8009a40 <__sflush_r+0xac>
 8009a24:	2301      	movs	r3, #1
 8009a26:	4628      	mov	r0, r5
 8009a28:	47b0      	blx	r6
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	1c50      	adds	r0, r2, #1
 8009a2e:	d1c9      	bne.n	80099c4 <__sflush_r+0x30>
 8009a30:	682b      	ldr	r3, [r5, #0]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d0c6      	beq.n	80099c4 <__sflush_r+0x30>
 8009a36:	2b1d      	cmp	r3, #29
 8009a38:	d001      	beq.n	8009a3e <__sflush_r+0xaa>
 8009a3a:	2b16      	cmp	r3, #22
 8009a3c:	d11d      	bne.n	8009a7a <__sflush_r+0xe6>
 8009a3e:	602f      	str	r7, [r5, #0]
 8009a40:	2000      	movs	r0, #0
 8009a42:	e021      	b.n	8009a88 <__sflush_r+0xf4>
 8009a44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a48:	b21b      	sxth	r3, r3
 8009a4a:	e01a      	b.n	8009a82 <__sflush_r+0xee>
 8009a4c:	690f      	ldr	r7, [r1, #16]
 8009a4e:	2f00      	cmp	r7, #0
 8009a50:	d0f6      	beq.n	8009a40 <__sflush_r+0xac>
 8009a52:	0793      	lsls	r3, r2, #30
 8009a54:	bf18      	it	ne
 8009a56:	2300      	movne	r3, #0
 8009a58:	680e      	ldr	r6, [r1, #0]
 8009a5a:	bf08      	it	eq
 8009a5c:	694b      	ldreq	r3, [r1, #20]
 8009a5e:	1bf6      	subs	r6, r6, r7
 8009a60:	600f      	str	r7, [r1, #0]
 8009a62:	608b      	str	r3, [r1, #8]
 8009a64:	2e00      	cmp	r6, #0
 8009a66:	ddeb      	ble.n	8009a40 <__sflush_r+0xac>
 8009a68:	4633      	mov	r3, r6
 8009a6a:	463a      	mov	r2, r7
 8009a6c:	4628      	mov	r0, r5
 8009a6e:	6a21      	ldr	r1, [r4, #32]
 8009a70:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009a74:	47e0      	blx	ip
 8009a76:	2800      	cmp	r0, #0
 8009a78:	dc07      	bgt.n	8009a8a <__sflush_r+0xf6>
 8009a7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a82:	f04f 30ff 	mov.w	r0, #4294967295
 8009a86:	81a3      	strh	r3, [r4, #12]
 8009a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a8a:	4407      	add	r7, r0
 8009a8c:	1a36      	subs	r6, r6, r0
 8009a8e:	e7e9      	b.n	8009a64 <__sflush_r+0xd0>
 8009a90:	dfbffffe 	.word	0xdfbffffe

08009a94 <_fflush_r>:
 8009a94:	b538      	push	{r3, r4, r5, lr}
 8009a96:	690b      	ldr	r3, [r1, #16]
 8009a98:	4605      	mov	r5, r0
 8009a9a:	460c      	mov	r4, r1
 8009a9c:	b913      	cbnz	r3, 8009aa4 <_fflush_r+0x10>
 8009a9e:	2500      	movs	r5, #0
 8009aa0:	4628      	mov	r0, r5
 8009aa2:	bd38      	pop	{r3, r4, r5, pc}
 8009aa4:	b118      	cbz	r0, 8009aae <_fflush_r+0x1a>
 8009aa6:	6a03      	ldr	r3, [r0, #32]
 8009aa8:	b90b      	cbnz	r3, 8009aae <_fflush_r+0x1a>
 8009aaa:	f7fd fa7d 	bl	8006fa8 <__sinit>
 8009aae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d0f3      	beq.n	8009a9e <_fflush_r+0xa>
 8009ab6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009ab8:	07d0      	lsls	r0, r2, #31
 8009aba:	d404      	bmi.n	8009ac6 <_fflush_r+0x32>
 8009abc:	0599      	lsls	r1, r3, #22
 8009abe:	d402      	bmi.n	8009ac6 <_fflush_r+0x32>
 8009ac0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009ac2:	f7fd fb88 	bl	80071d6 <__retarget_lock_acquire_recursive>
 8009ac6:	4628      	mov	r0, r5
 8009ac8:	4621      	mov	r1, r4
 8009aca:	f7ff ff63 	bl	8009994 <__sflush_r>
 8009ace:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009ad0:	4605      	mov	r5, r0
 8009ad2:	07da      	lsls	r2, r3, #31
 8009ad4:	d4e4      	bmi.n	8009aa0 <_fflush_r+0xc>
 8009ad6:	89a3      	ldrh	r3, [r4, #12]
 8009ad8:	059b      	lsls	r3, r3, #22
 8009ada:	d4e1      	bmi.n	8009aa0 <_fflush_r+0xc>
 8009adc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009ade:	f7fd fb7b 	bl	80071d8 <__retarget_lock_release_recursive>
 8009ae2:	e7dd      	b.n	8009aa0 <_fflush_r+0xc>

08009ae4 <memmove>:
 8009ae4:	4288      	cmp	r0, r1
 8009ae6:	b510      	push	{r4, lr}
 8009ae8:	eb01 0402 	add.w	r4, r1, r2
 8009aec:	d902      	bls.n	8009af4 <memmove+0x10>
 8009aee:	4284      	cmp	r4, r0
 8009af0:	4623      	mov	r3, r4
 8009af2:	d807      	bhi.n	8009b04 <memmove+0x20>
 8009af4:	1e43      	subs	r3, r0, #1
 8009af6:	42a1      	cmp	r1, r4
 8009af8:	d008      	beq.n	8009b0c <memmove+0x28>
 8009afa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009afe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b02:	e7f8      	b.n	8009af6 <memmove+0x12>
 8009b04:	4601      	mov	r1, r0
 8009b06:	4402      	add	r2, r0
 8009b08:	428a      	cmp	r2, r1
 8009b0a:	d100      	bne.n	8009b0e <memmove+0x2a>
 8009b0c:	bd10      	pop	{r4, pc}
 8009b0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b16:	e7f7      	b.n	8009b08 <memmove+0x24>

08009b18 <strncmp>:
 8009b18:	b510      	push	{r4, lr}
 8009b1a:	b16a      	cbz	r2, 8009b38 <strncmp+0x20>
 8009b1c:	3901      	subs	r1, #1
 8009b1e:	1884      	adds	r4, r0, r2
 8009b20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b24:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	d103      	bne.n	8009b34 <strncmp+0x1c>
 8009b2c:	42a0      	cmp	r0, r4
 8009b2e:	d001      	beq.n	8009b34 <strncmp+0x1c>
 8009b30:	2a00      	cmp	r2, #0
 8009b32:	d1f5      	bne.n	8009b20 <strncmp+0x8>
 8009b34:	1ad0      	subs	r0, r2, r3
 8009b36:	bd10      	pop	{r4, pc}
 8009b38:	4610      	mov	r0, r2
 8009b3a:	e7fc      	b.n	8009b36 <strncmp+0x1e>

08009b3c <_sbrk_r>:
 8009b3c:	b538      	push	{r3, r4, r5, lr}
 8009b3e:	2300      	movs	r3, #0
 8009b40:	4d05      	ldr	r5, [pc, #20]	@ (8009b58 <_sbrk_r+0x1c>)
 8009b42:	4604      	mov	r4, r0
 8009b44:	4608      	mov	r0, r1
 8009b46:	602b      	str	r3, [r5, #0]
 8009b48:	f7f7 fe3c 	bl	80017c4 <_sbrk>
 8009b4c:	1c43      	adds	r3, r0, #1
 8009b4e:	d102      	bne.n	8009b56 <_sbrk_r+0x1a>
 8009b50:	682b      	ldr	r3, [r5, #0]
 8009b52:	b103      	cbz	r3, 8009b56 <_sbrk_r+0x1a>
 8009b54:	6023      	str	r3, [r4, #0]
 8009b56:	bd38      	pop	{r3, r4, r5, pc}
 8009b58:	20000468 	.word	0x20000468

08009b5c <memcpy>:
 8009b5c:	440a      	add	r2, r1
 8009b5e:	4291      	cmp	r1, r2
 8009b60:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b64:	d100      	bne.n	8009b68 <memcpy+0xc>
 8009b66:	4770      	bx	lr
 8009b68:	b510      	push	{r4, lr}
 8009b6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b6e:	4291      	cmp	r1, r2
 8009b70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b74:	d1f9      	bne.n	8009b6a <memcpy+0xe>
 8009b76:	bd10      	pop	{r4, pc}

08009b78 <nan>:
 8009b78:	2000      	movs	r0, #0
 8009b7a:	4901      	ldr	r1, [pc, #4]	@ (8009b80 <nan+0x8>)
 8009b7c:	4770      	bx	lr
 8009b7e:	bf00      	nop
 8009b80:	7ff80000 	.word	0x7ff80000

08009b84 <__assert_func>:
 8009b84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b86:	4614      	mov	r4, r2
 8009b88:	461a      	mov	r2, r3
 8009b8a:	4b09      	ldr	r3, [pc, #36]	@ (8009bb0 <__assert_func+0x2c>)
 8009b8c:	4605      	mov	r5, r0
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	68d8      	ldr	r0, [r3, #12]
 8009b92:	b954      	cbnz	r4, 8009baa <__assert_func+0x26>
 8009b94:	4b07      	ldr	r3, [pc, #28]	@ (8009bb4 <__assert_func+0x30>)
 8009b96:	461c      	mov	r4, r3
 8009b98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009b9c:	9100      	str	r1, [sp, #0]
 8009b9e:	462b      	mov	r3, r5
 8009ba0:	4905      	ldr	r1, [pc, #20]	@ (8009bb8 <__assert_func+0x34>)
 8009ba2:	f000 fba7 	bl	800a2f4 <fiprintf>
 8009ba6:	f000 fbb7 	bl	800a318 <abort>
 8009baa:	4b04      	ldr	r3, [pc, #16]	@ (8009bbc <__assert_func+0x38>)
 8009bac:	e7f4      	b.n	8009b98 <__assert_func+0x14>
 8009bae:	bf00      	nop
 8009bb0:	2000001c 	.word	0x2000001c
 8009bb4:	0800acad 	.word	0x0800acad
 8009bb8:	0800ac7f 	.word	0x0800ac7f
 8009bbc:	0800ac72 	.word	0x0800ac72

08009bc0 <_calloc_r>:
 8009bc0:	b570      	push	{r4, r5, r6, lr}
 8009bc2:	fba1 5402 	umull	r5, r4, r1, r2
 8009bc6:	b93c      	cbnz	r4, 8009bd8 <_calloc_r+0x18>
 8009bc8:	4629      	mov	r1, r5
 8009bca:	f7fe f9db 	bl	8007f84 <_malloc_r>
 8009bce:	4606      	mov	r6, r0
 8009bd0:	b928      	cbnz	r0, 8009bde <_calloc_r+0x1e>
 8009bd2:	2600      	movs	r6, #0
 8009bd4:	4630      	mov	r0, r6
 8009bd6:	bd70      	pop	{r4, r5, r6, pc}
 8009bd8:	220c      	movs	r2, #12
 8009bda:	6002      	str	r2, [r0, #0]
 8009bdc:	e7f9      	b.n	8009bd2 <_calloc_r+0x12>
 8009bde:	462a      	mov	r2, r5
 8009be0:	4621      	mov	r1, r4
 8009be2:	f7fd fa7a 	bl	80070da <memset>
 8009be6:	e7f5      	b.n	8009bd4 <_calloc_r+0x14>

08009be8 <rshift>:
 8009be8:	6903      	ldr	r3, [r0, #16]
 8009bea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009bee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009bf2:	f100 0414 	add.w	r4, r0, #20
 8009bf6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009bfa:	dd46      	ble.n	8009c8a <rshift+0xa2>
 8009bfc:	f011 011f 	ands.w	r1, r1, #31
 8009c00:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009c04:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009c08:	d10c      	bne.n	8009c24 <rshift+0x3c>
 8009c0a:	4629      	mov	r1, r5
 8009c0c:	f100 0710 	add.w	r7, r0, #16
 8009c10:	42b1      	cmp	r1, r6
 8009c12:	d335      	bcc.n	8009c80 <rshift+0x98>
 8009c14:	1a9b      	subs	r3, r3, r2
 8009c16:	009b      	lsls	r3, r3, #2
 8009c18:	1eea      	subs	r2, r5, #3
 8009c1a:	4296      	cmp	r6, r2
 8009c1c:	bf38      	it	cc
 8009c1e:	2300      	movcc	r3, #0
 8009c20:	4423      	add	r3, r4
 8009c22:	e015      	b.n	8009c50 <rshift+0x68>
 8009c24:	46a1      	mov	r9, r4
 8009c26:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009c2a:	f1c1 0820 	rsb	r8, r1, #32
 8009c2e:	40cf      	lsrs	r7, r1
 8009c30:	f105 0e04 	add.w	lr, r5, #4
 8009c34:	4576      	cmp	r6, lr
 8009c36:	46f4      	mov	ip, lr
 8009c38:	d816      	bhi.n	8009c68 <rshift+0x80>
 8009c3a:	1a9a      	subs	r2, r3, r2
 8009c3c:	0092      	lsls	r2, r2, #2
 8009c3e:	3a04      	subs	r2, #4
 8009c40:	3501      	adds	r5, #1
 8009c42:	42ae      	cmp	r6, r5
 8009c44:	bf38      	it	cc
 8009c46:	2200      	movcc	r2, #0
 8009c48:	18a3      	adds	r3, r4, r2
 8009c4a:	50a7      	str	r7, [r4, r2]
 8009c4c:	b107      	cbz	r7, 8009c50 <rshift+0x68>
 8009c4e:	3304      	adds	r3, #4
 8009c50:	42a3      	cmp	r3, r4
 8009c52:	eba3 0204 	sub.w	r2, r3, r4
 8009c56:	bf08      	it	eq
 8009c58:	2300      	moveq	r3, #0
 8009c5a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009c5e:	6102      	str	r2, [r0, #16]
 8009c60:	bf08      	it	eq
 8009c62:	6143      	streq	r3, [r0, #20]
 8009c64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c68:	f8dc c000 	ldr.w	ip, [ip]
 8009c6c:	fa0c fc08 	lsl.w	ip, ip, r8
 8009c70:	ea4c 0707 	orr.w	r7, ip, r7
 8009c74:	f849 7b04 	str.w	r7, [r9], #4
 8009c78:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009c7c:	40cf      	lsrs	r7, r1
 8009c7e:	e7d9      	b.n	8009c34 <rshift+0x4c>
 8009c80:	f851 cb04 	ldr.w	ip, [r1], #4
 8009c84:	f847 cf04 	str.w	ip, [r7, #4]!
 8009c88:	e7c2      	b.n	8009c10 <rshift+0x28>
 8009c8a:	4623      	mov	r3, r4
 8009c8c:	e7e0      	b.n	8009c50 <rshift+0x68>

08009c8e <__hexdig_fun>:
 8009c8e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009c92:	2b09      	cmp	r3, #9
 8009c94:	d802      	bhi.n	8009c9c <__hexdig_fun+0xe>
 8009c96:	3820      	subs	r0, #32
 8009c98:	b2c0      	uxtb	r0, r0
 8009c9a:	4770      	bx	lr
 8009c9c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009ca0:	2b05      	cmp	r3, #5
 8009ca2:	d801      	bhi.n	8009ca8 <__hexdig_fun+0x1a>
 8009ca4:	3847      	subs	r0, #71	@ 0x47
 8009ca6:	e7f7      	b.n	8009c98 <__hexdig_fun+0xa>
 8009ca8:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009cac:	2b05      	cmp	r3, #5
 8009cae:	d801      	bhi.n	8009cb4 <__hexdig_fun+0x26>
 8009cb0:	3827      	subs	r0, #39	@ 0x27
 8009cb2:	e7f1      	b.n	8009c98 <__hexdig_fun+0xa>
 8009cb4:	2000      	movs	r0, #0
 8009cb6:	4770      	bx	lr

08009cb8 <__gethex>:
 8009cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cbc:	468a      	mov	sl, r1
 8009cbe:	4690      	mov	r8, r2
 8009cc0:	b085      	sub	sp, #20
 8009cc2:	9302      	str	r3, [sp, #8]
 8009cc4:	680b      	ldr	r3, [r1, #0]
 8009cc6:	9001      	str	r0, [sp, #4]
 8009cc8:	1c9c      	adds	r4, r3, #2
 8009cca:	46a1      	mov	r9, r4
 8009ccc:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009cd0:	2830      	cmp	r0, #48	@ 0x30
 8009cd2:	d0fa      	beq.n	8009cca <__gethex+0x12>
 8009cd4:	eba9 0303 	sub.w	r3, r9, r3
 8009cd8:	f1a3 0b02 	sub.w	fp, r3, #2
 8009cdc:	f7ff ffd7 	bl	8009c8e <__hexdig_fun>
 8009ce0:	4605      	mov	r5, r0
 8009ce2:	2800      	cmp	r0, #0
 8009ce4:	d168      	bne.n	8009db8 <__gethex+0x100>
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	4648      	mov	r0, r9
 8009cea:	499f      	ldr	r1, [pc, #636]	@ (8009f68 <__gethex+0x2b0>)
 8009cec:	f7ff ff14 	bl	8009b18 <strncmp>
 8009cf0:	4607      	mov	r7, r0
 8009cf2:	2800      	cmp	r0, #0
 8009cf4:	d167      	bne.n	8009dc6 <__gethex+0x10e>
 8009cf6:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009cfa:	4626      	mov	r6, r4
 8009cfc:	f7ff ffc7 	bl	8009c8e <__hexdig_fun>
 8009d00:	2800      	cmp	r0, #0
 8009d02:	d062      	beq.n	8009dca <__gethex+0x112>
 8009d04:	4623      	mov	r3, r4
 8009d06:	7818      	ldrb	r0, [r3, #0]
 8009d08:	4699      	mov	r9, r3
 8009d0a:	2830      	cmp	r0, #48	@ 0x30
 8009d0c:	f103 0301 	add.w	r3, r3, #1
 8009d10:	d0f9      	beq.n	8009d06 <__gethex+0x4e>
 8009d12:	f7ff ffbc 	bl	8009c8e <__hexdig_fun>
 8009d16:	fab0 f580 	clz	r5, r0
 8009d1a:	f04f 0b01 	mov.w	fp, #1
 8009d1e:	096d      	lsrs	r5, r5, #5
 8009d20:	464a      	mov	r2, r9
 8009d22:	4616      	mov	r6, r2
 8009d24:	7830      	ldrb	r0, [r6, #0]
 8009d26:	3201      	adds	r2, #1
 8009d28:	f7ff ffb1 	bl	8009c8e <__hexdig_fun>
 8009d2c:	2800      	cmp	r0, #0
 8009d2e:	d1f8      	bne.n	8009d22 <__gethex+0x6a>
 8009d30:	2201      	movs	r2, #1
 8009d32:	4630      	mov	r0, r6
 8009d34:	498c      	ldr	r1, [pc, #560]	@ (8009f68 <__gethex+0x2b0>)
 8009d36:	f7ff feef 	bl	8009b18 <strncmp>
 8009d3a:	2800      	cmp	r0, #0
 8009d3c:	d13f      	bne.n	8009dbe <__gethex+0x106>
 8009d3e:	b944      	cbnz	r4, 8009d52 <__gethex+0x9a>
 8009d40:	1c74      	adds	r4, r6, #1
 8009d42:	4622      	mov	r2, r4
 8009d44:	4616      	mov	r6, r2
 8009d46:	7830      	ldrb	r0, [r6, #0]
 8009d48:	3201      	adds	r2, #1
 8009d4a:	f7ff ffa0 	bl	8009c8e <__hexdig_fun>
 8009d4e:	2800      	cmp	r0, #0
 8009d50:	d1f8      	bne.n	8009d44 <__gethex+0x8c>
 8009d52:	1ba4      	subs	r4, r4, r6
 8009d54:	00a7      	lsls	r7, r4, #2
 8009d56:	7833      	ldrb	r3, [r6, #0]
 8009d58:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009d5c:	2b50      	cmp	r3, #80	@ 0x50
 8009d5e:	d13e      	bne.n	8009dde <__gethex+0x126>
 8009d60:	7873      	ldrb	r3, [r6, #1]
 8009d62:	2b2b      	cmp	r3, #43	@ 0x2b
 8009d64:	d033      	beq.n	8009dce <__gethex+0x116>
 8009d66:	2b2d      	cmp	r3, #45	@ 0x2d
 8009d68:	d034      	beq.n	8009dd4 <__gethex+0x11c>
 8009d6a:	2400      	movs	r4, #0
 8009d6c:	1c71      	adds	r1, r6, #1
 8009d6e:	7808      	ldrb	r0, [r1, #0]
 8009d70:	f7ff ff8d 	bl	8009c8e <__hexdig_fun>
 8009d74:	1e43      	subs	r3, r0, #1
 8009d76:	b2db      	uxtb	r3, r3
 8009d78:	2b18      	cmp	r3, #24
 8009d7a:	d830      	bhi.n	8009dde <__gethex+0x126>
 8009d7c:	f1a0 0210 	sub.w	r2, r0, #16
 8009d80:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009d84:	f7ff ff83 	bl	8009c8e <__hexdig_fun>
 8009d88:	f100 3cff 	add.w	ip, r0, #4294967295
 8009d8c:	fa5f fc8c 	uxtb.w	ip, ip
 8009d90:	f1bc 0f18 	cmp.w	ip, #24
 8009d94:	f04f 030a 	mov.w	r3, #10
 8009d98:	d91e      	bls.n	8009dd8 <__gethex+0x120>
 8009d9a:	b104      	cbz	r4, 8009d9e <__gethex+0xe6>
 8009d9c:	4252      	negs	r2, r2
 8009d9e:	4417      	add	r7, r2
 8009da0:	f8ca 1000 	str.w	r1, [sl]
 8009da4:	b1ed      	cbz	r5, 8009de2 <__gethex+0x12a>
 8009da6:	f1bb 0f00 	cmp.w	fp, #0
 8009daa:	bf0c      	ite	eq
 8009dac:	2506      	moveq	r5, #6
 8009dae:	2500      	movne	r5, #0
 8009db0:	4628      	mov	r0, r5
 8009db2:	b005      	add	sp, #20
 8009db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009db8:	2500      	movs	r5, #0
 8009dba:	462c      	mov	r4, r5
 8009dbc:	e7b0      	b.n	8009d20 <__gethex+0x68>
 8009dbe:	2c00      	cmp	r4, #0
 8009dc0:	d1c7      	bne.n	8009d52 <__gethex+0x9a>
 8009dc2:	4627      	mov	r7, r4
 8009dc4:	e7c7      	b.n	8009d56 <__gethex+0x9e>
 8009dc6:	464e      	mov	r6, r9
 8009dc8:	462f      	mov	r7, r5
 8009dca:	2501      	movs	r5, #1
 8009dcc:	e7c3      	b.n	8009d56 <__gethex+0x9e>
 8009dce:	2400      	movs	r4, #0
 8009dd0:	1cb1      	adds	r1, r6, #2
 8009dd2:	e7cc      	b.n	8009d6e <__gethex+0xb6>
 8009dd4:	2401      	movs	r4, #1
 8009dd6:	e7fb      	b.n	8009dd0 <__gethex+0x118>
 8009dd8:	fb03 0002 	mla	r0, r3, r2, r0
 8009ddc:	e7ce      	b.n	8009d7c <__gethex+0xc4>
 8009dde:	4631      	mov	r1, r6
 8009de0:	e7de      	b.n	8009da0 <__gethex+0xe8>
 8009de2:	4629      	mov	r1, r5
 8009de4:	eba6 0309 	sub.w	r3, r6, r9
 8009de8:	3b01      	subs	r3, #1
 8009dea:	2b07      	cmp	r3, #7
 8009dec:	dc0a      	bgt.n	8009e04 <__gethex+0x14c>
 8009dee:	9801      	ldr	r0, [sp, #4]
 8009df0:	f7fe f954 	bl	800809c <_Balloc>
 8009df4:	4604      	mov	r4, r0
 8009df6:	b940      	cbnz	r0, 8009e0a <__gethex+0x152>
 8009df8:	4602      	mov	r2, r0
 8009dfa:	21e4      	movs	r1, #228	@ 0xe4
 8009dfc:	4b5b      	ldr	r3, [pc, #364]	@ (8009f6c <__gethex+0x2b4>)
 8009dfe:	485c      	ldr	r0, [pc, #368]	@ (8009f70 <__gethex+0x2b8>)
 8009e00:	f7ff fec0 	bl	8009b84 <__assert_func>
 8009e04:	3101      	adds	r1, #1
 8009e06:	105b      	asrs	r3, r3, #1
 8009e08:	e7ef      	b.n	8009dea <__gethex+0x132>
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	f100 0a14 	add.w	sl, r0, #20
 8009e10:	4655      	mov	r5, sl
 8009e12:	469b      	mov	fp, r3
 8009e14:	45b1      	cmp	r9, r6
 8009e16:	d337      	bcc.n	8009e88 <__gethex+0x1d0>
 8009e18:	f845 bb04 	str.w	fp, [r5], #4
 8009e1c:	eba5 050a 	sub.w	r5, r5, sl
 8009e20:	10ad      	asrs	r5, r5, #2
 8009e22:	6125      	str	r5, [r4, #16]
 8009e24:	4658      	mov	r0, fp
 8009e26:	f7fe fa2b 	bl	8008280 <__hi0bits>
 8009e2a:	016d      	lsls	r5, r5, #5
 8009e2c:	f8d8 6000 	ldr.w	r6, [r8]
 8009e30:	1a2d      	subs	r5, r5, r0
 8009e32:	42b5      	cmp	r5, r6
 8009e34:	dd54      	ble.n	8009ee0 <__gethex+0x228>
 8009e36:	1bad      	subs	r5, r5, r6
 8009e38:	4629      	mov	r1, r5
 8009e3a:	4620      	mov	r0, r4
 8009e3c:	f7fe fdb3 	bl	80089a6 <__any_on>
 8009e40:	4681      	mov	r9, r0
 8009e42:	b178      	cbz	r0, 8009e64 <__gethex+0x1ac>
 8009e44:	f04f 0901 	mov.w	r9, #1
 8009e48:	1e6b      	subs	r3, r5, #1
 8009e4a:	1159      	asrs	r1, r3, #5
 8009e4c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009e50:	f003 021f 	and.w	r2, r3, #31
 8009e54:	fa09 f202 	lsl.w	r2, r9, r2
 8009e58:	420a      	tst	r2, r1
 8009e5a:	d003      	beq.n	8009e64 <__gethex+0x1ac>
 8009e5c:	454b      	cmp	r3, r9
 8009e5e:	dc36      	bgt.n	8009ece <__gethex+0x216>
 8009e60:	f04f 0902 	mov.w	r9, #2
 8009e64:	4629      	mov	r1, r5
 8009e66:	4620      	mov	r0, r4
 8009e68:	f7ff febe 	bl	8009be8 <rshift>
 8009e6c:	442f      	add	r7, r5
 8009e6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009e72:	42bb      	cmp	r3, r7
 8009e74:	da42      	bge.n	8009efc <__gethex+0x244>
 8009e76:	4621      	mov	r1, r4
 8009e78:	9801      	ldr	r0, [sp, #4]
 8009e7a:	f7fe f94f 	bl	800811c <_Bfree>
 8009e7e:	2300      	movs	r3, #0
 8009e80:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e82:	25a3      	movs	r5, #163	@ 0xa3
 8009e84:	6013      	str	r3, [r2, #0]
 8009e86:	e793      	b.n	8009db0 <__gethex+0xf8>
 8009e88:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009e8c:	2a2e      	cmp	r2, #46	@ 0x2e
 8009e8e:	d012      	beq.n	8009eb6 <__gethex+0x1fe>
 8009e90:	2b20      	cmp	r3, #32
 8009e92:	d104      	bne.n	8009e9e <__gethex+0x1e6>
 8009e94:	f845 bb04 	str.w	fp, [r5], #4
 8009e98:	f04f 0b00 	mov.w	fp, #0
 8009e9c:	465b      	mov	r3, fp
 8009e9e:	7830      	ldrb	r0, [r6, #0]
 8009ea0:	9303      	str	r3, [sp, #12]
 8009ea2:	f7ff fef4 	bl	8009c8e <__hexdig_fun>
 8009ea6:	9b03      	ldr	r3, [sp, #12]
 8009ea8:	f000 000f 	and.w	r0, r0, #15
 8009eac:	4098      	lsls	r0, r3
 8009eae:	ea4b 0b00 	orr.w	fp, fp, r0
 8009eb2:	3304      	adds	r3, #4
 8009eb4:	e7ae      	b.n	8009e14 <__gethex+0x15c>
 8009eb6:	45b1      	cmp	r9, r6
 8009eb8:	d8ea      	bhi.n	8009e90 <__gethex+0x1d8>
 8009eba:	2201      	movs	r2, #1
 8009ebc:	4630      	mov	r0, r6
 8009ebe:	492a      	ldr	r1, [pc, #168]	@ (8009f68 <__gethex+0x2b0>)
 8009ec0:	9303      	str	r3, [sp, #12]
 8009ec2:	f7ff fe29 	bl	8009b18 <strncmp>
 8009ec6:	9b03      	ldr	r3, [sp, #12]
 8009ec8:	2800      	cmp	r0, #0
 8009eca:	d1e1      	bne.n	8009e90 <__gethex+0x1d8>
 8009ecc:	e7a2      	b.n	8009e14 <__gethex+0x15c>
 8009ece:	4620      	mov	r0, r4
 8009ed0:	1ea9      	subs	r1, r5, #2
 8009ed2:	f7fe fd68 	bl	80089a6 <__any_on>
 8009ed6:	2800      	cmp	r0, #0
 8009ed8:	d0c2      	beq.n	8009e60 <__gethex+0x1a8>
 8009eda:	f04f 0903 	mov.w	r9, #3
 8009ede:	e7c1      	b.n	8009e64 <__gethex+0x1ac>
 8009ee0:	da09      	bge.n	8009ef6 <__gethex+0x23e>
 8009ee2:	1b75      	subs	r5, r6, r5
 8009ee4:	4621      	mov	r1, r4
 8009ee6:	462a      	mov	r2, r5
 8009ee8:	9801      	ldr	r0, [sp, #4]
 8009eea:	f7fe fb2d 	bl	8008548 <__lshift>
 8009eee:	4604      	mov	r4, r0
 8009ef0:	1b7f      	subs	r7, r7, r5
 8009ef2:	f100 0a14 	add.w	sl, r0, #20
 8009ef6:	f04f 0900 	mov.w	r9, #0
 8009efa:	e7b8      	b.n	8009e6e <__gethex+0x1b6>
 8009efc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009f00:	42bd      	cmp	r5, r7
 8009f02:	dd6f      	ble.n	8009fe4 <__gethex+0x32c>
 8009f04:	1bed      	subs	r5, r5, r7
 8009f06:	42ae      	cmp	r6, r5
 8009f08:	dc34      	bgt.n	8009f74 <__gethex+0x2bc>
 8009f0a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009f0e:	2b02      	cmp	r3, #2
 8009f10:	d022      	beq.n	8009f58 <__gethex+0x2a0>
 8009f12:	2b03      	cmp	r3, #3
 8009f14:	d024      	beq.n	8009f60 <__gethex+0x2a8>
 8009f16:	2b01      	cmp	r3, #1
 8009f18:	d115      	bne.n	8009f46 <__gethex+0x28e>
 8009f1a:	42ae      	cmp	r6, r5
 8009f1c:	d113      	bne.n	8009f46 <__gethex+0x28e>
 8009f1e:	2e01      	cmp	r6, #1
 8009f20:	d10b      	bne.n	8009f3a <__gethex+0x282>
 8009f22:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009f26:	9a02      	ldr	r2, [sp, #8]
 8009f28:	2562      	movs	r5, #98	@ 0x62
 8009f2a:	6013      	str	r3, [r2, #0]
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	6123      	str	r3, [r4, #16]
 8009f30:	f8ca 3000 	str.w	r3, [sl]
 8009f34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f36:	601c      	str	r4, [r3, #0]
 8009f38:	e73a      	b.n	8009db0 <__gethex+0xf8>
 8009f3a:	4620      	mov	r0, r4
 8009f3c:	1e71      	subs	r1, r6, #1
 8009f3e:	f7fe fd32 	bl	80089a6 <__any_on>
 8009f42:	2800      	cmp	r0, #0
 8009f44:	d1ed      	bne.n	8009f22 <__gethex+0x26a>
 8009f46:	4621      	mov	r1, r4
 8009f48:	9801      	ldr	r0, [sp, #4]
 8009f4a:	f7fe f8e7 	bl	800811c <_Bfree>
 8009f4e:	2300      	movs	r3, #0
 8009f50:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f52:	2550      	movs	r5, #80	@ 0x50
 8009f54:	6013      	str	r3, [r2, #0]
 8009f56:	e72b      	b.n	8009db0 <__gethex+0xf8>
 8009f58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d1f3      	bne.n	8009f46 <__gethex+0x28e>
 8009f5e:	e7e0      	b.n	8009f22 <__gethex+0x26a>
 8009f60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d1dd      	bne.n	8009f22 <__gethex+0x26a>
 8009f66:	e7ee      	b.n	8009f46 <__gethex+0x28e>
 8009f68:	0800ab00 	.word	0x0800ab00
 8009f6c:	0800a997 	.word	0x0800a997
 8009f70:	0800acae 	.word	0x0800acae
 8009f74:	1e6f      	subs	r7, r5, #1
 8009f76:	f1b9 0f00 	cmp.w	r9, #0
 8009f7a:	d130      	bne.n	8009fde <__gethex+0x326>
 8009f7c:	b127      	cbz	r7, 8009f88 <__gethex+0x2d0>
 8009f7e:	4639      	mov	r1, r7
 8009f80:	4620      	mov	r0, r4
 8009f82:	f7fe fd10 	bl	80089a6 <__any_on>
 8009f86:	4681      	mov	r9, r0
 8009f88:	2301      	movs	r3, #1
 8009f8a:	4629      	mov	r1, r5
 8009f8c:	1b76      	subs	r6, r6, r5
 8009f8e:	2502      	movs	r5, #2
 8009f90:	117a      	asrs	r2, r7, #5
 8009f92:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009f96:	f007 071f 	and.w	r7, r7, #31
 8009f9a:	40bb      	lsls	r3, r7
 8009f9c:	4213      	tst	r3, r2
 8009f9e:	4620      	mov	r0, r4
 8009fa0:	bf18      	it	ne
 8009fa2:	f049 0902 	orrne.w	r9, r9, #2
 8009fa6:	f7ff fe1f 	bl	8009be8 <rshift>
 8009faa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009fae:	f1b9 0f00 	cmp.w	r9, #0
 8009fb2:	d047      	beq.n	800a044 <__gethex+0x38c>
 8009fb4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009fb8:	2b02      	cmp	r3, #2
 8009fba:	d015      	beq.n	8009fe8 <__gethex+0x330>
 8009fbc:	2b03      	cmp	r3, #3
 8009fbe:	d017      	beq.n	8009ff0 <__gethex+0x338>
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	d109      	bne.n	8009fd8 <__gethex+0x320>
 8009fc4:	f019 0f02 	tst.w	r9, #2
 8009fc8:	d006      	beq.n	8009fd8 <__gethex+0x320>
 8009fca:	f8da 3000 	ldr.w	r3, [sl]
 8009fce:	ea49 0903 	orr.w	r9, r9, r3
 8009fd2:	f019 0f01 	tst.w	r9, #1
 8009fd6:	d10e      	bne.n	8009ff6 <__gethex+0x33e>
 8009fd8:	f045 0510 	orr.w	r5, r5, #16
 8009fdc:	e032      	b.n	800a044 <__gethex+0x38c>
 8009fde:	f04f 0901 	mov.w	r9, #1
 8009fe2:	e7d1      	b.n	8009f88 <__gethex+0x2d0>
 8009fe4:	2501      	movs	r5, #1
 8009fe6:	e7e2      	b.n	8009fae <__gethex+0x2f6>
 8009fe8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009fea:	f1c3 0301 	rsb	r3, r3, #1
 8009fee:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009ff0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d0f0      	beq.n	8009fd8 <__gethex+0x320>
 8009ff6:	f04f 0c00 	mov.w	ip, #0
 8009ffa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009ffe:	f104 0314 	add.w	r3, r4, #20
 800a002:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a006:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a00a:	4618      	mov	r0, r3
 800a00c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a010:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a014:	d01b      	beq.n	800a04e <__gethex+0x396>
 800a016:	3201      	adds	r2, #1
 800a018:	6002      	str	r2, [r0, #0]
 800a01a:	2d02      	cmp	r5, #2
 800a01c:	f104 0314 	add.w	r3, r4, #20
 800a020:	d13c      	bne.n	800a09c <__gethex+0x3e4>
 800a022:	f8d8 2000 	ldr.w	r2, [r8]
 800a026:	3a01      	subs	r2, #1
 800a028:	42b2      	cmp	r2, r6
 800a02a:	d109      	bne.n	800a040 <__gethex+0x388>
 800a02c:	2201      	movs	r2, #1
 800a02e:	1171      	asrs	r1, r6, #5
 800a030:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a034:	f006 061f 	and.w	r6, r6, #31
 800a038:	fa02 f606 	lsl.w	r6, r2, r6
 800a03c:	421e      	tst	r6, r3
 800a03e:	d13a      	bne.n	800a0b6 <__gethex+0x3fe>
 800a040:	f045 0520 	orr.w	r5, r5, #32
 800a044:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a046:	601c      	str	r4, [r3, #0]
 800a048:	9b02      	ldr	r3, [sp, #8]
 800a04a:	601f      	str	r7, [r3, #0]
 800a04c:	e6b0      	b.n	8009db0 <__gethex+0xf8>
 800a04e:	4299      	cmp	r1, r3
 800a050:	f843 cc04 	str.w	ip, [r3, #-4]
 800a054:	d8d9      	bhi.n	800a00a <__gethex+0x352>
 800a056:	68a3      	ldr	r3, [r4, #8]
 800a058:	459b      	cmp	fp, r3
 800a05a:	db17      	blt.n	800a08c <__gethex+0x3d4>
 800a05c:	6861      	ldr	r1, [r4, #4]
 800a05e:	9801      	ldr	r0, [sp, #4]
 800a060:	3101      	adds	r1, #1
 800a062:	f7fe f81b 	bl	800809c <_Balloc>
 800a066:	4681      	mov	r9, r0
 800a068:	b918      	cbnz	r0, 800a072 <__gethex+0x3ba>
 800a06a:	4602      	mov	r2, r0
 800a06c:	2184      	movs	r1, #132	@ 0x84
 800a06e:	4b19      	ldr	r3, [pc, #100]	@ (800a0d4 <__gethex+0x41c>)
 800a070:	e6c5      	b.n	8009dfe <__gethex+0x146>
 800a072:	6922      	ldr	r2, [r4, #16]
 800a074:	f104 010c 	add.w	r1, r4, #12
 800a078:	3202      	adds	r2, #2
 800a07a:	0092      	lsls	r2, r2, #2
 800a07c:	300c      	adds	r0, #12
 800a07e:	f7ff fd6d 	bl	8009b5c <memcpy>
 800a082:	4621      	mov	r1, r4
 800a084:	9801      	ldr	r0, [sp, #4]
 800a086:	f7fe f849 	bl	800811c <_Bfree>
 800a08a:	464c      	mov	r4, r9
 800a08c:	6923      	ldr	r3, [r4, #16]
 800a08e:	1c5a      	adds	r2, r3, #1
 800a090:	6122      	str	r2, [r4, #16]
 800a092:	2201      	movs	r2, #1
 800a094:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a098:	615a      	str	r2, [r3, #20]
 800a09a:	e7be      	b.n	800a01a <__gethex+0x362>
 800a09c:	6922      	ldr	r2, [r4, #16]
 800a09e:	455a      	cmp	r2, fp
 800a0a0:	dd0b      	ble.n	800a0ba <__gethex+0x402>
 800a0a2:	2101      	movs	r1, #1
 800a0a4:	4620      	mov	r0, r4
 800a0a6:	f7ff fd9f 	bl	8009be8 <rshift>
 800a0aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a0ae:	3701      	adds	r7, #1
 800a0b0:	42bb      	cmp	r3, r7
 800a0b2:	f6ff aee0 	blt.w	8009e76 <__gethex+0x1be>
 800a0b6:	2501      	movs	r5, #1
 800a0b8:	e7c2      	b.n	800a040 <__gethex+0x388>
 800a0ba:	f016 061f 	ands.w	r6, r6, #31
 800a0be:	d0fa      	beq.n	800a0b6 <__gethex+0x3fe>
 800a0c0:	4453      	add	r3, sl
 800a0c2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a0c6:	f7fe f8db 	bl	8008280 <__hi0bits>
 800a0ca:	f1c6 0620 	rsb	r6, r6, #32
 800a0ce:	42b0      	cmp	r0, r6
 800a0d0:	dbe7      	blt.n	800a0a2 <__gethex+0x3ea>
 800a0d2:	e7f0      	b.n	800a0b6 <__gethex+0x3fe>
 800a0d4:	0800a997 	.word	0x0800a997

0800a0d8 <L_shift>:
 800a0d8:	f1c2 0208 	rsb	r2, r2, #8
 800a0dc:	0092      	lsls	r2, r2, #2
 800a0de:	b570      	push	{r4, r5, r6, lr}
 800a0e0:	f1c2 0620 	rsb	r6, r2, #32
 800a0e4:	6843      	ldr	r3, [r0, #4]
 800a0e6:	6804      	ldr	r4, [r0, #0]
 800a0e8:	fa03 f506 	lsl.w	r5, r3, r6
 800a0ec:	432c      	orrs	r4, r5
 800a0ee:	40d3      	lsrs	r3, r2
 800a0f0:	6004      	str	r4, [r0, #0]
 800a0f2:	f840 3f04 	str.w	r3, [r0, #4]!
 800a0f6:	4288      	cmp	r0, r1
 800a0f8:	d3f4      	bcc.n	800a0e4 <L_shift+0xc>
 800a0fa:	bd70      	pop	{r4, r5, r6, pc}

0800a0fc <__match>:
 800a0fc:	b530      	push	{r4, r5, lr}
 800a0fe:	6803      	ldr	r3, [r0, #0]
 800a100:	3301      	adds	r3, #1
 800a102:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a106:	b914      	cbnz	r4, 800a10e <__match+0x12>
 800a108:	6003      	str	r3, [r0, #0]
 800a10a:	2001      	movs	r0, #1
 800a10c:	bd30      	pop	{r4, r5, pc}
 800a10e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a112:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a116:	2d19      	cmp	r5, #25
 800a118:	bf98      	it	ls
 800a11a:	3220      	addls	r2, #32
 800a11c:	42a2      	cmp	r2, r4
 800a11e:	d0f0      	beq.n	800a102 <__match+0x6>
 800a120:	2000      	movs	r0, #0
 800a122:	e7f3      	b.n	800a10c <__match+0x10>

0800a124 <__hexnan>:
 800a124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a128:	2500      	movs	r5, #0
 800a12a:	680b      	ldr	r3, [r1, #0]
 800a12c:	4682      	mov	sl, r0
 800a12e:	115e      	asrs	r6, r3, #5
 800a130:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a134:	f013 031f 	ands.w	r3, r3, #31
 800a138:	bf18      	it	ne
 800a13a:	3604      	addne	r6, #4
 800a13c:	1f37      	subs	r7, r6, #4
 800a13e:	4690      	mov	r8, r2
 800a140:	46b9      	mov	r9, r7
 800a142:	463c      	mov	r4, r7
 800a144:	46ab      	mov	fp, r5
 800a146:	b087      	sub	sp, #28
 800a148:	6801      	ldr	r1, [r0, #0]
 800a14a:	9301      	str	r3, [sp, #4]
 800a14c:	f846 5c04 	str.w	r5, [r6, #-4]
 800a150:	9502      	str	r5, [sp, #8]
 800a152:	784a      	ldrb	r2, [r1, #1]
 800a154:	1c4b      	adds	r3, r1, #1
 800a156:	9303      	str	r3, [sp, #12]
 800a158:	b342      	cbz	r2, 800a1ac <__hexnan+0x88>
 800a15a:	4610      	mov	r0, r2
 800a15c:	9105      	str	r1, [sp, #20]
 800a15e:	9204      	str	r2, [sp, #16]
 800a160:	f7ff fd95 	bl	8009c8e <__hexdig_fun>
 800a164:	2800      	cmp	r0, #0
 800a166:	d151      	bne.n	800a20c <__hexnan+0xe8>
 800a168:	9a04      	ldr	r2, [sp, #16]
 800a16a:	9905      	ldr	r1, [sp, #20]
 800a16c:	2a20      	cmp	r2, #32
 800a16e:	d818      	bhi.n	800a1a2 <__hexnan+0x7e>
 800a170:	9b02      	ldr	r3, [sp, #8]
 800a172:	459b      	cmp	fp, r3
 800a174:	dd13      	ble.n	800a19e <__hexnan+0x7a>
 800a176:	454c      	cmp	r4, r9
 800a178:	d206      	bcs.n	800a188 <__hexnan+0x64>
 800a17a:	2d07      	cmp	r5, #7
 800a17c:	dc04      	bgt.n	800a188 <__hexnan+0x64>
 800a17e:	462a      	mov	r2, r5
 800a180:	4649      	mov	r1, r9
 800a182:	4620      	mov	r0, r4
 800a184:	f7ff ffa8 	bl	800a0d8 <L_shift>
 800a188:	4544      	cmp	r4, r8
 800a18a:	d952      	bls.n	800a232 <__hexnan+0x10e>
 800a18c:	2300      	movs	r3, #0
 800a18e:	f1a4 0904 	sub.w	r9, r4, #4
 800a192:	f844 3c04 	str.w	r3, [r4, #-4]
 800a196:	461d      	mov	r5, r3
 800a198:	464c      	mov	r4, r9
 800a19a:	f8cd b008 	str.w	fp, [sp, #8]
 800a19e:	9903      	ldr	r1, [sp, #12]
 800a1a0:	e7d7      	b.n	800a152 <__hexnan+0x2e>
 800a1a2:	2a29      	cmp	r2, #41	@ 0x29
 800a1a4:	d157      	bne.n	800a256 <__hexnan+0x132>
 800a1a6:	3102      	adds	r1, #2
 800a1a8:	f8ca 1000 	str.w	r1, [sl]
 800a1ac:	f1bb 0f00 	cmp.w	fp, #0
 800a1b0:	d051      	beq.n	800a256 <__hexnan+0x132>
 800a1b2:	454c      	cmp	r4, r9
 800a1b4:	d206      	bcs.n	800a1c4 <__hexnan+0xa0>
 800a1b6:	2d07      	cmp	r5, #7
 800a1b8:	dc04      	bgt.n	800a1c4 <__hexnan+0xa0>
 800a1ba:	462a      	mov	r2, r5
 800a1bc:	4649      	mov	r1, r9
 800a1be:	4620      	mov	r0, r4
 800a1c0:	f7ff ff8a 	bl	800a0d8 <L_shift>
 800a1c4:	4544      	cmp	r4, r8
 800a1c6:	d936      	bls.n	800a236 <__hexnan+0x112>
 800a1c8:	4623      	mov	r3, r4
 800a1ca:	f1a8 0204 	sub.w	r2, r8, #4
 800a1ce:	f853 1b04 	ldr.w	r1, [r3], #4
 800a1d2:	429f      	cmp	r7, r3
 800a1d4:	f842 1f04 	str.w	r1, [r2, #4]!
 800a1d8:	d2f9      	bcs.n	800a1ce <__hexnan+0xaa>
 800a1da:	1b3b      	subs	r3, r7, r4
 800a1dc:	f023 0303 	bic.w	r3, r3, #3
 800a1e0:	3304      	adds	r3, #4
 800a1e2:	3401      	adds	r4, #1
 800a1e4:	3e03      	subs	r6, #3
 800a1e6:	42b4      	cmp	r4, r6
 800a1e8:	bf88      	it	hi
 800a1ea:	2304      	movhi	r3, #4
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	4443      	add	r3, r8
 800a1f0:	f843 2b04 	str.w	r2, [r3], #4
 800a1f4:	429f      	cmp	r7, r3
 800a1f6:	d2fb      	bcs.n	800a1f0 <__hexnan+0xcc>
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	b91b      	cbnz	r3, 800a204 <__hexnan+0xe0>
 800a1fc:	4547      	cmp	r7, r8
 800a1fe:	d128      	bne.n	800a252 <__hexnan+0x12e>
 800a200:	2301      	movs	r3, #1
 800a202:	603b      	str	r3, [r7, #0]
 800a204:	2005      	movs	r0, #5
 800a206:	b007      	add	sp, #28
 800a208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a20c:	3501      	adds	r5, #1
 800a20e:	2d08      	cmp	r5, #8
 800a210:	f10b 0b01 	add.w	fp, fp, #1
 800a214:	dd06      	ble.n	800a224 <__hexnan+0x100>
 800a216:	4544      	cmp	r4, r8
 800a218:	d9c1      	bls.n	800a19e <__hexnan+0x7a>
 800a21a:	2300      	movs	r3, #0
 800a21c:	2501      	movs	r5, #1
 800a21e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a222:	3c04      	subs	r4, #4
 800a224:	6822      	ldr	r2, [r4, #0]
 800a226:	f000 000f 	and.w	r0, r0, #15
 800a22a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a22e:	6020      	str	r0, [r4, #0]
 800a230:	e7b5      	b.n	800a19e <__hexnan+0x7a>
 800a232:	2508      	movs	r5, #8
 800a234:	e7b3      	b.n	800a19e <__hexnan+0x7a>
 800a236:	9b01      	ldr	r3, [sp, #4]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d0dd      	beq.n	800a1f8 <__hexnan+0xd4>
 800a23c:	f04f 32ff 	mov.w	r2, #4294967295
 800a240:	f1c3 0320 	rsb	r3, r3, #32
 800a244:	40da      	lsrs	r2, r3
 800a246:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a24a:	4013      	ands	r3, r2
 800a24c:	f846 3c04 	str.w	r3, [r6, #-4]
 800a250:	e7d2      	b.n	800a1f8 <__hexnan+0xd4>
 800a252:	3f04      	subs	r7, #4
 800a254:	e7d0      	b.n	800a1f8 <__hexnan+0xd4>
 800a256:	2004      	movs	r0, #4
 800a258:	e7d5      	b.n	800a206 <__hexnan+0xe2>

0800a25a <__ascii_mbtowc>:
 800a25a:	b082      	sub	sp, #8
 800a25c:	b901      	cbnz	r1, 800a260 <__ascii_mbtowc+0x6>
 800a25e:	a901      	add	r1, sp, #4
 800a260:	b142      	cbz	r2, 800a274 <__ascii_mbtowc+0x1a>
 800a262:	b14b      	cbz	r3, 800a278 <__ascii_mbtowc+0x1e>
 800a264:	7813      	ldrb	r3, [r2, #0]
 800a266:	600b      	str	r3, [r1, #0]
 800a268:	7812      	ldrb	r2, [r2, #0]
 800a26a:	1e10      	subs	r0, r2, #0
 800a26c:	bf18      	it	ne
 800a26e:	2001      	movne	r0, #1
 800a270:	b002      	add	sp, #8
 800a272:	4770      	bx	lr
 800a274:	4610      	mov	r0, r2
 800a276:	e7fb      	b.n	800a270 <__ascii_mbtowc+0x16>
 800a278:	f06f 0001 	mvn.w	r0, #1
 800a27c:	e7f8      	b.n	800a270 <__ascii_mbtowc+0x16>

0800a27e <_realloc_r>:
 800a27e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a282:	4680      	mov	r8, r0
 800a284:	4615      	mov	r5, r2
 800a286:	460c      	mov	r4, r1
 800a288:	b921      	cbnz	r1, 800a294 <_realloc_r+0x16>
 800a28a:	4611      	mov	r1, r2
 800a28c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a290:	f7fd be78 	b.w	8007f84 <_malloc_r>
 800a294:	b92a      	cbnz	r2, 800a2a2 <_realloc_r+0x24>
 800a296:	f7fd fe03 	bl	8007ea0 <_free_r>
 800a29a:	2400      	movs	r4, #0
 800a29c:	4620      	mov	r0, r4
 800a29e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2a2:	f000 f840 	bl	800a326 <_malloc_usable_size_r>
 800a2a6:	4285      	cmp	r5, r0
 800a2a8:	4606      	mov	r6, r0
 800a2aa:	d802      	bhi.n	800a2b2 <_realloc_r+0x34>
 800a2ac:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a2b0:	d8f4      	bhi.n	800a29c <_realloc_r+0x1e>
 800a2b2:	4629      	mov	r1, r5
 800a2b4:	4640      	mov	r0, r8
 800a2b6:	f7fd fe65 	bl	8007f84 <_malloc_r>
 800a2ba:	4607      	mov	r7, r0
 800a2bc:	2800      	cmp	r0, #0
 800a2be:	d0ec      	beq.n	800a29a <_realloc_r+0x1c>
 800a2c0:	42b5      	cmp	r5, r6
 800a2c2:	462a      	mov	r2, r5
 800a2c4:	4621      	mov	r1, r4
 800a2c6:	bf28      	it	cs
 800a2c8:	4632      	movcs	r2, r6
 800a2ca:	f7ff fc47 	bl	8009b5c <memcpy>
 800a2ce:	4621      	mov	r1, r4
 800a2d0:	4640      	mov	r0, r8
 800a2d2:	f7fd fde5 	bl	8007ea0 <_free_r>
 800a2d6:	463c      	mov	r4, r7
 800a2d8:	e7e0      	b.n	800a29c <_realloc_r+0x1e>

0800a2da <__ascii_wctomb>:
 800a2da:	4603      	mov	r3, r0
 800a2dc:	4608      	mov	r0, r1
 800a2de:	b141      	cbz	r1, 800a2f2 <__ascii_wctomb+0x18>
 800a2e0:	2aff      	cmp	r2, #255	@ 0xff
 800a2e2:	d904      	bls.n	800a2ee <__ascii_wctomb+0x14>
 800a2e4:	228a      	movs	r2, #138	@ 0x8a
 800a2e6:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ea:	601a      	str	r2, [r3, #0]
 800a2ec:	4770      	bx	lr
 800a2ee:	2001      	movs	r0, #1
 800a2f0:	700a      	strb	r2, [r1, #0]
 800a2f2:	4770      	bx	lr

0800a2f4 <fiprintf>:
 800a2f4:	b40e      	push	{r1, r2, r3}
 800a2f6:	b503      	push	{r0, r1, lr}
 800a2f8:	4601      	mov	r1, r0
 800a2fa:	ab03      	add	r3, sp, #12
 800a2fc:	4805      	ldr	r0, [pc, #20]	@ (800a314 <fiprintf+0x20>)
 800a2fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800a302:	6800      	ldr	r0, [r0, #0]
 800a304:	9301      	str	r3, [sp, #4]
 800a306:	f000 f83d 	bl	800a384 <_vfiprintf_r>
 800a30a:	b002      	add	sp, #8
 800a30c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a310:	b003      	add	sp, #12
 800a312:	4770      	bx	lr
 800a314:	2000001c 	.word	0x2000001c

0800a318 <abort>:
 800a318:	2006      	movs	r0, #6
 800a31a:	b508      	push	{r3, lr}
 800a31c:	f000 fa06 	bl	800a72c <raise>
 800a320:	2001      	movs	r0, #1
 800a322:	f7f7 f9da 	bl	80016da <_exit>

0800a326 <_malloc_usable_size_r>:
 800a326:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a32a:	1f18      	subs	r0, r3, #4
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	bfbc      	itt	lt
 800a330:	580b      	ldrlt	r3, [r1, r0]
 800a332:	18c0      	addlt	r0, r0, r3
 800a334:	4770      	bx	lr

0800a336 <__sfputc_r>:
 800a336:	6893      	ldr	r3, [r2, #8]
 800a338:	b410      	push	{r4}
 800a33a:	3b01      	subs	r3, #1
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	6093      	str	r3, [r2, #8]
 800a340:	da07      	bge.n	800a352 <__sfputc_r+0x1c>
 800a342:	6994      	ldr	r4, [r2, #24]
 800a344:	42a3      	cmp	r3, r4
 800a346:	db01      	blt.n	800a34c <__sfputc_r+0x16>
 800a348:	290a      	cmp	r1, #10
 800a34a:	d102      	bne.n	800a352 <__sfputc_r+0x1c>
 800a34c:	bc10      	pop	{r4}
 800a34e:	f000 b931 	b.w	800a5b4 <__swbuf_r>
 800a352:	6813      	ldr	r3, [r2, #0]
 800a354:	1c58      	adds	r0, r3, #1
 800a356:	6010      	str	r0, [r2, #0]
 800a358:	7019      	strb	r1, [r3, #0]
 800a35a:	4608      	mov	r0, r1
 800a35c:	bc10      	pop	{r4}
 800a35e:	4770      	bx	lr

0800a360 <__sfputs_r>:
 800a360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a362:	4606      	mov	r6, r0
 800a364:	460f      	mov	r7, r1
 800a366:	4614      	mov	r4, r2
 800a368:	18d5      	adds	r5, r2, r3
 800a36a:	42ac      	cmp	r4, r5
 800a36c:	d101      	bne.n	800a372 <__sfputs_r+0x12>
 800a36e:	2000      	movs	r0, #0
 800a370:	e007      	b.n	800a382 <__sfputs_r+0x22>
 800a372:	463a      	mov	r2, r7
 800a374:	4630      	mov	r0, r6
 800a376:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a37a:	f7ff ffdc 	bl	800a336 <__sfputc_r>
 800a37e:	1c43      	adds	r3, r0, #1
 800a380:	d1f3      	bne.n	800a36a <__sfputs_r+0xa>
 800a382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a384 <_vfiprintf_r>:
 800a384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a388:	460d      	mov	r5, r1
 800a38a:	4614      	mov	r4, r2
 800a38c:	4698      	mov	r8, r3
 800a38e:	4606      	mov	r6, r0
 800a390:	b09d      	sub	sp, #116	@ 0x74
 800a392:	b118      	cbz	r0, 800a39c <_vfiprintf_r+0x18>
 800a394:	6a03      	ldr	r3, [r0, #32]
 800a396:	b90b      	cbnz	r3, 800a39c <_vfiprintf_r+0x18>
 800a398:	f7fc fe06 	bl	8006fa8 <__sinit>
 800a39c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a39e:	07d9      	lsls	r1, r3, #31
 800a3a0:	d405      	bmi.n	800a3ae <_vfiprintf_r+0x2a>
 800a3a2:	89ab      	ldrh	r3, [r5, #12]
 800a3a4:	059a      	lsls	r2, r3, #22
 800a3a6:	d402      	bmi.n	800a3ae <_vfiprintf_r+0x2a>
 800a3a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a3aa:	f7fc ff14 	bl	80071d6 <__retarget_lock_acquire_recursive>
 800a3ae:	89ab      	ldrh	r3, [r5, #12]
 800a3b0:	071b      	lsls	r3, r3, #28
 800a3b2:	d501      	bpl.n	800a3b8 <_vfiprintf_r+0x34>
 800a3b4:	692b      	ldr	r3, [r5, #16]
 800a3b6:	b99b      	cbnz	r3, 800a3e0 <_vfiprintf_r+0x5c>
 800a3b8:	4629      	mov	r1, r5
 800a3ba:	4630      	mov	r0, r6
 800a3bc:	f000 f938 	bl	800a630 <__swsetup_r>
 800a3c0:	b170      	cbz	r0, 800a3e0 <_vfiprintf_r+0x5c>
 800a3c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a3c4:	07dc      	lsls	r4, r3, #31
 800a3c6:	d504      	bpl.n	800a3d2 <_vfiprintf_r+0x4e>
 800a3c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a3cc:	b01d      	add	sp, #116	@ 0x74
 800a3ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3d2:	89ab      	ldrh	r3, [r5, #12]
 800a3d4:	0598      	lsls	r0, r3, #22
 800a3d6:	d4f7      	bmi.n	800a3c8 <_vfiprintf_r+0x44>
 800a3d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a3da:	f7fc fefd 	bl	80071d8 <__retarget_lock_release_recursive>
 800a3de:	e7f3      	b.n	800a3c8 <_vfiprintf_r+0x44>
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3e4:	2320      	movs	r3, #32
 800a3e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a3ea:	2330      	movs	r3, #48	@ 0x30
 800a3ec:	f04f 0901 	mov.w	r9, #1
 800a3f0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3f4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800a5a0 <_vfiprintf_r+0x21c>
 800a3f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a3fc:	4623      	mov	r3, r4
 800a3fe:	469a      	mov	sl, r3
 800a400:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a404:	b10a      	cbz	r2, 800a40a <_vfiprintf_r+0x86>
 800a406:	2a25      	cmp	r2, #37	@ 0x25
 800a408:	d1f9      	bne.n	800a3fe <_vfiprintf_r+0x7a>
 800a40a:	ebba 0b04 	subs.w	fp, sl, r4
 800a40e:	d00b      	beq.n	800a428 <_vfiprintf_r+0xa4>
 800a410:	465b      	mov	r3, fp
 800a412:	4622      	mov	r2, r4
 800a414:	4629      	mov	r1, r5
 800a416:	4630      	mov	r0, r6
 800a418:	f7ff ffa2 	bl	800a360 <__sfputs_r>
 800a41c:	3001      	adds	r0, #1
 800a41e:	f000 80a7 	beq.w	800a570 <_vfiprintf_r+0x1ec>
 800a422:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a424:	445a      	add	r2, fp
 800a426:	9209      	str	r2, [sp, #36]	@ 0x24
 800a428:	f89a 3000 	ldrb.w	r3, [sl]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	f000 809f 	beq.w	800a570 <_vfiprintf_r+0x1ec>
 800a432:	2300      	movs	r3, #0
 800a434:	f04f 32ff 	mov.w	r2, #4294967295
 800a438:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a43c:	f10a 0a01 	add.w	sl, sl, #1
 800a440:	9304      	str	r3, [sp, #16]
 800a442:	9307      	str	r3, [sp, #28]
 800a444:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a448:	931a      	str	r3, [sp, #104]	@ 0x68
 800a44a:	4654      	mov	r4, sl
 800a44c:	2205      	movs	r2, #5
 800a44e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a452:	4853      	ldr	r0, [pc, #332]	@ (800a5a0 <_vfiprintf_r+0x21c>)
 800a454:	f7fc fec1 	bl	80071da <memchr>
 800a458:	9a04      	ldr	r2, [sp, #16]
 800a45a:	b9d8      	cbnz	r0, 800a494 <_vfiprintf_r+0x110>
 800a45c:	06d1      	lsls	r1, r2, #27
 800a45e:	bf44      	itt	mi
 800a460:	2320      	movmi	r3, #32
 800a462:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a466:	0713      	lsls	r3, r2, #28
 800a468:	bf44      	itt	mi
 800a46a:	232b      	movmi	r3, #43	@ 0x2b
 800a46c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a470:	f89a 3000 	ldrb.w	r3, [sl]
 800a474:	2b2a      	cmp	r3, #42	@ 0x2a
 800a476:	d015      	beq.n	800a4a4 <_vfiprintf_r+0x120>
 800a478:	4654      	mov	r4, sl
 800a47a:	2000      	movs	r0, #0
 800a47c:	f04f 0c0a 	mov.w	ip, #10
 800a480:	9a07      	ldr	r2, [sp, #28]
 800a482:	4621      	mov	r1, r4
 800a484:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a488:	3b30      	subs	r3, #48	@ 0x30
 800a48a:	2b09      	cmp	r3, #9
 800a48c:	d94b      	bls.n	800a526 <_vfiprintf_r+0x1a2>
 800a48e:	b1b0      	cbz	r0, 800a4be <_vfiprintf_r+0x13a>
 800a490:	9207      	str	r2, [sp, #28]
 800a492:	e014      	b.n	800a4be <_vfiprintf_r+0x13a>
 800a494:	eba0 0308 	sub.w	r3, r0, r8
 800a498:	fa09 f303 	lsl.w	r3, r9, r3
 800a49c:	4313      	orrs	r3, r2
 800a49e:	46a2      	mov	sl, r4
 800a4a0:	9304      	str	r3, [sp, #16]
 800a4a2:	e7d2      	b.n	800a44a <_vfiprintf_r+0xc6>
 800a4a4:	9b03      	ldr	r3, [sp, #12]
 800a4a6:	1d19      	adds	r1, r3, #4
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	9103      	str	r1, [sp, #12]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	bfbb      	ittet	lt
 800a4b0:	425b      	neglt	r3, r3
 800a4b2:	f042 0202 	orrlt.w	r2, r2, #2
 800a4b6:	9307      	strge	r3, [sp, #28]
 800a4b8:	9307      	strlt	r3, [sp, #28]
 800a4ba:	bfb8      	it	lt
 800a4bc:	9204      	strlt	r2, [sp, #16]
 800a4be:	7823      	ldrb	r3, [r4, #0]
 800a4c0:	2b2e      	cmp	r3, #46	@ 0x2e
 800a4c2:	d10a      	bne.n	800a4da <_vfiprintf_r+0x156>
 800a4c4:	7863      	ldrb	r3, [r4, #1]
 800a4c6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a4c8:	d132      	bne.n	800a530 <_vfiprintf_r+0x1ac>
 800a4ca:	9b03      	ldr	r3, [sp, #12]
 800a4cc:	3402      	adds	r4, #2
 800a4ce:	1d1a      	adds	r2, r3, #4
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	9203      	str	r2, [sp, #12]
 800a4d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a4d8:	9305      	str	r3, [sp, #20]
 800a4da:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800a5a4 <_vfiprintf_r+0x220>
 800a4de:	2203      	movs	r2, #3
 800a4e0:	4650      	mov	r0, sl
 800a4e2:	7821      	ldrb	r1, [r4, #0]
 800a4e4:	f7fc fe79 	bl	80071da <memchr>
 800a4e8:	b138      	cbz	r0, 800a4fa <_vfiprintf_r+0x176>
 800a4ea:	2240      	movs	r2, #64	@ 0x40
 800a4ec:	9b04      	ldr	r3, [sp, #16]
 800a4ee:	eba0 000a 	sub.w	r0, r0, sl
 800a4f2:	4082      	lsls	r2, r0
 800a4f4:	4313      	orrs	r3, r2
 800a4f6:	3401      	adds	r4, #1
 800a4f8:	9304      	str	r3, [sp, #16]
 800a4fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4fe:	2206      	movs	r2, #6
 800a500:	4829      	ldr	r0, [pc, #164]	@ (800a5a8 <_vfiprintf_r+0x224>)
 800a502:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a506:	f7fc fe68 	bl	80071da <memchr>
 800a50a:	2800      	cmp	r0, #0
 800a50c:	d03f      	beq.n	800a58e <_vfiprintf_r+0x20a>
 800a50e:	4b27      	ldr	r3, [pc, #156]	@ (800a5ac <_vfiprintf_r+0x228>)
 800a510:	bb1b      	cbnz	r3, 800a55a <_vfiprintf_r+0x1d6>
 800a512:	9b03      	ldr	r3, [sp, #12]
 800a514:	3307      	adds	r3, #7
 800a516:	f023 0307 	bic.w	r3, r3, #7
 800a51a:	3308      	adds	r3, #8
 800a51c:	9303      	str	r3, [sp, #12]
 800a51e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a520:	443b      	add	r3, r7
 800a522:	9309      	str	r3, [sp, #36]	@ 0x24
 800a524:	e76a      	b.n	800a3fc <_vfiprintf_r+0x78>
 800a526:	460c      	mov	r4, r1
 800a528:	2001      	movs	r0, #1
 800a52a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a52e:	e7a8      	b.n	800a482 <_vfiprintf_r+0xfe>
 800a530:	2300      	movs	r3, #0
 800a532:	f04f 0c0a 	mov.w	ip, #10
 800a536:	4619      	mov	r1, r3
 800a538:	3401      	adds	r4, #1
 800a53a:	9305      	str	r3, [sp, #20]
 800a53c:	4620      	mov	r0, r4
 800a53e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a542:	3a30      	subs	r2, #48	@ 0x30
 800a544:	2a09      	cmp	r2, #9
 800a546:	d903      	bls.n	800a550 <_vfiprintf_r+0x1cc>
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d0c6      	beq.n	800a4da <_vfiprintf_r+0x156>
 800a54c:	9105      	str	r1, [sp, #20]
 800a54e:	e7c4      	b.n	800a4da <_vfiprintf_r+0x156>
 800a550:	4604      	mov	r4, r0
 800a552:	2301      	movs	r3, #1
 800a554:	fb0c 2101 	mla	r1, ip, r1, r2
 800a558:	e7f0      	b.n	800a53c <_vfiprintf_r+0x1b8>
 800a55a:	ab03      	add	r3, sp, #12
 800a55c:	9300      	str	r3, [sp, #0]
 800a55e:	462a      	mov	r2, r5
 800a560:	4630      	mov	r0, r6
 800a562:	4b13      	ldr	r3, [pc, #76]	@ (800a5b0 <_vfiprintf_r+0x22c>)
 800a564:	a904      	add	r1, sp, #16
 800a566:	f7fb fec5 	bl	80062f4 <_printf_float>
 800a56a:	4607      	mov	r7, r0
 800a56c:	1c78      	adds	r0, r7, #1
 800a56e:	d1d6      	bne.n	800a51e <_vfiprintf_r+0x19a>
 800a570:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a572:	07d9      	lsls	r1, r3, #31
 800a574:	d405      	bmi.n	800a582 <_vfiprintf_r+0x1fe>
 800a576:	89ab      	ldrh	r3, [r5, #12]
 800a578:	059a      	lsls	r2, r3, #22
 800a57a:	d402      	bmi.n	800a582 <_vfiprintf_r+0x1fe>
 800a57c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a57e:	f7fc fe2b 	bl	80071d8 <__retarget_lock_release_recursive>
 800a582:	89ab      	ldrh	r3, [r5, #12]
 800a584:	065b      	lsls	r3, r3, #25
 800a586:	f53f af1f 	bmi.w	800a3c8 <_vfiprintf_r+0x44>
 800a58a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a58c:	e71e      	b.n	800a3cc <_vfiprintf_r+0x48>
 800a58e:	ab03      	add	r3, sp, #12
 800a590:	9300      	str	r3, [sp, #0]
 800a592:	462a      	mov	r2, r5
 800a594:	4630      	mov	r0, r6
 800a596:	4b06      	ldr	r3, [pc, #24]	@ (800a5b0 <_vfiprintf_r+0x22c>)
 800a598:	a904      	add	r1, sp, #16
 800a59a:	f7fc f949 	bl	8006830 <_printf_i>
 800a59e:	e7e4      	b.n	800a56a <_vfiprintf_r+0x1e6>
 800a5a0:	0800ac59 	.word	0x0800ac59
 800a5a4:	0800ac5f 	.word	0x0800ac5f
 800a5a8:	0800ac63 	.word	0x0800ac63
 800a5ac:	080062f5 	.word	0x080062f5
 800a5b0:	0800a361 	.word	0x0800a361

0800a5b4 <__swbuf_r>:
 800a5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5b6:	460e      	mov	r6, r1
 800a5b8:	4614      	mov	r4, r2
 800a5ba:	4605      	mov	r5, r0
 800a5bc:	b118      	cbz	r0, 800a5c6 <__swbuf_r+0x12>
 800a5be:	6a03      	ldr	r3, [r0, #32]
 800a5c0:	b90b      	cbnz	r3, 800a5c6 <__swbuf_r+0x12>
 800a5c2:	f7fc fcf1 	bl	8006fa8 <__sinit>
 800a5c6:	69a3      	ldr	r3, [r4, #24]
 800a5c8:	60a3      	str	r3, [r4, #8]
 800a5ca:	89a3      	ldrh	r3, [r4, #12]
 800a5cc:	071a      	lsls	r2, r3, #28
 800a5ce:	d501      	bpl.n	800a5d4 <__swbuf_r+0x20>
 800a5d0:	6923      	ldr	r3, [r4, #16]
 800a5d2:	b943      	cbnz	r3, 800a5e6 <__swbuf_r+0x32>
 800a5d4:	4621      	mov	r1, r4
 800a5d6:	4628      	mov	r0, r5
 800a5d8:	f000 f82a 	bl	800a630 <__swsetup_r>
 800a5dc:	b118      	cbz	r0, 800a5e6 <__swbuf_r+0x32>
 800a5de:	f04f 37ff 	mov.w	r7, #4294967295
 800a5e2:	4638      	mov	r0, r7
 800a5e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5e6:	6823      	ldr	r3, [r4, #0]
 800a5e8:	6922      	ldr	r2, [r4, #16]
 800a5ea:	b2f6      	uxtb	r6, r6
 800a5ec:	1a98      	subs	r0, r3, r2
 800a5ee:	6963      	ldr	r3, [r4, #20]
 800a5f0:	4637      	mov	r7, r6
 800a5f2:	4283      	cmp	r3, r0
 800a5f4:	dc05      	bgt.n	800a602 <__swbuf_r+0x4e>
 800a5f6:	4621      	mov	r1, r4
 800a5f8:	4628      	mov	r0, r5
 800a5fa:	f7ff fa4b 	bl	8009a94 <_fflush_r>
 800a5fe:	2800      	cmp	r0, #0
 800a600:	d1ed      	bne.n	800a5de <__swbuf_r+0x2a>
 800a602:	68a3      	ldr	r3, [r4, #8]
 800a604:	3b01      	subs	r3, #1
 800a606:	60a3      	str	r3, [r4, #8]
 800a608:	6823      	ldr	r3, [r4, #0]
 800a60a:	1c5a      	adds	r2, r3, #1
 800a60c:	6022      	str	r2, [r4, #0]
 800a60e:	701e      	strb	r6, [r3, #0]
 800a610:	6962      	ldr	r2, [r4, #20]
 800a612:	1c43      	adds	r3, r0, #1
 800a614:	429a      	cmp	r2, r3
 800a616:	d004      	beq.n	800a622 <__swbuf_r+0x6e>
 800a618:	89a3      	ldrh	r3, [r4, #12]
 800a61a:	07db      	lsls	r3, r3, #31
 800a61c:	d5e1      	bpl.n	800a5e2 <__swbuf_r+0x2e>
 800a61e:	2e0a      	cmp	r6, #10
 800a620:	d1df      	bne.n	800a5e2 <__swbuf_r+0x2e>
 800a622:	4621      	mov	r1, r4
 800a624:	4628      	mov	r0, r5
 800a626:	f7ff fa35 	bl	8009a94 <_fflush_r>
 800a62a:	2800      	cmp	r0, #0
 800a62c:	d0d9      	beq.n	800a5e2 <__swbuf_r+0x2e>
 800a62e:	e7d6      	b.n	800a5de <__swbuf_r+0x2a>

0800a630 <__swsetup_r>:
 800a630:	b538      	push	{r3, r4, r5, lr}
 800a632:	4b29      	ldr	r3, [pc, #164]	@ (800a6d8 <__swsetup_r+0xa8>)
 800a634:	4605      	mov	r5, r0
 800a636:	6818      	ldr	r0, [r3, #0]
 800a638:	460c      	mov	r4, r1
 800a63a:	b118      	cbz	r0, 800a644 <__swsetup_r+0x14>
 800a63c:	6a03      	ldr	r3, [r0, #32]
 800a63e:	b90b      	cbnz	r3, 800a644 <__swsetup_r+0x14>
 800a640:	f7fc fcb2 	bl	8006fa8 <__sinit>
 800a644:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a648:	0719      	lsls	r1, r3, #28
 800a64a:	d422      	bmi.n	800a692 <__swsetup_r+0x62>
 800a64c:	06da      	lsls	r2, r3, #27
 800a64e:	d407      	bmi.n	800a660 <__swsetup_r+0x30>
 800a650:	2209      	movs	r2, #9
 800a652:	602a      	str	r2, [r5, #0]
 800a654:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a658:	f04f 30ff 	mov.w	r0, #4294967295
 800a65c:	81a3      	strh	r3, [r4, #12]
 800a65e:	e033      	b.n	800a6c8 <__swsetup_r+0x98>
 800a660:	0758      	lsls	r0, r3, #29
 800a662:	d512      	bpl.n	800a68a <__swsetup_r+0x5a>
 800a664:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a666:	b141      	cbz	r1, 800a67a <__swsetup_r+0x4a>
 800a668:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a66c:	4299      	cmp	r1, r3
 800a66e:	d002      	beq.n	800a676 <__swsetup_r+0x46>
 800a670:	4628      	mov	r0, r5
 800a672:	f7fd fc15 	bl	8007ea0 <_free_r>
 800a676:	2300      	movs	r3, #0
 800a678:	6363      	str	r3, [r4, #52]	@ 0x34
 800a67a:	89a3      	ldrh	r3, [r4, #12]
 800a67c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a680:	81a3      	strh	r3, [r4, #12]
 800a682:	2300      	movs	r3, #0
 800a684:	6063      	str	r3, [r4, #4]
 800a686:	6923      	ldr	r3, [r4, #16]
 800a688:	6023      	str	r3, [r4, #0]
 800a68a:	89a3      	ldrh	r3, [r4, #12]
 800a68c:	f043 0308 	orr.w	r3, r3, #8
 800a690:	81a3      	strh	r3, [r4, #12]
 800a692:	6923      	ldr	r3, [r4, #16]
 800a694:	b94b      	cbnz	r3, 800a6aa <__swsetup_r+0x7a>
 800a696:	89a3      	ldrh	r3, [r4, #12]
 800a698:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a69c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a6a0:	d003      	beq.n	800a6aa <__swsetup_r+0x7a>
 800a6a2:	4621      	mov	r1, r4
 800a6a4:	4628      	mov	r0, r5
 800a6a6:	f000 f882 	bl	800a7ae <__smakebuf_r>
 800a6aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6ae:	f013 0201 	ands.w	r2, r3, #1
 800a6b2:	d00a      	beq.n	800a6ca <__swsetup_r+0x9a>
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	60a2      	str	r2, [r4, #8]
 800a6b8:	6962      	ldr	r2, [r4, #20]
 800a6ba:	4252      	negs	r2, r2
 800a6bc:	61a2      	str	r2, [r4, #24]
 800a6be:	6922      	ldr	r2, [r4, #16]
 800a6c0:	b942      	cbnz	r2, 800a6d4 <__swsetup_r+0xa4>
 800a6c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a6c6:	d1c5      	bne.n	800a654 <__swsetup_r+0x24>
 800a6c8:	bd38      	pop	{r3, r4, r5, pc}
 800a6ca:	0799      	lsls	r1, r3, #30
 800a6cc:	bf58      	it	pl
 800a6ce:	6962      	ldrpl	r2, [r4, #20]
 800a6d0:	60a2      	str	r2, [r4, #8]
 800a6d2:	e7f4      	b.n	800a6be <__swsetup_r+0x8e>
 800a6d4:	2000      	movs	r0, #0
 800a6d6:	e7f7      	b.n	800a6c8 <__swsetup_r+0x98>
 800a6d8:	2000001c 	.word	0x2000001c

0800a6dc <_raise_r>:
 800a6dc:	291f      	cmp	r1, #31
 800a6de:	b538      	push	{r3, r4, r5, lr}
 800a6e0:	4605      	mov	r5, r0
 800a6e2:	460c      	mov	r4, r1
 800a6e4:	d904      	bls.n	800a6f0 <_raise_r+0x14>
 800a6e6:	2316      	movs	r3, #22
 800a6e8:	6003      	str	r3, [r0, #0]
 800a6ea:	f04f 30ff 	mov.w	r0, #4294967295
 800a6ee:	bd38      	pop	{r3, r4, r5, pc}
 800a6f0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a6f2:	b112      	cbz	r2, 800a6fa <_raise_r+0x1e>
 800a6f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a6f8:	b94b      	cbnz	r3, 800a70e <_raise_r+0x32>
 800a6fa:	4628      	mov	r0, r5
 800a6fc:	f000 f830 	bl	800a760 <_getpid_r>
 800a700:	4622      	mov	r2, r4
 800a702:	4601      	mov	r1, r0
 800a704:	4628      	mov	r0, r5
 800a706:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a70a:	f000 b817 	b.w	800a73c <_kill_r>
 800a70e:	2b01      	cmp	r3, #1
 800a710:	d00a      	beq.n	800a728 <_raise_r+0x4c>
 800a712:	1c59      	adds	r1, r3, #1
 800a714:	d103      	bne.n	800a71e <_raise_r+0x42>
 800a716:	2316      	movs	r3, #22
 800a718:	6003      	str	r3, [r0, #0]
 800a71a:	2001      	movs	r0, #1
 800a71c:	e7e7      	b.n	800a6ee <_raise_r+0x12>
 800a71e:	2100      	movs	r1, #0
 800a720:	4620      	mov	r0, r4
 800a722:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a726:	4798      	blx	r3
 800a728:	2000      	movs	r0, #0
 800a72a:	e7e0      	b.n	800a6ee <_raise_r+0x12>

0800a72c <raise>:
 800a72c:	4b02      	ldr	r3, [pc, #8]	@ (800a738 <raise+0xc>)
 800a72e:	4601      	mov	r1, r0
 800a730:	6818      	ldr	r0, [r3, #0]
 800a732:	f7ff bfd3 	b.w	800a6dc <_raise_r>
 800a736:	bf00      	nop
 800a738:	2000001c 	.word	0x2000001c

0800a73c <_kill_r>:
 800a73c:	b538      	push	{r3, r4, r5, lr}
 800a73e:	2300      	movs	r3, #0
 800a740:	4d06      	ldr	r5, [pc, #24]	@ (800a75c <_kill_r+0x20>)
 800a742:	4604      	mov	r4, r0
 800a744:	4608      	mov	r0, r1
 800a746:	4611      	mov	r1, r2
 800a748:	602b      	str	r3, [r5, #0]
 800a74a:	f7f6 ffb6 	bl	80016ba <_kill>
 800a74e:	1c43      	adds	r3, r0, #1
 800a750:	d102      	bne.n	800a758 <_kill_r+0x1c>
 800a752:	682b      	ldr	r3, [r5, #0]
 800a754:	b103      	cbz	r3, 800a758 <_kill_r+0x1c>
 800a756:	6023      	str	r3, [r4, #0]
 800a758:	bd38      	pop	{r3, r4, r5, pc}
 800a75a:	bf00      	nop
 800a75c:	20000468 	.word	0x20000468

0800a760 <_getpid_r>:
 800a760:	f7f6 bfa4 	b.w	80016ac <_getpid>

0800a764 <__swhatbuf_r>:
 800a764:	b570      	push	{r4, r5, r6, lr}
 800a766:	460c      	mov	r4, r1
 800a768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a76c:	4615      	mov	r5, r2
 800a76e:	2900      	cmp	r1, #0
 800a770:	461e      	mov	r6, r3
 800a772:	b096      	sub	sp, #88	@ 0x58
 800a774:	da0c      	bge.n	800a790 <__swhatbuf_r+0x2c>
 800a776:	89a3      	ldrh	r3, [r4, #12]
 800a778:	2100      	movs	r1, #0
 800a77a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a77e:	bf14      	ite	ne
 800a780:	2340      	movne	r3, #64	@ 0x40
 800a782:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a786:	2000      	movs	r0, #0
 800a788:	6031      	str	r1, [r6, #0]
 800a78a:	602b      	str	r3, [r5, #0]
 800a78c:	b016      	add	sp, #88	@ 0x58
 800a78e:	bd70      	pop	{r4, r5, r6, pc}
 800a790:	466a      	mov	r2, sp
 800a792:	f000 f849 	bl	800a828 <_fstat_r>
 800a796:	2800      	cmp	r0, #0
 800a798:	dbed      	blt.n	800a776 <__swhatbuf_r+0x12>
 800a79a:	9901      	ldr	r1, [sp, #4]
 800a79c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a7a0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a7a4:	4259      	negs	r1, r3
 800a7a6:	4159      	adcs	r1, r3
 800a7a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a7ac:	e7eb      	b.n	800a786 <__swhatbuf_r+0x22>

0800a7ae <__smakebuf_r>:
 800a7ae:	898b      	ldrh	r3, [r1, #12]
 800a7b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a7b2:	079d      	lsls	r5, r3, #30
 800a7b4:	4606      	mov	r6, r0
 800a7b6:	460c      	mov	r4, r1
 800a7b8:	d507      	bpl.n	800a7ca <__smakebuf_r+0x1c>
 800a7ba:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a7be:	6023      	str	r3, [r4, #0]
 800a7c0:	6123      	str	r3, [r4, #16]
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	6163      	str	r3, [r4, #20]
 800a7c6:	b003      	add	sp, #12
 800a7c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7ca:	466a      	mov	r2, sp
 800a7cc:	ab01      	add	r3, sp, #4
 800a7ce:	f7ff ffc9 	bl	800a764 <__swhatbuf_r>
 800a7d2:	9f00      	ldr	r7, [sp, #0]
 800a7d4:	4605      	mov	r5, r0
 800a7d6:	4639      	mov	r1, r7
 800a7d8:	4630      	mov	r0, r6
 800a7da:	f7fd fbd3 	bl	8007f84 <_malloc_r>
 800a7de:	b948      	cbnz	r0, 800a7f4 <__smakebuf_r+0x46>
 800a7e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7e4:	059a      	lsls	r2, r3, #22
 800a7e6:	d4ee      	bmi.n	800a7c6 <__smakebuf_r+0x18>
 800a7e8:	f023 0303 	bic.w	r3, r3, #3
 800a7ec:	f043 0302 	orr.w	r3, r3, #2
 800a7f0:	81a3      	strh	r3, [r4, #12]
 800a7f2:	e7e2      	b.n	800a7ba <__smakebuf_r+0xc>
 800a7f4:	89a3      	ldrh	r3, [r4, #12]
 800a7f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a7fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a7fe:	81a3      	strh	r3, [r4, #12]
 800a800:	9b01      	ldr	r3, [sp, #4]
 800a802:	6020      	str	r0, [r4, #0]
 800a804:	b15b      	cbz	r3, 800a81e <__smakebuf_r+0x70>
 800a806:	4630      	mov	r0, r6
 800a808:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a80c:	f000 f81e 	bl	800a84c <_isatty_r>
 800a810:	b128      	cbz	r0, 800a81e <__smakebuf_r+0x70>
 800a812:	89a3      	ldrh	r3, [r4, #12]
 800a814:	f023 0303 	bic.w	r3, r3, #3
 800a818:	f043 0301 	orr.w	r3, r3, #1
 800a81c:	81a3      	strh	r3, [r4, #12]
 800a81e:	89a3      	ldrh	r3, [r4, #12]
 800a820:	431d      	orrs	r5, r3
 800a822:	81a5      	strh	r5, [r4, #12]
 800a824:	e7cf      	b.n	800a7c6 <__smakebuf_r+0x18>
	...

0800a828 <_fstat_r>:
 800a828:	b538      	push	{r3, r4, r5, lr}
 800a82a:	2300      	movs	r3, #0
 800a82c:	4d06      	ldr	r5, [pc, #24]	@ (800a848 <_fstat_r+0x20>)
 800a82e:	4604      	mov	r4, r0
 800a830:	4608      	mov	r0, r1
 800a832:	4611      	mov	r1, r2
 800a834:	602b      	str	r3, [r5, #0]
 800a836:	f7f6 ff9f 	bl	8001778 <_fstat>
 800a83a:	1c43      	adds	r3, r0, #1
 800a83c:	d102      	bne.n	800a844 <_fstat_r+0x1c>
 800a83e:	682b      	ldr	r3, [r5, #0]
 800a840:	b103      	cbz	r3, 800a844 <_fstat_r+0x1c>
 800a842:	6023      	str	r3, [r4, #0]
 800a844:	bd38      	pop	{r3, r4, r5, pc}
 800a846:	bf00      	nop
 800a848:	20000468 	.word	0x20000468

0800a84c <_isatty_r>:
 800a84c:	b538      	push	{r3, r4, r5, lr}
 800a84e:	2300      	movs	r3, #0
 800a850:	4d05      	ldr	r5, [pc, #20]	@ (800a868 <_isatty_r+0x1c>)
 800a852:	4604      	mov	r4, r0
 800a854:	4608      	mov	r0, r1
 800a856:	602b      	str	r3, [r5, #0]
 800a858:	f7f6 ff9d 	bl	8001796 <_isatty>
 800a85c:	1c43      	adds	r3, r0, #1
 800a85e:	d102      	bne.n	800a866 <_isatty_r+0x1a>
 800a860:	682b      	ldr	r3, [r5, #0]
 800a862:	b103      	cbz	r3, 800a866 <_isatty_r+0x1a>
 800a864:	6023      	str	r3, [r4, #0]
 800a866:	bd38      	pop	{r3, r4, r5, pc}
 800a868:	20000468 	.word	0x20000468

0800a86c <_init>:
 800a86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a86e:	bf00      	nop
 800a870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a872:	bc08      	pop	{r3}
 800a874:	469e      	mov	lr, r3
 800a876:	4770      	bx	lr

0800a878 <_fini>:
 800a878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a87a:	bf00      	nop
 800a87c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a87e:	bc08      	pop	{r3}
 800a880:	469e      	mov	lr, r3
 800a882:	4770      	bx	lr
